language: scala
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n.toInt\n        val m = p.toInt\n        val q\
    \ = r - m\n        val r = r - q\n        val r = r + q\n        val r = r + m\n\
    \        val r = r + m\n        val r = r + m\n        val r = r + m\n       \
    \ val r = r + m\n        val r = r + m\n        val r = r + m\n        val r =\
    \ r + m\n        val r = r + m\n        val r = r + m\n        val r = r + m\n\
    \        val r = r + m\n        val r = r + m\n        val r = r + m\n       \
    \ val r = r + m\n        val r = r + m\n        val r = r + m\n        val r =\
    \ r + m\n        val r = r + m\n        val r = r + m\n        val r = r + m\n\
    \        val r = r + m\n        val r = r + m\n        val r = r + m\n       \
    \ val r = r + m\n        val r = r + m\n        val r = r + m\n        val r =\
    \ r + m\n        val r = r + m\n        val r = r + m\n        val r = r + m\n\
    \        val r = r + m\n        val r = r + m\n        val r = r + m\n       \
    \ val r = r + m\n        val r = r + m\n        val r = r + m\n        val r =\
    \ r + m\n        val r = r + m\n        val r = r + m\n        val r = r + m\n\
    \        val r = r + m\n        val r = r + m\n        val r = r + m\n       \
    \ val r = r + m\n        val r = r + m\n        val r = r + m\n        val r =\
    \ r + m\n        val r = r + m\n        val r = r + m\n        val r = r + m\n\
    \        val r = r + m\n        val r = r + m\n        val r = r + m\n       \
    \ val r = r + m\n        val r = r + m\n        val r = r + m\n        val r =\
    \ r + m\n        val r = r + m\n        val r = r + m\n        val r = r + m\n\
    \        val r = r + m\n        val r = r + m\n        val r = r + m\n       \
    \ val r = r + m\n        val r = r + m\n        val r = r + m\n        val r =\
    \ r + m\n        \n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp60evum9h.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - q\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp60evum9h.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + q\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp60evum9h.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp60evum9h.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp60evum9h.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp60evum9h.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r - m\n        val r = r * r\n        val r = r + m\n        val r = r / r\n\
    \        val r = r * p\n        val r = r + m\n        val r = r / r\n       \
    \ val r = r * p\n        val r = r + m\n        val r = r / r\n        val r =\
    \ r * p\n        val r = r + m\n        val r = r / r\n        val r = r * p\n\
    \        val r = r + m\n        val r = r / r\n        val r = r * p\n       \
    \ val r = r + m\n        val r = r / r\n        val r = r * p\n        val r =\
    \ r + m\n        val r = r / r\n        val r = r * p\n        val r = r + m\n\
    \        val r = r / r\n        val r = r * p\n        val r = r + m\n       \
    \ val r = r / r\n        val r = r * p\n        val r = r + m\n        val r =\
    \ r / r\n        val r = r * p\n        val r = r + m\n        val r = r / r\n\
    \        val r = r * p\n        val r = r + m\n        val r = r / r\n       \
    \ val r = r * p\n        val r = r + m\n        val r = r / r\n        val r =\
    \ r * p\n        val r = r + m\n        val r = r / r\n        val r = r * p\n\
    \        val r = r + m\n        val r = r / r\n        val r = r * p\n       \
    \ val r = r + m\n        val r = r / r\n        val r = r * p\n        val r =\
    \ r + m\n        val r = r / r\n        val r = r * p\n        val r = r + m\n\
    \        val r = r / r\n        val r = r * p\n        val r = r + m\n       \
    \ val r = r / r\n        val r = r * p\n        val r = r + m\n        val r =\
    \ r / r\n        val r = r * p\n        val r = r + m\n        val r = r / r\n\
    \        val r = r * p\n        val r = r + m\n        val r = r / r\n       \
    \ val r = r * p\n        val r = r + m\n        val r = r / r\n        val r =\
    \ r * p\n        \n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * p\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n.toInt\n        val p2 = p.toInt\n        val\
    \ n3 = n2.pow(2)\n        val p3 = p2.pow(2)\n        val n4 = n3.mod(p3)\n  \
    \      val p4 = p3.mod(p3)\n        val n5 = n4.pow(3)\n        val p5 = p4.pow(3)\n\
    \        val n6 = n5.mod(p5)\n        val p6 = p5.mod(p5)\n        val n7 = n6.pow(4)\n\
    \        val p7 = p6.pow(4)\n        val n8 = n7.mod(p7)\n        val p8 = p7.mod(p7)\n\
    \        val n9 = n8.pow(5)\n        val p9 = p8.pow(5)\n        val n10 = n9.mod(p9)\n\
    \        val p10 = p9.mod(p9)\n        val n11 = n10.pow(6)\n        val p11 =\
    \ p10.pow(6)\n        val n12 = (n11.toLong * p11.toLong).toInt\n        val p12\
    \ = (p11.toLong * p11.toLong).toInt\n        val n13 = n12.pow(7)\n        val\
    \ p13 = p12.pow(7)\n        val n14 = n13.pow(8)\n        val p14 = p13.pow(8)\n\
    \        val n15 = n14.pow(9)\n        val p15 = p14.pow(9)\n        val n16 =\
    \ n15.pow(10)\n        val p16 = p15.pow(10)\n        val n17 = n16.pow(11)\n\
    \        val p17 = p16.pow(11)\n        val n18 = n17.pow(12)\n        val p18\
    \ = p17.pow(12)\n        val n19 = n18.pow(13)\n        val p19 = p18.pow(13)\n\
    \        val n20 = n19.pow(14)\n        val p20 = p19.pow(14)\n        val n21\
    \ = n20.pow(15)\n        val p21 = p20.pow(15)\n        val n22 = n21.pow(16)\n\
    \        val p22 = p21.pow(16)\n        val n23 = n22.pow(17)\n        val p23\
    \ = p22.pow(17)\n        val n24 = n23.pow(18)\n        val p24 = p23.pow(18)\n\
    \        val n25 = n24.pow(19)\n        val p25 = p24.pow(19)\n        val n26\
    \ = n25.pow(20)\n        val p26 = p25.pow(20)\n        val n27 = n26.pow(21)\n\
    \        val p27 = p26.pow(21)\n        val n28 = n27.pow(22)\n        val p28\
    \ = p27.pow(22)\n\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps9hbdy9s.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn3\e[0m = n2.pow(\e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ pow is not a member of Int, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\e[31m\
    \   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmps9hbdy9s.scala:19:20 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mp3\e[0m = p2.pow(\e[31m2\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0mvalue pow is\
    \ not a member of Int, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\e[31m\
    \   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmps9hbdy9s.scala:71:5 ---------------------\e[0m\e\
    [0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n.toInt\n        val p2 = p.toInt\n        val\
    \ n3 = n2.toLong\n        val p3 = p2.toLong\n        val n4 = n3.toInt\n    \
    \    val p4 = p3.toInt\n        val n5 = n4.toLong\n        val p5 = p4.toLong\n\
    \        val n6 = n5.toInt\n        val p6 = p5.toInt\n        val n7 = n6.toLong\n\
    \        val p7 = p6.toLong\n        val n8 = (n7.toInt << 32) + n7.toLong\n \
    \       val p8 = (p7.toInt << 32) + p7.toLong\n        val n9 = (n8.toInt << 32)\
    \ + n8.toLong\n        val p9 = (p8.toInt << 32) + p8.toLong\n        val n10\
    \ = (n9.toInt << 32) + n9.toLong\n        val p10 = (p9.toInt << 32) + p9.toLong\n\
    \        val n11 = (n10.toInt << 32) + n10.toLong\n        val p11 = (p10.toInt\
    \ << 32) + p10.toLong\n        val n12 = (n11.toInt << 32) + n11.toLong\n    \
    \    val p12 = (p11.toInt << 32) + p11.toLong\n        val n13 = (n12.toInt <<\
    \ 32) + n12.toLong\n        val p13 = (p12.toInt << 32) + p12.toLong\n       \
    \ val n14 = (n13.toInt << 32) + n13.toLong\n        val p14 = (p13.toInt << 32)\
    \ + p13.toLong\n        val n15 = (n14.toInt << 32) + n14.toLong\n        val\
    \ p15 = (p14.toInt << 32) + p14.toLong\n        val n16 = (n15.toInt << 32) +\
    \ n15.toLong\n        val p16 = (p15.toInt << 32) + p15.toLong\n        val n17\
    \ = (n16.toInt << 32) + n16.toLong\n        val p17 = (p16.toInt << 32) + p16.toLong\n\
    \        val n18 = (n17.toInt << 32) + n17.toLong\n        val p18 = (p17.toInt\
    \ << 32) + p17.toLong\n        val n19 = (n18.toInt << 32) + n18.toLong\n    \
    \    val p19 = (p18.toInt << 32) + p18.to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E051] Reference Error: /tmp/tmp_kao6m4u.scala:51:42 ------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mp19\e[0m = (p18.toInt <<\
    \ \e[31m32\e[0m) + p18.to\n\e[31m\e[31m   |\e[0m                             \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mto\e[0m in \e[33mtrait\e[0m \e[35mIntegralProxy\e\
    [0m with types\n\e[31m   |\e[0m (end: Long, step: Long): scala.collection.immutable.NumericRange.Inclusive[Long]\n\
    \e[31m   |\e[0m (end: Long): scala.collection.immutable.NumericRange.Inclusive[Long]\n\
    \e[31m   |\e[0mboth match expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_kao6m4u.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800297
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n.toInt\n        val p2 = p.toInt\n        val\
    \ result = n2 % p2\n        if (result < 0)\n            result + p2\n       \
    \ else\n            result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcekczd1m.scala:26)\n\tat Problem.main(tmpcekczd1m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n % p\n        if (n2 == 0) n\n        else modp(n2,\
    \ p)\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800300
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n.toInt\n        val p2 = p.toInt\n        if (n2\
    \ < p2) n2 % p2 else (p2 - n2) % p2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplfv_a8vh.scala:22)\n\tat Problem.main(tmplfv_a8vh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        if (m\
    \ == 0) 1\n        else if (m == r) 1\n        else if (m > r) modp(m, r) \n \
    \       else modp(m, r + 1) * (n - r)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.scala:21)\n\tat Problem$.modp(tmptc9ggo_j.scala:21)\n\
    \tat Problem$.modp(tmptc9ggo_j.sc"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val q = p / n\n        val r = p % n\n        val s = q\
    \ * q\n        val t = r * r\n        val u = (s + t) % q\n        val v = (r\
    \ + u * q) % q\n        v\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprfn2278b.scala:25)\n\tat Problem.main(tmprfn2278b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val q\
    \ = r - m\n        val r = r - m\n        val r = r - m\n        val r = r - m\n\
    \        val r = r - m\n        val r = r - m\n        val r = r - m\n       \
    \ val r = r - m\n        val r = r - m\n        val r = r - m\n        val r =\
    \ r - m\n        val r = r - m\n        val r = r - m\n        val r = r - m\n\
    \        val r = r - m\n        val r = r - m\n        val r = r - m\n       \
    \ val r = r - m\n        val r = r - m\n        val r = r - m\n        val r =\
    \ r - m\n        val r = r - m\n        val r = r - m\n        val r = r - m\n\
    \        val r = r - m\n        val r = r - m\n        val r = r - m\n       \
    \ val r = r - m\n        val r = r - m\n        val r = r - m\n        val r =\
    \ r - m\n        val r = r - m\n        val r = r - m\n        val r = r - m\n\
    \        val r = r - m\n        val r = r - m\n        val r = r - m\n       \
    \ val r = r - m\n        val r = r - m\n        val r = r - m\n        val r =\
    \ r - m\n        val r = r - m\n        val r = r - m\n        val r = r - m\n\
    \        val r = r - m\n        val r = r - m\n        val r = r - m\n       \
    \ val r = r - m\n        val r = r - m\n        val r = r - m\n        val r =\
    \ r - m\n        val r = r - m\n        val r = r - m\n        val r = r - m\n\
    \        val r = r - m\n        val r = r - m\n        val r = r - m\n       \
    \ val r = r - m\n        val r = r - m\n        val r = r - m\n        val r =\
    \ r - m\n        val r = r - m\n        val r = r - m\n        val r = r - m\n\
    \        val r = r - m\n        val r = r - m\n        val r = r - m\n       \
    \ val r = r - m\n        val r = r - m\n        val r = r - m\n        val r =\
    \ r - m\n        \n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpil8j4jpl.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpil8j4jpl.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpil8j4jpl.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpil8j4jpl.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpil8j4jpl.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpil8j4jpl.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val q = p.toInt\n        val r\
    \ = ((m * q) % p).toLong\n        val s = (r % p).toLong\n        val t = ((r\
    \ * q) % p).toLong\n        val u = (t % p).toLong\n        val v = (u % p).toLong\n\
    \        val w = (v % p).toLong\n        val x = (w % p).toLong\n        val y\
    \ = (x % p).toLong\n        val z = (y % p).toLong\n        val a = (z % p).toLong\n\
    \        val b = (a % p).toLong\n        val c = (b % p).toLong\n        val d\
    \ = (c % p).toLong\n        val e = (d % p).toLong\n        val f = (e % p).toLong\n\
    \        val g = (f % p).toLong\n        val h = (g % p).toLong\n        val i\
    \ = (h % p).toLong\n        val j = (i % p).toLong\n        val k = (j % p).toLong\n\
    \        val l = (k % p).toLong\n        val m = (l % p).toLong\n        val n\
    \ = (m % p).toLong\n        val o = (n % p).toLong\n        val p = (o % p).toLong\n\
    \        val q = (p % p).toLong\n        val r = (q % p).toLong\n        val s\
    \ = (n % p).toLong\n        val t = (r % p).toLong\n        val u = (t % p).toLong\n\
    \        val v = (u % p).toLong\n        val w = (v % p).toLong\n        val x\
    \ = (w % p).toLong\n        val y = (x % p).toLong\n        val z = (y % p).toLong\n\
    \        val a = (z % p).toLong\n        val b = (a % p).toLong\n        val c\
    \ = (b % p).toLong\n        val d = (c % p).toLong\n        val e = (d % p).toLong\n\
    \        val f = (e % p).toLong\n        val g = (f % p).toLong\n        val h\
    \ = (g % p).toLong\n        val i = (h % p).toLong\n        val j = (i % p).toLong\n\
    \        val k = (j % p).toLong\n        val l = (k % p).toLong\n        val m\
    \ = (l % p).toLong\n        val n = (m % p).toLong\n        val o = (n % p).toLong\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpjfncutod.scala:68:11 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpjfncutod.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = (l % p).toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is\
    \ already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjfncutod.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mq\e[0m = (p % p).toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mq is already defined as \e[33mvalue\e[0m \e[35mq\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjfncutod.scala:44:12 ---------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = (q % p).toLong\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjfncutod.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = (n % p).toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ms is\
    \ already defined as \e[33mvalue\e[0m \e[35ms\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjfncutod.scala:46:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m\
    \ \e[36mt\e[0m = (r % p).toLong\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val q\
    \ = r - m\n        if (q < 0) q + m\n        else q\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5p1eoxy.scala:23)\n\tat Problem.main(tmpq5p1eoxy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r - m\n        val r = r * r\n        val r = r / m\n        val r = r * m\n\
    \        val r = r + m\n        val r = r * r\n        val r = r / m\n       \
    \ val r = r * m\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r / m\n        val r = r * m\n        val r = r + m\n        val r = r * r\n\
    \        val r = r / m\n        val r = r * m\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r / m\n        val r = r * m\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r / m\n        val r = r * m\n\
    \        val r = r + m\n        val r = r * r\n        val r = r / m\n       \
    \ val r = r * m\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r / m\n        val r = r * m\n        val r = r + m\n        val r = r * r\n\
    \        val r = r / m\n        val r = r * m\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r / m\n        val r = r * m\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r / m\n        val r = r * m\n\
    \        val r = r + m\n        val r = r * r\n        val r = r / m\n       \
    \ val r = r * m\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r / m\n        val r = r * m\n        val r = r + m\n        val r = r * r\n\
    \        val r = r / m\n        val r = r * m\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r / m\n        val r = r * m\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r / m\n        val r = r * m\n\
    \        val r = r + m\n        val r = r * r\n        val r = r / m\n       \
    \ val r = r * m\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r / m\n        \n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxr_uswto.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxr_uswto.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxr_uswto.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxr_uswto.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxr_uswto.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxr_uswto.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n % p\n        if (n2 == 0) n2 else p + n2\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpca4bmz3z.scala:20)\n\tat Problem.main(tmpca4bmz3z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n.toInt\n        val p2 = p.toInt\n        val\
    \ n3 = n2 % p\n        val p3 = p2 % p\n        if (p3 == 0) n3 else n3 + 1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03vz5uru.scala:24)\n\tat Problem.main(tmp03vz5uru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else if (r\
    \ > 0) modp(r, p) * p\n        else modp(r, p) * (p - 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.sc"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val q\
    \ = r - m\n        if (q > 0) {\n            val r = n.toInt\n            val\
    \ s = r.toInt\n            val t = s % q\n            if (t < 0)\n           \
    \     t + q\n            else\n                t\n        }\n        else\n  \
    \          q\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp98sv84js.scala:32)\n\tat Problem.main(tmp98sv84js.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else if (r\
    \ > 0) modp(r, p) + 1\n        else modp(r, p) - 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.sc"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else if (r\
    \ < 0) (p - (p % r)) % r\n        else r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1w_9syxd.scala:23)\n\tat Problem.main(tmp1w_9syxd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n.toInt\n        val m = p.toInt\n        val r\
    \ = r * m % m\n        if (r < 0) r + m else r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk70ury95.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * m % m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r % m\n        val r = r * m + (r - m) % m\n        val r = r % m\n      \
    \  val r = r * m + (r - m) % m\n        val r = r % m\n        val r = r * m +\
    \ (r - m) % m\n        val r = r % m\n        val r = r * m + (r - m) % m\n  \
    \      val r = r % m\n        val r = r * m + (r - m) % m\n        val r = r %\
    \ m\n        val r = r * m + (r - m) % m\n        val r = r % m\n        val r\
    \ = r * m + (r - m) % m\n        val r = r % m\n        val r = r * m + (r - m)\
    \ % m\n        val r = r % m\n        val r = r * m + (r - m) % m\n        val\
    \ r = r % m\n        val r = r * m + (r - m) % m\n        val r = r % m\n    \
    \    val r = r * m + (r - m) % m\n        val r = r % m\n        val r = r * m\
    \ + (r - m) % m\n        val r = r % m\n        val r = r * m + (r - m) % m\n\
    \        val r = r % m\n        val r = r * m + (r - m) % m\n        val r = r\
    \ % m\n        val r = r * m + (r - m) % m\n        val r = r % m\n        val\
    \ r = r * m + (r - m) % m\n        val r = r % m\n        val r = r * m + (r -\
    \ m) % m\n        val r = r % m\n        val r = r * m + (r - m) % m\n       \
    \ val r = r % m\n        val r = r * m + (r - m) % m\n        val r = r % m\n\
    \        val r = r * m + (r - m) % m\n        val r = r % m\n        val r = r\
    \ * m + (r - m) % m\n        val r = r % m\n        val r = r * m + (r - m) %\
    \ m\n        val r = r % m\n        val r = r * m + (r - m) % m\n        val r\
    \ = r % m\n        val r = r * m + (r - m) % m\n        val r = r % m\n      \
    \  val r = r * m + (r - m) % \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphwqvijv7.scala:67:33 ---------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * m + (r - m)\
    \ % \n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphwqvijv7.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = r % m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphwqvijv7.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = r * m + (r - m) % m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphwqvijv7.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r % m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as \e[33mvalue\e\
    [0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmphwqvijv7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * m + (r - m)\
    \ % m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphwqvijv7.scala:22:12\
    \ ----------------------"
  stdout: ''
  timestamp: 1659800306
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val q = p.toInt\n        val r\
    \ = m % q\n        if (r < 0) r + q\n        else r\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpno6_va70.scala:24)\n\tat Problem.main(tmpno6_va70.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r - m\n        val r = r * r\n        val r = r + m\n        val r = r * r\n\
    \        val r = r + m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r + m\n        val r = r * r\n\
    \        val r = r + m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r + m\n        val r = r * r\n\
    \        val r = r + m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r + m\n        val r = r * r\n\
    \        val r = r + m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r + m\n        val r = r * r\n\
    \        val r = r + m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r + m\n        val r = r * r\n\
    \        val r = r + m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r + m\n        val r = r * r\n\
    \        val r = r + m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r + m\n        \n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nk0ayei.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5nk0ayei.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5nk0ayei.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5nk0ayei.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5nk0ayei.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5nk0ayei.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val q = p.toInt\n        val r\
    \ = m.toInt\n        val s = q.toInt\n        val t = m.toInt\n        val u =\
    \ q.toInt\n        val v = m.toInt\n        val w = q.toInt\n        val x = m.toInt\n\
    \        val y = q.toInt\n        val z = m.toInt\n        val a = q.toInt\n \
    \       val b = m.toInt\n        val c = m.toInt\n        val d = q.toInt\n  \
    \      val e = m.toInt\n        val f = m.toInt\n        val g = q.toInt\n   \
    \     val h = m.toInt\n        val i = m.toInt\n        val j = q.toInt\n    \
    \    val k = m.toInt\n        val l = m.toInt\n        val m = q.toInt\n     \
    \   val n = m.toInt\n        val o = m.toInt\n        val p = m.toInt\n      \
    \  val q = m.toInt\n        val r = m.toInt\n        val s = m.toInt\n       \
    \ val t = m.toInt\n        val u = m.toInt\n        val v = m.toInt\n        val\
    \ w = m.toInt\n        val x = m.toInt\n        val y = m.toInt\n        val z\
    \ = m.toInt\n        val a = m.toInt\n        val b = m.toInt\n        val c =\
    \ m.toInt\n        val d = m.toInt\n        val e = m.toInt\n        val f = m.toInt\n\
    \        val g = m.toInt\n        val h = m.toInt\n        val i = m.toInt\n \
    \       val j = m.toInt\n        val k = m.toInt\n        val l = m.toInt\n  \
    \      val m = m.toInt\n        val n = m.toInt\n        val o = m.toInt\n   \
    \     val p = m.toInt\n        val q = m.toInt\n        val r = m.toInt\n    \
    \    val s = m.toInt\n        val t = m.toInt\n        val u = m.toInt\n     \
    \   val v = m.toInt\n        val w = m.toInt\n        val x = m.toInt\n      \
    \  val y = m.toInt\n        val z = m.toInt\n        val a = m.toInt\n       \
    \ val b = m.toInt\n        val c = m.toInt\n        val d = m.toInt\n        val\
    \ e = m.toInt\n        val f = m.toInt\n        val g = m.toInt\n        val h\
    \ = m.toInt\n        val i = m.toInt\n        val j = m.toInt\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp372khbdq.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = q.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp372khbdq.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mq\e[0m = m.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mq is already defined\
    \ as \e[33mvalue\e[0m \e[35mq\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp372khbdq.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = m.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp372khbdq.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = m.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ms is already defined\
    \ as \e[33mvalue\e[0m \e[35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp372khbdq.scala:46:12 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mt\e[0m = m.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mt is already defined\
    \ as \e[33mvalue\e[0m \e[35mt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp372khbdq.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mu\e[0m"
  stdout: ''
  timestamp: 1659800307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r - m\n        val r = r * r\n        val r = r + m\n        val r = r / r\n\
    \        val r = r - m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r / r\n        r\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp56wwvjub.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp56wwvjub.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp56wwvjub.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp56wwvjub.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp56wwvjub.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp56wwvjub.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800305
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n.toInt\n        val p2 = p.toInt\n        if (n2\
    \ == 0) 1\n        else if (p2 == 0) 1\n        else (2l) % (p2)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpammbs2fv.scala:23)\n\tat Problem.main(tmpammbs2fv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n.toInt\n        val m = p.toInt\n        val r\
    \ = r * m % p\n        val r = r + r\n        val r = r + r\n        val r = r\
    \ + r\n        val r = r + r\n        val r = r + r\n        val r = r + r\n \
    \       val r = r + r\n        val r = r + r\n        val r = r + r\n        val\
    \ r = r + r\n        val r = r + r\n        val r = r + r\n        val r = r +\
    \ r\n        val r = r + r\n        val r = r + r\n        val r = r + r\n   \
    \     val r = r + r\n        val r = r + r\n        val r = r + r\n        val\
    \ r = r + r\n        val r = r + r\n        val r = r + r\n        val r = r +\
    \ r\n        val r = r + r\n        val r = r + r\n        val r = r + r\n   \
    \     val r = r + r\n        val r = r + r\n        val r = r + r\n        val\
    \ r = r + r\n        val r = r + r\n        val r = r + r\n        val r = r +\
    \ r\n        val r = r + r\n        val r = r + r\n        val r = r + r\n   \
    \     val r = r + r\n        val r = r + r\n        val r = r + r\n        val\
    \ r = r + r\n        val r = r + r\n        val r = r + r\n        val r = r +\
    \ r\n        val r = r + r\n        val r = r + r\n        val r = r + r\n   \
    \     val r = r + r\n        val r = r + r\n        val r = r + r\n        val\
    \ r = r + r\n        val r = r + r\n        val r = r + r\n        val r = r +\
    \ r\n        val r = r + r\n        val r = r + r\n        val r = r + r\n   \
    \     val r = r + r\n        val r = r + r\n        val r = r + r\n        val\
    \ r = r + r\n        val r = r + r\n        val r = r + r\n        val r = r +\
    \ r\n        val r = r + r\n        val r = r + r\n        val r = r + r\n   \
    \     val r = r + r\n        val r = r + r\n        val r = r + r\n        val\
    \ r = r + r\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprzcjl52i.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * m % p\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprzcjl52i.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprzcjl52i.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprzcjl52i.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprzcjl52i.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprzcjl52i.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + r\n\e[3"
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val t\
    \ = m % r\n        if (t < 0)\n            t + r\n        else\n            t\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8wrt8d6.scala:26)\n\tat Problem.main(tmpz8wrt8d6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n * n\n        val p2 = p * p\n        val n3 =\
    \ n2 * n2\n        val p3 = p2 * p2\n        val n4 = n3 * n3\n        val p4\
    \ = p3 * p3\n        val n5 = n4 * n4\n        val p5 = p4 * p4\n        val n6\
    \ = n5 * n5\n        val p6 = p5 * p5\n        val n7 = n6 * n6\n        val p7\
    \ = p6 * p6\n        val n8 = (n7 * n7) % p\n        val p8 = (p7 * p7) % p\n\
    \        val n9 = (n8 * n8) % p\n        val p9 = (p8 * p8) % p\n        val n10\
    \ = (n9 * n9) % p\n        val p10 = (p9 * p9) % p\n        val n11 = (n10 * n10)\
    \ % p\n        val p11 = (p10 * p10) % p\n        val n12 = (n11 * n11) % p\n\
    \        val p12 = (p11 * p11) % p\n        val n13 = (n12 * n12) % p\n      \
    \  val p13 = (p12 * p12) % p\n        val n14 = (n13 * n13) % p\n        val p14\
    \ = (p13 * p13) % p\n        val n15 = (n14 * n14) % p\n        val p15 = (p14\
    \ * p14) % p\n        val n16 = (n15 * n15) % p\n        val p16 = (p15 * p15)\
    \ % p\n        val n17 = (n16 * n16) % p\n        val p17 = (p16 * p16) % p\n\
    \        val n18 = (n17 * n17) % p\n        val p18 = (p17 * p17) % p\n      \
    \  val n19 = (n18 * n18) % p\n        val p19 = (p18 * p18) % p\n        val n20\
    \ = (n19 * n19) % p\n        val p20 = (p19 * p19) % p\n        val n21 = (n20\
    \ * n20) % p\n        val p21 = (p20 * p20) % p\n        val n22 = (n21 * n21)\
    \ % p\n        val p22 = (p21 * p21) % p\n        val n23 = (n22 * n22) % p\n\
    \        val p23 = (p22 * p\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbj42ezq8.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbj42ezq8.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val q = p / n\n        val r = p % n\n        val s = q\
    \ * q\n        val t = s * q\n        val u = t * q\n        val v = t * r\n \
    \       val w = u * r\n        val x = v * r\n        val y = w * r\n        val\
    \ z = y * r\n        val w = x * r\n        val x = y * r\n        val y = z *\
    \ r\n        val z = w * r\n        val w = x * r\n        val x = y * r\n   \
    \     val y = z * r\n        val z = w * r\n        val w = x * r\n        val\
    \ x = y * r\n        val y = z * r\n        val z = w * r\n        val w = x *\
    \ r\n        val x = y * r\n        val y = z * r\n        val z = w * r\n   \
    \     val w = x * r\n        val x = y * r\n        val y = z * r\n        val\
    \ z = w * r\n        val w = x * r\n        val x = y * r\n        val y = z *\
    \ r\n        val z = w * r\n        val w = x * r\n        val x = y * r\n   \
    \     val y = z * r\n        val z = w * r\n        val w = x * r\n        val\
    \ x = y * r\n        val y = z * r\n        val z = w * r\n        val w = x *\
    \ r\n        val x = y * r\n        val y = z * r\n        val z = w * r\n   \
    \     val w = x * r\n        val x = y * r\n        val y = z * r\n        val\
    \ z = w * r\n        val w = x * r\n        val x = y * r\n        val y = z *\
    \ r\n        val z = w * r\n        val w = x * r\n        val x = y * r\n   \
    \     val y = z * r\n        val z = w * r\n        val w = x * r\n        val\
    \ x = y * r\n        val y = z * r\n        val z = w * r\n        val w = x *\
    \ r\n        val x = y * r\n        val y = z * r\n        val z = w * r\n   \
    \     val w = x * r\n        val x = y * r\n        val y = z * r\n        val\
    \ z = w * r\n        val w = x * r\n        val x = y * r\n        val y = z *\
    \ r\n        val z = w * r\n        val w = x * r\n        val x = y * r\n   \
    \     val y = z * r\n        val z = w * r\n        val w = x * r\n        val\
    \ x = y * r\n        val y = z * r\n        val z = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf5doejst.scala:97:15 ---------------------------\e\
    [0m\e[0m\n\e[31m97 |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = \n\e[31m\e[31m\
    \   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf5doejst.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mw\e[0m = x * r\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mw is already defined as \e[33mvalue\e\
    [0m \e[35mw\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpf5doejst.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = y * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx is already defined as\
    \ \e[33mvalue\e[0m \e[35mx\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpf5doejst.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36my\e[0m = z * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0my is already defined as\
    \ \e[33mvalue\e[0m \e[35my\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpf5doejst.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = w * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mz is already defined as\
    \ \e[33mvalue\e[0m \e[35mz\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpf5doejst.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mw\e[0m = x * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m"
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n.toInt\n        val p2 = p.toInt\n        val\
    \ n3 = n2 % p2\n        if (n3 == 0) n3 else n3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphr5ylp4s.scala:23)\n\tat Problem.main(tmphr5ylp4s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n % p\n        if (n2 == 0) n\n        else modp(n2,\
    \ p)\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800300
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else if (r\
    \ < 0) (p - (n % p)) % p\n        else (n % p) % p\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi9rp5thm.scala:23)\n\tat Problem.main(tmpi9rp5thm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else if (r\
    \ > 0) modp(r, p) + p\n        else modp(r, p) - p\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.scala:18)\n\tat Problem$.modp(tmpg13ujowt.scala:18)\n\
    \tat Problem$.modp(tmpg13ujowt.sc"
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) r else p + r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqqzhn3l8.scala:20)\n\tat Problem.main(tmpqqzhn3l8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else if (r\
    \ < 0) (p - (p - r)) % p\n        else r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbelkw_6.scala:23)\n\tat Problem.main(tmpzbelkw_6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r - m\n        val r = r * r\n        val r = r + m\n        val r = r / r\n\
    \        val r = r * p\n        val r = r + m\n        val r = r / r\n       \
    \ val r = r * p\n        r\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkfrb8t9s.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkfrb8t9s.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkfrb8t9s.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkfrb8t9s.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkfrb8t9s.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * p\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkfrb8t9s.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800305
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else if (r\
    \ > 0) modp(r, p + 1)\n        else modp(r - 1, p + 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n.toInt\n        val m = p.toInt\n        val t\
    \ = r * m % p\n        if (t < 0)\n            t + p\n        else\n         \
    \   t\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsxsy7kbv.scala:25)\n\tat Problem.main(tmpsxsy7kbv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r * r\n        val r = r - m * m\n        val r = r * r\n        val r = r\
    \ - m * m\n        val r = r * r\n        val r = r - m * m\n        val r = r\
    \ * r\n        val r = r - m * m\n        val r = r * r\n        val r = r - m\
    \ * m\n        val r = r * r\n        val r = r - m * m\n        val r = r * r\n\
    \        val r = r - m * m\n        val r = r * r\n        val r = r - m * m\n\
    \        val r = r * r\n        val r = r - m * m\n        val r = r * r\n   \
    \     val r = r - m * m\n        val r = r * r\n        val r = r - m * m\n  \
    \      val r = r * r\n        val r = r - m * m\n        val r = r * r\n     \
    \   val r = r - m * m\n        val r = r * r\n        val r = r - m * m\n    \
    \    val r = r * r\n        val r = r - m * m\n        val r = r * r\n       \
    \ val r = r - m * m\n        val r = r * r\n        val r = r - m * m\n      \
    \  val r = r * r\n        val r = r - m * m\n        val r = r * r\n        val\
    \ r = r - m * m\n        val r = r * r\n        val r = r - m * m\n        val\
    \ r = r * r\n        val r = r - m * m\n        val r = r * r\n        val r =\
    \ r - m * m\n        val r = r * r\n        val r = r - m * m\n        val r =\
    \ r * r\n        val r = r - m * m\n        val r = r * r\n        val r = r -\
    \ m * m\n        val r = r * r\n        val r = r - m * m\n        val r = r *\
    \ r\n        val r = r - m * m\n        val r = r * r\n        val r = r - m *\
    \ m\n        val r = r * r\n        val r = r - m * m\n        val r = r * r\n\
    \        val r = r - m * m\n        val r = r * r\n        val r = r - m * m\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp98k29ds6.scala:80:11 ---------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp98k29ds6.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp98k29ds6.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m * m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp98k29ds6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp98k29ds6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m * m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp98k29ds6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defi"
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n * n\n        val p2 = p * p\n        val n3 =\
    \ n2 * n2\n        val p3 = p2 * p2\n        val n4 = n3 * n3\n        val p4\
    \ = p3 * p3\n        val n5 = n4 * n4\n        val p5 = p4 * p4\n        val n6\
    \ = n5 * n5\n        val p6 = p5 * p5\n        val n7 = n6 * n6\n        val p7\
    \ = p6 * p6\n        val n8 = n7 * n7\n        val p8 = p7 * p7\n        val n9\
    \ = n8 * n8\n        val p9 = p8 * p8\n        val n10 = n9 * n9\n        val\
    \ p10 = p9 * p9\n        val n11 = n10 * n10\n        val p11 = p10 * p10\n  \
    \      val n12 = n11 * n11\n        val p12 = p11 * p11\n        val n13 = n12\
    \ * n12\n        val p13 = p12 * p12\n        val n14 = n13 * n13\n        val\
    \ p14 = p13 * p13\n        val n15 = n14 * n14\n        val p15 = p14 * p14\n\
    \        val n16 = n15 * n15\n        val p16 = p15 * p15\n        val n17 = n16\
    \ * n16\n        val p17 = p16 * p16\n        val n18 = n17 * n17\n        val\
    \ p18 = p17 * p17\n        val n19 = n18 * n18\n        val p19 = p18 * p18\n\
    \        val n20 = n19 * n19\n        val p20 = p19 * p19\n        val n21 = n20\
    \ * n20\n        val p21 = p20 * p20\n        val n22 = n21 * n21\n        val\
    \ p22 = p21 * p21\n        val n23 = n22 * n22\n        val p23 = p22 * p22\n\
    \        val n24 = n23 * n23\n        val p24 = p23 * p23\n        val n25 = n24\
    \ * n24\n        val p25 = p24 * p24\n        val n26 = n25 * n25\n        val\
    \ p26 = p25 * p25\n        val n27 = n26 * n26\n        val p27 = p26 * p26\n\
    \        val n28 = n27 * n27\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmparbbd3cs.scala:70:5\
    \ ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n.toInt\n        val p2 = p.toInt\n        if (n2\
    \ >= p2) n2 % p2 else (p2 - n2) % p2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5b0ruxg7.scala:21)\n\tat Problem.main(tmp5b0ruxg7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r - m + 1\n        val r = r * r\n        val r = r / p\n        val r = r\
    \ * p\n        val r = r / p\n        val r = r * p\n        val r = r / p\n \
    \       val r = r * p\n        val r = r / p\n        val r = r * p\n        val\
    \ r = r / p\n        val r = r * p\n        val r = r / p\n        val r = r *\
    \ p\n        val r = r / p\n        val r = r * p\n        val r = r / p\n   \
    \     val r = r * p\n        val r = r / p\n        val r = r * p\n        val\
    \ r = r / p\n        val r = r * p\n        val r = r / p\n        val r = r *\
    \ p\n        val r = r / p\n        val r = r * p\n        val r = r / p\n   \
    \     val r = r * p\n        val r = r / p\n        val r = r * p\n        val\
    \ r = r / p\n        val r = r * p\n        val r = r / p\n        val r = r *\
    \ p\n        val r = r / p\n        val r = r * p\n        val r = r / p\n   \
    \     val r = r * p\n        val r = r / p\n        val r = r * p\n        val\
    \ r = r / p\n        val r = r * p\n        val r = r / p\n        val r = r *\
    \ p\n        val r = r / p\n        val r = r * p\n        val r = r / p\n   \
    \     val r = r * p\n        val r = r / p\n        val r = r * p\n        val\
    \ r = r / p\n        val r = r * p\n        val r = r / p\n        val r = r *\
    \ p\n        val r = r / p\n        val r = r * p\n        val r = r / p\n   \
    \     val r = r * p\n        val r = r / p\n        val r = r * p\n        val\
    \ r = r / p\n        val r = r * p\n        val r = r / p\n        val r = r *\
    \ p\n        val r = r / p\n        val r = r * p\n        val r = r / p\n   \
    \     val r = r * p\n        val r = r / p\n        val r = r * p\n        val\
    \ r = r / p\n\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdena72x7.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is\
    \ already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdena72x7.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = r * r\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdena72x7.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = r / p\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdena72x7.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = r * p\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdena72x7.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = r / p\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdena72x7.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = "
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val s\
    \ = m % r\n        if (s == 0) 1\n        else if (s == r) 0\n        else s\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqzmfkhtb.scala:25)\n\tat Problem.main(tmpqzmfkhtb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n.toInt % p.toInt\n        if (r == 0) 1l else r\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_n8tz1g.scala:21)\n\tat Problem.main(tmpx_n8tz1g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r % m\n        val r = r * m + (r - m)\n        r\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp69huicqe.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r % m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp69huicqe.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * m + (r - m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is\
    \ already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659800312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val q = p / n\n        val r = p % n\n        q * n + (if\
    \ (r < 0) -r * n else r)\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwxfh8rxl.scala:21)\n\tat Problem.main(tmpwxfh8rxl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800317
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) r else r + p\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgggl0qcm.scala:20)\n\tat Problem.main(tmpgggl0qcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800317
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r - m\n        val r = r * r\n        val r = r + m\n        val r = r / r\n\
    \        val r = r * p\n        val r = r + m\n        val r = r / r\n       \
    \ r\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5j3y8n9d.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5j3y8n9d.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5j3y8n9d.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5j3y8n9d.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5j3y8n9d.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * p\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5j3y8n9d.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n.toInt\n        val p2 = p.toInt\n        val\
    \ n3 = n2 % p2\n        val n4 = n3 / p2\n        val p3 = p2 % p2\n        val\
    \ p4 = p3 / p2\n        val p5 = p4 % p2\n        val p6 = p5 / p2\n        val\
    \ p7 = p6 % p2\n        val p8 = p7 / p2\n        val p9 = p8 % p2\n        val\
    \ p10 = p9 / p2\n        val p11 = p10 % p2\n        val p12 = p11 / p2\n    \
    \    val p13 = p12 % p2\n        val p14 = p13 / p2\n        val p15 = p14 % p2\n\
    \        val p16 = p15 / p2\n        val p17 = p16 % p2\n        val p18 = p17\
    \ / p2\n        val p19 = p18 % p2\n        val p20 = p19 / p2\n        val p21\
    \ = p20 % p2\n        val p22 = p21 / p2\n        val p23 = p22 % p2\n       \
    \ val p24 = p23 / p2\n        val p25 = p24 % p2\n        val p26 = p25 / p2\n\
    \        val p27 = p26 % p2\n        val p28 = p27 / p2\n        val p29 = p28\
    \ % p2\n        val p30 = p29 / p2\n        val p31 = p30 % p2\n        val p32\
    \ = p31 / p2\n        val p33 = p32 % p2\n        val p34 = p33 / p2\n       \
    \ val p35 = p34 % p2\n        val p36 = p35 / p2\n        val p37 = p36 % p2\n\
    \        val p38 = p37 / p2\n        val p39 = p38 % p2\n        val p40 = p39\
    \ / p2\n        val p41 = p40 % p2\n        val p42 = p41 / p2\n        val p43\
    \ = p42 % p2\n        val p44 = p43 / p2\n        val p45 = p44 % p2\n       \
    \ val p46 = p45 / p2\n        val p47 = p46 % p2\n        val p48 = p47 / p2\n\
    \        val p49 = p48 % p2\n        val p50 = p49 / p2\n        val p51 = p50\
    \ % p2\n        val p52 = p51 / p2\n        val p53 = p52 % p2\n        val p54\
    \ = p53 / \n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9l4y_2j6.scala:71:23 ---------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m        \e[33mval\e[0m \e[36mp54\e[0m = p53 / \n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp9l4y_2j6.scala:72:5 ---------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800318
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val q = p.toInt\n        val r\
    \ = m.mod(q)\n        if (r < 0) r + q\n        else r\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6bf2mdwo.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = m.mod(q)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member\
    \ of Int, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659800318
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val q\
    \ = r - m\n        if (q < 0) q + m\n        else q\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5p1eoxy.scala:23)\n\tat Problem.main(tmpq5p1eoxy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) r else p + r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqqzhn3l8.scala:20)\n\tat Problem.main(tmpqqzhn3l8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n * n\n        val p2 = p * p\n        val n3 =\
    \ n2 * n2\n        val p3 = p2 * p2\n        val n4 = n3 * n3\n        val p4\
    \ = p3 * p3\n        val n5 = n4 * n4\n        val p5 = p4 * p4\n        val n6\
    \ = n5 * n5\n        val p6 = p5 * p5\n        val n7 = n6 * n6\n        val p7\
    \ = p6 * p6\n        val n8 = n7 * n7\n        val p8 = p7 * p7\n        val n9\
    \ = n8 * n8\n        val p9 = p8 * p8\n        val n10 = n9 * n9\n        val\
    \ p10 = p9 * p9\n        val n11 = n10 * n10\n        val p11 = p10 * p10\n  \
    \      val n12 = (n11 * n11) % p\n        val p12 = (p11 * p11) % p\n        val\
    \ n13 = (n12 * n12) % p\n        val p13 = (p12 * p12) % p\n        val n14 =\
    \ (n13 * n13) % p\n        val p14 = (p13 * p13) % p\n        val n15 = (n14 *\
    \ n14) % p\n        val p15 = (p14 * p14) % p\n        val n16 = (n15 * n15) %\
    \ p\n        val p16 = (p15 * p15) % p\n        val n17 = (n16 * n16) % p\n  \
    \      val p17 = (p16 * p16) % p\n        val n18 = (n17 * n17) % p\n        val\
    \ p18 = (p17 * p17) % p\n        val n19 = (n18 * n18) % p\n        val p19 =\
    \ (p18 * p18) % p\n        val n20 = (n19 * n19) % p\n        val p20 = (p19 *\
    \ p19) % p\n        val n21 = (n20 * n20) % p\n        val p21 = (p20 * p20) %\
    \ p\n        val n22 = (n21 * n21) % p\n        val p22 = (p21 * p21) % p\n  \
    \      val n23 = (n22 * n22) % p\n        val p23 = (p22 * p22) % p\n        val\
    \ n24 = (n23 * n23) % p\n        val p24 = (p23 * \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppj51iy_c.scala:61:24 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e[36mp24\e[0m = (p23 * \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppj51iy_c.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n.toInt\n        val m = p.toInt\n        val r\
    \ = r * m % p\n        val r = r / m\n        val r = r * m\n        val r = r\
    \ / m\n        val r = r * m\n        val r = r / m\n        val r = r * m\n \
    \       val r = r / m\n        val r = r * m\n        val r = r / m\n        val\
    \ r = r * m\n        val r = r / m\n        val r = r * m\n        val r = r /\
    \ m\n        val r = r * m\n        val r = r / m\n        val r = r * m\n   \
    \     val r = r / m\n        val r = r * m\n        val r = r / m\n        val\
    \ r = r * m\n        val r = r / m\n        val r = r * m\n        val r = r /\
    \ m\n        val r = r * m\n        val r = r / m\n        val r = r * m\n   \
    \     val r = r / m\n        val r = r * m\n        val r = r / m\n        val\
    \ r = r * m\n        val r = r / m\n        val r = r * m\n        val r = r /\
    \ m\n        val r = r * m\n        val r = r / m\n        val r = r * m\n   \
    \     val r = r / m\n        val r = r * m\n        val r = r / m\n        val\
    \ r = r * m\n        val r = r / m\n        val r = r * m\n        val r = r /\
    \ m\n        val r = r * m\n        val r = r / m\n        val r = r * m\n   \
    \     val r = r / m\n        val r = r * m\n        val r = r / m\n        val\
    \ r = r * m\n        val r = r / m\n        val r = r * m\n        val r = r /\
    \ m\n        val r = r * m\n        val r = r / m\n        val r = r * m\n   \
    \     val r = r / m\n        val r = r * m\n        val r = r / m\n        val\
    \ r = r * m\n        val r = r / m\n        val r = r * m\n        val r = r /\
    \ m\n        val r = r * m\n        val r = r / m\n        val r = r * m\n   \
    \     val r = r / m\n        val r = r * m\n        val r = r / m\n        val\
    \ r = r * m\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiep0h4xz.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * m % p\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiep0h4xz.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiep0h4xz.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiep0h4xz.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiep0h4xz.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiep0h4xz.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / m\n\e[3"
  stdout: ''
  timestamp: 1659800318
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else if (r\
    \ > 0) modp(r, p + 1)\n        else modp(r - 1, p + 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659800311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val q = p / n\n        val r = p % n\n        val s = q\
    \ * q\n        val t = r * r\n        val u = (s * t) % p\n        val v = (t\
    \ * u) % p\n        v\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpevyt5jl_.scala:25)\n\tat Problem.main(tmpevyt5jl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n1 = n % p\n        val n2 = n / p\n        val n3 =\
    \ n2 / p\n        val n4 = n3 / p\n        val n5 = n4 / p\n        val n6 = n5\
    \ / p\n        val n7 = n6 / p\n        val n8 = n7 / p\n        val n9 = n8 /\
    \ p\n        val n10 = n9 / p\n        val n11 = n10 / p\n        val n12 = n11\
    \ / p\n        val n13 = n12 / p\n        val n14 = n13 / p\n        val n15 =\
    \ n14 / p\n        val n16 = n15 / p\n        val n17 = n16 / p\n        val n18\
    \ = n17 / p\n        val n19 = n18 / p\n        val n20 = n19 / p\n        val\
    \ n21 = n20 / p\n        val n22 = n21 / p\n        val n23 = n22 / p\n      \
    \  val n24 = n23 / p\n        val n25 = n24 / p\n        val n26 = n25 / p\n \
    \       val n27 = n26 / p\n        val n28 = n27 / p\n        val n29 = n28 /\
    \ p\n        val n30 = n29 / p\n        val n31 = n30 / p\n        val n32 = n31\
    \ / p\n        val n33 = n32 / p\n        val n34 = n33 / p\n        val n35 =\
    \ n34 / p\n        val n36 = n35 / p\n        val n37 = n36 / p\n        val n38\
    \ = n37 / p\n        val n39 = n38 / p\n        val n40 = n39 / p\n        val\
    \ n41 = n40 / p\n        val n42 = n41 / p\n        val n43 = n42 / p\n      \
    \  val n44 = n43 / p\n        val n45 = n44 / p\n        val n46 = n45 / p\n \
    \       val n47 = n46 / p\n        val n48 = n47 / p\n        val n49 = n48 /\
    \ p\n        val n50 = n49 / p\n        val n51 = n50 / p\n        val n52 = n51\
    \ / p\n        val n53 = n52 / p\n        val n54 = n53 / p\n        val n55 =\
    \ n54 / p\n        val n56 = n55 / p\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvupckiox.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800317
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else if (r\
    \ < 0) (p - (n / p) * p) % p\n        else (n / p) % p\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps9ag3s68.scala:22)\n\tat Problem.main(tmps9ag3s68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800317
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r - m % r\n        val r = r + m / r\n        r\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjydshxed.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m % r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjydshxed.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m / r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n * n\n        val p2 = p * p\n        val n3 =\
    \ n2 * n2\n        val p3 = p2 * p2\n        val n4 = n3 * n3\n        val p4\
    \ = p3 * p3\n        val n5 = n4 * n4\n        val p5 = p4 * p4\n        val n6\
    \ = n5 * n5\n        val p6 = p5 * p5\n        val n7 = n6 * n6\n        val p7\
    \ = p6 * p6\n        val n8 = (n7 * n7) % p\n        val p8 = (p7 * p7) % p\n\
    \        val n9 = (n8 * n8) % p\n        val p9 = (p8 * p8) % p\n        val n10\
    \ = (n9 * n9) % p\n        val p10 = (p9 * p9) % p\n        val n11 = (n10 * n10)\
    \ % p\n        val p11 = (p10 * p10) % p\n        val n12 = (n11 * n11) % p\n\
    \        val p12 = (p11 * p11) % p\n        val n13 = (n12 * n12) % p\n      \
    \  val p13 = (p12 * p12) % p\n        val n14 = (n13 * n13) % p\n        val p14\
    \ = (p13 * p13) % p\n        val n15 = (n14 * n14) % p\n        val p15 = (p14\
    \ * p14) % p\n        val n16 = (n15 * n15) % p\n        val p16 = (p15 * p15)\
    \ % p\n        val n17 = (n16 * n16) % p\n        val p17 = (p16 * p16) % p\n\
    \        val n18 = (n17 * n17) % p\n        val p18 = (p17 * p17) % p\n      \
    \  val n19 = (n18 * n18) % p\n        val p19 = (p18 * p18) % p\n        val n20\
    \ = (n19 * n19) % p\n        val p20 = (p19 * p19) % p\n        val n21 = (n20\
    \ * n20) % p\n        val p21 = (p20 * p20) % p\n        val n22 = (n21 * n21)\
    \ % p\n        val p22 = (p21 * p21) % p\n        val n23 = (n22 * n22) % p\n\
    \        val p23 = (p22 * p\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbj42ezq8.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbj42ezq8.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n % p\n        if (m == 0) n else m\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu88mu0io.scala:21)\n\tat Problem.main(tmpu88mu0io.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n1 = n % p\n        val n2 = n1 >>> 1\n        val n3\
    \ = n2 >>> 1\n        val n4 = n3 >>> 1\n        val n5 = n4 >>> 1\n        val\
    \ n6 = n5 >>> 1\n        val n7 = n6 >>> 1\n        val n8 = n7 >>> 1\n      \
    \  val n9 = n8 >>> 1\n        val n10 = n9 >>> 1\n        val n11 = n10 >>> 1\n\
    \        val n12 = n11 >>> 1\n        val n13 = n12 >>> 1\n        val n14 = n13\
    \ >>> 1\n        val n15 = n14 >>> 1\n        val n16 = n15 >>> 1\n        val\
    \ n17 = n16 >>> 1\n        val n18 = n17 >>> 1\n        val n19 = n18 >>> 1\n\
    \        val n20 = n19 >>> 1\n        val n21 = n20 >>> 1\n        val n22 = n21\
    \ >>> 1\n        val n23 = n22 >>> 1\n        val n24 = n23 >>> 1\n        val\
    \ n25 = n24 >>> 1\n        val n26 = n25 >>> 1\n        val n27 = n26 >>> 1\n\
    \        val n28 = n27 >>> 1\n        val n29 = n28 >>> 1\n        val n30 = n29\
    \ >>> 1\n        val n31 = n30 >>> 1\n        val n32 = n31 >>> 1\n        val\
    \ n33 = n32 >>> 1\n        val n34 = n33 >>> 1\n        val n35 = n34 >>> 1\n\
    \        val n36 = n35 >>> 1\n        val n37 = n36 >>> 1\n        val n38 = n37\
    \ >>> 1\n        val n39 = n38 >>> 1\n        val n40 = n39 >>> 1\n        val\
    \ n41 = n40 >>> 1\n        val n42 = n41 >>> 1\n        val n43 = n42 >>> 1\n\
    \        val n44 = n43 >>> 1\n        val n45 = n44 >>> 1\n        val n46 = n45\
    \ >>> 1\n        val n47 = n46 >>> 1\n        val n48 = n47 >>> 1\n        val\
    \ n49 = n48 >>> 1\n        val n50 = n49 >>> 1\n        val n51 = n50 >>> 1\n\
    \        val n52 = n51 >>> 1\n        val n53 = n52 >>> 1\n        val n54 = n53\
    \ >>> 1\n        val n55 = n54\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoom6nqvd.scala:71:5\
    \ ---------------------\e[0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800318
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n1 = n % p\n        if (n1 == 0) n1 else p + modp(n1,\
    \ p)\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.scala:17)\n\tat Problem$.modp(tmpej88ok5y.scala:17)\n\
    \tat Problem$.modp(tmpej88ok5y.sc"
  stdout: ''
  timestamp: 1659800318
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else if (r\
    \ < 0) (p - (n / p) * p) % p\n        else (n / p) % p\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps9ag3s68.scala:22)\n\tat Problem.main(tmps9ag3s68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val q\
    \ = r.toInt\n        val r = r - q\n        val r = r * r\n        val r = r +\
    \ m\n        val r = r - m\n        val r = r * r\n        val r = r + m\n   \
    \     val r = r - m\n        val r = r * r\n        val r = r + m\n        val\
    \ r = r - m\n        val r = r * r\n        val r = r + m\n        val r = r -\
    \ m\n        val r = r * r\n        val r = r + m\n        val r = r - m\n   \
    \     val r = r * r\n        val r = r + m\n        val r = r - m\n        val\
    \ r = r * r\n        val r = r + m\n        val r = r - m\n        val r = r *\
    \ r\n        val r = r + m\n        val r = r - m\n        val r = r * r\n   \
    \     val r = r + m\n        val r = r - m\n        val r = r * r\n        val\
    \ r = r + m\n        val r = r - m\n        val r = r * r\n        val r = r +\
    \ m\n        val r = r - m\n        val r = r * r\n        val r = r + m\n   \
    \     val r = r - m\n        val r = r * r\n        val r = r + m\n        val\
    \ r = r - m\n        val r = r * r\n        val r = r + m\n        val r = r -\
    \ m\n        val r = r * r\n        val r = r + m\n        val r = r - m\n   \
    \     val r = r * r\n        val r = r + m\n        val r = r - m\n        val\
    \ r = r * r\n        val r = r + m\n        val r = r - m\n        val r = r *\
    \ r\n        val r = r + m\n        val r = r - m\n        val r = r * r\n   \
    \     val r = r + m\n        val r = r - m\n        val r = r * r\n        val\
    \ r = r + m\n        val r = r - m\n        val r = r * r\n        val r = r +\
    \ m\n        val r = r - m\n        val r = r * r\n        val r = r + m\n   \
    \     val r = r - m\n        val r = r * r\n        val r = r + m\n        val\
    \ r = r - m\n        \n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_ra1_iut.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - q\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_ra1_iut.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_ra1_iut.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_ra1_iut.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_ra1_iut.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_ra1_iut.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n.toInt\n        val m = p.toInt\n        val t\
    \ = r % m\n        if (t == 0) 1l else t * modp(t, m)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.scala:19)\n\tat Problem$.modp(tmpf5zkaavz.scala:19)\n\
    \tat Problem$.modp(tmpf5zkaavz.sc"
  stdout: ''
  timestamp: 1659800319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n.toInt % p.toInt\n        if (r == 0) r else p\
    \ + r\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3p_s631d.scala:20)\n\tat Problem.main(tmp3p_s631d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r - m\n        val r = r * r\n        val r = r + m\n        val r = r / r\n\
    \        r\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn08ga3e3.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn08ga3e3.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn08ga3e3.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn08ga3e3.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r - m\n        val r = r * r\n        val r = r + m\n        val r = r / r\n\
    \        val r = r * p\n        val r = r + m\n        val r = r / r\n       \
    \ val r = r * p\n        val r = r + m\n        val r = r / r\n        val r =\
    \ r * p\n        val r = r + m\n        val r = r / r\n        val r = r * p\n\
    \        val r = r + m\n        val r = r / r\n        val r = r * p\n       \
    \ val r = r + m\n        val r = r / r\n        val r = r * p\n        val r =\
    \ r + m\n        val r = r / r\n        val r = r * p\n        val r = r + m\n\
    \        val r = r / r\n        val r = r * p\n        val r = r + m\n       \
    \ val r = r / r\n        val r = r * p\n        val r = r + m\n        val r =\
    \ r / r\n        val r = r * p\n        val r = r + m\n        val r = r / r\n\
    \        val r = r * p\n        val r = r + m\n        val r = r / r\n       \
    \ val r = r * p\n        val r = r + m\n        val r = r / r\n        val r =\
    \ r * p\n        val r = r + m\n        val r = r / r\n        val r = r * p\n\
    \        val r = r + m\n        val r = r / r\n        val r = r * p\n       \
    \ val r = r + m\n        val r = r / r\n        val r = r * p\n        val r =\
    \ r + m\n        val r = r / r\n        val r = r * p\n        val r = r + m\n\
    \        val r = r / r\n        val r = r * p\n        val r = r + m\n       \
    \ val r = r / r\n        val r = r * p\n        val r = r + m\n        val r =\
    \ r / r\n        val r = r * p\n        val r = r + m\n        val r = r / r\n\
    \        val r = r * p\n        val r = r + m\n        val r = r / r\n       \
    \ val r = r * p\n        val r = r + m\n        val r = r / r\n        val r =\
    \ r * p\n        \n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * p\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else if (r\
    \ > 0) modp(r, p) + 1\n        else modp(r, p) - 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.scala:18)\n\tat Problem$.modp(tmpq6yxttj7.scala:18)\n\
    \tat Problem$.modp(tmpq6yxttj7.sc"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val s\
    \ = m % r\n        if (s == 0) m else m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv3xuvbgu.scala:23)\n\tat Problem.main(tmpv3xuvbgu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r - m\n        val r = r * r\n        val r = r + m\n        val r = r * r\n\
    \        val r = r + m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r + m\n        val r = r * r\n\
    \        val r = r + m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r + m\n        val r = r * r\n\
    \        val r = r + m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r + m\n        val r = r * r\n\
    \        val r = r + m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r + m\n        val r = r * r\n\
    \        val r = r + m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r + m\n        val r = r * r\n\
    \        val r = r + m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r + m\n        val r = r * r\n        val r = r + m\n        val r = r * r\n\
    \        val r = r + m\n        val r = r * r\n        val r = r + m\n       \
    \ val r = r * r\n        val r = r + m\n        val r = r * r\n        val r =\
    \ r + m\n        \n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nk0ayei.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5nk0ayei.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5nk0ayei.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5nk0ayei.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5nk0ayei.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5nk0ayei.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val q = p / n\n        val r = p % n\n        q * n + (if\
    \ (r > 0) r else 0)\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4bkmgz78.scala:21)\n\tat Problem.main(tmp4bkmgz78.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800321
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n % p\n        if (n2 < 0) n2 + p else n2\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2fqctp0v.scala:21)\n\tat Problem.main(tmp2fqctp0v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800321
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val q\
    \ = r % m\n        val r = r - q\n        val r = r * m % m\n        val r = r\
    \ + q\n        val r = r * m % m\n        val r = r + q\n        val r = r * m\
    \ % m\n        val r = r + q\n        val r = r * m % m\n        val r = r + q\n\
    \        val r = r * m % m\n        val r = r + q\n        val r = r * m % m\n\
    \        val r = r + q\n        val r = r * m % m\n        val r = r + q\n   \
    \     val r = r * m % m\n        val r = r + q\n        val r = r * m % m\n  \
    \      val r = r + q\n        val r = r * m % m\n        val r = r + q\n     \
    \   val r = r * m % m\n        val r = r + q\n        val r = r * m % m\n    \
    \    val r = r + q\n        val r = r * m % m\n        val r = r + q\n       \
    \ val r = r * m % m\n        val r = r + q\n        val r = r * m % m\n      \
    \  val r = r + q\n        val r = r * m % m\n        val r = r + q\n        val\
    \ r = r * m % m\n        val r = r + q\n        val r = r * m % m\n        val\
    \ r = r + q\n        val r = r * m % m\n        val r = r + q\n        val r =\
    \ r * m % m\n        val r = r + q\n        val r = r * m % m\n        val r =\
    \ r + q\n        val r = r * m % m\n        val r = r + q\n        val r = r *\
    \ m % m\n        val r = r + q\n        val r = r * m % m\n        val r = r +\
    \ q\n        val r = r * m % m\n        val r = r + q\n        val r = r * m %\
    \ m\n        val r = r + q\n        val r = r * m % m\n        val r = r + q\n\
    \        val r = r * m % m\n        val r = r + q\n        val r = r * m % m\n\
    \        val r = r + q\n        val r = r * m % m\n        val r = r + q\n   \
    \     val r = r\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmcf1n2zx.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - q\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmcf1n2zx.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * m % m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmcf1n2zx.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + q\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmcf1n2zx.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * m % m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmcf1n2zx.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + q\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmcf1n2zx.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r"
  stdout: ''
  timestamp: 1659800324
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r - m\n        val r = r * r\n        val r = r + m\n        val r = r / r\n\
    \        val r = r * p\n        val r = r + m\n        val r = r / r\n       \
    \ val r = r * p\n        val r = r + m\n        val r = r / r\n        val r =\
    \ r * p\n        val r = r + m\n        val r = r / r\n        val r = r * p\n\
    \        val r = r + m\n        val r = r / r\n        val r = r * p\n       \
    \ val r = r + m\n        val r = r / r\n        val r = r * p\n        val r =\
    \ r + m\n        val r = r / r\n        val r = r * p\n        val r = r + m\n\
    \        val r = r / r\n        val r = r * p\n        val r = r + m\n       \
    \ val r = r / r\n        val r = r * p\n        val r = r + m\n        val r =\
    \ r / r\n        val r = r * p\n        val r = r + m\n        val r = r / r\n\
    \        val r = r * p\n        val r = r + m\n        val r = r / r\n       \
    \ val r = r * p\n        val r = r + m\n        val r = r / r\n        val r =\
    \ r * p\n        val r = r + m\n        val r = r / r\n        val r = r * p\n\
    \        val r = r + m\n        val r = r / r\n        val r = r * p\n       \
    \ val r = r + m\n        val r = r / r\n        val r = r * p\n        val r =\
    \ r + m\n        val r = r / r\n        val r = r * p\n        val r = r + m\n\
    \        val r = r / r\n        val r = r * p\n        val r = r + m\n       \
    \ val r = r / r\n        val r = r * p\n        val r = r + m\n        val r =\
    \ r / r\n        val r = r * p\n        val r = r + m\n        val r = r / r\n\
    \        val r = r * p\n        val r = r + m\n        val r = r / r\n       \
    \ val r = r * p\n        val r = r + m\n        val r = r / r\n        val r =\
    \ r * p\n        \n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * p\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzmlrdd6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val q = n / p\n        val r = n % p\n        if (q == 0)\
    \ r\n        else q * p + (r * modp(q, p))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr_tw_4_c.scala:23)\n\tat Problem.main(tmpr_tw_4_c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800324
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val q = n / p\n        val r = n % p\n        q * p + r\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsqp3ydak.scala:22)\n\tat Problem.main(tmpsqp3ydak.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val q = p.toInt\n        if (m\
    \ == 0) 1\n        else if (m == 1) 0\n        else if (m == q) 1\n        else\
    \ (n & (m - 1)) + (modp(n >> 1, q) * p)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxof97w3r.scala:24)\n\tat Problem.main(tmpxof97w3r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        if (m\
    \ == 0) 1\n        else if (m == r) 1\n        else (n & ((1 << r) - 1)).toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4uujfi23.scala:24)\n\tat Problem.main(tmp4uujfi23.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        if (m\
    \ == 0) 1\n        else if (m == 1) r\n        else if (m == r) 1\n        else\
    \ (n & ((1 << r) - 1)).toLong\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp891ve38c.scala:25)\n\tat Problem.main(tmp891ve38c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n.toInt\n        val p2 = p.toInt\n        val\
    \ result = n2 % p2\n        if (result < 0)\n            result + p2\n       \
    \ else\n            result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcekczd1m.scala:26)\n\tat Problem.main(tmpcekczd1m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val q = n / p\n        val r = n % p\n        val m = p\
    \ / q\n        val r = n % q\n        val r = r * q\n        val r = r + m\n \
    \       val r = r * p\n        val r = r + p\n        val r = r * q\n        val\
    \ r = r + q\n        r\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr0j262pe.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = n % q\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr0j262pe.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * q\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr0j262pe.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr0j262pe.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * p\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr0j262pe.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + p\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr0j262pe.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * q\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val q = p / n\n        val r = p % n\n        q * n + (if\
    \ (r == 0) 0 else r)\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf65yrric.scala:21)\n\tat Problem.main(tmpf65yrric.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n.toInt\n        val m = p.toInt\n        val r\
    \ = r % m\n        if (r < 0) r + m else r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptcl8epkp.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r % m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800324
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else if (r\
    \ < 0) r + p\n        else r\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8jexn2a.scala:23)\n\tat Problem.main(tmpz8jexn2a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else if (r\
    \ > 0) modp(r, p) * p\n        else modp(r, p) * (p - 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\tat Problem$.modp(tmpvs0zvtfh.scala:18)\n\
    \tat Problem$.modp(tmpvs0zvtfh.sc"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n.toInt\n        val p2 = p.toInt\n        val\
    \ n3 = n2.toLong\n        val p3 = p2.toLong\n        val n4 = n3.toInt\n    \
    \    val p4 = p3.toInt\n        val n5 = n4.toLong\n        val p5 = p4.toLong\n\
    \        val n6 = n5.toInt\n        val p6 = p5.toInt\n        val n7 = n6.toLong\n\
    \        val p7 = p6.toLong\n        val n8 = (n7.toInt + p7.toInt) % p\n    \
    \    val p8 = (p7.toInt + n7.toInt) % p\n        val n9 = (n8.toInt + p8.toInt)\
    \ % p\n        val p9 = (p8.toInt + n8.toInt) % p\n        val n10 = (n9.toInt\
    \ + p9.toInt) % p\n        val p10 = (p9.toInt + n9.toInt) % p\n        val n11\
    \ = (n10.toInt + p10.toInt) % p\n        val p11 = (p10.toInt + n10.toInt) % p\n\
    \        val n12 = (n11.toInt + p11.toInt) % p\n        val p12 = (p11.toInt +\
    \ n11.toInt) % p\n        val n13 = (n12.toInt + p12.toInt) % p\n        val p13\
    \ = (p12.toInt + n12.toInt) % p\n        val n14 = (n13.toInt + p13.toInt) % p\n\
    \        val p14 = (p13.toInt + n13.toInt) % p\n        val n15 = (n14.toInt +\
    \ p14.toInt) % p\n        val p15 = (p14.toInt + n14.toInt) % p\n        val n16\
    \ = (n15.toInt + p15.toInt) % p\n        val p16 = (p15.toInt + n15.toInt) % p\n\
    \        val n17 = (n16.toInt + p16.toInt) % p\n        val p17 = (p16.toInt +\
    \ n16.toInt) % p\n        val n18 = (n17.toInt + p17.toInt) % p\n        val p18\
    \ = (p17.toInt + n17.toInt) % p\n        val n19 = (n18.toInt + p18.toInt) % p\n\
    \        val p19 = (p18.toInt + n18.toInt) % \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6ubpmadd.scala:51:43 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mp19\e[0m = (p18.toInt +\
    \ n18.toInt) % \n\e[31m\e[31m   |\e[0m                                       \
    \    ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6ubpmadd.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n * n\n        val p2 = p * p\n        val n3 =\
    \ n2 * n2\n        val p3 = p2 * p2\n        val n4 = n3 * n3\n        val p4\
    \ = p3 * p3\n        val n5 = n4 * n4\n        val p5 = p4 * p4\n        val n6\
    \ = n5 * n5\n        val p6 = p5 * p5\n        val n7 = n6 * n6\n        val p7\
    \ = p6 * p6\n        val n8 = n7 * n7\n        val p8 = p7 * p7\n        val n9\
    \ = (n8 + p8) % p\n        val p9 = (p8 + n9) % p\n        val n10 = (n9 + p9)\
    \ % p\n        val p10 = (p9 + n10) % p\n        val n11 = (n10 + p10) % p\n \
    \       val p11 = (p10 + n11) % p\n        val n12 = (n11 + p11) % p\n       \
    \ val p12 = (p11 + n12) % p\n        val n13 = (n12 + p12) % p\n        val p13\
    \ = (p12 + n13) % p\n        val n14 = (n13 + p13) % p\n        val p14 = (p13\
    \ + n14) % p\n        val n15 = (n14 + p14) % p\n        val p15 = (p14 + n15)\
    \ % p\n        val n16 = (n15 + p15) % p\n        val p16 = (p15 + n16) % p\n\
    \        val n17 = (n16 + p16) % p\n        val p17 = (p16 + n17) % p\n      \
    \  val n18 = (n17 + p17) % p\n        val p18 = (p17 + n18) % p\n        val n19\
    \ = (n18 + p18) % p\n        val p19 = (p18 + n19) % p\n        val n20 = (n19\
    \ + p19) % p\n        val p20 = (p19 + n20) % p\n        val n21 = (n20 + p20)\
    \ % p\n        val p21 = (p20 + n21) % p\n        val n22 = (n21 + p21) % p\n\
    \        val p22 = (p21 + n22) % p\n        val n23 = (n22 + p22) % p\n      \
    \  val p23 = (p22 + n23) % p\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpx17dplnn.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx17dplnn.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) r else p + r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqqzhn3l8.scala:20)\n\tat Problem.main(tmpqqzhn3l8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val q = p.toInt\n        val r\
    \ = ((m % q) + q) % q\n        val s = r.toLong\n        val t = ((s % q) + q)\
    \ % q\n        val u = t.toLong\n        val v = ((u % q) + q) % q\n        val\
    \ w = ((v % q) + q) % q\n        val x = ((w % q) + q) % q\n        val y = ((x\
    \ % q) + q) % q\n        val z = ((y % q) + q) % q\n        val a = ((z % q) +\
    \ q) % q\n        val b = ((a % q) + q) % q\n        val c = ((b % q) + q) % q\n\
    \        val d = ((c % q) + q) % q\n        val e = ((d % q) + q) % q\n      \
    \  val f = ((e % q) + q) % q\n        val g = ((f % q) + q) % q\n        val h\
    \ = (g % q) + q\n        val i = h.toInt\n        val j = (i / q).toLong\n   \
    \     val k = (j % q).toLong\n        val l = (k % q).toLong\n        val m =\
    \ (l % q).toLong\n        val n = (m % q).toLong\n        val o = (n % q).toLong\n\
    \        val p = (o % q).toLong\n        val q = (p % q).toLong\n        val r\
    \ = (q % q).toLong\n        val s = (n % q).toLong\n        val t = (r % q).toLong\n\
    \        val u = (t % q).toLong\n        val v = (u % q).toLong\n        val w\
    \ = (v % q).toLong\n        val x = (w % q).toLong\n        val y = (x % q).toLong\n\
    \        val z = (y % q).toLong\n        val a = (z % q).toLong\n        val b\
    \ = (a % q).toLong\n        val c = (b % q).toLong\n        val d = (c % q).toLong\n\
    \        val e = (d % q).toLong\n        val f = (e % q).toLong\n        val g\
    \ = (f % q).toLong\n        val h = (g % q).toLong\n        val i = (h % q).toInt\n\
    \        val j = (i / q).toLong\n        val k = (j % q).toLong\n        val l\
    \ = (k % q).toLong\n        val m = (l % q).toLong\n        val n\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp3rwnu3b.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp3rwnu3b.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = (l % q).toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpp3rwnu3b.scala:43:12 ---------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m        \e[33mval\e[0m \e[36mq\e[0m = (p % q).toLong\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mq is already defined as\
    \ \e[33mvalue\e[0m \e[35mq\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpp3rwnu3b.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = (q % q).toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is\
    \ already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp3rwnu3b.scala:45:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m\
    \ \e[36ms\e[0m = (n % q).toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ms is already defined as \e[33mvalue\e[0m \e[35ms\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpp3rwnu3b.scala:46:12 ---------------------------\e[0m\e[0m\n\e[31m46\
    \ |\e[0m        \e[33mval\e[0m \e[36mt\e[0m = (r % q).toLong\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mt is already defined as\
    \ \e[33mvalue\e[0m \e[35mt\e[0m\n"
  stdout: ''
  timestamp: 1659800327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r - m\n        val r = r * r\n        val r = r + m\n        val r = r / r\n\
    \        r\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn08ga3e3.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn08ga3e3.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn08ga3e3.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn08ga3e3.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) r else p + r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqqzhn3l8.scala:20)\n\tat Problem.main(tmpqqzhn3l8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val r\
    \ = r - m\n        val r = r * r\n        val r = r + m\n        val r = r / r\n\
    \        val r = r * r\n        val r = r + m\n        val r = r / r\n       \
    \ r\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpogeoy_oq.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpogeoy_oq.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpogeoy_oq.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpogeoy_oq.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r / r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpogeoy_oq.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r * r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpogeoy_oq.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r + m\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n * n\n        val p2 = p * p\n        val n3 =\
    \ n2 * n2\n        val p3 = p2 * p2\n        val n4 = n3 * n3\n        val p4\
    \ = p3 * p3\n        val n5 = n4 * n4\n        val p5 = p4 * p4\n        val n6\
    \ = n5 * n5\n        val p6 = p5 * p5\n        val n7 = n6 * n6\n        val p7\
    \ = p6 * p6\n        val n8 = (n7 * n7) % p\n        val p8 = (p7 * p7) % p\n\
    \        val n9 = (n8 * n8) % p\n        val p9 = (p8 * p8) % p\n        val n10\
    \ = (n9 * n9) % p\n        val p10 = (p9 * p9) % p\n        val n11 = (n10 * n10)\
    \ % p\n        val p11 = (p10 * p10) % p\n        val n12 = (n11 * n11) % p\n\
    \        val p12 = (p11 * p11) % p\n        val n13 = (n12 * n12) % p\n      \
    \  val p13 = (p12 * p12) % p\n        val n14 = (n13 * n13) % p\n        val p14\
    \ = (p13 * p13) % p\n        val n15 = (n14 * n14) % p\n        val p15 = (p14\
    \ * p14) % p\n        val n16 = (n15 * n15) % p\n        val p16 = (p15 * p15)\
    \ % p\n        val n17 = (n16 * n16) % p\n        val p17 = (p16 * p16) % p\n\
    \        val n18 = (n17 * n17) % p\n        val p18 = (p17 * p17) % p\n      \
    \  val n19 = (n18 * n18) % p\n        val p19 = (p18 * p18) % p\n        val n20\
    \ = (n19 * n19) % p\n        val p20 = (p19 * p19) % p\n        val n21 = (n20\
    \ * n20) % p\n        val p21 = (p20 * p20) % p\n        val n22 = (n21 * n21)\
    \ % p\n        val p22 = (p21 * p21) % p\n        val n23 = (n22 * n22) % p\n\
    \        val p23 = (p22 * p\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbj42ezq8.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbj42ezq8.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val s\
    \ = m % r\n        if (s == 0) 1\n        else if (s == r) 0\n        else (n\
    \ - s)\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv4h_vckd.scala:24)\n\tat Problem.main(tmpv4h_vckd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val q = p.toInt\n        if (m\
    \ == 0) 1\n        else if (m == 1) 1\n        else if (m == q) 1\n        else\
    \ (n << q) % p\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzvg4cjbs.scala:24)\n\tat Problem.main(tmpzvg4cjbs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n1 = n % p\n        val n2 = n % p\n        val n3 =\
    \ n % p\n        val n4 = n % p\n        val n5 = n % p\n        val n6 = n %\
    \ p\n        val n7 = n % p\n        val n8 = n % p\n        val n9 = n % p\n\
    \        val n10 = n % p\n        val n11 = n % p\n        val n12 = n % p\n \
    \       val n13 = n % p\n        val n14 = n % p\n        val n15 = n % p\n  \
    \      val n16 = n % p\n        val n17 = n % p\n        val n18 = n % p\n   \
    \     val n19 = n % p\n        val n20 = n % p\n        val n21 = n % p\n    \
    \    val n22 = n % p\n        val n23 = n % p\n        val n24 = n % p\n     \
    \   val n25 = n % p\n        val n26 = n % p\n        val n27 = n % p\n      \
    \  val n28 = n % p\n        val n29 = n % p\n        val n30 = n % p\n       \
    \ val n31 = n % p\n        val n32 = n % p\n        val n33 = n % p\n        val\
    \ n34 = n % p\n        val n35 = n % p\n        val n36 = n % p\n        val n37\
    \ = n % p\n        val n38 = n % p\n        val n39 = n % p\n        val n40 =\
    \ n % p\n        val n41 = n % p\n        val n42 = n % p\n        val n43 = n\
    \ % p\n        val n44 = n % p\n        val n45 = n % p\n        val n46 = n %\
    \ p\n        val n47 = n % p\n        val n48 = n % p\n        val n49 = n % p\n\
    \        val n50 = n % p\n        val n51 = n % p\n        val n52 = n % p\n \
    \       val n53 = n % p\n        val n54 = n % p\n        val n55 = n % p\n  \
    \      val n56 = n % p\n        val n57 = n % p\n        val n58 = n % p\n   \
    \     val n59 = n % p\n        val n60 = n % p\n        val n61 = n % p\n    \
    \    val n62 = n % p\n        val n63 = n % p\n        val n64 = n % p\n     \
    \   val n65 = n % p\n        val n66 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplja_n151.scala:81:17 ---------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m        \e[33mval\e[0m \e[36mn66\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplja_n151.scala:82:5 ---------------------\e[0m\e[0m\n\e[31m82\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val q\
    \ = r - m\n        val r = r - m\n        val r = r - m\n        val r = r - m\n\
    \        val r = r - m\n        val r = r - m\n        val r = r - m\n       \
    \ val r = r - m\n        val r = r - m\n        val r = r - m\n        val r =\
    \ r - m\n        val r = r - m\n        val r = r - m\n        val r = r - m\n\
    \        val r = r - m\n        val r = r - m\n        val r = r - m\n       \
    \ val r = r - m\n        val r = r - m\n        val r = r - m\n        val r =\
    \ r - m\n        val r = r - m\n        val r = r - m\n        val r = r - m\n\
    \        val r = r - m\n        val r = r - m\n        val r = r - m\n       \
    \ val r = r - m\n        val r = r - m\n        val r = r - m\n        val r =\
    \ r - m\n        val r = r - m\n        val r = r - m\n        val r = r - m\n\
    \        val r = r - m\n        val r = r - m\n        val r = r - m\n       \
    \ val r = r - m\n        val r = r - m\n        val r = r - m\n        val r =\
    \ r - m\n        val r = r - m\n        val r = r - m\n        val r = r - m\n\
    \        val r = r - m\n        val r = r - m\n        val r = r - m\n       \
    \ val r = r - m\n        val r = r - m\n        val r = r - m\n        val r =\
    \ r - m\n        val r = r - m\n        val r = r - m\n        val r = r - m\n\
    \        val r = r - m\n        val r = r - m\n        val r = r - m\n       \
    \ val r = r - m\n        val r = r - m\n        val r = r - m\n        val r =\
    \ r - m\n        val r = r - m\n        val r = r - m\n        val r = r - m\n\
    \        val r = r - m\n        val r = r - m\n        val r = r - m\n       \
    \ val r = r - m\n        val r = r - m\n        val r = r - m\n        val r =\
    \ r - m\n        \n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpil8j4jpl.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpil8j4jpl.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpil8j4jpl.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpil8j4jpl.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpil8j4jpl.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpil8j4jpl.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - m\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val n2 = n.toInt\n        val p2 = p.toInt\n        val\
    \ n3 = n2 % p2\n        val p3 = p2 % n2\n        if (n3 == 0) p3\n        else\
    \ n3 + (p3 - n3)\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsb7_xpmn.scala:24)\n\tat Problem.main(tmpsb7_xpmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else (r +\
    \ p) % p\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph3_u378_.scala:22)\n\tat Problem.main(tmph3_u378_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val q = p.toInt\n        if (m\
    \ == 0) 1\n        else if (m == 1) 1\n        else if (m == q) 1\n        else\
    \ n % q\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2gpvvvmf.scala:25)\n\tat Problem.main(tmp2gpvvvmf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1l else r\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxowz65v2.scala:21)\n\tat Problem.main(tmpxowz65v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) r else p + r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqqzhn3l8.scala:20)\n\tat Problem.main(tmpqqzhn3l8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r < 0) r + p else r\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv31j0nim.scala:21)\n\tat Problem.main(tmpv31j0nim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n % p\n        if (r == 0) 1\n        else r\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mmay6a5.scala:22)\n\tat Problem.main(tmp6mmay6a5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val r = n.toInt\n        val m = p.toInt\n        val s\
    \ = (r + m) % m\n        if (s == 0) 1 else s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzol3xzxi.scala:23)\n\tat Problem.main(tmpzol3xzxi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        val m = n.toInt\n        val r = p.toInt\n        val q\
    \ = r - m\n        if (q < 0) q + m\n        else q\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5p1eoxy.scala:23)\n\tat Problem.main(tmpq5p1eoxy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800298
