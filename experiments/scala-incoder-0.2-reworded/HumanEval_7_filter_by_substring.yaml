name: HumanEval_7_filter_by_substring
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Filter an input list of strings only for ones that contain given substring\n\
  \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
  \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
  )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
  \ : List[String], substring : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
  \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
  xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\"\
  , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
  xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
  grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
  grunt\", \"prune\"))));\n    }\n\n}\n"
completions: ['        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(_ contains substring)', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(_ contains substring)', '        strings.filter(
    s => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter( s => s.contains(substring) )', '        strings.filter(_
    contains substring)', '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter( s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter( s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter( s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter( s => s.contains(substring)
    )', '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter( s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter( s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter( s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(_ contains substring)', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter( s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter( s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter( s => s.contains(substring) )', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(_ contains substring)', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter( s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter( s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(_
    contains substring)', '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter( s
    => s.contains(substring))']
stop_tokens:
- "\n    }\n"
