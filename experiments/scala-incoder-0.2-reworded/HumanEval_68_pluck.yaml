name: HumanEval_68_pluck
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"Given a list representing a branch of a tree that has non-negative integer\
  \ nodes\n    // your task is to pluck one of the nodes and return it.\n    // The\
  \ plucked node should be the node with the smallest even value.\n    // If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n    // The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n    // If there are no even values or the given list is empty, return\
  \ [].\n    // Example 1:\n    // >>> pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong)))\n\
  \    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n\
  \    // >>> pluck((List[Long]()))\n    // (List[Long]())\n    // Example 4:\n  \
  \  // >>> pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong,\
  \ 2l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong))\n    // Explanation: 0\
  \ is the smallest value, but  there are two zeros,\n    // so we will choose the\
  \ first zero, which has the smallest index.\n    // Constraints:\n    // * 1 <=\
  \ nodes.length <= 10000\n    // * 0 <= node.value\n    def pluck(arr : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n\
  \    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong,\
  \ 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong,\
  \ 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong,\
  \ 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong,\
  \ 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n\
  \    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val even = arr.filter(x => x % 2 == 0).toList\n        val\
    \ evenMin = even.min\n        val evenIndex = even.indexOf(evenMin)\n        val\
    \ evenMinIndex = evenIndex\n        val evenMinValue = evenMin\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        val evenMinValueIndex\
    \ = evenMinIndex\n        val evenMinValueIndex = evenMinIndex\n        ", " \
    \       val evens = arr.filter(x => x % 2 == 0).toList\n        val evensSorted\
    \ = evens.sortWith(_ < _)\n        val evenSmallest = evensSorted.head\n     \
    \   val evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue\
    \ = evenSmallest\n        val evenSmallestIndexList = evenSmallestIndex.toList\n\
    \        val evenSmallestValueList = evenSmallestValue.toList\n        if (evenSmallestIndexList.length\
    \ == 1) {\n            val evenSmallestIndexValue = evenSmallestIndexList(0)\n\
    \            val evenSmallestValueValue = evenSmallestValueList(0)\n         \
    \   val evenSmallestIndexIndexValue = evenSmallestIndexList(0)\n            val\
    \ evenSmallestValueIndexValue = evenSmallestValueList(0)\n            val evenSmallestIndexValueIndexValue\
    \ = evenSmallestIndexList(0)\n            val evenSmallestIndexValueIndexValue\
    \ = 0\n            val evenSmallestIndexValueIndexValueIndexValue = 0\n      \
    \      val evenSmallestIndexValueIndexValueIndexValueIndexValue = 0\n        \
    \    val evenSmallestIndexValueIndexValueIndexValueIndexValueIndexValue = 0\n\
    \            val evenSmallestIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = 0\n            val evenSmallestIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = 0\n            val evenSmallestIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = 0\n            val evenSmallestIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = 0\n            val evenSmallestIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = 0\n            val evenSmallestIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = 0\n            val evenSmallestIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = 0\n            val evenSmallestIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = 0\n            val evenSmallestIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = 0\n            val evenSmallestIndexValueIndexValueIndexValueIndexValueIndexValueIndex",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val smallest = evens.min\n\
    \        val index = evens.indexOf(smallest)\n        val result = List(smallest,\
    \ index)\n        if (evens.isEmpty) result\n        else pluck(arr.filter(_ !=\
    \ smallest))", "        val evens = arr.filter(x => x % 2 == 0)\n        val even\
    \ = evens.min\n        val index = evens.indexOf(even)\n        val smalest_value\
    \ = arr.filter(x => x % 2 == 0).min\n        val smalest_index = arr.indexOf(smalest_value)\n\
    \        val result = List(smalest_value, smalest_index)\n        if (evens.isEmpty)\
    \ result\n        else result", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).toList\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(x => x % 2 == 0).map(x => x -> index).toList\n\
    \        if (result.isEmpty) result else result", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val evenSmallest = evensSorted.head\n        val evenSmallestIndex\
    \ = evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest.toLong\n\
    \        val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        if (evenSmallestIndexList.isEmpty) {\n \
    \           evenSmallestIndexList.map(_ => evenSmallestValueList).filter(_ =>\
    \ _ != evenSmallestValue).headOption\n        } else {\n            evenSmallestIndexList.map(_\
    \ => evenSmallestValueList).filter(_ => _ == evenSmallestValue).headOption\n \
    \       }", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n\
    \        val even = evens.head\n        val index = evens.indexOf(even)\n    \
    \    val result = arr.filter(_ != even).sortBy(x => x).reverse\n        if (result.isEmpty)\
    \ Nil\n        else result.take(index).reverse", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).reverse\n        if (evens.isEmpty) List(arr.head.toLong)\n\
    \        else evens.takeWhile(x => x % 2 == 0).sortBy(x => x).reverse.head", " \
    \       val evens = arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = arr.indexOf(even)\n        val result = arr.filter(_ != even).toList\n\
    \        if (evens.isEmpty) result\n        else result.updated(index, even)",
  "        val even = arr.filter(_ % 2 == 0).toList\n        if (even.isEmpty) List()\n\
    \        else {\n            val smalest_value = even.min\n            val smalest_index\
    \ = even.indexOf(smalest_value)\n            val result = even.filter(_ == smalest_value).sortWith(_\
    \ < _).takeWhile(_ < smalest_index).reverse\n            even.filter(_ == smalest_value).sortWith(_\
    \ < _).takeWhile(_ < smalest_index).reverse ++ result\n        }", "        val\
    \ evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n        val even\
    \ = evens.head\n        val index = evens.indexOf(even)\n        val result =\
    \ arr.filter(_ == even).sortBy(x => x).reverse\n        if (result.isEmpty) List(even.toLong,\
    \ index.toLong)\n        else result.take(1).map(x => (x.toLong, index.toLong))",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val smallest = evens.min\n            val\
    \ index = evens.indexOf(smallest)\n            val result = List(smallest, index)\n\
    \            if (result.size == 2) result\n            else result.reverse\n \
    \       }", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val minEven = evens.min\n            val\
    \ minIndex = evens.indexOf(minEven)\n            val minEvenIndex = minIndex\n\
    \            val minEvenValue = minEven\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEven", "        val\
    \ evens = arr.filter(x => x % 2 == 0).toList\n        if (evens.isEmpty) List()\n\
    \        else {\n            val smallest = evens.min\n            val index =\
    \ evens.indexOf(smallest)\n            val result = List(smallest, index)\n  \
    \          if (result.length == 1) result else result\n        }", "        val\
    \ evens = arr.filter(x => x % 2 == 0).toList\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.compare(y))\n        val evensSortedIndex = evensSorted.zipWithIndex.toList\n\
    \        val smalestValue = evensSortedIndex.find(x => x._2._2 < evensSortedIndex.size)\n\
    \        val smalestIndex = evensSortedIndex.find(x => x._2._2 == evensSortedIndex.size)\n\
    \        val smalestValueAndIndex = smalestValue.get._1 -> smalestIndex.get._1\n\
    \        val smalestValueAndIndexList = smalestValueAndIndex.map(x => x._1 ->\
    \ x._2)\n        val smalestValueAndIndexListSorted = smalestValueAndIndexList.sortWith((x,\
    \ y) => x._1 < y._1)\n        val smalestValueAndIndexListSortedWithIndex = smalestValueAndIndexListSorted.map(x\
    \ => x._1 -> x._2)\n        val smalestValueAndIndexListSortedWithIndexSorted\
    \ = smalestValueAndIndexListSortedWithIndex.sortWith((x, y) => x._1 < y._1)\n\
    \        val smalestValueAndIndexListSortedWithIndexSortedWithIndex = smalestValueAndIndexListSortedWithIndexSortedWithIndex.map(x\
    \ => x._1 -> x._2)\n        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSorted\
    \ = smalestValueAndIndexListSortedWithIndexSortedWithIndexSorted.sortWith((x,\
    \ y) => x._1 < y._1)\n        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndex.map(x\
    \ => x._1 -> x._2)\n        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortWith((x,\
    \ y) => x._1 < y._1)\n        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.map(x\
    \ => x._1 -> x._2)\n        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = smalestValueAndIndex", "        val evens = arr.filter(_ % 2 == 0)\n     \
    \   val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_evens = evens.filter(_ == smalest_value)\n        if (smalest_evens.isEmpty)\
    \ Nil\n        else smalest_evens.take(smalest_index).toList", "        val evens\
    \ = arr.filter(x => x % 2 == 0).toList\n        if (evens.isEmpty) List()\n  \
    \      else {\n            val min = evens.min\n            val index = evens.indexOf(min)\n\
    \            val result = List(min, index)\n            if (evens.size == 1) result\n\
    \            else result :: pluck(arr.filter(_ != min))\n        }", "       \
    \ val evens = arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = arr.indexOf(even)\n        if (evens.isEmpty) {\n       \
    \     List[Long]()\n        } else {\n            List[Long](even, index)\n  \
    \      }", "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted\
    \ = evens.sortWith(_ < _)\n        val smallestEven = evensSorted.head\n     \
    \   val smallestEvenIndex = evensSorted.indexOf(0)\n        val index = smallestEvenIndex\n\
    \        val value = smallestEven\n        val result = List(value, index)\n \
    \       if (evensSorted.isEmpty) {\n            result\n        } else {\n   \
    \         val nextEven = evensSorted.drop(index + 1)\n            val nextEvenIndex\
    \ = nextEven.indexOf(0)\n            val nextEvenValue = nextEven.head\n     \
    \       val nextEvenIndex = nextEvenIndex + 1\n            val nextEvenValue =\
    \ nextEvenValue\n            val nextEvenIndex = nextEvenIndex + 1\n         \
    \   val nextEvenValue = nextEvenValue\n            val nextEvenIndex = nextEvenIndex\
    \ + 1\n            val nextEvenValue = nextEvenValue\n            val nextEvenIndex\
    \ = nextEvenIndex + 1\n            val nextEvenValue = nextEvenValue\n       \
    \     val nextEvenIndex = nextEvenIndex + 1\n            val nextEvenValue = nextEvenValue\n\
    \            val nextEvenIndex = nextEvenIndex + 1\n            val nextEvenValue\
    \ = nextEvenValue\n            val nextEvenIndex = nextEvenIndex + 1\n       \
    \     val nextEvenValue = nextEvenValue\n            val nextEvenIndex = nextEvenIndex\
    \ + 1\n            val nextEvenValue = nextEvenValue\n            val nextEvenIndex\
    \ = nextEvenIndex + 1\n            val nextEvenValue = nextEvenValue\n       \
    \     val nextEvenIndex = nextEvenIndex + 1\n            val nextEvenValue = nextEvenValue\n\
    \            val nextEvenIndex = nextEvenIndex + 1\n            val nextEvenValue\
    \ = nextEvenValue\n            val nextEvenIndex = nextEvenIndex + 1\n       \
    \     val nextEvenValue = nextEvenValue\n            val nextEvenIndex = nextEvenIndex\
    \ + 1\n            val nextEvenValue = nextEvenValue\n            val nextEvenIndex\
    \ = nextEvenIndex + 1\n            val nextEvenValue = nextEvenValue\n       \
    \     val nextEvenIndex = nextEvenIndex + 1\n            val nextEvenValue = nextEvenValue\n\
    \            val nextEvenIndex = nextEvenIndex + 1\n            val nextEvenValue\
    \ = nextEvenValue\n            val nextEvenIndex = nextEvenIndex + 1\n       \
    \     val nextEvenValue = nextEvenValue\n            val nextEvenIndex = nextEvenIndex\
    \ + 1\n            val nextEvenValue = nextEvenValue\n            val nextEvenIndex\
    \ = nextEvenIndex + 1\n            val nextEvenValue = nextEvenValue\n       \
    \     val nextEvenIndex = nextEvenIndex + 1\n            val nextEvenValue = nextEvenValue\n\
    \            val nextEvenIndex = nextEvenIndex + 1\n", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val evensSortedWithIndex = evensSorted.zipWithIndex.toList\n        val\
    \ smallestEven = evensSortedWithIndex.minBy(x => x._2)\n        val smallestEvenIndex\
    \ = evensSortedWithIndex.indexOf(smallestEven)\n        val smallestEvenValue\
    \ = smallestEven._1\n        val smallestEvenIndex = smallestEvenIndex.toLong\n\
    \        val smallestEvenValue = smallestEvenValue.toLong\n        val smallestEvenIndex\
    \ = smallestEvenIndex.toLong\n        val smallestEvenValue = smallestEvenValue.toLong\n\
    \        val smallestEvenIndex = smallestEvenIndex.toLong\n        val smallestEvenValue\
    \ = smallestEvenValue.toLong\n        val smallestEvenIndex = smallestEvenIndex.toLong\n\
    \        val smallestEvenValue = smallestEvenValue.toLong\n        val smallestEvenIndex\
    \ = smallestEvenIndex.toLong\n        val smallestEvenValue = smallestEvenValue.toLong\n\
    \        val smallestEvenIndex = smallestEvenIndex.toLong\n        val smallestEvenValue\
    \ = smallestEvenValue.toLong\n        val smallestEvenIndex = smallestEvenIndex.toLong\n\
    \        val smallestEvenValue = smallestEvenValue.toLong\n        val smallestEvenIndex\
    \ = smallestEvenIndex.toLong\n        val smallestEvenValue = smallestEvenValue.toLong\n\
    \        val smallestEvenIndex = smallestEvenIndex.toLong\n        val smallestEvenValue\
    \ = smallestEvenValue.toLong\n        val smallestEvenIndex = smallestEvenIndex.toLong\n\
    \        val smallestEvenValue = smallestEvenValue.toLong\n        val smallestEvenIndex\
    \ = smallestEvenIndex.toLong\n        val smallestEvenValue = smallestEvenValue.toLong\n\
    \        val smallestEvenIndex = smallestEvenIndex.toLong\n        val smallestEvenValue\
    \ = smallestEvenValue.toLong\n        val smallestEvenIndex = smallestEvenIndex.toLong\n\
    \        val smallestEvenValue = smallestEvenValue.toLong\n        val smallestEvenIndex\
    \ = smallestEvenIndex.toLong\n        val smallestEvenValue = smallestEvenValue.toLong\n\
    \        val smallestEvenIndex = smallestEvenIndex.toLong\n        val smallestEvenValue\
    \ = smallestEvenValue.toLong\n        val smallestEvenIndex = smallestEvenIndex.toLong\n\
    \        val smallestEvenValue = smallestEvenValue.to", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).reverse\n        val even = evens.head\n     \
    \   val index = evens.indexOf(0)\n        val result = arr.filter(_ == even).sortBy(x\
    \ => x).reverse\n        if (result.isEmpty) List()\n        else List(even, index)",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        val evensSorted\
    \ = evens.sortBy(x => x)\n        val evensSorted = evensSorted.takeWhile(x =>\
    \ x < arr.max)\n        val evensSorted = evensSorted.takeWhile(x => x < arr.max)\n\
    \        val evensSorted = evensSorted.takeWhile(x => x < arr.max)\n        val\
    \ evensSorted = evensSorted.takeWhile(x => x < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x < arr.max)\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x < arr.max)\n        val evensSorted = evensSorted.takeWhile(x => x < arr.max)\n\
    \        val evensSorted = evensSorted.takeWhile(x => x < arr.max)\n        val\
    \ evensSorted = evensSorted.takeWhile(x => x < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x < arr.max)\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x < arr.max)\n        val evensSorted = evensSorted.takeWhile(x => x < arr.max)\n\
    \        val evensSorted = evensSorted.takeWhile(x => x < arr.max)\n        val\
    \ evensSorted = evensSorted.takeWhile(x => x < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x < arr.max)\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x < arr.max)\n        val evensSorted = evensSorted.takeWhile(x => x < arr.max)\n\
    \        val evensSorted = evensSorted.takeWhile(x => x < arr.max)\n        val\
    \ evensSorted = evensSorted.takeWhile(x => x < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x < arr.max)\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x < arr.max)\n        val evensSorted = evensSorted.takeWhile(x => x < arr.max)\n\
    \        val evensSorted = evensSorted.takeWhile(x => x < arr.max)\n        val\
    \ evensSorted = evensSorted.takeWhile(x => x < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x < arr.max)\n        val evensSorted = evens",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val result = arr.filter(_ ==\
    \ even).toList\n        if (result.isEmpty) List()\n        else List(even, index)",
  "        val evens = arr.filter(_ % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith(_ < _)\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith(_ < _)\n  \
    \      val smallestEven = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val evensSorted = evens.sortWith(_ < _)\n        val smallestEven = evensSorted.head\n\
    \        val smallestEvenIndex = evensSorted.indexOf(0)\n        val evensSorted\
    \ = evens.sortWith(_ < _)\n        val smallestEven = evensSorted.head\n     \
    \   val smallestEvenIndex = evensSorted.indexOf(0)\n        val evensSorted =\
    \ evens.sortWith(_ < _)\n        val smallestEven = evensSorted.head\n       \
    \ val smallestEvenIndex = evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith(_ < _)\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith(_ < _)\n  \
    \      val smallestEven = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val evensSorted = evens.sortWith(_ < _)\n        val smallestEven = evensSorted.head\n\
    \        val smallestEvenIndex = evensSorted.indexOf(0)\n        val evensSorted\
    \ = evens.sortWith(_ < _)\n        val smallestEven = evensSorted.head\n     \
    \   val smallestEvenIndex = evensSorted.indexOf(0)\n        val evensSorted =\
    \ evens.sortWith(_ < _)\n        val smallestEven = evensSorted.head\n       \
    \ val smallestEvenIndex = evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val smallestEven = ", "        val evens = arr.filter(_ % 2 ==\
    \ 0).toList\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(_ == even).toList\n        if (result.isEmpty)\
    \ List()\n        else result.take(index).toList", "        val evens = arr.filter(_\
    \ % 2 == 0).toList\n        val smallest = evens.min\n        val index = evens.indexOf(smallest)\n\
    \        val result = arr.filter(_ == smallest).toList\n        if (result.isEmpty)\
    \ List()\n        else List(smallest, index)", "        val evens = arr.filter(_\
    \ % 2 == 0).sortBy(_ % 2).map(_ / 2)\n        val even = evens.head\n        val\
    \ index = evens.indexOf(0)\n        val result = arr.filter(_ % 2 == 0).sortBy(_\
    \ % 2).map(_ / 2).takeWhile(_ != even).take(index).toList\n        if (result.isEmpty)\
    \ Nil\n        else result", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        if (evens.isEmpty) List()\n        else {\n            val even = evens.min\n\
    \            val index = arr.indexOf(even)\n            List(even, index)\n  \
    \      }", "        val evens = arr.filter(x => x % 2 == 0).sorted\n        val\
    \ even = evens.head\n        val index = evens.indexOf(0)\n        val result\
    \ = arr.filter(_ != even).take(index).sorted\n        result.head", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexWhere(x => x == smalest_value)\n     \
    \   if (smalest_index == -1) arr.toList\n        else evens.take(smalest_index).filter(_\
    \ % 2 == 0).sortWith(_ < _).take(1).map(_ + smalest_value)", "        val even\
    \ = arr.filter(_ % 2 == 0).toList\n        val evenSorted = even.sortWith(_ <\
    \ _)\n        val evenSmallest = evenSorted.head\n        val evenSmallestIndex\
    \ = evenSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest\n    \
    \    val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        if (evenSmallestIndexList.length == 1) {\n\
    \            evenSmallestIndexList.head -> evenSmallestValueList\n        } else\
    \ if (evenSmallestIndexList.length == 0) {\n            evenSmallestIndexList\
    \ -> evenSmallestValueList\n        } else {\n            evenSmallestIndexList.head\
    \ -> evenSmallestValueList\n        }", "        val evens = arr.filter(_ % 2\
    \ == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(_ == even)\n        if (result.isEmpty) List()\n\
    \        else List(even, index)", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).toList\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(_ == even).toList\n        if (result.isEmpty)\
    \ Nil\n        else result.take(index).reverse", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val smalest_value = evens.head\n        val smalest_index\
    \ = evens.indexOf(0)\n        if (smalest_index > 0) {\n            val smalest_evens\
    \ = evens.take(smalest_index)\n            val smalest_evens_index = evens.indexOf(smalest_evens.min())\n\
    \            val smalest_evens_value = smalest_evens(smalest_evens_index)\n  \
    \          val smalest_evens_index = smalest_evens_index + 1\n            val\
    \ smalest_evens_value = smalest_evens_value.toLong\n            val smalest_evens_index\
    \ = smalest_evens_index + 1\n            val smalest_evens_value = smalest_evens_value.toLong\n\
    \            val smalest_evens_index = smalest_evens_index + 1\n            val\
    \ smalest_evens_value = smalest_evens_value.toLong\n            val smalest_evens_index\
    \ = smalest_evens_index + 1\n            val smalest_evens_value = smalest_evens_value.toLong\n\
    \            val smalest_evens_index = smalest_evens_index + 1\n            val\
    \ smalest_evens_value = smalest_evens_value.toLong\n            val smalest_evens_index\
    \ = smalest_evens_index + 1\n            val smalest_evens_value = smalest_evens_value.toLong\n\
    \            val smalest_evens_index = smalest_evens_index + 1\n            val\
    \ smalest_evens_value = smalest_evens_value.toLong\n            val smalest_evens_index\
    \ = smalest_evens_index + 1\n            val smalest_evens_value = smalest_evens_value.toLong\n\
    \            val smalest_evens_index = smalest_evens_index + 1\n            val\
    \ smalest_evens_value = smalest_evens_value.toLong\n            val smalest_evens_index\
    \ = smalest_evens_index + 1\n            val smalest_evens_value = smalest_evens_value.toLong\n\
    \            val smalest_evens_index = smalest_evens_index + 1\n            val\
    \ smalest_evens_value = smalest_evens_value.toLong\n            val smalest_evens_index\
    \ = smalest_evens_index + 1\n            val smalest_evens_value = smalest_evens_value.toLong\n\
    \            val smalest_evens_index = smalest_evens_index + 1\n            val ",
  "        val evens = arr.filter(_ % 2 == 0).toList\n        val smalest_value =\
    \ evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n      \
    \  val smalest_even = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_plus_1 = evens.indexOf(smalest_even) + 1\n   \
    \     val smalest_even_index_plus_2 = evens.indexOf(smalest_even) + 2\n      \
    \  val smalest_even_index_plus_3 = evens.indexOf(smalest_even) + 3\n        val\
    \ smalest_even_index_plus_4 = evens.indexOf(smalest_even) + 4\n        val smalest_even_index_plus_5\
    \ = evens.indexOf(smalest_even) + 5\n        val smalest_even_index_plus_6 = evens.indexOf(smalest_even)\
    \ + 6\n        val smalest_even_index_plus_7 = evens.indexOf(smalest_even) + 7\n\
    \        val smalest_even_index_plus_8 = evens.indexOf(smalest_even) + 8\n   \
    \     val smalest_even_index_plus_9 = evens.indexOf(smalest_even) + 9\n      \
    \  val smalest_even_index_plus_10 = evens.indexOf(smalest_even) + 10\n       \
    \ val smalest_even_index_plus_11 = evens.indexOf(smalest_even) + 11\n        val\
    \ smalest_even_index_plus_12 = evens.indexOf(smalest_even) + 12\n        val smalest_even_index_plus_13\
    \ = evens.indexOf(smalest_even) + 13\n        val smalest_even_index_plus_14 =\
    \ evens.indexOf(smalest_even) + 14\n        val smalest_even_index_plus_15 = evens.indexOf(smalest_even)\
    \ + 15\n        val smalest_even_index_plus_16 = evens.indexOf(smalest_even) +\
    \ 16\n        val smalest_even_index_plus_17 = evens.indexOf(smalest_even) + 17\n\
    \        val smalest_even_index_plus_18 = evens.indexOf(smalest_even) + 18\n \
    \       val smalest_even_index_plus_19 = evens.indexOf(smalest_even) + 19\n  \
    \      val smalest_even_index_plus_20 = evens.indexOf(smalest_even) + 20\n   \
    \     val smalest_even_index_plus_21 = evens.indexOf(smalest_even) + 21\n    \
    \    val smalest_even_index_plus_22 = evens.indexOf(smalest_even) + 22\n     \
    \   val smalest_even_index_plus_23 = evens.indexOf(smalest_even) + ", "      \
    \  val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n   \
    \     val index = evens.indexOf(even)\n        val result = arr.filter(_ == even).take(index).toList\n\
    \        if (result.isEmpty) Nil\n        else result", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        val even = evens.min\n        val index = arr.indexOf(even)\n\
    \        val result = arr.filter(_ != even)\n        if (result.isEmpty) List()\n\
    \        else List(even, index)", "        val even = arr.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(_ < arr.last).map(x => x).reverse\n        if (even.isEmpty)\
    \ Nil\n        else even.head", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).toList\n        val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val evenSmallest = evensSorted.head\n        val evenSmallestIndex =\
    \ evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest.toLong\n\
    \        val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        if (evenSmallestIndexList.length == 1) {\n\
    \            evenSmallestIndexList\n        } else {\n            val evenSmallestIndexListSorted\
    \ = evenSmallestIndexList.sortWith((x, y) => x.toLong < y.toLong)\n          \
    \  val evenSmallestValueListSorted = evenSmallestValueList.sortWith((x, y) =>\
    \ x.toLong < y.toLong)\n            evenSmallestIndexListSorted.head\n       \
    \ }", "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted\
    \ = evens.sortWith((x, y) => x.toLong < y.toLong)\n        val smallestEven =\
    \ evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n \
    \       val smallestEvenValue = smallestEven.toLong\n        val result = arr.filter(_\
    \ == smallestEvenValue)\n        if (result.isEmpty) {\n            List()\n \
    \       } else {\n            val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \            val smallestEvenValue = smallestEven.toLong\n            val result\
    \ = arr.filter(_ == smallestEvenValue)\n            val index = arr.indexOf(0)\n\
    \            val value = arr.filter(_ == smallestEvenValue).head\n           \
    \ val resultList = List(smallestEvenValue, index)\n            resultList\n  \
    \      }", "        val evens = arr.filter(x => x % 2 == 0).toList\n        val\
    \ even = evens.min\n        val index = evens.indexOf(even)\n        val result\
    \ = arr.filter(_ == even).sortWith(_ < _).take(index).toList\n        if (result.isEmpty)\
    \ List()\n        else result", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val evenSmallest = evensSorted.head\n        val evenSmallestIndex =\
    \ evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest.toLong\n\
    \        val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        val evenSmallestIndexListSorted = evenSmallestIndexList.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestValueListSorted = evenSmallestValueList.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestValueListSortedReversed\
    \ = evenSmallestValueListSorted.reverse\n        val evenSmallestValueListSortedReversedSorted\
    \ = evenSmallestValueListSortedReversed.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val evenSmallestValueListSortedReversedSortedReversed = evenSmallestValueListSortedReversedSorted.reverse\n\
    \        val evenSmallestValueListSortedReversedSortedReversedSorted = evenSmallestValueListSortedReversedSortedReversed.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestValueListSortedReversedSortedReversedSortedReversed\
    \ = evenSmallestValueListSortedReversedSortedReversedSorted.reverse\n        val\
    \ evenSmallestValueListSortedReversedSortedReversedSortedReversedSorted = evenSmallestValueListSortedReversedSortedReversedSortedReversed.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestValueListSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = evenSmallestValueListSortedReversedSortedReversedSortedReversedSortedReversed.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestValueListSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = evenSmallestValueListSortedReversedSortedReversedSortedReversedSortedReversedSorted.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestValueListSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = evenSmallestValueListSorted", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).sortBy(x => x)\n        val smallest = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result = (smallest :: arr.filterNot(x => x == smallest)).toList\n\
    \        if (result.isEmpty) result\n        else result", "        val evens\
    \ = arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n       \
    \ val index = evens.indexOf(even)\n        val result = arr.filter(_ == even).toList\n\
    \        if (result.isEmpty) List()\n        else List(even, index)", "      \
    \  val evens = arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val result = arr.filter(x =>\
    \ x % 2 == 0).take(index).map(x => x % 2 == 0).map(x => x % 2 == 0).filter(x =>\
    \ x == 0).take(1).map(x => x % 2 == 0).map(x => x % 2 == 0).filter(x => x == 0).take(1).map(x\
    \ => x % 2 == 0).map(x => x % 2 == 0).filter(x => x == 0).take(1).map(x => x %\
    \ 2 == 0).map(x => x % 2 == 0).filter(x => x == 0).take(1).map(x => x % 2 == 0).map(x\
    \ => x % 2 == 0).filter(x => x == 0).take(1).map(x => x % 2 == 0).map(x => x %\
    \ 2 == 0).filter(x => x == 0).take(1).map(x => x % 2 == 0).map(x => x % 2 == 0).filter(x\
    \ => x == 0).take(1).map(x => x % 2 == 0).map(x => x % 2 == 0).filter(x => x ==\
    \ 0).take(1).map(x => x % 2 == 0).map(x => x % 2 == 0).filter(x => x == 0).take(1).map(x\
    \ => x % 2 == 0).map(x => x % 2 == 0).filter(x => x == 0).take(1).map(x => x %\
    \ 2 == 0).map(x => x % 2 == 0).filter(x => x == 0).take(1).map(x => x % 2 == 0).map(x\
    \ => x % 2 == 0).filter(x => x == 0).take(1).map(x => x % 2 == 0).map(x => x %\
    \ 2 == 0).filter(x => x == 0).take(1).map(x => x % 2 == 0).map(x => x % 2 == 0).filter(x\
    \ => x == 0).take(1).map(x => x % 2 == 0).map(x => x % 2 == 0).filter(x => x ==\
    \ 0).take(1).map(x => x % 2 == 0).map(x => x % 2 == 0).filter(x => x == 0).take(1).map(x\
    \ => x % 2 == 0).map(x => x % 2 == 0).filter(x => x == 0).take(1).map(x => x %\
    \ 2 == 0).map(x => x % 2 == 0).filter(x => x == 0).take(1).map(x => x % 2 == 0).map(x\
    \ => x % 2 == 0).filter(x => x == 0).take(1).map(x => x % 2 == 0).map(x => x %\
    \ 2 == 0).filter(x => x == 0).take(1).map(x => x % 2 == 0).map(x => x % 2 == 0).filter(x\
    \ => x == 0).take(1).map(x => ", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val evenSmallest = evensSorted.head\n        val evenSmallestIndex =\
    \ evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest.toLong\n\
    \        val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        if (evenSmallestIndexList.isEmpty) {\n \
    \           List[Long]()\n        } else if (evenSmallestValueList.isEmpty) {\n\
    \            List[Long](evenSmallestValue)\n        } else {\n            List[Long](evenSmallestValue,\
    \ evenSmallestIndexList(0))\n        }", "        val evens = arr.filter(x =>\
    \ x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val evensSortedIndex = evensSorted.zipWithIndex.toList\n        val smallestEven\
    \ = evensSortedIndex.find(x => x._1.toLong == evensSortedIndex.minBy(x => x._1.toLong)._1.toLong).get._1\n\
    \        val smallestEvenIndex = evensSortedIndex.find(x => x._1.toLong == evensSortedIndex.minBy(x\
    \ => x._1.toLong)._1.toLong).get._2\n        val smallestEvenValue = evensSortedIndex.find(x\
    \ => x._1.toLong == evensSortedIndex.minBy(x => x._1.toLong)._1.toLong).get._1.toLong\n\
    \        val smallestEvenIndex = evensSortedIndex.find(x => x._1.toLong == evensSortedIndex.minBy(x\
    \ => x._1.toLong)._1.toLong).get._2\n        val smallestEvenValue = evensSortedIndex.find(x\
    \ => x._1.toLong == evensSortedIndex.minBy(x => x._1.toLong)._1.toLong).get._1.toLong\n\
    \        val smallestEvenIndex = evensSortedIndex.find(x => x._1.toLong == evensSortedIndex.minBy(x\
    \ => x._1.toLong)._1.toLong).get._2\n        val smallestEvenValue = evensSortedIndex.find(x\
    \ => x._1.toLong == evensSortedIndex.minBy(x => x._1.toLong)._1.toLong).get._1.toLong\n\
    \        val smallestEvenIndex = evensSortedIndex.find(x => x._1.toLong == evensSortedIndex.minBy(x\
    \ => x._1.toLong)._1.toLong).get._2\n        val smallestEvenValue = evensSortedIndex.find(x\
    \ => x._1.toLong == evensSortedIndex.minBy(x => x._1.toLong)._1.toLong).get._1.toLong\n\
    \        val smallestEvenIndex = evensSortedIndex.find(x => x._1.toLong == evensSortedIndex.minBy(x\
    \ => x._1.toLong)._1.toLong).get._2\n        val smallestEvenValue = evensSortedIndex.find(x\
    \ => x._1.toLong == evensSorted", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).sorted\n        val even = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result = arr.filter(x => x % 2 == 0 && x != even).sorted\n      \
    \  if (result.isEmpty) Nil\n        else result.take(index).map(x => (x, index))",
  "        val even = arr.filter(x => x % 2 == 0).toList\n        if (even.isEmpty)\
    \ List()\n        else {\n            val smalest_value = even.min\n         \
    \   val smalest_index = even.indexOf(smalest_value)\n            val smalest_even_value\
    \ = smalest_value % 2\n            val smalest_even_index = smalest_index\n  \
    \          val smalest_even_value_index = smalest_even_value\n            val\
    \ smalest_even_value_index_list = even.filter(x => x % 2 == smalest_even_value_index).toList\n\
    \            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val smalest_even_value_index_list = smalest_even_value_index_list.minBy(x\
    \ => x)\n            val ", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x)\n        val smallest = evens.head\n        val index = evens.indexOf(smallest)\n\
    \        val result = List(smallest, index)\n        if (evens.isEmpty) result\n\
    \        else pluck(arr.filterNot(x => x % 2 == 0).sortBy(x => x))", "       \
    \ val evens = arr.filter(x => x % 2 == 0).toList\n        val smallest = evens.min\n\
    \        val index = evens.indexOf(smallest)\n        val result: List[Long] =\
    \ if (index == -1) Nil else List(smallest, index)\n        result", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.compare(y))\n        val evensSortedWithIndex = evensSorted.zipWithIndex\n\
    \        val smallestEven = evensSortedWithIndex.minBy(_._1)\n        val smallestEvenValue\
    \ = smallestEven._1\n        val smallestEvenIndex = smallestEven._2\n       \
    \ val smallestEvenIndexValue = evensSortedWithIndex.minBy(_._2)._2\n        val\
    \ smallestEvenIndexValueIndex = evensSortedWithIndex.minBy(_._2)._2\n        val\
    \ smallestEvenIndexValueIndexValue = evensSortedWithIndex.minBy(_._2)._2\n   \
    \     val smallestEvenIndexValueIndexValueIndex = evensSortedWithIndex.minBy(_._2)._2\n\
    \        val smallestEvenIndexValueIndexValueIndexValue = evensSortedWithIndex.minBy(_._2)._2\n\
    \        val smallestEvenIndexValueIndexValueIndexValueIndex = evensSortedWithIndex.minBy(_._2)._2\n\
    \        val smallestEvenIndexValueIndexValueIndexValueIndexValue = evensSortedWithIndex.minBy(_._2)._2\n\
    \        val smallestEvenIndexValueIndexValueIndexValueIndexValueIndex = evensSortedWithIndex.minBy(_._2)._2\n\
    \        val smallestEvenIndexValueIndexValueIndexValueIndexValueIndexValue =\
    \ evensSortedWithIndex.minBy(_._2)._2\n        val smallestEvenIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = evensSortedWithIndex.minBy(_._2)._2\n        val smallestEvenIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = evensSortedWithIndex.minBy(_._2)._2\n        val smallestEvenIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = evensSortedWithIndex.minBy(_._2)._2\n        val smallestEvenIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = evensSortedWithIndex.minBy(_._2)._2\n        val smallestEvenIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = evensSortedWithIndex.minBy(_._2)._2\n        val smallestEvenIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = evensSortedWithIndex.minBy(_._2)._2\n        val smallestEvenIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue",
  "        val evens = arr.filter(_ % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val evenSmallest = evensSorted.head\n        val evenSmallestIndex\
    \ = evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest\n   \
    \     val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        val evenSmallestIndexListLength = evenSmallestIndexList.length\n\
    \        val evenSmallestValueListLength = evenSmallestValueList.length\n    \
    \    val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexList",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallest = evensSorted.head\n  \
    \      val evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue\
    \ = evenSmallest.toLong\n        val evenSmallestIndexList = evenSmallestIndex.toList\n\
    \        val evenSmallestValueList = evenSmallestValue.toList\n        if (evenSmallestIndexList.length\
    \ == 0)\n            evenSmallestIndexList\n        else if (evenSmallestValueList.length\
    \ == 0)\n            evenSmallestValueList\n        else\n            evenSmallestValueList\
    \ :: evenSmallestIndexList", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val evensSorted = evens.sortWith(_ < _)\n        val evenSmallest = evensSorted.head\n\
    \        val evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue\
    \ = evenSmallest\n        val evenSmallestIndexList = evenSmallestIndex.toList\n\
    \        val evenSmallestValueList = evenSmallestValue.toList\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexList.length\n        val evenSmallestValueListLength = evenSmallestValueList.length\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSm", "        val evens = arr.filter(x => x % 2 == 0).toList\n        val\
    \ even = evens.min\n        val index = arr.indexOf(even)\n        val result\
    \ = arr.filter(_ != even)\n        if (result.isEmpty) List(even, index)\n   \
    \     else List(even, index)", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val even = evens.min\n        val index = arr.indexOf(even)\n       \
    \ arr.take(index).filter(_ % 2 == 0).min", "        val evens = arr.filter(x =>\
    \ x % 2 == 0).toList\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_evens = evens.take(smalest_index)\n\
    \        val smalest_evens_index = evens.indexOf(smalest_evens)\n        val smalest_evens_value\
    \ = smalest_evens.min\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n      \
    \  val smalest_evens_index = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n      \
    \  val smalest_evens_index = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n      \
    \  val smalest_evens_index = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n      \
    \  val smalest_evens_index = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n      \
    \  val smalest_evens_index = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n      \
    \  val smalest_evens_index = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index\
    \ = evens.indexOf(", "        val evens = arr.filter(_ % 2 == 0).toList\n    \
    \    val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even = evens(smalest_index)\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val smallest = evens.head\n            val\
    \ index = evens.indexOf(smallest)\n            List(smallest, index)\n       \
    \ }", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x)\n      \
    \  val even = evens.head\n        val index = evens.indexOf(0)\n        val result\
    \ = arr.filter(_ == even)\n        if (result.isEmpty) Nil\n        else result.sortBy(x\
    \ => x).take(1).map(x => (x, index))", "        val evens = arr.filter(x => x\
    \ % 2 == 0).toList\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_index_plus_one\
    \ = smalest_even_index + 1\n        val smalest_even_index_plus_two = smalest_even_index\
    \ + 2\n        val smalest_even_index_plus_three = smalest_even_index + 3\n  \
    \      val smalest_even_index_plus_four = smalest_even_index + 4\n        val\
    \ smalest_even_index_plus_five = smalest_even_index + 5\n        val smalest_even_index_plus_six\
    \ = smalest_even_index + 6\n        val smalest_even_index_plus_seven = smalest_even_index\
    \ + 7\n        val smalest_even_index_plus_eight = smalest_even_index + 8\n  \
    \      val smalest_even_index_plus_nine = smalest_even_index + 9\n        val\
    \ smalest_even_index_plus_ten = smalest_even_index + 10\n        val smalest_even_index_plus_eleven\
    \ = smalest_even_index + 11\n        val smalest_even_index_plus_twelve = smalest_even_index\
    \ + 12\n        val smalest_even_index_plus_thirteen = smalest_even_index + 13\n\
    \        val smalest_even_index_plus_fourteen = smalest_even_index + 14\n    \
    \    val smalest_even_index_plus_fifteen = smalest_even_index + 15\n        val\
    \ smalest_even_index_plus_sixteen = smalest_even_index + 16\n        val smalest_even_index_plus_seventeen\
    \ = smalest_even_index + 17\n        val smalest_even_index_plus_eighteen = smalest_even_index\
    \ + 18\n        val smalest_even_index_plus_nineteen = smalest_even_index + 19\n\
    \        val smalest_even_index_plus_twenty = smalest_even_index + 20\n      \
    \  val smalest_even_index_plus_twenty_one = smalest_even_index + 21\n        val\
    \ smalest_even_index_plus_twenty_two = smalest_even_index + 22\n        val smalest_even_index_plus_twenty_three\
    \ = smalest_even_index + 23\n        val sm", "        val even = arr.filter(_\
    \ % 2 == 0).toList\n        val evenIndex = even.indexOf(0)\n        if (evenIndex\
    \ == -1) {\n            even.headOption.toList\n        } else {\n           \
    \ even.take(evenIndex).toList\n        }", "        val evens = arr.filter(_ %\
    \ 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val smalest_value = evens.take(index).min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_evens = evens.take(smalest_index).filter(_\
    \ % 2 == 0)\n        if (smalest_evens.isEmpty) List(smalest_value, smalest_index)\n\
    \        else List(smalest_value, smalest_index, smalest_evens)", "        val\
    \ evens = arr.filter(x => x % 2 == 0).toList\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        if (smalest_index\
    \ == -1) {\n            evens\n        } else {\n            evens.take(smalest_index).reverse\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x)\n\
    \        if (evens.isEmpty) List()\n        else {\n            val smallest =\
    \ evens.head\n            val index = evens.indexWhere(x => x == smallest)\n \
    \           List(smallest, index)\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(x => x % 2 == 0).map(x => (x, index)).toList\n\
    \        if (result.isEmpty) result\n        else result.sortBy(_._1).head", " \
    \       val evens = arr.filter(x => x % 2 == 0).toList\n        val evensSorted\
    \ = evens.sortWith((x, y) => x.toLong < y.toLong)\n        val smallestEven =\
    \ evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n \
    \       val smallestEvenValue = smallestEven.toLong\n        val evensSorted =\
    \ evens.sortWith((x, y) => x.toLong < y.toLong)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evensSorted = evens.sortWith((x, y)\
    \ => x.toLong < y.toLong)\n        val evensSorted = evens.sortWith((x, y) =>\
    \ x.toLong < y.toLong)\n        val evensSorted = evens.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n   \
    \     val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n      \
    \  val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n        val evensSorted\
    \ = evens.sortWith((x, y) => x.toLong < y.toLong)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evensSorted = evens.sortWith((x, y)\
    \ => x.toLong < y.toLong)\n        val evensSorted = evens.sortWith((x, y) =>\
    \ x.toLong < y.toLong)\n        val evensSorted = evens.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n   \
    \     val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n      \
    \  val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong", "        val evens\
    \ = arr.filter(x => x % 2 == 0).toList\n        val smallestEven = evens.min\n\
    \        val index = evens.indexOf(smallestEven)\n        val result = arr.filter(_\
    \ == smallestEven).take(index)\n        result.isEmpty() match {\n           \
    \ case true => List()\n            case false => result\n        }", "       \
    \ val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n    \
    \    val index = evens.indexOf(even)\n        val result = arr.filter(_ == even)\n\
    \        if (result.isEmpty) List()\n        else List(even, index)", "      \
    \  val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallest = evensSorted.head\n  \
    \      val evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue\
    \ = evenSmallest.toLong\n        val evenSmallestIndexList = evenSmallestIndex.toList.sorted\n\
    \        val evenSmallestValueList = evenSmallestValue.toList.sorted\n       \
    \ val evenSmallestIndexListLength = evenSmallestIndexList.length\n        val\
    \ evenSmallestValueListLength = evenSmallestValueList.length\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmalle",
  "        val evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = evens.indexOf(0)\n        if (evens.isEmpty) {\n        \
    \    List[Long]()\n        } else if (index == 0) {\n            List[Long](even)\n\
    \        } else {\n            List[Long](even, index)\n        }", "        val\
    \ evens = arr.filter(x => x % 2 == 0).toList\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_in_list = smalest_even_index\n        val smalest_even_index_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list)\n        val smalest_even_index_in_list_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list_in_list)\n        val smalest_even_index_in_list_in_list_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list_in_list_in_list)\n        val smalest_even_index_in_list_in_list_in_list_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list_in_list_in_list_in_list)\n      \
    \  val smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list = evens.indexOf(smalest_even_index_in_list_in_list_in_list_in_list_in_list)\n\
    \        val smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list)\n\
    \        val smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list)\n\
    \        val smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list)\n\
    \        val smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list)\n\
    \        val smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list)\n\
    \        val smale", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val even = evens.min\n        val index = evens.indexOf(even)\n     \
    \   val result = arr.filter(_ == even)\n        if (result.isEmpty) List()\n \
    \       else result.take(index).toList", "        val evens = arr.filter(x =>\
    \ x % 2 == 0).toList\n        val even = evens.min\n        val index = arr.indexOf(even)\n\
    \        val result = arr.filter(_ != even)\n        if (result.isEmpty) List(even.toLong)\n\
    \        else List(even.toLong, index)", "        val evens = arr.filter(x =>\
    \ x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val evenSmallest = evensSorted.head\n        val evenSmallestIndex =\
    \ evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest.toLong\n\
    \        val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        val evenSmallestIndexListLength = evenSmallestIndexList.length\n\
    \        val evenSmallestValueListLength = evenSmallestValueList.length\n    \
    \    val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValue", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x)\n        val even = evens.head\n        val index\
    \ = arr.indexOf(even)\n        val result = List(even, index)\n        if (evens.isEmpty)\
    \ result\n        else result.reverse", "        val evens = arr.filter(x => x\
    \ % 2 == 0).sortBy(x => x)\n        val even = evens.head\n        val index =\
    \ evens.indexOf(0)\n        val result = List(even, index)\n        if (evens.isEmpty)\
    \ result\n        else pluck(arr.drop(index))", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        if (smalest_index == -1) {\n       \
    \     List[Long]()\n        } else {\n            evens.take(smalest_index).map(x\
    \ => (x, smalest_index)).toList\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).reverse\n        val smallest = evens.head\n \
    \       val index = evens.indexOf(0)\n        if (evens.isEmpty) {\n         \
    \   List[Long]()\n        } else if (evens.size == 1) {\n            List[Long](smallest)\n\
    \        } else {\n            List[Long](smallest, index)\n        }", "    \
    \    val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n        val\
    \ even = evens.head\n        val index = evens.indexOf(even)\n        val result\
    \ = List(even, index)\n        if (arr.isEmpty) result\n        else result.sortBy(x\
    \ => x).reverse", "        val evens = arr.filter(x => x % 2 == 0).toList\n  \
    \      val evensSorted = evens.sortWith((x, y) => x.compare(y))\n        val evenSmallest\
    \ = evensSorted.head\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest\n        val evenSmallestIndexList\
    \ = evenSmallestIndex.toList\n        val evenSmallestValueList = evenSmallestValue.toList\n\
    \        if (evenSmallestIndexList.length == 1) {\n            val evenSmallestIndexListLength\
    \ = evenSmallestIndexList.length\n            val evenSmallestValueListLength\
    \ = evenSmallestValueList.length\n            if (evenSmallestIndexListLength\
    \ == 1) {\n                if (evenSmallestValueListLength == 1) {\n         \
    \           val evenSmallestIndexListLength = evenSmallestIndexListLength\n  \
    \                  val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                    if (evenSmallestIndexListLength == 1) {\n               \
    \         val evenSmallestIndexListLength = evenSmallestIndexListLength\n    \
    \                    val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                        if (evenSmallestIndexListLength == 1) {\n           \
    \                 val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                            val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                            if (evenSmallestIndexListLength == 1) {\n       \
    \                         val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                                val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                                if (evenSmallestIndexListLength == 1) {\n   \
    \                                 val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                                    val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                                    if (evenSmallestIndexListLength == 1) {\n\
    \                                        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                                        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                                        if (evenSmallestIndexListLength == 1)\
    \ {\n                                            val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n                                            val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n                \
    \                            if (evenSmallestIndexListLength == 1) {\n       \
    \                                         val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                                                val evenSmalle", "        val\
    \ evens = arr.filter(_ % 2 == 0).toList\n        if(evens.isEmpty) List()\n  \
    \      else if(evens.size == 1) List(evens.head)\n        else {\n           \
    \ val even = evens.min\n            val index = arr.indexWhere(_ == even)\n  \
    \          List(even, index)\n        }", "        val evens = arr.filter(_ %\
    \ 2 == 0).toList\n        if (evens.isEmpty) List()\n        else evens.minBy(_\
    \ % 2 == 0).get", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ smallest = evens.min\n        val index = evens.indexOf(smallest)\n        val\
    \ result = arr.filter(_ == smallest).take(index).toList\n        if (result.isEmpty)\
    \ result else result :: Nil", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val smallestEven = evens.min\n        val index = arr.indexOf(smallestEven)\n\
    \        val result = if (index == -1) Nil else List(smallestEven, index)\n  \
    \      return result", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        if (evens.isEmpty) List()\n        else {\n            val smallest =\
    \ evens.min\n            val index = arr.indexOf(smallest)\n            List(smallest,\
    \ index)\n        }", "        val evens = arr.filter(x => x % 2 == 0).sorted\n\
    \        val even = evens.head\n        val index = evens.indexOf(0)\n       \
    \ val smalest_value = evens.takeWhile(x => x != even).min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_even = evens.takeWhile(x\
    \ => x != smalest_value).min\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_even = evens.takeWhile(x => x != smalest_even).min\n\
    \        val smalest_even_even_index = evens.indexOf(smalest_even_even)\n    \
    \    val smalest_even_even_even = evens.takeWhile(x => x != smalest_even_even).min\n\
    \        val smalest_even_even_even_index = evens.indexOf(smalest_even_even_even)\n\
    \        val smalest_even_even_even_even = evens.takeWhile(x => x != smalest_even_even_even).min\n\
    \        val smalest_even_even_even_even_index = evens.indexOf(smalest_even_even_even_even)\n\
    \        val smalest_even_even_even_even_even = evens.takeWhile(x => x != smalest_even_even_even_even).min\n\
    \        val smalest_even_even_even_even_even_index = evens.indexOf(smalest_even_even_even_even_even)\n\
    \        val smalest_even_even_even_even_even_even = evens.takeWhile(x => x !=\
    \ smalest_even_even_even_even_even).min\n        val smalest_even_even_even_even_even_even_index\
    \ = evens.indexOf(smalest_even_even_even_even_even_even)\n        val smalest_even_even_even_even_even_even_even\
    \ = evens.takeWhile(x => x != smalest_even_even_even_even_even_even).min\n   \
    \     val smalest_even_even_even_even_even_even_even_index = evens.indexOf(smalest_even_even_even_even_even_even_even)\n\
    \        val smalest_even_even_even_even_even_even_even_even", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) List()\n        else\
    \ {\n            val even = evens.min\n            val index = arr.indexOf(even)\n\
    \            val result = List(even, index)\n            if (arr.contains(even))\
    \ result :+ arr.indexOf(even)\n            else result\n        }", "        val\
    \ even = arr.filter(x => x % 2 == 0).sorted\n        if (even.isEmpty) List()\n\
    \        else {\n            val smalest_value = even.head\n            val smalest_index\
    \ = even.indexOf(0)\n            val index = even.indexOf(smalest_value)\n   \
    \         if (index == -1) List()\n            else {\n                val result\
    \ = even.take(index).sorted\n                if (result.size == smalest_index)\
    \ List(smalest_value, smalest_index)\n                else result\n          \
    \  }\n        }", "        val evens = arr.filter(_ % 2 == 0).toList\n       \
    \ val even = evens.min\n        val index = evens.indexOf(even)\n        val result\
    \ = arr.filter(_ == even).toList\n        if (result.isEmpty) List()\n       \
    \ else List(even, index)", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_evens = evens.filter(x => x % 2 == 0)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_value)\n        val smalest_evens_value = smalest_evens(smalest_evens_index)\n\
    \        if (smalest_evens_index > 0) {\n            smalest_evens_index\n   \
    \     } else {\n            smalest_value\n        }", "        val evens = arr.filter(_\
    \ % 2 == 0).toList\n        val smallest = evens.min\n        val index = arr.indexOf(smallest)\n\
    \        val result = arr.filter(_ == smallest).take(index).toList\n        if\
    \ (result.isEmpty) Nil\n        else result", "        val even = arr.filter(x\
    \ => x % 2 == 0).sortWith((x, y) => x.compare(y))\n        if (even.isEmpty) List()\n\
    \        else {\n            val smalest_value = even(0)\n            val smalest_index\
    \ = even.indexWhere(x => x == smalest_value)\n            val result = even.takeWhile(x\
    \ => x != smalest_value).takeWhile(x => x != smalest_index).sortWith((x, y) =>\
    \ x.compare(y))\n            if (result.isEmpty) List()\n            else List(smalest_value,\
    \ smalest_index)\n        }", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x).reverse\n        val smallest = evens.head\n        val index = evens.indexOf(smallest)\n\
    \        val result = evens.takeWhile(x => x != smallest).take(index).reverse\n\
    \        if (result.isEmpty) result else List(smallest, index)", "        val\
    \ evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result = arr.filter(x => x\
    \ % 2 == 0).map(x => (x, index)).toList\n        if (result.isEmpty) result\n\
    \        else result", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val even = evens.min\n        val index = evens.indexOf(even)\n     \
    \   val result = arr.filter(_ == even)\n        if (result.isEmpty) List()\n \
    \       else List(even, index)", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).toList\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_index\
    \ = smalest_even_index.min(evens.indexOf(_))\n        val smalest_even_value =\
    \ evens(smalest_even_index)\n        val smalest_even_value_index = evens.indexOf(smalest_even_value)\n\
    \        val smalest_even_value_index = smalest_even_value_index.min(evens.indexOf(_))\n\
    \        val smalest_even_value_value = evens(smalest_even_value_index)\n    \
    \    val smalest_even_value_value_index = evens.indexOf(smalest_even_value_value)\n\
    \        val smalest_even_value_value_index = smalest_even_value_value_index.min(evens.indexOf(_))\n\
    \        val smalest_even_value_value_value = evens(smalest_even_value_value_index)\n\
    \        val smalest_even_value_value_index = evens.indexOf(smalest_even_value_value)\n\
    \        val smalest_even_value_value_index = smalest_even_value_value_index.min(evens.indexOf(_))\n\
    \        val smalest_even_value_value_value = evens(smalest_even_value_value_index)\n\
    \        val smalest_even_value_value_index = evens.indexOf(smalest_even_value_value)\n\
    \        val smalest_even_value_value_index = smalest_even_value_value_index.min(evens.indexOf(_))\n\
    \        val smalest_even_value_value_value = evens(smalest_even_value_value_index)\n\
    \        val smalest_even_value_value_index = evens.indexOf(smalest_even_value_value)\n\
    \        val smalest_even_value_value_index = smalest_even_value_value_index.min(evens.indexOf(_))\n\
    \        val smalest_even_value_value_value = evens(smalest_even_value_value_index)\n\
    \        val smalest_even_value_value_index = evens.indexOf(smalest_even_value_value)\n\
    \        val smalest_even_value_value_index = smalest_even_value_value_index.min(evens.indexOf(_))\n\
    \        val smalest_even_value_value_value = evens(smalest_even_value_value_index)\n\
    \        val smalest_even_value_value_index = evens.indexOf(smalest_even_value_value)\n\
    \        val smalest_even_value_value_index = smalest_even_value_value_index.min(evens.indexOf(_))",
  "        val evens = arr.filter(_ % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = arr.indexOf(even)\n        val result = arr.filter(_ == even).toList\n\
    \        if (result.isEmpty) List(even, index)\n        else result.sortWith((a,\
    \ b) => a.toLong < b.toLong).head", "        val evens = arr.filter(x => x % 2\
    \ == 0)\n        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_evens = evens.take(smalest_index)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens)\n        val smalest_evens_index_plus_one = smalest_evens_index\
    \ + 1\n        val smalest_evens_index_plus_two = smalest_evens_index_plus_one\
    \ + 2\n        val smalest_evens_index_plus_three = smalest_evens_index_plus_two\
    \ + 2\n        val smalest_evens_index_plus_four = smalest_evens_index_plus_three\
    \ + 2\n        val smalest_evens_index_plus_five = smalest_evens_index_plus_four\
    \ + 2\n        val smalest_evens_index_plus_six = smalest_evens_index_plus_five\
    \ + 2\n        val smalest_evens_index_plus_seven = smalest_evens_index_plus_six\
    \ + 2\n        val smalest_evens_index_plus_eight = smalest_evens_index_plus_seven\
    \ + 2\n        val smalest_evens_index_plus_nine = smalest_evens_index_plus_eight\
    \ + 2\n        val smalest_evens_index_plus_ten = smalest_evens_index_plus_nine\
    \ + 2\n        val smalest_evens_index_plus_eleven = smalest_evens_index_plus_ten\
    \ + 2\n        val smalest_evens_index_plus_twelve = smalest_evens_index_plus_eleven\
    \ + 2\n        val smalest_evens_index_plus_thirteen = smalest_evens_index_plus_twelve\
    \ + 2\n        val smalest_evens_index_plus_fourteen = smalest_evens_index_plus_thirteen\
    \ + 2\n        val smalest_evens_index_plus_fifteen = smalest_evens_index_plus_fourteen\
    \ + 2\n        val smalest_evens_index_plus_sixteen = smalest_evens_index_plus_fifteen\
    \ + 2\n        val smalest_evens_index_plus_seventeen = smalest_evens_index_plus_sixteen\
    \ + 2\n        val smalest_evens_index_plus_eighteen = smalest_evens_index_plus_seventeen\
    \ + 2\n        val smalest_evens_index_plus_nineteen = smale", "        val evens\
    \ = arr.filter(x => x % 2 == 0).toList\n        if (evens.isEmpty) List()\n  \
    \      else {\n            val minIndex = evens.minBy(x => x)\n            val\
    \ minValue = evens(minIndex)\n            val minIndexList = evens.filter(x =>\
    \ x == minIndex).toList\n            val minIndexListSize = minIndexList.length\n\
    \            val minIndexListIndex = minIndexList.indexOf(minValue)\n        \
    \    val minIndexListValue = (minIndexListSize - minIndexListIndex) + minIndex\n\
    \            val minIndexListIndex = minIndexListIndex.toLong\n            val\
    \ minIndexListValue = minIndexListValue.toLong\n            val minIndexListValue\
    \ = minIndexListValue.toLong\n            val minIndexListValue = minIndexListValue.toLong\n\
    \            val minIndexListValue = minIndexListValue.toLong\n            val\
    \ minIndexListValue = minIndexListValue.toLong\n            val minIndexListValue\
    \ = minIndexListValue.toLong\n            val minIndexListValue = minIndexListValue.toLong\n\
    \            val minIndexListValue = minIndexListValue.toLong\n            val\
    \ minIndexListValue = minIndexListValue.toLong\n            val minIndexListValue\
    \ = minIndexListValue.toLong\n            val minIndexListValue = minIndexListValue.toLong\n\
    \            val minIndexListValue = minIndexListValue.toLong\n            val\
    \ minIndexListValue = minIndexListValue.toLong\n            val minIndexListValue\
    \ = minIndexListValue.toLong\n            val minIndexListValue = minIndexListValue.toLong\n\
    \            val minIndexListValue = minIndexListValue.toLong\n            val\
    \ minIndexListValue = minIndexListValue.toLong\n            val minIndexListValue\
    \ = minIndexListValue.toLong\n            val minIndexListValue = minIndexListValue.toLong\n\
    \            val minIndexListValue = minIndexListValue.toLong\n            val\
    \ minIndexListValue = minIndexListValue.toLong\n            val minIndexListValue\
    \ = minIndexListValue.toLong\n            val minIndexListValue = minIndexListValue.toLong\n\
    \            val minIndexListValue = minIndexListValue.toLong\n            val\
    \ minIndexListValue = minIndexListValue.toLong\n            val minIndexListValue\
    \ = minIndexListValue.toLong\n            val minIndexListValue = minIndexListValue.toLong\n\
    \            val minIndexListValue = minIndexListValue.toLong\n            val\
    \ minIndexListValue = minIndexListValue.toLong\n            val minIndexListValue\
    \ = minIndexListValue.toLong\n            val minIndex", "        val evens =\
    \ arr.filter(x => x % 2 == 0).toList\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        if (smalest_index\
    \ > -1) {\n            val smalest_even = evens(smalest_index)\n            val\
    \ smalest_even_index = evens.indexOf(smalest_even)\n            if (smalest_even_index\
    \ > -1) {\n                val smalest_even_value = evens(smalest_even_index)\n\
    \                val smalest_even_index_list = evens.filter(_ == smalest_even_value).toList\n\
    \                val smalest_even_index_list_index = smalest_even_index_list.indexOf(smalest_index)\n\
    \                if (smalest_even_index_list_index > -1) {\n                 \
    \   val smalest_even_index_list_value = smalest_even_index_list(smalest_even_index_list_index)\n\
    \                    val smalest_even_index_list_value_list = evens.filter(_ ==\
    \ smalest_even_index_list_value).toList\n                    val smalest_even_index_list_value_index_list\
    \ = smalest_even_index_list_value_list.indexOf(smalest_index)\n              \
    \      if (smalest_even_index_list_value_index_list > -1) {\n                \
    \        val smalest_even_index_list_value_index_list_value = smalest_even_index_list_value_index_list(smalest_even_index_list_value_index_list)\n\
    \                        val smalest_even_index_list_value_index_list_value_list\
    \ = evens.filter(_ == smalest_even_index_list_value_index_list_value).toList\n\
    \                        val smalest_even_index_list_value_index_list_value_index_list\
    \ = smalest_even_index_list_value_index_list_value_list.indexOf(smalest_index)\n\
    \                        if (smalest_even_index_list_value_index_list_value_index_list\
    \ > -1) {\n                            val smalest_even_index_list_value_index_list_value_index_list_value\
    \ = smalest_even_index_list_value_index_list_value_index_list(smalest_even_index_list_value_index_list_value_index_list)\n\
    \                            val smalest_even_index_list_value_index_list_value_index_list_value_list\
    \ = evens.filter(_ == smalest_even_index_list_value_index_list_value_index_list_value).toList\n\
    \                            val smalest_even_index_list_value_index_list_value_index_list_value_index_list\
    \ = smalest_even_index_list_value_index_list_value_index_list_value_list.indexOf(smalest_index)\n\
    \                            if (smalest_even_index_list_value_index_list_value_index_list_value_index_list_value_index_list\
    \ > -1) {\n                                val smalest_even_index_list_value_index_list_value_index_list_value_index_list_value_index_list_value\
    \ = smalest_even_index_", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n   \
    \     val evensSortedIndex = evensSorted.zipWithIndex.toList\n        val evensSortedIndexSorted\
    \ = evensSortedIndex.sortWith((x, y) => x._1 < y._1)\n        val evensSortedIndexSortedIndex\
    \ = evensSortedIndexSorted.zipWithIndex.toList\n        val smalestValue = evensSortedIndexSortedIndex.head._2\n\
    \        val smalestIndex = evensSortedIndexSortedIndex.head._1\n        val smalestValueIndex\
    \ = evensSortedIndexSorted.find(x => x._1 == smalestValue).get._2\n        val\
    \ smalestValueIndexList = evensSortedIndexSorted.find(x => x._1 == smalestValue).get._1\n\
    \        val smalestValueIndexList2 = evensSortedIndexSortedIndex.find(x => x._1\
    \ == smalestValue).get._1\n        val smalestValueIndexList3 = evensSortedIndexSortedIndex.find(x\
    \ => x._1 == smalestValue).get._2\n        val smalestValueIndexList4 = evensSortedIndexSortedIndex.find(x\
    \ => x._1 == smalestValue).get._3\n        val smalestValueIndexList5 = evensSortedIndexSortedIndex.find(x\
    \ => x._1 == smalestValue).get._4\n        val smalestValueIndexList6 = evensSortedIndexSortedIndex.find(x\
    \ => x._1 == smalestValue).get._5\n        val smalestValueIndexList7 = evensSortedIndexSortedIndex.find(x\
    \ => x._1 == smalestValue).get._6\n        val smalestValueIndexList8 = evensSortedIndexSortedIndex.find(x\
    \ => x._1 == smalestValue).get._7\n        val smalestValueIndexList9 = evensSortedIndexSortedIndex.find(x\
    \ => x._1 == smalestValue).get._8\n        val smalestValueIndexList10 = evensSortedIndexSortedIndex.find(x\
    \ => x._1 == smalestValue).get._9\n        val smalestValueIndexList11 = evensSortedIndexSortedIndex.find(x\
    \ => x._1 == smalestValue).get._10\n        val smalestValueIndexList12 = evensSortedIndexSortedIndex.find(x\
    \ => x._1 == smalest", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x).reverse\n        if (evens.isEmpty) List()\n        else {\n         \
    \   val smallest = evens.head\n            val index = evens.indexOf(smallest)\n\
    \            val result = List(smallest, index)\n            if (evens.tail.forall(x\
    \ => x % 2 == 0)) result ::: List(smallest, evens.indexOf((smallest + 1).toLong))\n\
    \            else result\n        }", "        val evens = arr.filter(x => x %\
    \ 2 == 0).sortBy(x => x).map(x => x.toLong)\n        val even = evens.head\n \
    \       val index = evens.indexOf(even)\n        val result = arr.filter(x =>\
    \ x % 2 == 0).sortBy(x => x).map(x => x.toLong).takeWhile(x => x != even).toList\n\
    \        if (result.isEmpty) result else (List(even, index), result)", "     \
    \   val evens = arr.filter(_ % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = arr.indexOf(even)\n        val result = arr.filter(_ == even)\n\
    \        if (result.isEmpty) Nil\n        else result.take(index).toList", " \
    \       val even = arr.filter(x => x % 2 == 0).sortBy(x => x).takeWhile(x => x\
    \ < arr.last).map(x => x).reverse\n        if (even.isEmpty) List()\n        else\
    \ even.takeWhile(x => x < arr.last).map(x => x).reverse", "        val evens =\
    \ arr.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n        if (evens.isEmpty) List(arr.head.toLong)\n\
    \        else evens.takeWhile(_ % 2 == 0).sortBy(_ % 2).reverse.head", "     \
    \   val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallest = evensSorted.head\n  \
    \      val evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue\
    \ = evenSmallest.toLong\n        val evenSmallestIndexList = evenSmallestIndex.toList\n\
    \        val evenSmallestValueList = evenSmallestValue.toList\n        if (evenSmallestIndexList.length\
    \ == 1) {\n            evenSmallestIndexList.head -> evenSmallestValueList\n \
    \       } else if (evenSmallestIndexList.length > 1) {\n            evenSmallestIndexList.head\
    \ -> evenSmallestValueList\n        } else {\n            evenSmallestIndexList\
    \ -> evenSmallestValueList\n        }", "        val evens = arr.filter(x => x\
    \ % 2 == 0).sortBy(x => x).reverse\n        val even = evens.head\n        val\
    \ index = evens.indexOf(0)\n        val result = List(even, index)\n        if\
    \ (evens.isEmpty) result\n        else result.reverse", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).map(x => x.toLong)\n        val smallest = evens.head\n\
    \        val index = evens.indexOf(smallest)\n        val result = if (index ==\
    \ -1) List(smallest) else evens.take(index).sortBy(x => x).map(x => x.toLong)\n\
    \        result", "        val evens = arr.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        if (evens.isEmpty) Nil\n        else {\n            val smallest = evens.head\n\
    \            val index = evens.indexWhere(_ == smallest)\n            val result\
    \ = List(smallest, index)\n            if (evens.tail.forall(x => x % 2 == 0))\
    \ result ::: pluck(evens.tail)\n            else result\n        }", "       \
    \ val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val smalest_value = evensSorted.head\n \
    \       val smalest_index = evensSorted.indexOf(0)\n        val smalest_evens\
    \ = evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evens.sortWith((x, y) => x.toLong < y.toLong)\n        val smalest_evensSorted_index\
    \ = smalest_evensSorted.indexOf(0)\n        val smalest_evensSorted_value = smalest_evensSorted.head\n\
    \        val smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n    \
    \    val smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n        val\
    \ smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n        val smalest_evensSorted_index\
    \ = smalest_evensSorted.indexOf(0)\n        val smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n\
    \        val smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n    \
    \    val smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n        val\
    \ smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n        val smalest_evensSorted_index\
    \ = smalest_evensSorted.indexOf(0)\n        val smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n\
    \        val smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n    \
    \    val smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n        val\
    \ smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n        val smalest_evensSorted_index\
    \ = smalest_evensSorted.indexOf(0)\n        val smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n\
    \        val smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n    \
    \    val smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n        val\
    \ smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n        val ", " \
    \       val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val smallestEven = evensSorted.head\n  \
    \      val smallestEvenIndex = evensSorted.indexOf(0)\n        val smallestEvenValue\
    \ = smallestEven.toLong\n        val smallestEvenIndex = evensSorted.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n    \
    \    val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n        val\
    \ smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue\
    \ = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n    \
    \    val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n        val\
    \ smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue\
    \ = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n    \
    \    val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n        val\
    \ smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue\
    \ = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n    \
    \    val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n        val\
    \ smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue\
    \ = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n    \
    \    val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n        val\
    \ smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue\
    \ = evensSorted.indexOf(smallestEvenValue)\n        val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n\
    \        val smallestEvenValue = evensSorted.indexOf(smallestEvenValue)\n    \
    \    val smallestEvenValue = evens", "        val evens = arr.filter(x => x %\
    \ 2 == 0).sortBy(x => x)\n        val even = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result = List(even, index)\n        if (evens.isEmpty) result\n \
    \       else result.reverse", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val even = evens.min\n        val index = evens.indexOf(even)\n     \
    \   val result = arr.filter(_ == even).toList\n        if (result.isEmpty) List()\n\
    \        else List(even, index)", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).toList\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index_list = evens.filter(_ == smalest_value)\n\
    \        val smalest_even_index_list = smalest_even_index_list.sortWith(_ < _)\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.toList\n        val\
    \ smalest_even_index_list = smalest_even_index_list.sortWith(_ < _)\n        val\
    \ smalest_even_index_list = smalest_even_index_list.take(1)\n        val smalest_even_index_list\
    \ = smalest_even_index_list.toList\n        val smalest_even_index_list = smalest_even_index_list.sortWith(_\
    \ < _)\n        val smalest_even_index_list = smalest_even_index_list.take(1)\n\
    \        val smalest_even_index_list = smalest_even_index_list.toList\n      \
    \  val smalest_even_index_list = smalest_even_index_list.sortWith(_ < _)\n   \
    \     val smalest_even_index_list = smalest_even_index_list.take(1)\n        val\
    \ smalest_even_index_list = smalest_even_index_list.toList\n        val smalest_even_index_list\
    \ = smalest_even_index_list.sortWith(_ < _)\n        val smalest_even_index_list\
    \ = smalest_even_index_list.take(1)\n        val smalest_even_index_list = smalest_even_index_list.toList\n\
    \        val smalest_even_index_list = smalest_even_index_list.sortWith(_ < _)\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.toList\n        val\
    \ smalest_even_index_list = smalest_even_index_list.sortWith(_ < _)\n        val\
    \ smalest_even_index_list = smalest_even_index_list.take(1)\n        val smalest_even_index_list\
    \ = smalest_even_index_list.toList\n        val smalest_even_index_list = smalest_even_index_list.sortWith(_\
    \ < _)\n        val smalest_even_index_list = smalest_", "        val evens =\
    \ arr.filter(x => x % 2 == 0)\n        val even = evens.min\n        val index\
    \ = evens.indexOf(even)\n        val result = arr.filter(_ != even).take(index)\n\
    \        result.sortWith((x, y) => x.toLong < y.toLong)", "        val evens =\
    \ arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y)\
    \ => x.compare(y))\n        val evenSmallest = evensSorted.head\n        val evenSmallestIndex\
    \ = evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest\n   \
    \     val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        if (evenSmallestIndexList.length == 1) {\n\
    \            evenSmallestValueList :+ evenSmallestValue\n        } else {\n  \
    \          val evenSmallestIndexListSorted = evenSmallestIndexList.sortWith((x,\
    \ y) => x.compare(y))\n            val evenSmallestValueListSorted = evenSmallestValueList.sortWith((x,\
    \ y) => x.compare(y))\n            evenSmallestValueListSorted.take(evenSmallestIndexListSorted.length)\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).map(x\
    \ => x.toLong)\n        val even = evens.head\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(x => x % 2 == 0).sortBy(x => x).map(x => x.toLong).takeWhile(x\
    \ => x != even).take(index).map(x => x.toLong)\n        if (result.isEmpty) result\
    \ else result", "        val evens = arr.filter(x => x % 2 == 0).toList\n    \
    \    val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n       \
    \ val evensSortedWithIndex = evensSorted.zipWithIndex\n        val smallestEven\
    \ = evensSortedWithIndex.head._1\n        val smallestEvenIndex = evensSortedWithIndex.head._2\n\
    \        val evensSortedWithoutSmallestEven = evensSorted.filterNot(x => x ==\
    \ smallestEven)\n        val evensSortedWithoutSmallestEvenWithIndex = evensSortedWithoutSmallestEven.zipWithIndex\n\
    \        val smallestEvenWithoutSmallestEven = evensSortedWithoutSmallestEvenWithIndex.head._1\n\
    \        val smallestEvenWithoutSmallestEvenIndex = evensSortedWithoutSmallestEvenWithIndex.head._2\n\
    \        val evensSortedWithoutSmallestEvenWithoutSmallestEven = evensSortedWithoutSmallestEven.filterNot(x\
    \ => x == smallestEvenWithoutSmallestEven)\n        val evensSortedWithoutSmallestEvenWithoutSmallestEvenWithIndex\
    \ = evensSortedWithoutSmallestEvenWithoutSmallestEven.zipWithIndex\n        val\
    \ smallestEvenWithoutSmallestEvenWithoutSmallestEven = evensSortedWithoutSmallestEvenWithoutSmallestEvenWithIndex.head._1\n\
    \        val smallestEvenWithoutSmallestEvenWithoutSmallestEvenIndex = evensSortedWithoutSmallestEvenWithoutSmallestEvenWithIndex.head._2\n\
    \        val evensSortedWithoutSmallestEvenWithoutSmallestEvenWithoutSmallestEven\
    \ = evensSortedWithoutSmallestEvenWithoutSmallestEven.filterNot(x => x == smallestEvenWithoutSmallestEvenWithoutSmallestEven)\n\
    \        val evensSortedWithoutSmallestEvenWithoutSmallestEvenWithoutSmallestEvenWithIndex\
    \ = evensSortedWithoutSmallestEvenWithoutSmallestEvenWithoutSmallestEven.zipWithIndex\n\
    \        val smallestEvenWithoutSmallestEvenWithoutSmallestEvenWithoutSmallestEven\
    \ = evensSortedWithoutSmallestEvenWithoutSmallestEvenWithoutSmallestEvenWithIndex.head._1\n\
    \        val smallestEvenWithoutSmallestEvenWithoutSmallestEvenWithoutSmallestEvenIndex\
    \ = evensSortedWithoutSmallestEvenWithout", "        val evens = arr.filter(_\
    \ % 2 == 0).sortBy(_).reverse\n        val smalest_value = evens.head\n      \
    \  val smalest_index = evens.indexOf(0)\n        if (evens.isEmpty) List()\n \
    \       else evens.take(smalest_index).map(x => (x, smalest_index)).sortBy(_._1).reverse",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOfMin\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_value\
    \ = evens(smalest_even_index)\n        val smalest_even_index_list = evens.toList.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.toList(sm", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sortBy(x => x).map(x => x.toLong)\n        if\
    \ (evens.isEmpty) List()\n        else {\n            val smallest = evens.head\n\
    \            val index = evens.indexOf(smallest)\n            if (index == 0)\
    \ List()\n            else List(smallest, index)\n        }", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sortBy(x => x)\n        val smalest_value = evens.head\n\
    \        val smalest_index = evens.indexWhere(x => x == smalest_value)\n     \
    \   if (smalest_index == -1)\n            evens\n        else\n            evens.take(smalest_index).sortBy(x\
    \ => x).reverse", "        val evens = arr.filter(x => x % 2 == 0).toList\n  \
    \      val even = evens.min\n        val index = evens.indexOf(even)\n       \
    \ val result = arr.filter(x => x % 2 == 0).map(x => x -> index).toList\n     \
    \   if (result.isEmpty) result else result", "        val evens = arr.filter(_\
    \ % 2 == 0).toList\n        val smallest = evens.min\n        val index = evens.indexOf(smallest)\n\
    \        val result = if (index == -1) Nil else List(smallest, index)\n      \
    \  result", "        val evens = arr.filter(x => x % 2 == 0).toList\n        val\
    \ even = evens.min\n        val index = arr.indexOf(even)\n        val evenIndex\
    \ = arr.indexOf(even, index + 1)\n        val evenValue = evens(evenIndex)\n \
    \       val evenIndexList = evenIndex.map(x => arr(x))\n        val evenIndexList2\
    \ = evenIndexList.map(x => arr(x))\n        val evenIndexList3 = evenIndexList2.map(x\
    \ => arr(x))\n        val evenIndexList4 = evenIndexList3.map(x => arr(x))\n \
    \       val evenIndexList5 = evenIndexList4.map(x => arr(x))\n        val evenIndexList6\
    \ = evenIndexList5.map(x => arr(x))\n        val evenIndexList7 = evenIndexList6.map(x\
    \ => arr(x))\n        val evenIndexList8 = evenIndexList7.map(x => arr(x))\n \
    \       val evenIndexList9 = evenIndexList8.map(x => arr(x))\n        val evenIndexList10\
    \ = evenIndexList9.map(x => arr(x))\n        val evenIndexList11 = evenIndexList10.map(x\
    \ => arr(x))\n        val evenIndexList12 = evenIndexList11.map(x => arr(x))\n\
    \        val evenIndexList13 = evenIndexList12.map(x => arr(x))\n        val evenIndexList14\
    \ = evenIndexList13.map(x => arr(x))\n        val evenIndexList15 = evenIndexList14.map(x\
    \ => arr(x))\n        val evenIndexList16 = evenIndexList15.map(x => arr(x))\n\
    \        val evenIndexList17 = evenIndexList16.map(x => arr(x))\n        val evenIndexList18\
    \ = evenIndexList17.map(x => arr(x))\n        val evenIndexList19 = evenIndexList18.map(x\
    \ => arr(x))\n        val evenIndexList20 = evenIndexList19.map(x => arr(x))\n\
    \        val evenIndexList21 = evenIndexList20.map(x => arr(x))\n        val evenIndexList22\
    \ = evenIndexList21.map(x => arr(x))\n        val evenIndexList23 = evenIndexList22.map(x\
    \ => arr(x))\n        val evenIndexList24 = evenIndexList23.map(x => arr(x))\n\
    \        val evenIndexList25 = evenIndexList24.map(x => arr(x))\n        val evenIndexList26\
    \ = evenIndexList25.map(x => arr(x))\n        val evenIndexList27 = evenIndexList26.map(x\
    \ => arr(x))\n        val evenIndexList28 = evenIndexList27.map(x => arr(x))\n",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        val evensSorted\
    \ = evens.sortWith((x, y) => x.compare(y))\n        val evensSortedWithIndex =\
    \ evensSorted.zipWithIndex\n        val smallestEven = evensSortedWithIndex.minBy(x\
    \ => x._2)\n        val smallestEvenIndex = evensSortedWithIndex.indexOf(smallestEven)\n\
    \        val smallestEvenValue = smallestEven._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex.toLong\n        val smallestEvenValue = smallestEvenValue.toLong\n\
    \        val smallestEvenIndex = smallestEvenIndex.toLong\n        val smallestEvenValue\
    \ = smallestEvenValue.toLong\n        val smallestEvenIndex = smallestEvenIndex.toLong\n\
    \        val smallestEvenValue = smallestEvenValue.toLong\n        val smallestEvenIndex\
    \ = smallestEvenIndex.toLong\n        val smallestEvenValue = smallestEvenValue.toLong\n\
    \        val smallestEvenIndex = smallestEvenIndex.toLong\n        val smallestEvenValue\
    \ = smallestEvenValue.toLong\n        val smallestEvenIndex = smallestEvenIndex.toLong\n\
    \        val smallestEvenValue = smallestEvenValue.toLong\n        val smallestEvenIndex\
    \ = smallestEvenIndex.toLong\n        val smallestEvenValue = smallestEvenValue.toLong\n\
    \        val smallestEvenIndex = smallestEvenIndex.toLong\n        val smallestEvenValue\
    \ = smallestEvenValue.toLong\n        val smallestEvenIndex = smallestEvenIndex.toLong\n\
    \        val smallestEvenValue = smallestEvenValue.toLong\n        val smallestEvenIndex\
    \ = smallestEvenIndex.toLong\n        val smallestEvenValue = smallestEvenValue.toLong\n\
    \        val smallestEvenIndex = smallestEvenIndex.toLong\n        val smallestEvenValue\
    \ = smallestEvenValue.toLong\n        val smallestEvenIndex = smallestEvenIndex.toLong\n\
    \        val smallestEvenValue = smallestEvenValue.toLong\n        val smallestEvenIndex\
    \ = smallestEvenIndex.toLong\n        val smallestEvenValue = smallestEvenValue.toLong\n\
    \        val smallestEvenIndex = smallestEvenIndex.toLong\n        val smallestEvenValue\
    \ = smallestEvenValue.toLong\n        val smallestEvenIndex = smallestEvenIndex.toLong\n\
    \        val smallestEvenValue = smallestEvenValue.toLong\n        val smallestEvenIndex\
    \ = smallestEvenIndex.toLong\n        val smallestEvenValue = smallestEvenValue.to",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val result = arr.filter(_ !=\
    \ even).toList\n        if (result.isEmpty) List()\n        else List(even, index)",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = arr.indexOf(even)\n        val evenList = arr.filter(x =>\
    \ x % 2 == 0).take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take(index).toList\n\
    \        val evenList = evens.take(index).toList\n        val evenList = evens.take",
  "        val evens = arr.filter(_ % 2 == 0).toList\n        if (evens.isEmpty) Nil\n\
    \        else {\n            val smalest_value = evens.min\n            val smalest_index\
    \ = evens.indexOf(smalest_value)\n            val evens_with_smallest_index =\
    \ evens.filter(_ == smalest_value)\n            val smalest_value_with_smallest_index\
    \ = evens_with_smallest_index.min\n            val smalest_index_with_smallest_index\
    \ = evens_with_smallest_index.indexOf(smalest_value_with_smallest_index)\n   \
    \         val smalest_value_with_smallest_index_as_a_list = evens_with_smallest_index.map(x\
    \ => x.toLong).toList\n            smalest_value_with_smallest_index_as_a_list\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted\
    \ = evens.sortWith((x, y) => x.toLong < y.toLong)\n        val evenSmallest =\
    \ evensSorted.head\n        val evenSmallestIndex = evensSorted.indexOf(0)\n \
    \       val evenSmallestValue = evenSmallest.toLong\n        val evenSmallestIndexList\
    \ = evenSmallestIndex.toList\n        val evenSmallestValueList = evenSmallestValue.toList\n\
    \        if (evenSmallestIndexList.isEmpty || evenSmallestValueList.isEmpty) {\n\
    \            List[Long]()\n        } else {\n            evenSmallestIndexList.map(x\
    \ => evenSmallestValueList(x))\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).reverse\n        val even = evens.head\n     \
    \   val index = evens.indexOf(0)\n        val result = arr.filter(x => x % 2 ==\
    \ 0 && x == even).sortBy(x => x).reverse\n        if (result.isEmpty) List(even.toLong,\
    \ index.toLong)\n        else result.head", "        val evens = arr.filter(_\
    \ % 2 == 0).toList\n        if(evens.isEmpty) List()\n        else {\n       \
    \     val smallest = evens.min\n            val index = arr.indexOf(smallest)\n\
    \            val result = List(smallest, index)\n            if(evens.size ==\
    \ 1) result\n            else result :+ pluck(arr.filter(_ != smallest))\n   \
    \     }", "        val evens = arr.filter(x => x % 2 == 0).sorted\n        val\
    \ even = evens.head\n        val index = evens.indexOf(0)\n        val result\
    \ = (if (index == -1) arr.toList else arr.take(index)).sorted\n        (if (evens.isEmpty)\
    \ result.toList else result.take(even)).distinct", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        val evensSorted = evens.sortWith(_ < _)\n   \
    \     val smallestEven = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val evensSorted = evens.sortWith(_ < _)\n        val smallestEven = evensSorted.head\n\
    \        val smallestEvenIndex = evensSorted.indexOf(0)\n        val evensSorted\
    \ = evens.sortWith(_ < _)\n        val smallestEven = evensSorted.head\n     \
    \   val smallestEvenIndex = evensSorted.indexOf(0)\n        val evensSorted =\
    \ evens.sortWith(_ < _)\n        val smallestEven = evensSorted.head\n       \
    \ val smallestEvenIndex = evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith(_ < _)\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith(_ < _)\n  \
    \      val smallestEven = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val evensSorted = evens.sortWith(_ < _)\n        val smallestEven = evensSorted.head\n\
    \        val smallestEvenIndex = evensSorted.indexOf(0)\n        val evensSorted\
    \ = evens.sortWith(_ < _)\n        val smallestEven = evensSorted.head\n     \
    \   val smallestEvenIndex = evensSorted.indexOf(0)\n        val evensSorted =\
    \ evens.sortWith(_ < _)\n        val smallestEven = evensSorted.head\n       \
    \ val smallestEvenIndex = evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith(_ < _)\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith(_ < _)\n  \
    \      val ", "        val evens = arr.filter(_ % 2 == 0).sortBy(_ % 2).map(_\
    \ % 2).reverse\n        val even = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result = arr.filter(_ % 2 == 0).sortBy(_ % 2).map(_ % 2).reverse.takeWhile(_\
    \ != 0).takeWhile(_ != even).takeWhile(_ != index).reverse\n        if (result.isEmpty)\
    \ Nil\n        else result", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val even = evens.min\n        val index = evens.indexOf(even)\n     \
    \   val result = arr.filter(_ == even).toList\n        if (result.isEmpty) Nil\n\
    \        else result.take(index).reverse", "        val evens = arr.filter(x =>\
    \ x % 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_evens = evens.filter(x =>\
    \ x % 2 == 0)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n\
    \        if (smalest_evens_index >= 0) {\n            smalest_evens.take(smalest_evens_index).map(x\
    \ => smalest_value)\n        } else {\n            smalest_evens.map(x => smalest_value)\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0).toList\n       \
    \ val evensSorted = evens.sortWith((x, y) => x.compare(y))\n        val evenSmallest\
    \ = evensSorted.head\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest\n        val evenSmallestIndexList\
    \ = evenSmallestIndex.toList\n        val evenSmallestValueList = evenSmallestValue.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexList.sortWith((x,\
    \ y) => x.compare(y))\n        val evenSmallestValueListSorted = evenSmallestValueList.sortWith((x,\
    \ y) => x.compare(y))\n        val evenSmallestValueListSortedHead = evenSmallestValueListSorted.head\n\
    \        val evenSmallestValueListSortedHeadIndex = evenSmallestValueListSortedHead.toList\n\
    \        val evenSmallestValueListSortedHeadValue = evenSmallestValueListSortedHead.toList\n\
    \        val evenSmallestValueListSortedHeadIndexSorted = evenSmallestValueListSortedHeadIndex.sortWith((x,\
    \ y) => x.compare(y))\n        val evenSmallestValueListSortedHeadValueSorted\
    \ = evenSmallestValueListSortedHeadValue.sortWith((x, y) => x.compare(y))\n  \
    \      val evenSmallestValueListSortedHeadIndexSortedHead = evenSmallestValueListSortedHeadIndexSorted.head\n\
    \        val evenSmallestValueListSortedHeadIndexSortedHeadIndex = evenSmallestValueListSortedHeadIndexSorted.toList\n\
    \        val evenSmallestValueListSortedHeadIndexSortedHeadValue = evenSmallestValueListSortedHeadIndexSorted.toList\n\
    \        val evenSmallestValueListSortedHeadIndexSortedHeadIndexSorted = evenSmallestValueListSortedHeadIndexSortedHead.sortWith((x,\
    \ y) => x.compare(y))\n        val evenSmallestValueListSortedHeadIndexSortedHeadValueSorted\
    \ = evenSmallestValueListSortedHeadIndexSortedHeadValue.sortWith((x, y) => x.compare(y))\n\
    \        val evenSmallestValueListSortedHeadIndexSortedHeadIndexSortedHead = evenSmallestValueListSortedHeadIndexSortedHeadIndexSorted.head\n\
    \        val evenSmallestValueListSortedHeadIndexSortedHeadIndexSortedHeadIndex\
    \ = evenSmallestValueListSortedHeadIndexSortedHeadIndexSorted.toList\n        ",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val smallestEven = evensSorted.head\n  \
    \      val smallestEvenIndex = evensSorted.indexOf(0)\n        val smallestEvenValue\
    \ = smallestEven.toLong\n        val smallestEvenIndex = smallestEvenIndex.toLong\n\
    \        val result = List(smallestEvenValue, smallestEvenIndex)\n        if (smallestEvenIndex\
    \ == arr.length) result\n        else pluck(arr.drop(smallestEvenIndex))", " \
    \       val evens = arr.filter(_ % 2 == 0)\n        val smallest = evens.min\n\
    \        val index = evens.indexOf(smallest)\n        val result = arr.filter(_\
    \ == smallest).take(index).toList\n        if (result.isEmpty) result else result.sortWith(_\
    \ < _)", "        val evens = arr.filter(x => x % 2 == 0).toList\n        val\
    \ even = evens.min\n        val index = evens.indexOf(even)\n        val result\
    \ = arr.filter(_ == even).toList\n        if (result.isEmpty) List(even, index)\n\
    \        else result.sortWith((x, y) => x < y).take(1)", "        val evens =\
    \ arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n        val\
    \ index = arr.indexOf(even)\n        val result = arr.filter(_ != even).toList\n\
    \        if (evens.isEmpty) result\n        else result.filter(_ == even).sortBy(x\
    \ => x).take(index).toList", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val even = evens.min\n        val index = evens.indexOf(even)\n     \
    \   val result = arr.filter(_ == even).sortBy(x => x).take(index).map(x => x.toLong).toList\n\
    \        if (result.isEmpty) List(even.toLong)\n        else result", "      \
    \  val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n        val\
    \ smallest = evens.head\n        val index = evens.indexOf(0)\n        val result\
    \ = (smallest :: index)\n        if (evens.isEmpty) result\n        else result",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).map(x => x).toList\n\
    \        val smallest = evens.head\n        val index = evens.indexOf(smallest)\n\
    \        val result = evens.takeWhile(x => x != smallest).take(index).toList\n\
    \        if (result.isEmpty) result else List(smallest, index)", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val evenSmallest = evensSorted.head\n        val evenSmallestIndex\
    \ = evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest\n   \
    \     val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        if (evenSmallestIndexList.isEmpty || evenSmallestValueList.isEmpty)\
    \ {\n            List[Long]()\n        } else {\n            evenSmallestValueList\n\
    \        }", "        val evens = arr.filter(_ % 2 == 0).toList\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_even = evens(smalest_index)\n        val smalest_even_index =\
    \ smalest_index\n        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_", "        val evens = arr.filter(x =>\
    \ x % 2 == 0).sortBy(x => x).reverse\n        val smalest_value = evens.head\n\
    \        val smalest_index = evens.indexWhere(x => x == smalest_value)\n     \
    \   val smalest_evens = evens.takeWhile(x => x != smalest_value)\n        if (smalest_evens.isEmpty)\
    \ List()\n        else List(smalest_value, smalest_index)", "        val evens\
    \ = arr.filter(x => x % 2 == 0).toList\n        if (evens.isEmpty) List()\n  \
    \      else {\n            val smalest_value = evens.min\n            val smalest_index\
    \ = evens.indexOf(smalest_value)\n            val evens_without_smalest_value\
    \ = evens.filterNot(x => x == smalest_value)\n            if (evens_without_smalest_value.isEmpty)\
    \ List()\n            else evens_without_smalest_value.take(smalest_index).toList\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n\
    \        val smallest = evens.head\n        val index = evens.indexOfFirst { x\
    \ => x == smallest }\n        val result = (smallest :: arr.take(index)) ++ arr.drop(index\
    \ + 1)\n        result", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x).map(x => x.toLong)\n        val even = evens.head\n        val index =\
    \ evens.indexOf(even)\n        if (evens.isEmpty) List()\n        else List(even,\
    \ index)", "        val evens = arr.filter(x => x % 2 == 0).toList\n        val\
    \ even = evens.min\n        val index = evens.indexOf(even)\n        val smalest_value\
    \ = arr.filter(x => x % 2 == 0).min\n        val smalest_index = arr.indexOf(smalest_value)\n\
    \        if (evens.isEmpty) {\n            List[Long]()\n        } else if (smalest_index\
    \ == -1) {\n            List[Long](smalest_value)\n        } else {\n        \
    \    List[Long](smalest_value, index)\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(_ == even).sortBy(x => x).take(index).toList\n\
    \        if (result.isEmpty) Nil\n        else result", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        if (evens.isEmpty) List()\n        else {\n \
    \           val smalest_value = evens.min\n            val smalest_index = evens.indexOf(smalest_value)\n\
    \            val smalest_even = evens(smalest_index)\n            val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n            val smalest_even_value = evens(smalest_even_index)\n\
    \            val smalest_even_index_list = evens.indexOf(smalest_even, smalest_index\
    \ + 1)\n            val smalest_even_index_list_size = smalest_even_index_list.length\n\
    \            val smalest_even_index_list_size = smalest_even_index_list_size +\
    \ 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val smalest_even_index_list_size = smalest_even_index_list_size\
    \ + 1\n            val ", "        val evens = arr.filter(x => x % 2 == 0)\n \
    \       val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n    \
    \    val evenSmallest = evensSorted.head\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest.toLong\n        val evenSmallestIndexList\
    \ = evenSmallestIndex.toList\n        val evenSmallestValueList = evenSmallestValue.toList\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexList.length\n    \
    \    val evenSmallestValueListLength = evenSmallestValueList.length\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValue", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x).reverse\n        val even = evens.head\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(_ == even).sortBy(x => x).reverse\n        if\
    \ (result.isEmpty) List()\n        else result.take(index).reverse", "       \
    \ val evens = arr.filter(_ % 2 == 0)\n        val smallest = evens.minBy(_)\n\
    \        val index = evens.indexOf(smallest)\n        val result = evens.filter(_\
    \ == smallest).take(index).toList\n        if (result.isEmpty) Nil\n        else\
    \ result", "        val evens = arr.filter(x => x % 2 == 0).toList\n        val\
    \ even = evens.min\n        val index = arr.indexOf(even)\n        val result\
    \ = arr.filter(_ != even).take(index).toList\n        if (result.isEmpty) result\
    \ else result :: List[Long](even, index)", "        val evens = arr.filter(x =>\
    \ x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val evenSmallest = evensSorted.head\n        val evenSmallestIndex =\
    \ evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest.asInstanceOf[Long]\n\
    \        val evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue\
    \ = evenSmallest.asInstanceOf[Long]\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest.asInstanceOf[Long]\n        val\
    \ evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue =\
    \ evenSmallest.asInstanceOf[Long]\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest.asInstanceOf[Long]\n        val\
    \ evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue =\
    \ evenSmallest.asInstanceOf[Long]\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest.asInstanceOf[Long]\n        val\
    \ evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue =\
    \ evenSmallest.asInstanceOf[Long]\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest.asInstanceOf[Long]\n        val\
    \ evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue =\
    \ evenSmallest.asInstanceOf[Long]\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest.asInstanceOf[Long]\n        val\
    \ evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue =\
    \ evenSmallest.asInstanceOf[Long]\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest.asInstanceOf[Long]\n        val\
    \ evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue =\
    \ evenSmallest.asInstanceOf[Long]\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = ", "        val evens = arr.filter(x => x % 2\
    \ == 0)\n        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        if (smalest_index == -1) List(smalest_value)\n        else evens.take(smalest_index).reverse",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        if (evens.isEmpty)\
    \ Nil\n        else {\n            val smallest = evens.min\n            val index\
    \ = arr.indexOf(smallest)\n            val result = List(smallest, index)\n  \
    \          if (arr.contains(smallest)) result\n            else result.reverse\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0).toList\n       \
    \ val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ evensSorted = evensSorted.takeWhile(x => x < arr.last.toLong)\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x < arr.last.toLong)\n        val evensSorted =\
    \ evensSorted.takeWhile(x => x < arr.last.toLong)\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x < arr.last.toLong)\n        val evensSorted = evensSorted.takeWhile(x =>\
    \ x < arr.last.toLong)\n        val evensSorted = evensSorted.takeWhile(x => x\
    \ < arr.last.toLong)\n        val evensSorted = evensSorted.takeWhile(x => x <\
    \ arr.last.toLong)\n        val evensSorted = evensSorted.takeWhile(x => x < arr.last.toLong)\n\
    \        val evensSorted = evensSorted.takeWhile(x => x < arr.last.toLong)\n \
    \       val evensSorted = evensSorted.takeWhile(x => x < arr.last.toLong)\n  \
    \      val evensSorted = evensSorted.takeWhile(x => x < arr.last.toLong)\n   \
    \     val evensSorted = evensSorted.takeWhile(x => x < arr.last.toLong)\n    \
    \    val evensSorted = evensSorted.takeWhile(x => x < arr.last.toLong)\n     \
    \   val evensSorted = evensSorted.takeWhile(x => x < arr.last.toLong)\n      \
    \  val evensSorted = evensSorted.takeWhile(x => x < arr.last.toLong)\n       \
    \ val evensSorted = evensSorted.takeWhile(x => x < arr.last.toLong)\n        val\
    \ evensSorted = evensSorted.takeWhile(x => x < arr.last.toLong)\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x < arr.last.toLong)\n        val evensSorted =\
    \ evensSorted.takeWhile(x => x < arr.last.toLong)\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x < arr.last.toLong)\n        val evensSorted = evensSorted.takeWhile(x =>\
    \ x < arr.last.toLong)\n        val evensSorted = evensSorted.takeWhile(", " \
    \       val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val result = arr.filter(_ ==\
    \ even).sortWith(_ < _).take(index)\n        result", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(_ == even)\n        if (result.isEmpty) List()\n\
    \        else List(even, index)", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).toList\n        if (evens.isEmpty) Nil\n        else evens.minBy(x => x)._2",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x)\n        val smalest_value\
    \ = evens.head\n        val smalest_index = evens.indexWhere(x => x == smalest_value)\n\
    \        val smalest_even = evens(smalest_index)\n        val smalest_even_index\
    \ = evens.indexWhere(x => x == smalest_even)\n        val smalest_even_index =\
    \ smalest_even_index + 1\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_value = smalest_even_value.toLong\n        val smalest_even_value\
    \ = smalest_even_value.toLong\n        val smalest_even_value = smalest_even_value.toLong\n\
    \        val smalest_even_value = smalest_even_value.toLong\n        val smalest_even_value\
    \ = smalest_even_value.toLong\n        val smalest_even_value = smalest_even_value.toLong\n\
    \        val smalest_even_value = smalest_even_value.toLong\n        val smalest_even_value\
    \ = smalest_even_value.toLong\n        val smalest_even_value = smalest_even_value.toLong\n\
    \        val smalest_even_value = smalest_even_value.toLong\n        val smalest_even_value\
    \ = smalest_even_value.toLong\n        val smalest_even_value = smalest_even_value.toLong\n\
    \        val smalest_even_value = smalest_even_value.toLong\n        val smalest_even_value\
    \ = smalest_even_value.toLong\n        val smalest_even_value = smalest_even_value.toLong\n\
    \        val smalest_even_value = smalest_even_value.toLong\n        val smalest_even_value\
    \ = smalest_even_value.toLong\n        val smalest_even_value = smalest_even_value.toLong\n\
    \        val smalest_even_value = smalest_even_value.toLong\n        val smalest_even_value\
    \ = smalest_even_value.toLong\n        val smalest_even_value = smalest_even_value.toLong\n\
    \        val smalest_even_value = smalest_even_value.toLong\n        val smalest_even_value\
    \ = smalest_even_value.toLong\n        val smalest_even_value = smalest_even_value.toLong\n\
    \        val smalest_even_value = smalest_even_value.toLong\n        val smalest_even_value\
    \ = smalest_even_value.toLong\n        val smalest_even_value = smalest_even",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.compare(y))\n        val smallestEven = evensSorted.head\n        val\
    \ smallestEvenIndex = evensSorted.indexOfFirst { x => x.compare(smallestEven)\
    \ == 0 }\n        val smallestEvenValue = smallestEven\n        val smallestEvenIndex\
    \ = smallestEvenIndex\n        val result = List(smallestEvenValue, smallestEvenIndex)\n\
    \        if (evensSorted.isEmpty) {\n            result\n        } else {\n  \
    \          val nextEven = evensSorted.drop(smallestEvenIndex + 1)\n          \
    \  val nextEvenSorted = nextEven.sortWith((x, y) => x.compare(y))\n          \
    \  val nextSmallestEven = nextEvenSorted.head\n            val nextSmallestEvenIndex\
    \ = nextEvenSorted.indexOfFirst { x => x.compare(nextSmallestEven) == 0 }\n  \
    \          val nextSmallestEvenValue = nextSmallestEven\n            val nextSmallestEvenIndex\
    \ = nextSmallestEvenIndex\n            val nextSmallestEvenValue = nextSmallestEvenValue\n\
    \            val nextSmallestEvenIndex = nextSmallestEvenIndex\n            val\
    \ nextSmallestEvenValue = nextSmallestEvenValue\n            val nextSmallestEvenIndex\
    \ = nextSmallestEvenIndex\n            val nextSmallestEvenValue = nextSmallestEvenValue\n\
    \            val nextSmallestEvenIndex = nextSmallestEvenIndex\n            val\
    \ nextSmallestEvenValue = nextSmallestEvenValue\n            val nextSmallestEvenIndex\
    \ = nextSmallestEvenIndex\n            val nextSmallestEvenValue = nextSmallestEvenValue\n\
    \            val nextSmallestEvenIndex = nextSmallestEvenIndex\n            val\
    \ nextSmallestEvenValue = nextSmallestEvenValue\n            val nextSmallestEvenIndex\
    \ = nextSmallestEvenIndex\n            val nextSmallestEvenValue = nextSmallestEvenValue\n\
    \            val nextSmallestEvenIndex = nextSmallestEvenIndex\n            val\
    \ nextSmallestEvenValue = nextSmallestEvenValue\n            val nextSmallestEvenIndex\
    \ = nextSmallestEvenIndex\n            val nextSmallestEvenValue = nextSmallestEvenValue\n\
    \            val nextSmallestEvenIndex = nextSmallestEvenIndex\n            val\
    \ nextSmallestEvenValue = nextSmallestEvenValue\n            val nextSmalle",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  val smallest = evens.head\n        val index = evens.indexOf(smallest)\n  \
    \      val result = List(smallest, index)\n        if (evens.isEmpty) result\n\
    \        else pluck(arr.drop(index))", "        val evens = arr.filter(_ % 2 ==\
    \ 0).toList\n        val evensSorted = evens.sortWith(_ < _)\n        val evenSmallest\
    \ = evensSorted.head\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest\n        val evenSmallestIndexList\
    \ = evenSmallestIndex.toList\n        val evenSmallestValueList = evenSmallestValue.toList\n\
    \        if (evenSmallestIndexList.length == 1) {\n            evenSmallestValueList\
    \ :+ evenSmallestValue\n        } else if (evenSmallestIndexList.length > 1) {\n\
    \            evenSmallestValueList :+ evenSmallestValue\n        } else {\n  \
    \          evenSmallestValueList :+ evenSmallestValue\n        }", "        val\
    \ evens = arr.filter(_ % 2 == 0)\n        val even = evens.min\n        val index\
    \ = evens.indexOf(even)\n        val result = arr.filter(_ == even).sortWith(_\
    \ < _).take(index).toList\n        if (result.isEmpty) Nil\n        else result",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x)\n        if (evens.isEmpty)\
    \ List()\n        else evens.take(1).head", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = arr.indexOf(smalest_even)\n        val smalest_even_value\
    \ = arr(smalest_even_index)\n        val smalest_even_index_list = List(smalest_even_index,\
    \ smalest_even_index + 1)\n        val smalest_even_index_list_list = List(smalest_even_index_list)\n\
    \        val smalest_even_index_list_list_list = List(smalest_even_index_list_list)\n\
    \        val smalest_even_index_list_list_list_list = List(smalest_even_index_list_list_list)\n\
    \        val smalest_even_index_list_list_list_list_list = List(smalest_even_index_list_list_list_list)\n\
    \        val smalest_even_index_list_list_list_list_list_list = List(smalest_even_index_list_list_list_list_list)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list = List(smalest_even_index_list_list_list_list_list_list)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list = List(smalest_even_index_list_list_list_list_list_list_list)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list_list =\
    \ List(smalest_even_index_list_list_list_list_list_list_list_list)\n        val\
    \ smalest_even_index_list_list_list_list_list_list_list_list_list_list = List(smalest_even_index_list_list_list_list_list_list_list_list_list)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = List(smalest_even_index_list_list_list_list_list_list_list_list_list_list)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = List(smalest_even_index_list_list_list_list_list_list_list_list_list_list_list)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = List(smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = List(smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = List(smalest_even_index_list_list_list_list_list_", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).reverse\n        val smallest = evens.head\n \
    \       val index = evens.indexOf(0)\n        val result = arr.filter(_ == smallest).sortBy(x\
    \ => x).reverse\n        if (result.isEmpty) Nil\n        else (smallest, index)",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  val even = evens.head\n        val index = evens.indexOf(0)\n        val result\
    \ = (List(even, index)).sortBy(x => x._1).reverse\n        if (result.isEmpty)\
    \ Nil\n        else result", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val even = evens.min\n        val index = arr.indexOf(even)\n       \
    \ val result = arr.filter(_ != even).toList\n        if (result.isEmpty) List(even)\n\
    \        else List(even, index)", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).sorted\n        val even = evens.head\n        val index = evens.indexOf(0)\n\
    \        val smalest_value = evens.takeWhile(x => x != even).last\n        val\
    \ smalest_index = evens.lastIndexOf(even)\n        val smalest_evens = evens.takeWhile(x\
    \ => x != smalest_value).sorted\n        val smalest_even = smalest_evens.head\n\
    \        val smalest_even_index = smalest_evens.indexOf(smalest_even)\n      \
    \  val smalest_even_evens = smalest_evens.takeWhile(x => x != smalest_even).sorted\n\
    \        val smalest_even_even = smalest_even_evens.head\n        val smalest_even_even_index\
    \ = smalest_even_evens.indexOf(smalest_even_even)\n        val smalest_even_even_evens\
    \ = smalest_even_evens.takeWhile(x => x != smalest_even_even).sorted\n       \
    \ val smalest_even_even_even = smalest_even_even_evens.head\n        val smalest_even_even_even_index\
    \ = smalest_even_even_evens.indexOf(smalest_even_even_even)\n        val smalest_even_even_even_evens\
    \ = smalest_even_even_evens.takeWhile(x => x != smalest_even_even_even).sorted\n\
    \        val smalest_even_even_even_even = smalest_even_even_even_evens.head\n\
    \        val smalest_even_even_even_even_index = smalest_even_even_even_evens.indexOf(smalest_even_even_even_even)\n\
    \        val smalest_even_even_even_even_evens = smalest_even_even_even_even_evens.takeWhile(x\
    \ => x != smalest_even_even_even_even_even).sorted\n        val smalest_even_even_even_even_even\
    \ = smalest_even_even_even_even_evens.head\n        val smalest_even_even_even_even_even_index\
    \ = smalest_even_even_even_even_evens.indexOf(smalest_even_even_even_even_even)\n\
    \        val smalest_even_even_ev", "        val evens = arr.filter(x => x % 2\
    \ == 0).toList\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        if (smalest_index == -1) evens.toList\n\
    \        else evens.take(smalest_index).toList", "        val evens = arr.filter(_\
    \ % 2 == 0).sortBy(_).reverse\n        val smallest = evens.head\n        val\
    \ index = evens.indexOf(0)\n        if (evens.isEmpty) List()\n        else List(smallest,\
    \ index)", "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_even = evens(smalest_index)\n        val smalest_even_index =\
    \ evens.indexOf(smalest_even)\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_list = evens.indexOf(smalest_even)\n        val\
    \ smalest_even_value_list = evens.indexOf(smalest_even)\n        val smalest_even_index_list_2\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_3 = evens.indexOf(smalest_even)\n       \
    \ val smalest_even_value_list = evens.indexOf(smalest_even)\n        val smalest_even_index_list_4\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_5 = evens.indexOf(smalest_even)\n       \
    \ val smalest_even_value_list = evens.indexOf(smalest_even)\n        val smalest_even_index_list_6\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_7 = evens.indexOf(smalest_even)\n       \
    \ val smalest_even_value_list = evens.indexOf(smalest_even)\n        val smalest_even_index_list_8\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_9 = evens.indexOf(smalest_even)\n       \
    \ val smalest_even_value_list = evens.indexOf(smalest_even)\n        val smalest_even_index_list_10\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_11 = evens.indexOf(smalest_even)\n      \
    \  val smalest_even_value_list = evens.indexOf(smalest_even)\n        val smalest_even_index_list_12\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_13 = even", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val even = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result = arr.filter(x => x % 2 == 0).map(x => if (x == even) x else\
    \ x).sorted\n        if (result.isEmpty) List(even)\n        else result.take(index).map(x\
    \ => if (x == even) x else x).sorted", "        val evens = arr.filter(x => x\
    \ % 2 == 0).toList\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(_ == even).toList\n        if (result.isEmpty)\
    \ List()\n        else result.take(index).toList", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val smallestEven = evensSorted.", "        val evens = arr.filter(x =>\
    \ x % 2 == 0).sortBy(x => x).map(x => x).toList\n        if (evens.isEmpty) List()\n\
    \        else if (evens.size == 1) List(evens.head)\n        else evens.take(evens.size\
    \ - 1).sortBy(x => x).take(evens.size - 1).map(x => x).map(x => x + 1).toList",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    if (smalest_index == -1) {\n            evens.toList\n        } else {\n\
    \            evens.take(smalest_index).toList\n        }", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n      \
    \  val index = evens.indexOf(0)\n        val result = arr.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x != even).take(index).toList\n        if (result.isEmpty)\
    \ Nil\n        else result", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_evens = evens.filter(x => x % 2 == 0)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_value)\n        if (smalest_evens_index > 0)\
    \ {\n            smalest_evens(smalest_evens_index)\n        } else {\n      \
    \      smalest_value\n        }", "        val evens = arr.filter(_ % 2 == 0)\n\
    \        val evensSorted = evens.sortWith((a, b) => a < b)\n        val smallestEven\
    \ = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val smallestEvenValue = smallestEven\n        val evensSortedWithIndex\
    \ = evensSorted.zipWithIndex\n        val smallestEvenIndexWithValue = evensSortedWithIndex.filter(_._1\
    \ == smallestEvenIndex).head\n        val smallestEvenValueWithIndex = evensSortedWithIndex.filter(_._1\
    \ == smallestEvenValue).head\n        val smallestEvenIndexWithValueAndIndex =\
    \ evensSortedWithIndex.filter(_._1 == smallestEvenValue && _._2 == smallestEvenIndex).head\n\
    \        val smallestEvenValueWithIndexAndValue = evensSortedWithIndex.filter(_._1\
    \ == smallestEvenValue && _._2 == smallestEvenIndex).head\n        val smallestEvenIndexWithValueAndIndexAndValue\
    \ = evensSortedWithIndex.filter(_._1 == smallestEvenValue && _._2 == smallestEvenIndex\
    \ && _._3 == smallestEvenIndex).head\n        val smallestEvenValueWithIndexAndIndexAndValueAndIndex\
    \ = evensSortedWithIndex.filter(_._1 == smallestEvenValue && _._2 == smallestEvenIndex\
    \ && _._3 == smallestEvenIndex && _._4 == smallestEvenIndex).head\n        val\
    \ smallestEvenValueWithIndexAndIndexAndValueAndIndexAndValue = evensSortedWithIndex.filter(_._1\
    \ == smallestEvenValue && _._2 == smallestEvenIndex && _._3 == smallestEvenIndex\
    \ && _._4 == smallestEvenIndex && _._5 == smallestEvenIndex).head\n        val\
    \ smallestEvenValueWithIndexAndIndexAndValueAndIndexAndIndexAndValueAndIndex =\
    \ evensSortedWithIndex.filter(_._1 == smallestEvenValue && _._2 == smallestEvenIndex\
    \ && _._3 == smallestEvenIndex && _._4 == smallestEvenIndex && _._5 == smallestEvenIndex\
    \ && _._6 == smallestEvenIndex).head\n        val smallestEvenValueWithIndexAndIndexAndValueAndIndexAndIndexAndValueAndIndexAndValueAndIndex\
    \ = evensSortedWithIndex.filter(_._1 == smallestEvenValue && _._2 == smallestEvenIndex\
    \ && _._3 == smallestEvenIndex && _._4 == smallestEvenIndex && _._", "       \
    \ val evens = arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val result = arr.filter(_ ==\
    \ even).toList\n        if (result.isEmpty) List()\n        else List(even, index)",
  "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n        val smallest = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result = List(smallest, index)\n\
    \        if (evens.isEmpty) result\n        else result.reverse", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_evens\
    \ = evens.filter(x => x % 2 == 0)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n\
    \        if (smalest_evens_index == -1) {\n            smalest_evens_index = smalest_index\n\
    \        }\n        val smalest_evens_index_plus_1 = smalest_evens_index + 1\n\
    \        if (smalest_evens_index_plus_1 == arr.size) {\n            smalest_evens_index_plus_1\
    \ = 0\n        }\n        val smalest_evens_index_plus_2 = smalest_evens_index_plus_1\
    \ + 1\n        if (smalest_evens_index_plus_2 == arr.size) {\n            smalest_evens_index_plus_2\
    \ = 0\n        }\n        val smalest_evens_index_plus_3 = smalest_evens_index_plus_2\
    \ + 1\n        if (smalest_evens_index_plus_3 == arr.size) {\n            smalest_evens_index_plus_3\
    \ = 0\n        }\n        val smalest_evens_index_plus_4 = smalest_evens_index_plus_3\
    \ + 1\n        if (smalest_evens_index_plus_4 == arr.size) {\n            smalest_evens_index_plus_4\
    \ = 0\n        }\n        val smalest_evens_index_plus_5 = smalest_evens_index_plus_4\
    \ + 1\n        if (smalest_evens_index_plus_5 == arr.size) {\n            smalest_evens_index_plus_5\
    \ = 0\n        }\n        val smalest_evens_index_plus_6 = smalest_evens_index_plus_5\
    \ + 1\n        if (smalest_evens_index_plus_6 == arr.size) {\n            smalest_evens_index_plus_6\
    \ = 0\n        }\n        val smalest_evens_index_plus_7 = smalest_evens_index_plus_6\
    \ + 1\n        if (smalest_evens_index_plus_7 == arr.size) {\n            smalest_evens_index_plus_7\
    \ = 0\n        }\n        val smalest_evens_index_plus_8 = smalest_evens_index_plus_7\
    \ + 1\n        if (smalest_evens_index_plus_8 == arr.size) {\n            smalest_evens_index_plus_8\
    \ = 0\n        }\n        val smalest_evens_index_plus_9 = smalest_evens_index_plus_8\
    \ + 1\n        if (smalest_evens_index_plus_9 == arr.size) {\n            smalest_evens_index_plus_9\
    \ = 0\n        }\n        val smalest_even", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x < y)\n\
    \        val evenSmallest = evensSorted.head\n        val evenSmallestIndex =\
    \ evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest\n     \
    \   val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        val evenSmallestIndexListLength = evenSmallestIndexList.length\n\
    \        val evenSmallestValueListLength = evenSmallestValueList.length\n    \
    \    val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmalle",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  if (evens.isEmpty) List()\n        else evens.take(1).head", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sortBy(x => x)\n        val even = evens.head\n\
    \        val index = evens.indexOf(even)\n        val result = arr.filter(_ !=\
    \ even).sortBy(x => x).take(index).map(x => x).reverse\n        if (result.isEmpty)\
    \ Nil\n        else result", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_evens = evens.take(smalest_index)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens)\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        if (smalest_evens_index == evens.length) smalest_evens_index\n\
    \        else smalest_evens_index", "        val evens = arr.filter(x => x % 2\
    \ == 0).toList\n        if (evens.isEmpty) List()\n        else {\n          \
    \  val minIndex = evens.minBy(x => x).index\n            val minValue = evens(minIndex)\n\
    \            evens.filterNot(x => x == minValue)\n        }", "        val evens\
    \ = arr.filter(_ % 2 == 0).toList\n        if(evens.isEmpty) List(arr.head.toLong)\n\
    \        else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            arr.take(index).filter(_ % 2 == 0).min.toLong\n        }", "    \
    \    val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val evensSortedWithIndex = evensSorted.zipWithIndex\n\
    \        val smallestEven = evensSortedWithIndex.minBy(_._1)\n        val smallestEvenIndex\
    \ = evensSortedWithIndex.minBy(_._2)\n        val smallestEvenValue = smallestEven._1\n\
    \        val smallestEvenIndex = smallestEven._2\n        val smallestEvenValue\
    \ = smallestEven._1\n        val smallestEvenIndex = smallestEven._2\n       \
    \ val smallestEvenValue = smallestEven._1\n        val smallestEvenIndex = smallestEven._2\n\
    \        val smallestEvenValue = smallestEven._1\n        val smallestEvenIndex\
    \ = smallestEven._2\n        val smallestEvenValue = smallestEven._1\n       \
    \ val smallestEvenIndex = smallestEven._2\n        val smallestEvenValue = smallestEven._1\n\
    \        val smallestEvenIndex = smallestEven._2\n        val smallestEvenValue\
    \ = smallestEven._1\n        val smallestEvenIndex = smallestEven._2\n       \
    \ val smallestEvenValue = smallestEven._1\n        val smallestEvenIndex = smallestEven._2\n\
    \        val smallestEvenValue = smallestEven._1\n        val smallestEvenIndex\
    \ = smallestEven._2\n        val smallestEvenValue = smallestEven._1\n       \
    \ val smallestEvenIndex = smallestEven._2\n        val smallestEvenValue = smallestEven._1\n\
    \        val smallestEvenIndex = smallestEven._2\n        val smallestEvenValue\
    \ = smallestEven._1\n        val smallestEvenIndex = smallestEven._2\n       \
    \ val smallestEvenValue = smallestEven._1\n        val smallestEvenIndex = smallestEven._2\n\
    \        val smallestEvenValue = smallestEven._1\n        val smallestEvenIndex\
    \ = smallestEven._2\n        val smallestEvenValue = smallestEven._1\n       \
    \ val smallestEvenIndex = smallestEven._2\n        val smallestEvenValue = smallestEven._1\n\
    \        val smallestEvenIndex = smallestEven._2\n        val smallestEvenValue\
    \ = smallestEven._1\n        val smallestEvenIndex = smallestEven._2\n       \
    \ val smallestEvenValue = smallestEven._1\n        val smallestEvenIndex = smallestEven._2\n"]
stop_tokens:
- "\n    }\n"
