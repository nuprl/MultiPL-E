language: scala
name: HumanEval_5_intersperse
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val delimeters = numbers_copy\
    \ match {\n            case Nil => Nil\n            case x :: xs => x :: delimeter\
    \ :: xs\n        }\n        numbers_copy match {\n            case Nil => Nil\n\
    \            case x :: xs => x :: intersperse(xs, delimeter) :: delimeters\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp19s3mq8.scala:17:28\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m x\
    \ :: xs => x :: intersperse(xs, delimeter) :: delimeters\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Found:    List[Matchable]\n\e[31m \
    \  |\e[0m                            Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val numbers_copy2 = numbers.toList\n\
    \        val numbers_copy3 = numbers.toList\n        val numbers_copy4 = numbers.toList\n\
    \        val numbers_copy5 = numbers.toList\n        val numbers_copy6 = numbers.toList\n\
    \        val numbers_copy7 = numbers.toList\n        val numbers_copy8 = numbers.toList\n\
    \        val numbers_copy9 = numbers.toList\n        val numbers_copy10 = numbers.toList\n\
    \        val numbers_copy11 = numbers.toList\n        val numbers_copy12 = numbers.toList\n\
    \        val numbers_copy13 = numbers.toList\n        val numbers_copy14 = numbers.toList\n\
    \        val numbers_copy15 = numbers.toList\n        val numbers_copy16 = numbers.toList\n\
    \        val numbers_copy17 = numbers.toList\n        val numbers_copy18 = numbers.toList\n\
    \        val numbers_copy19 = numbers.toList\n        val numbers_copy20 = numbers.toList\n\
    \        val numbers_copy21 = numbers.toList\n        val numbers_copy22 = numbers.toList\n\
    \        val numbers_copy23 = numbers.toList\n        val numbers_copy24 = numbers.toList\n\
    \        val numbers_copy25 = numbers.toList\n        val numbers_copy26 = numbers.toList\n\
    \        val numbers_copy27 = numbers.toList\n        val numbers_copy28 = numbers.toList\n\
    \        val numbers_copy29 = numbers.toList\n        val numbers_copy30 = numbers.toList\n\
    \        val numbers_copy31 = numbers.toList\n        val numbers_copy32 = numbers.toList\n\
    \        val numbers_copy33 = numbers.toList\n        val numbers_copy34 = numbers.toList\n\
    \        val numbers_copy35 = numbers.toList\n        val numbers_copy36 = numbers.toList\n\
    \        val numbers_copy37 = numbers.toList\n        val numbers_copy38 = numbers.toList\n\
    \        val numbers_copy39 = numbers.toList\n        val numbers_copy40 = numbers.toList\n\
    \        val numbers_copy41 = numbers.toList\n        val numbers_copy42 = numbers.toList\n\
    \        val numbers_copy43 = numbers.toList\n        val numbers_copy44 = numbers.toList\n\
    \        val numbers_copy45 = numbers.toList\n        val numbers_copy46 = numbers.toList\n\
    \        val numbers_copy47 = numbers.toList\n        val numbers_copy48 = numbers.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8h7uo6_3.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8h7uo6_3.scala:58:5 ---------------------\e[0m\e[0m\n\e[31m58\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => result += delimeter + number)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoahv4a4o.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_size = numbers.size\n        val delimeter_size = delimeter.toLong\n\
    \        val result = new Array[Long](numbers_size + delimeter_size)\n       \
    \ System.arraycopy(numbers.toArray, 0, result, 0, numbers_size)\n        System.arraycopy(delimeter.toArray,\
    \ 0, result, numbers_size, delimeter_size)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl8iaf7wq.scala:12:37\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](numbers_size + delimeter_size)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    Long\n\e[31m\
    \   |\e[0m                                     Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpl8iaf7wq.scala:14:35 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        System.arraycopy(delimeter.toArray, \e[31m0\e\
    [0m, result, numbers_size, delimeter_size)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ value toArray is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpl8iaf7wq.scala:14:69 --------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \        System.arraycopy(delimeter.toArray, \e[31m0\e[0m, result, numbers_size,\
    \ delimeter_size)\n\e[31m\e[31m   |\e[0m                                     \
    \                                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                               Found:    (delimeter_size : Long)\n\e[31m   |\e\
    [0m                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpl8iaf7wq.scala:15:8 ---------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc :+ delimeter\
    \ + x)\n        result.dropRight(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt84l6xkp.scala:15)\n\tat Problem.main(tmpt84l6xkp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.size) {\n            val currentNumber\
    \ = numbersList(i)\n            val nextNumber = numbersList(i + 1)\n        \
    \    result += currentNumber :: delimeter\n            result += nextNumber ::\
    \ delimeter\n            i += 1\n        }\n        result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuipnc8pc.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < numbers.size) {\n            result += numbers(i)\n          \
    \  result += delimeter\n            i += 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7_8dcwz.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => result += delimeter + number)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoahv4a4o.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = numbers_copy.foldLeft(List[Long]())((acc,\
    \ x) => x :: acc)\n        result.zip(numbers_copy).map(x => x._2 +: x._1).reverse.foldLeft(List[Long]())((acc,\
    \ x) => x :: acc)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp46bl4z7m.scala:12:47 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        result.zip(numbers_copy).map(\e[36mx\e[0m =>\
    \ x._2 +: x._1).reverse.foldLeft(List[\e[35mLong\e[0m]())((\e[36macc\e[0m, \e\
    [36mx\e[0m) => x :: acc)\n\e[31m\e[31m   |\e[0m                              \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \          value +: is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659793952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = numbers_copy.foldLeft(List[Long]())((acc,\
    \ number) => {\n            acc match {\n                case Nil => List(number)\n\
    \                case _ => acc :: List(number).map(x => delimeter.toLong :: x)\n\
    \            }\n        })\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplz1gmjgn.scala:14:72 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mcase\e[0m _ => acc :: List(number).map(x\
    \ => delimeter.toLong :: x)\n\e[31m\e[31m   |\e[0m                           \
    \                                             ^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                   value :: is not a member of Long\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmplz1gmjgn.scala:14:26 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mcase\e[0m _ => acc :: List(number).map(x\
    \ => delimeter.toLong :: x)\n\e[31m\e[31m   |\e[0m                          ^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (acc : List[Long])\n\e\
    [31m   |\e[0m                          Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.zipWithIndex.foreach\
    \ { case (number, index) =>\n            if (index != 0) {\n                result.add(delimeter)\n\
    \            }\n            result.add(number)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg044_lir.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc ++ List(x))\
    \ ++ List(delimeter)\n        result.dropRight(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwlfalhko.scala:15)\n\tat Problem.main(tmpwlfalhko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val delimeters = numbers_copy\
    \ map {x => delimeter}\n        val result = numbers_copy map {x => x :: delimeters}\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9yqk2k59.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mList[\e\
    [1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m]\e[1m\e[31m)\e[0m\n\e\
    [31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result.add(x+delimeter))\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgwwkjpdf.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.size) {\n            val currentNumber\
    \ = numbersList(i)\n            if (i == numbersList.size - 1) {\n           \
    \     result.add(currentNumber)\n            } else {\n                result.add(currentNumber\
    \ + delimeter)\n            }\n            i += 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9gogl131.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val listSize = numbersList.size\n\
    \        val newList = mutable.ListBuffer.empty[Long]\n        var i = 0\n   \
    \     while (i < listSize) {\n            newList += numbersList(i)\n        \
    \    i += 1\n            if (i < listSize) {\n                newList += delimeter\n\
    \            }\n        }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfu1qzuwj.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val delimeter_copy = delimeter\n\
    \        val result = numbers_copy match {\n            case Nil => Nil\n    \
    \        case head :: tail => head :: intersperse(tail, delimeter_copy)\n    \
    \    }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpub6d31km.scala:20)\n\tat Problem.main(tmpub6d31km.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val delimeter_copy = delimeter\n\
    \        val result = numbers_copy.foldLeft(List[Long]())((acc, x) => acc ++ x\
    \ :: acc)\n        val delimeter_result = result.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ delimeter_copy :: x)\n        delimeter_result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5a9i1e7u.scala:12:76\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = numbers_copy.foldLeft(List[\e[35mLong\e[0m]())((\e[36macc\e[0m, \e[36mx\e\
    [0m) => acc ++ x :: acc)\n\e[31m\e[31m   |\e[0m                              \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                     Found:    (x : Long)\n\e[31m   |\e[0m  \
    \                                          Required: IterableOnce[Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5a9i1e7u.scala:13:95 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdelimeter_result\e[0m =\
    \ result.foldLeft(List[\e[35mLong\e[0m]())((\e[36macc\e[0m, \e[36mx\e[0m) => acc\
    \ ++ delimeter_copy :: x)\n\e[31m\e[31m   |\e[0m                             \
    \                                                                  ^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value :: is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5a9i1e7u.scala:13:80\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdelimeter_result\e\
    [0m = result.foldLeft(List[\e[35mLong\e[0m]())((\e[36macc\e[0m, \e[36mx\e[0m)\
    \ => acc ++ delimeter_copy :: x)\n\e[31m\e[31m   |\e[0m                      \
    \                                                          ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       Found:    (delimeter_copy\
    \ : Long)\n\e[31m   |\e[0m                                       Required: IterableOnce[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_iter = numbers.iterator\n        val delimeter_iter = delimeter.iterator\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var delimeter =\
    \ delimeter_iter.next()\n        var numbers = numbers_iter.next()\n        while\
    \ (numbers.nonEmpty) {\n            delimeter = delimeter_iter.next()\n      \
    \      result += numbers\n            result += delimeter\n            numbers\
    \ = numbers_iter.next()\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyy3lc131.scala:14:22 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mnumbers\e[0m = numbers_iter.next()\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35mnumbers_iter\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyy3lc131.scala:13:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdelimeter\e[0m = delimeter_iter.next()\n\e[31m\e[31m   |\e[0m        \
    \                ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvalue\e\
    [0m \e[35mdelimeter_iter\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyy3lc131.scala:12:25 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < numbers.size) {\n            result += numbers(i)\n          \
    \  result += delimeter\n            i += 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7_8dcwz.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val delimeter_copy = delimeter\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var index = 0\n\
    \        while (index < numbers_copy.size) {\n            val number = numbers_copy(index)\n\
    \            val delimeter_before = delimeter_copy\n            val delimeter_after\
    \ = delimeter_copy\n            index += 1\n            while (index < numbers_copy.size)\
    \ {\n                val number_before = numbers_copy(index)\n               \
    \ val number_after = numbers_copy(index)\n                delimeter_after = delimeter_after\
    \ + delimeter_before\n                delimeter_before = delimeter_before + delimeter_after\n\
    \                result.add(number_before + delimeter_before + number_after +\
    \ delimeter_after)\n                index += 1\n            }\n        }\n   \
    \     result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz3_r7u9e.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpz3_r7u9e.scala:22:32\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                delimeter_after\
    \ = delimeter_after + delimeter_before\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val delimeter_after\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpz3_r7u9e.scala:23:33 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                delimeter_before = delimeter_before +\
    \ delimeter_after\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val delimeter_before\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var current = 0\n\
    \        var last = 0\n        numbers.foreach { number =>\n            if (current\
    \ != last) {\n                result += delimeter\n            }\n           \
    \ result += number\n            last = current\n            current += 1\n   \
    \     }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2y61lgqj.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result += x)\n        result.takeWhile(x => x != delimeter).foreach(x =>\
    \ result += delimeter)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_0utq0w1.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => result += delimeter + number)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoahv4a4o.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_size = numbers.size\n        val numbers_size_2 = numbers_size\
    \ / 2\n        val numbers_size_3 = numbers_size_2 / 3\n        val numbers_size_4\
    \ = numbers_size_3 / 4\n        val numbers_size_5 = numbers_size_4 / 5\n    \
    \    val numbers_size_6 = numbers_size_5 / 6\n        val numbers_size_7 = numbers_size_6\
    \ / 7\n        val numbers_size_8 = numbers_size_7 / 8\n        val numbers_size_9\
    \ = numbers_size_8 / 9\n        val numbers_size_10 = numbers_size_9 / 10\n  \
    \      val numbers_size_11 = numbers_size_10 / 11\n        val numbers_size_12\
    \ = numbers_size_11 / 12\n        val numbers_size_13 = numbers_size_12 / 13\n\
    \        val numbers_size_14 = numbers_size_13 / 14\n        val numbers_size_15\
    \ = numbers_size_14 / 15\n        val numbers_size_16 = numbers_size_15 / 16\n\
    \        val numbers_size_17 = numbers_size_16 / 17\n        val numbers_size_18\
    \ = numbers_size_17 / 18\n        val numbers_size_19 = numbers_size_18 / 19\n\
    \        val numbers_size_20 = numbers_size_19 / 20\n        val numbers_size_21\
    \ = numbers_size_20 / 21\n        val numbers_size_22 = numbers_size_21 / 22\n\
    \        val numbers_size_23 = numbers_size_22 / 23\n        val numbers_size_24\
    \ = numbers_size_23 / 24\n        val numbers_size_25 = numbers_size_24 / 25\n\
    \        val numbers_size_26 = numbers_size_25 / 26\n        val numbers_size_27\
    \ = numbers_size_26 / 27\n        val numbers_size_28 = numbers_size_27 / 28\n\
    \        val numbers_size_29 = numbers_size_28 / 29\n        val numbers_size_30\
    \ = numbers_size_29 / 30\n        val numbers_size_31 = numbers_size_30 / 31\n\
    \        val numbers_size_32 = numbers_size_31 / 32\n        val numbers_size_33\
    \ = numbers_size_32 / 33\n        val numbers_size_34 = numbers_size_33 / 34\n\
    \        val numbers_size_35 = numbers_size_34 / 35\n        val numbers_size_36\
    \ = numbers_size_35 / 36\n        val numbers_size_37 = numbers_size_36 / 37\n\
    \        val numbers_size_38 = numbers_size_37 / 38\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjq9t29gw.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.size) {\n            result.append(numbersList(i))\n\
    \            result.append(delimeter)\n            i += 1\n        }\n       \
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpds1paro2.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_iter = numbers.iterator\n        val delimeter_iter = delimeter.iterator\n\
    \        val numbers_size = numbers.size\n        val delimeter_size = delimeter.size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < numbers_size) {\n            val n = numbers_iter.next()\n   \
    \         val d = delimeter_iter.next()\n            result += n\n           \
    \ result += d\n            i += 1\n        }\n        result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp39vd2l67.scala:11:39 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdelimeter_iter\e[0m = delimeter.iterator\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             value iterator is not a member of Long\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp39vd2l67.scala:13:39 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdelimeter_size\e[0m = delimeter.size\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             value size is not a member of Long\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp39vd2l67.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_iter = numbers.iterator\n        val delimeter_iter = delimeter.iterator\n\
    \        val result = new ListBuffer[Long]()\n        var delimeter_index = 0\n\
    \        var number_index = 0\n        while (numbers_iter.hasNext && delimeter_iter.hasNext)\
    \ {\n            val number = numbers_iter.next()\n            val delimeter =\
    \ delimeter_iter.next()\n            result += number\n            if (delimeter_index\
    \ == delimeter) {\n                delimeter_index = 0\n                number_index\
    \ += 1\n            }\n            else {\n                result += delimeter\n\
    \                delimeter_index += 1\n            }\n        }\n        if (numbers_iter.hasNext)\
    \ {\n            result += numbers_iter.next()\n        }\n        if (delimeter_iter.hasNext)\
    \ {\n            result += delimeter_iter.next()\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnn1t5oby.scala:11:39 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdelimeter_iter\e[0m = delimeter.iterator\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             value iterator is not a member of Long\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = numbers_copy.foldLeft(List[Long]())((acc,\
    \ x) => acc :+ delimeter + x)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkg51z6od.scala:16)\n\tat Problem.main(tmpkg51z6od.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq8b4gvs.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = numbers_copy.foldLeft(List[Long]())((acc,\
    \ number) => {\n            acc match {\n                case Nil => List(number)\n\
    \                case _ => acc ++ List(delimeter, number)\n            }\n   \
    \     })\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.size) {\n            result.append(numbersList(i))\n\
    \            if (i < numbersList.size - 1) {\n                result.append(delimeter)\n\
    \            }\n            i += 1\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjx4yfaxc.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < numbers.size) {\n            result += numbers.take(i).map(_.toLong)\
    \ + delimeter\n            i += numbers.size - 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyfnq7rx5.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            val newNumber = number + delimeter\n            result\
    \ += List(newNumber)\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4a561w0.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, elem) => {\n      \
    \      acc :+ elem\n            acc :+ delimeter\n        })\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf0hr6x0r.scala:18)\n\tat Problem.main(tmpf0hr6x0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => result += delimeter + number)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoahv4a4o.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, number) => {\n    \
    \        acc match {\n                case Nil => List(number)\n             \
    \   case head :: tail => head :: delimeter :: tail\n            }\n        })\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcw1skxjv.scala:20)\n\tat Problem.main(tmpcw1skxjv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result += x)\n        result.takeWhile(x => x != delimeter).foreach(x =>\
    \ result += delimeter)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_0utq0w1.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result += delimeter + x)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphsdf8xs6.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersWithDelimeter = numbers.map(n => delimeter*n).toList\n   \
    \     numbersWithDelimeter.takeRight(numbersWithDelimeter.size/2).reverse.take(numbersWithDelimeter.size/2).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbruw9_cy.scala:15)\n\tat Problem.main(tmpbruw9_cy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_iter = numbers.iterator\n        val delimeter_iter = delimeter.iterator\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var current_delimeter\
    \ = delimeter_iter.next()\n        var current_number = numbers_iter.next()\n\
    \        while (current_number != 0l) {\n            if (current_delimeter ==\
    \ delimeter_iter.next()) {\n                current_delimeter = delimeter_iter.next()\n\
    \                result += current_number\n                current_number = numbers_iter.next()\n\
    \            } else {\n                result += current_delimeter\n         \
    \       current_delimeter = delimeter_iter.next()\n                result += current_number\n\
    \                current_number = numbers_iter.next()\n            }\n       \
    \ }\n        result += current_delimeter\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuwht434h.scala:11:39 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdelimeter_iter\e[0m = delimeter.iterator\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             value iterator is not a member of Long\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuwht434h.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = numbers_copy\
    \ match {\n            case Nil => Nil\n            case head :: tail => head\
    \ :: delimeter :: intersperse(tail, delimeter)\n        }\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpipp2o3ng.scala:19)\n\tat Problem.main(tmpipp2o3ng.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = numbers_copy.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ List(x)) ++ numbers_copy.drop(1).map(x => delimeter + x)\n    \
    \    result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp78urhdx5.scala:16)\n\tat Problem.main(tmp78urhdx5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => result += delimeter + number)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoahv4a4o.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        numbersList.zipWithIndex.foreach { case (number, index) =>\n        \
    \    if (index != 0) {\n                result.add(delimeter)\n            }\n\
    \            result.add(number)\n        }\n        result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon3o4sfl.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_size = numbers.size\n        val numbers_size_2 = numbers_size\
    \ >>> 1\n        val numbers_size_3 = numbers_size_2 >>> 1\n        val numbers_size_4\
    \ = numbers_size_3 >>> 1\n        val numbers_size_5 = numbers_size_4 >>> 1\n\
    \        val numbers_size_6 = numbers_size_5 >>> 1\n        val numbers_size_7\
    \ = numbers_size_6 >>> 1\n        val numbers_size_8 = numbers_size_7 >>> 1\n\
    \        val numbers_size_9 = numbers_size_8 >>> 1\n        val numbers_size_10\
    \ = numbers_size_9 >>> 1\n        val numbers_size_11 = numbers_size_10 >>> 1\n\
    \        val numbers_size_12 = numbers_size_11 >>> 1\n        val numbers_size_13\
    \ = numbers_size_12 >>> 1\n        val numbers_size_14 = numbers_size_13 >>> 1\n\
    \        val numbers_size_15 = numbers_size_14 >>> 1\n        val numbers_size_16\
    \ = numbers_size_15 >>> 1\n        val numbers_size_17 = numbers_size_16 >>> 1\n\
    \        val numbers_size_18 = numbers_size_17 >>> 1\n        val numbers_size_19\
    \ = numbers_size_18 >>> 1\n        val numbers_size_20 = numbers_size_19 >>> 1\n\
    \        val numbers_size_21 = numbers_size_20 >>> 1\n        val numbers_size_22\
    \ = numbers_size_21 >>> 1\n        val numbers_size_23 = numbers_size_22 >>> 1\n\
    \        val numbers_size_24 = numbers_size_23 >>> 1\n        val numbers_size_25\
    \ = numbers_size_24 >>> 1\n        val numbers_size_26 = numbers_size_25 >>> 1\n\
    \        val numbers_size_27 = numbers_size_26 >>> 1\n        val numbers_size_28\
    \ = numbers_size_27 >>> 1\n        val numbers_size_29 = numbers_size_28 >>> 1\n\
    \        val numbers_size_30 = numbers_size_29 >>> 1\n        val numbers_size_31\
    \ = numbers_size_30 >>> 1\n        val numbers_size_32 = numbers_size_31 >>> 1\n\
    \        val numbers_size_33 = numbers_size_32 >>> 1\n        val numbers_size_34\
    \ = numbers_size_33 >>> 1\n        val numbers_size_35 = numbers_size_34 >>> 1\n\
    \        val numbers_size_36 = numbers_size_35 >>> 1\n        val numbers_size_37\
    \ = numbers_size_36 >>> 1\n        val numbers_size_38 = numbers_size_37 \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8cfa0xd.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.size) {\n            val currentNumber\
    \ = numbersList(i)\n            val nextNumber = numbersList(i + 1)\n        \
    \    if (currentNumber != delimeter) {\n                result += currentNumber\n\
    \            }\n            result += nextNumber\n            i += 1\n       \
    \ }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx50ld8qp.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => result += delimeter + number)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoahv4a4o.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.length) {\n            val\
    \ currentNumber = numbersList(i)\n            val nextNumber = numbersList(i +\
    \ 1)\n            if (currentNumber != nextNumber) {\n                result +=\
    \ currentNumber\n                result += delimeter\n                i += 1\n\
    \            } else {\n                result += currentNumber\n             \
    \   i += 1\n            }\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjlfe8c_r.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = numbers_copy.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ List(x)) ++ numbers_copy.tail.foldLeft(List[Long]())((acc, x) =>\
    \ acc ++ List(x)) ++ delimeter::numbers_copy.tail\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ru04mfg.scala:11:160\
    \ -------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = numbers_copy.foldLeft(List[\e[35mLong\e[0m]())((\e[36macc\e[0m, \e[36mx\e\
    [0m) => acc ++ List(x)) ++ numbers_copy.tail.foldLeft(List[\e[35mLong\e[0m]())((\e\
    [36macc\e[0m, \e[36mx\e[0m) => acc ++ List(x)) ++ delimeter::numbers_copy.tail\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                           Found:    (delimeter : Long)\n\e[31m   |\e[0m    \
    \                                        Required: IterableOnce[Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ru04mfg.scala:12:8 ---------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : List[Matchable])\n\e[31m   |\e\
    [0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = numbers_copy.foldLeft(List[Long]())((acc,\
    \ elem) => {\n            acc :+ elem\n            acc :+ delimeter\n        })\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6_3k8rcx.scala:19)\n\tat Problem.main(tmp6_3k8rcx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, number) => {\n    \
    \        acc match {\n                case Nil => List(number)\n             \
    \   case _ => acc :+ delimeter + number\n            }\n        })\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9u4a7kg.scala:20)\n\tat Problem.main(tmpn9u4a7kg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        numbersList.foreach { number =>\n            result += number\n     \
    \       result += delimeter\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzifb7zje.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]()) { (result, number) => result\
    \ :+ number + delimeter + number }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptscj_2rh.scala:15)\n\tat Problem.main(tmptscj_2rh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val numbers_copy2 = numbers_copy.tail\n\
    \        numbers_copy2.zip(numbers_copy).map { case (first, second) => first +\
    \ delimeter + second }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: tail of empty list\n\tat scala.collection.immutable.Nil$.tail(List.scala:664)\n\
    \tat scala.collection.immutable.Nil$.tail(List.scala:661)\n\tat Problem$.intersperse(tmpjkmc60uf.scala:11)\n\
    \tat Problem$.main(tmpjkmc60uf.scala:15)\n\tat Problem.main(tmpjkmc60uf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < numbers.size) {\n            result += numbers(i).toLong\n   \
    \         result += delimeter\n            i += 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplhna1btu.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < numbers.size) {\n            result.append(numbers(i))\n     \
    \       result.append(delimeter)\n            i += 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpohgr0101.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result ++= List(number).sliding(2).map(_.mkString(delimeter))\n\
    \        }\n        result.flatten\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiv3mznhv.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result += x)\n        result += delimeter\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoftp5ewk.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val numbers_copy2 = numbers_copy.tail\n\
    \        val numbers_copy3 = numbers_copy2.tail\n        numbers_copy3.zip(numbers_copy2).map(x\
    \ => x._1 + delimeter + x._2)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: tail of empty list\n\tat scala.collection.immutable.Nil$.tail(List.scala:664)\n\
    \tat scala.collection.immutable.Nil$.tail(List.scala:661)\n\tat Problem$.intersperse(tmpx81iyflf.scala:11)\n\
    \tat Problem$.main(tmpx81iyflf.scala:16)\n\tat Problem.main(tmpx81iyflf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result += x)\n        result.takeWhile(_ < delimeter).foreach(x => result\
    \ += delimeter)\n        result.takeWhile(_ > delimeter).foreach(x => result +=\
    \ x)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5um26swd.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, number) => {\n    \
    \        acc match {\n                case Nil => List(number).reverse\n     \
    \           case head :: tail => head :: delimeter :: tail\n            }\n  \
    \      })\n        result.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4_imityk.scala:20)\n\tat Problem.main(tmp4_imityk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val numbers_copy2 = numbers.toList\n\
    \        val numbers_copy3 = numbers.toList\n        val numbers_copy4 = numbers.toList\n\
    \        val numbers_copy5 = numbers.toList\n        val numbers_copy6 = numbers.toList\n\
    \        val numbers_copy7 = numbers.toList\n        val numbers_copy8 = numbers.toList\n\
    \        val numbers_copy9 = numbers.toList\n        val numbers_copy10 = numbers.toList\n\
    \        val numbers_copy11 = numbers.toList\n        val numbers_copy12 = numbers.toList\n\
    \        val numbers_copy13 = numbers.toList\n        val numbers_copy14 = numbers.toList\n\
    \        val numbers_copy15 = numbers.toList\n        val numbers_copy16 = numbers.toList\n\
    \        val numbers_copy17 = numbers.toList\n        val numbers_copy18 = numbers.toList\n\
    \        val numbers_copy19 = numbers.toList\n        val numbers_copy20 = numbers.toList\n\
    \        val numbers_copy21 = numbers.toList\n        val numbers_copy22 = numbers.toList\n\
    \        val numbers_copy23 = numbers.toList\n        val numbers_copy24 = numbers.toList\n\
    \        val numbers_copy25 = numbers.toList\n        val numbers_copy26 = numbers.toList\n\
    \        val numbers_copy27 = numbers.toList\n        val numbers_copy28 = numbers.toList\n\
    \        val numbers_copy29 = numbers.toList\n        val numbers_copy30 = numbers.toList\n\
    \        val numbers_copy31 = numbers.toList\n        val numbers_copy32 = numbers.toList\n\
    \        val numbers_copy33 = numbers.toList\n        val numbers_copy34 = numbers.toList\n\
    \        val numbers_copy35 = numbers.toList\n        val numbers_copy36 = numbers.toList\n\
    \        val numbers_copy37 = numbers.toList\n        val numbers_copy38 = numbers.toList\n\
    \        val numbers_copy39 = numbers.toList\n        val numbers_copy40 = numbers.toList\n\
    \        val numbers_copy41 = numbers.toList\n        val numbers_copy42 = numbers.toList\n\
    \        val numbers_copy43 = numbers.toList\n        val numbers_copy44 = numbers.toList\n\
    \        val numbers_copy45 = numbers.toList\n        val numbers_copy46 = numbers.toList\n\
    \        val numbers_copy47 = numbers.toList\n        val numbers_copy48 = numbers.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8h7uo6_3.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8h7uo6_3.scala:58:5 ---------------------\e[0m\e[0m\n\e[31m58\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, number) => {\n    \
    \        acc match {\n                case Nil => List(number).reverse\n     \
    \           case head :: tail => head :: delimeter :: tail\n            }\n  \
    \      })\n        result.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4_imityk.scala:20)\n\tat Problem.main(tmp4_imityk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < numbers.size) {\n            result += numbers.take(i).map(_.toLong)\
    \ + delimeter\n            result += numbers.drop(i).map(_.toLong)\n         \
    \   i += 1\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz18udzm5.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc :+ delimeter\
    \ + x.toLong)\n        result :+ delimeter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6idik_bo.scala:14)\n\tat Problem.main(tmp6idik_bo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val delimeters = numbers_copy.sliding(2).map(_.toLong).toList\n\
    \        numbers_copy.zip(delimeters).map { case (x, y) => x + delimeter + y }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa_dnaldk.scala:11:55 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdelimeters\e[0m = numbers_copy.sliding(\e\
    [31m2\e[0m).map(_.toLong).toList\n\e[31m\e[31m   |\e[0m                      \
    \                               ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is\
    \ not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E051] Reference Error: /tmp/tmpa_dnaldk.scala:12:72 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numbers_copy.zip(delimeters).map { \e[33mcase\e\
    [0m (x, y) => x + delimeter + y }\n\e[31m\e[31m   |\e[0m                     \
    \                                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e\
    [33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Long): Long\n\e\
    [31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m\
    \ (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mall match\
    \ arguments ((y : Nothing))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, number) => {\n    \
    \        val newAcc = acc :+ number\n            val newDelimeter = delimeter\n\
    \            newAcc :+ newDelimeter\n        })\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmnyzxdsv.scala:19)\n\tat Problem.main(tmpmnyzxdsv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => result += delimeter + number)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoahv4a4o.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc ++ List(x))\
    \ // append the delimeter\n        val result2 = result.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ List(x)) // append the delimeter\n        result2.reverse.drop(1).reverse.take(numbers.size)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpls33jein.scala:16)\n\tat Problem.main(tmpls33jein.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach{\
    \ number =>\n            result += number\n            result += delimeter\n \
    \       }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lp4m880.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = numbers_copy.zipWithIndex.map\
    \ {\n            case (number, index) => (index > 0 ? delimeter : number).+:(number)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp72j_wylo.scala:12:61 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m (number, index) => (index\
    \ > \e[31m0\e[0m ? delimeter : number).+:(number)\n\e[31m\e[31m   |\e[0m     \
    \                                                        ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                                  Not found: type number\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp72j_wylo.scala:12:47\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e\
    [0m (number, index) => (index > \e[31m0\e[0m ? delimeter : number).+:(number)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^\e[0m\n\e\
    [31m   |\e[0m                                          value ? is not a member\
    \ of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result += x)\n        result.takeWhile(_ != delimeter) match {\n        \
    \    case Nil => Nil\n            case x :: xs => x :: intersperse(xs, delimeter)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy9qn_1i_.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy9qn_1i_.scala:14:45\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e\
    [0m x :: xs => x :: intersperse(xs, delimeter)\n\e[31m\e[31m   |\e[0m        \
    \                                     ^^\e[0m\n\e[31m   |\e[0m               \
    \                              Not found: xs\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpy9qn_1i_.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m x :: xs => x :: intersperse(xs,\
    \ delimeter)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: x\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793969
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc :+ delimeter\
    \ + x.toLong)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4jzw045s.scala:15)\n\tat Problem.main(tmp4jzw045s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.size) {\n            result.append(numbersList(i))\n\
    \            result.append(delimeter)\n            i += 1\n        }\n       \
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpds1paro2.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.size) {\n            result.append(numbersList(i))\n\
    \            result.append(delimeter)\n            i += 1\n        }\n       \
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpds1paro2.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_size = numbers.size\n        val numbers_size_2 = numbers_size\
    \ / 2\n        val numbers_size_3 = numbers_size_2 / 2\n        val numbers_size_4\
    \ = numbers_size_3 / 2\n        val numbers_size_5 = numbers_size_4 / 2\n    \
    \    val numbers_size_6 = numbers_size_5 / 2\n        val numbers_size_7 = numbers_size_6\
    \ / 2\n        val numbers_size_8 = numbers_size_7 / 2\n        val numbers_size_9\
    \ = numbers_size_8 / 2\n        val numbers_size_10 = numbers_size_9 / 2\n   \
    \     val numbers_size_11 = numbers_size_10 / 2\n        val numbers_size_12 =\
    \ numbers_size_11 / 2\n        val numbers_size_13 = numbers_size_12 / 2\n   \
    \     val numbers_size_14 = numbers_size_13 / 2\n        val numbers_size_15 =\
    \ numbers_size_14 / 2\n        val numbers_size_16 = numbers_size_15 / 2\n   \
    \     val numbers_size_17 = numbers_size_16 / 2\n        val numbers_size_18 =\
    \ numbers_size_17 / 2\n        val numbers_size_19 = numbers_size_18 / 2\n   \
    \     val numbers_size_20 = numbers_size_19 / 2\n        val numbers_size_21 =\
    \ numbers_size_20 / 2\n        val numbers_size_22 = numbers_size_21 / 2\n   \
    \     val numbers_size_23 = numbers_size_22 / 2\n        val numbers_size_24 =\
    \ numbers_size_23 / 2\n        val numbers_size_25 = numbers_size_24 / 2\n   \
    \     val numbers_size_26 = numbers_size_25 / 2\n        val numbers_size_27 =\
    \ numbers_size_26 / 2\n        val numbers_size_28 = numbers_size_27 / 2\n   \
    \     val numbers_size_29 = numbers_size_28 / 2\n        val numbers_size_30 =\
    \ numbers_size_29 / 2\n        val numbers_size_31 = numbers_size_30 / 2\n   \
    \     val numbers_size_32 = numbers_size_31 / 2\n        val numbers_size_33 =\
    \ numbers_size_32 / 2\n        val numbers_size_34 = numbers_size_33 / 2\n   \
    \     val numbers_size_35 = numbers_size_34 / 2\n        val numbers_size_36 =\
    \ numbers_size_35 / 2\n        val numbers_size_37 = numbers_size_36 / 2\n   \
    \     val numbers_size_38 = numbers_size_37 / 2\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4ve9qcp.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]()) {\n            (acc, elem)\
    \ => acc match {\n                case Nil => List(elem).::: acc\n           \
    \     case head :: tail => head :: elem :: tail\n            }\n        }\n  \
    \      result.take(result.size - 1).reverse.foldLeft(List[Long]()) {\n       \
    \     (acc, elem) => acc match {\n                case Nil => List(elem).::: acc\n\
    \                case head :: tail => head :: delimeter :: elem :: tail\n    \
    \        }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6_xprm_7.scala:12:46 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mcase\e[0m Nil => List(elem).:::\
    \ acc\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                          expression expected but \e[31mend\
    \ of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmp6_xprm_7.scala:18:46 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m                \e[33mcase\e[0m Nil => List(elem).::: acc\n\e[31m\e[31m\
    \   |\e[0m                                              ^\e[0m\n\e[31m   |\e[0m\
    \                          expression expected but \e[31mend of statement\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersWithDelimeter = numbers.map(n => delimeter*n).toList\n   \
    \     numbersWithDelimeter.take(numbers.size/2).zip(numbersWithDelimeter.drop(numbers.size/2))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0iwhavrh.scala:11:53\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        numbersWithDelimeter.take(numbers.size/\e\
    [31m2\e[0m).zip(numbersWithDelimeter.drop(numbers.size/\e[31m2\e[0m))\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31mLong\e[0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m  \
    \      Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_iter = numbers.iterator\n        val delimeter_iter = delimeter.iterator\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val delimeter_next\
    \ = delimeter_iter.next()\n        val numbers_next = numbers_iter.next()\n  \
    \      while (numbers_next != delimeter_next) {\n            result.add(numbers_next)\n\
    \            result.add(delimeter_next)\n            numbers_next = numbers_iter.next()\n\
    \            delimeter_next = delimeter_iter.next()\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps8q6zmmr.scala:11:39 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdelimeter_iter\e[0m = delimeter.iterator\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             value iterator is not a member of Long\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps8q6zmmr.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmps8q6zmmr.scala:18:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            numbers_next\
    \ = numbers_iter.next()\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val numbers_next\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmps8q6zmmr.scala:19:27 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            delimeter_next = delimeter_iter.next()\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Reassignment to val delimeter_next\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659793973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var index = 0\n        while (index < numbersList.size) {\n         \
    \   result.append(numbersList.get(index))\n            result.append(delimeter)\n\
    \            index += 1\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxu8028sw.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_size = numbers.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbers_size) {\n            val number\
    \ = numbers(i)\n            if (number == delimeter) {\n                result.add(delimeter)\n\
    \                i += 1\n            } else {\n                result.add(number)\n\
    \                i += 1\n            }\n        }\n        result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc43gvyj2.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, number) => {\n    \
    \        acc :+ number\n            acc :+ delimeter\n        })\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4fusnbt1.scala:18)\n\tat Problem.main(tmp4fusnbt1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val numbers_copy2 = numbers_copy.toList\n\
    \        val numbers_copy3 = numbers_copy2.toList\n        val numbers_copy4 =\
    \ numbers_copy3.toList\n        numbers_copy4.takeWhile(_ < delimeter).map(_ +\
    \ delimeter) ++ numbers_copy4.dropWhile(_ < delimeter).map(_ + delimeter)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnqnjscnu.scala:18)\n\tat Problem.main(tmpnqnjscnu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(n\
    \ => result += delimeter + n)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprpj72g1z.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result += x)\n        result.takeWhile(x => x != delimeter).foreach(x =>\
    \ result += delimeter)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_0utq0w1.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc ++ List(x)\
    \ + delimeter)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp70a06l_u.scala:10:79 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = numbers.foldLeft(List[\e\
    [35mLong\e[0m]())((\e[36macc\e[0m, \e[36mx\e[0m) => acc ++ List(x) + delimeter)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.size) {\n            result.append(numbersList(i))\n\
    \            result.append(delimeter)\n            i += 1\n        }\n       \
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpds1paro2.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach{\
    \ number =>\n            result += number\n            result += delimeter\n \
    \       }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lp4m880.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => x :: acc)\n \
    \       val delimeters = result.takeWhile(_ != delimeter)\n        val interspersedResult\
    \ = delimeters.reverse.foldLeft(List[Long]())((acc, x) => x :: acc)\n        result.drop(delimeters.length).reverse\
    \ ++ interspersedResult\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2pz27upm.scala:17)\n\tat Problem.main(tmp2pz27upm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < numbers.size) {\n            result.append(numbers(i))\n     \
    \       result.append(delimeter)\n            i += 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpohgr0101.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val delimeter_copy = delimeter\n\
    \        val result = numbers_copy.foldLeft(List[Long]())((acc, x) => {\n    \
    \        val delimeter_copy = delimeter\n            val result = acc.foldLeft(List[Long]())((acc,\
    \ x) => {\n                val delimeter_copy = delimeter\n                val\
    \ result = acc.foldLeft(List[Long]())((acc, x) => {\n                    val delimeter_copy\
    \ = delimeter\n                    val result = acc.foldLeft(List[Long]())((acc,\
    \ x) => {\n                        val delimeter_copy = delimeter\n          \
    \              val result = acc.foldLeft(List[Long]())((acc, x) => {\n       \
    \                     val delimeter_copy = delimeter\n                       \
    \     val result = acc.foldLeft(List[Long]())((acc, x) => {\n                \
    \                val delimeter_copy = delimeter\n                            \
    \    val result = acc.foldLeft(List[Long]())((acc, x) => {\n                 \
    \                   val delimeter_copy = delimeter\n                         \
    \           val result = acc.foldLeft(List[Long]())((acc, x) => {\n          \
    \                              val delimeter_copy = delimeter\n              \
    \                          val result = acc.foldLeft(List[Long]())((acc, x) =>\
    \ {\n                                            val delimeter_copy = delimeter\n\
    \                                            val result = acc.foldLeft(List[Long]())((acc,\
    \ x) => {\n                                                val delimeter_copy\
    \ = delimeter\n                                                val result = acc.foldLeft(List[Long]())((acc,\
    \ x) => {\n                                                    val delimeter_copy\
    \ = delimeter\n                                                    val result\
    \ = acc.foldLeft(List[Long]())((acc, x) => {\n                               \
    \                         val delimeter_copy = delimeter\n                   \
    \                                     val result = acc.foldLeft(List[Long]())((acc,\
    \ x) => {\n                                                            val delimeter_copy\
    \ = delimeter\n                                                            val\
    \ result = acc.foldLeft(List[Long]())((acc, x) => {\n                        \
    \                                        val delimeter_copy = delimeter\n    \
    \                                                            val result = acc.foldLeft(List[Long]())((acc,\
    \ x) => {\n                                                                  \
    \  val delimeter_copy = delimeter\n                                          \
    \                          val result = acc.foldLeft(List[Long]())((acc, x) =>\
    \ {\n                                                                        val\
    \ delimeter_copy = delimeter\n                                               \
    \                         val result = acc.foldLeft(List[Long]())((acc, x) =>\
    \ {\n                                                                        \
    \    val delimeter_copy = delimeter\n                                        \
    \                                    val result = acc.foldLeft(List[Long]())((acc,\
    \ x) => {\n                                                                  \
    \              val delimeter_copy = delimeter\n                              \
    \                                                  val result = acc.foldLeft(List[Long]())((acc,\
    \ x) => {\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5mkirpnh.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp5mkirpnh.scala:57:0 ----------------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5mkirpnh.scala:48:132 -------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mresult\e[0m = acc.foldLeft(List[\e\
    [35mLong\e[0m]())((\e[36macc\e[0m, \e[36mx\e[0m) => {\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                                    Found:    Unit\n\e[31m  \
    \ |\e[0m                                                    Required: List[Long]\n\
    \e[31m49 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5mkirpnh.scala:56:1\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < numbers.size) {\n            result.append(numbers(i))\n     \
    \       result.append(delimeter)\n            result.append(numbers(i + 1))\n\
    \            i += 1\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph2wz7yo8.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(n\
    \ => result += delimeter * n)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpij0teze_.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersWithDelimeter = numbers.map(n => delimeter * n + n).toList\n\
    \        numbersWithDelimeter\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp12kgvg_y.scala:15)\n\tat Problem.main(tmp12kgvg_y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_size = numbers.size\n        val numbers_size_2 = numbers_size\
    \ >>> 1\n        val numbers_size_3 = numbers_size_2 >>> 1\n        val numbers_size_4\
    \ = numbers_size_3 >>> 1\n        val numbers_size_5 = numbers_size_4 >>> 1\n\
    \        val numbers_size_6 = numbers_size_5 >>> 1\n        val numbers_size_7\
    \ = numbers_size_6 >>> 1\n        val numbers_size_8 = numbers_size_7 >>> 1\n\
    \        val numbers_size_9 = numbers_size_8 >>> 1\n        val numbers_size_10\
    \ = numbers_size_9 >>> 1\n        val numbers_size_11 = numbers_size_10 >>> 1\n\
    \        val numbers_size_12 = numbers_size_11 >>> 1\n        val numbers_size_13\
    \ = numbers_size_12 >>> 1\n        val numbers_size_14 = numbers_size_13 >>> 1\n\
    \        val numbers_size_15 = numbers_size_14 >>> 1\n        val numbers_size_16\
    \ = numbers_size_15 >>> 1\n        val numbers_size_17 = numbers_size_16 >>> 1\n\
    \        val numbers_size_18 = numbers_size_17 >>> 1\n        val numbers_size_19\
    \ = numbers_size_18 >>> 1\n        val numbers_size_20 = numbers_size_19 >>> 1\n\
    \        val numbers_size_21 = numbers_size_20 >>> 1\n        val numbers_size_22\
    \ = numbers_size_21 >>> 1\n        val numbers_size_23 = numbers_size_22 >>> 1\n\
    \        val numbers_size_24 = numbers_size_23 >>> 1\n        val numbers_size_25\
    \ = numbers_size_24 >>> 1\n        val numbers_size_26 = numbers_size_25 >>> 1\n\
    \        val numbers_size_27 = numbers_size_26 >>> 1\n        val numbers_size_28\
    \ = numbers_size_27 >>> 1\n        val numbers_size_29 = numbers_size_28 >>> 1\n\
    \        val numbers_size_30 = numbers_size_29 >>> 1\n        val numbers_size_31\
    \ = numbers_size_30 >>> 1\n        val numbers_size_32 = numbers_size_31 >>> 1\n\
    \        val numbers_size_33 = numbers_size_32 >>> 1\n        val numbers_size_34\
    \ = numbers_size_33 >>> 1\n        val numbers_size_35 = numbers_size_34 >>> 1\n\
    \        val numbers_size_36 = numbers_size_35 >>> 1\n        val numbers_size_37\
    \ = numbers_size_36 >>> 1\n        val numbers_size_38 = numbers_size_37 \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8cfa0xd.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc :+ delimeter\
    \ + x.toLong)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4jzw045s.scala:15)\n\tat Problem.main(tmp4jzw045s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, elem) => acc :+ delimeter\
    \ + elem)\n        result.dropRight(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwavhd7vp.scala:15)\n\tat Problem.main(tmpwavhd7vp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val delimeter_copy = delimeter\n\
    \        numbers_copy.zip(numbers_copy).map(x => x._1 + delimeter_copy + x._2).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp42zy6o64.scala:16)\n\tat Problem.main(tmp42zy6o64.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result += delimeter + x)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphsdf8xs6.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val delimeter_copy = delimeter\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < numbers_copy.size) {\n            if (numbers_copy(i) == delimeter_copy)\
    \ {\n                result.add(numbers_copy(i))\n                i += 1\n   \
    \         } else {\n                result.add(numbers_copy(i))\n            \
    \    result.add(delimeter_copy)\n                i += 1\n            }\n     \
    \   }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3ctbtw8.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < numbers.size) {\n            result.append(numbers(i))\n     \
    \       result.append(delimeter)\n            i += 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpohgr0101.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val numbers_copy = numbers_copy.dropRight(1)\n\
    \        numbers_copy.take(numbers_copy.size - 1).zip(numbers_copy.drop(1)).map\
    \ {\n            case (first, second) => first + delimeter + second\n        }.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb0v4jn0q.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumbers_copy\e[0m = numbers_copy.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumbers_copy is already defined as \e[33mvalue\e[0m \e[35mnumbers_copy\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659793978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, number) => {\n    \
    \        acc match {\n                case Nil => List(number).reverse\n     \
    \           case _ => List(number).reverse ++ List(delimeter).reverse ++ acc\n\
    \            }\n        })\n        result.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => result += number * delimeter)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpik2ss_33.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersWithDelimeter = numbers.zipWithIndex.map { case (number, index)\
    \ =>\n            if (index != 0) {\n                number + delimeter\n    \
    \        } else {\n                number\n            }\n        }\n        numbersWithDelimeter.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprlpv4q9i.scala:21)\n\tat Problem.main(tmprlpv4q9i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.size) {\n            result.append(numbersList(i))\n\
    \            result.append(delimeter)\n            i += 1\n        }\n       \
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpds1paro2.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result.add(x+delimeter))\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgwwkjpdf.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc ++ List(x))\
    \ ++ List(delimeter)\n        val result2 = result.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ List(x)) ++ List(delimeter)\n        result2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppbeot1m3.scala:15)\n\tat Problem.main(tmppbeot1m3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_size = numbers.size\n        val numbers_size_2 = numbers_size\
    \ >>> 1\n        val numbers_size_3 = numbers_size_2 >>> 1\n        val numbers_size_4\
    \ = numbers_size_3 >>> 1\n        val numbers_size_5 = numbers_size_4 >>> 1\n\
    \        val numbers_size_6 = numbers_size_5 >>> 1\n        val numbers_size_7\
    \ = numbers_size_6 >>> 1\n        val numbers_size_8 = numbers_size_7 >>> 1\n\
    \        val numbers_size_9 = numbers_size_8 >>> 1\n        val numbers_size_10\
    \ = numbers_size_9 >>> 1\n        val numbers_size_11 = numbers_size_10 >>> 1\n\
    \        val numbers_size_12 = numbers_size_11 >>> 1\n        val numbers_size_13\
    \ = numbers_size_12 >>> 1\n        val numbers_size_14 = numbers_size_13 >>> 1\n\
    \        val numbers_size_15 = numbers_size_14 >>> 1\n        val numbers_size_16\
    \ = numbers_size_15 >>> 1\n        val numbers_size_17 = numbers_size_16 >>> 1\n\
    \        val numbers_size_18 = numbers_size_17 >>> 1\n        val numbers_size_19\
    \ = numbers_size_18 >>> 1\n        val numbers_size_20 = numbers_size_19 >>> 1\n\
    \        val numbers_size_21 = numbers_size_20 >>> 1\n        val numbers_size_22\
    \ = numbers_size_21 >>> 1\n        val numbers_size_23 = numbers_size_22 >>> 1\n\
    \        val numbers_size_24 = numbers_size_23 >>> 1\n        val numbers_size_25\
    \ = numbers_size_24 >>> 1\n        val numbers_size_26 = numbers_size_25 >>> 1\n\
    \        val numbers_size_27 = numbers_size_26 >>> 1\n        val numbers_size_28\
    \ = numbers_size_27 >>> 1\n        val numbers_size_29 = numbers_size_28 >>> 1\n\
    \        val numbers_size_30 = numbers_size_29 >>> 1\n        val numbers_size_31\
    \ = numbers_size_30 >>> 1\n        val numbers_size_32 = numbers_size_31 >>> 1\n\
    \        val numbers_size_33 = numbers_size_32 >>> 1\n        val numbers_size_34\
    \ = numbers_size_33 >>> 1\n        val numbers_size_35 = numbers_size_34 >>> 1\n\
    \        val numbers_size_36 = numbers_size_35 >>> 1\n        val numbers_size_37\
    \ = numbers_size_36 >>> 1\n        val numbers_size_38 = numbers_size_37 \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8cfa0xd.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc ++ List(x+delimeter,\
    \ x+delimeter))\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo2n3uyf_.scala:15)\n\tat Problem.main(tmpo2n3uyf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, number) => {\n    \
    \        val newAcc = acc :+ number\n            val newDelimeter = delimeter\
    \ :+ number\n            intersperse(newAcc, newDelimeter)\n        })\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpedp36hbm.scala:12:41 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mnewDelimeter\e[0m =\
    \ delimeter :+ number\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value :+ is not a member of\
    \ Long\n1 error found\n"
  stdout: ''
  timestamp: 1659793981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, elem) => acc :+ delimeter\
    \ + elem)\n        result.dropRight(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwavhd7vp.scala:15)\n\tat Problem.main(tmpwavhd7vp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val numbers_copy2 = numbers.toList\n\
    \        numbers_copy.zipWithIndex.foreach { case (number, index) =>\n       \
    \     if (index != numbers_copy.size - 1) {\n                numbers_copy2.insert(index\
    \ + 1, delimeter)\n            }\n        }\n        numbers_copy2\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprphw7rix.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                numbers_copy2.insert(index + \e[31m1\e\
    [0m, delimeter)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue insert is not a member of List[Long] - did you mean numbers_copy2.init?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc :+ delimeter\
    \ + x.toLong)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4jzw045s.scala:15)\n\tat Problem.main(tmp4jzw045s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var index = 0\n        numbersList.foreach { number =>\n            if\
    \ (index > 0) {\n                result.add(delimeter)\n            }\n      \
    \      result.add(number)\n            index += 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdtx0chg_.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val delimeter_copy = delimeter\n\
    \        val result = numbers_copy.foldLeft(List[Long]())((acc, x) => acc :+ delimeter_copy\
    \ + x.toLong)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm2uxkwm_.scala:17)\n\tat Problem.main(tmpm2uxkwm_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.zipWithIndex.foreach\
    \ {\n            case (number, index) =>\n                if (index > 0) {\n \
    \                   result += (delimeter * index).toLong\n                }\n\
    \                result += number.toLong\n        }\n        result.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuy0c_b3p.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = numbers_copy\
    \ match {\n            case Nil => Nil\n            case head :: tail => head\
    \ :: intersperse(tail, delimeter) match {\n                case Nil => Nil\n \
    \               case head :: tail => head :: delimeter :: intersperse(tail, delimeter)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:12)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:13)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:13)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\
    \tat Problem$.intersperse(tmpbpy5ht8f.scala:15)\n\tat Problem$.inter"
  stdout: ''
  timestamp: 1659793984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach{\
    \ number =>\n            result += number\n            result += delimeter\n \
    \       }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lp4m880.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val delimeter_copy = delimeter\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < numbers_copy.length) {\n            val current = numbers_copy(i)\n\
    \            val next = numbers_copy(i + 1)\n            if (next == delimeter_copy)\
    \ {\n                result.add(current)\n                i += 1\n           \
    \ } else {\n                result.add(current)\n                result.add(delimeter_copy)\n\
    \                i += 1\n            }\n        }\n        result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzz5jwrvc.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => {\n            result += number\n            result += delimeter\n      \
    \  })\n        result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprupuwsge.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach{\
    \ number =>\n            result += number\n            result += delimeter\n \
    \       }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lp4m880.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result.add(x+delimeter))\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgwwkjpdf.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc :+ delimeter\
    \ + x)\n        result.dropRight(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt84l6xkp.scala:15)\n\tat Problem.main(tmpt84l6xkp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbers_copy.size) {\n            if (i\
    \ % 2 == 0) {\n                result += numbers_copy(i)\n            }\n    \
    \        result += delimeter\n            i += 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvqwpigom.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var current = 0\n\
    \        var last = 0\n        numbers.foreach { number =>\n            if (current\
    \ != last) {\n                result += delimeter\n            }\n           \
    \ result += number\n            last = number\n            current = number\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoll0njnm.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoll0njnm.scala:18:19\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            last = number\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \        Found:    (number : Long)\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoll0njnm.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            current = number\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    (number : Long)\n\e[31m   |\e[0m                  \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val numbers_copy2 = numbers_copy.toList\n\
    \        numbers_copy2.reverse.foldLeft(List[Long]())((acc, elem) => {\n     \
    \       acc :+ delimeter + elem\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkp_0whrs.scala:18)\n\tat Problem.main(tmpkp_0whrs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc :+ delimeter\
    \ + x.toLong)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4jzw045s.scala:15)\n\tat Problem.main(tmp4jzw045s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val delimeter_copy = delimeter\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < numbers_copy.size) {\n            val current_number = numbers_copy(i)\n\
    \            val next_number = numbers_copy(i + 1)\n            if (next_number\
    \ == delimeter_copy) {\n                result.add(current_number)\n         \
    \       i += 1\n            } else {\n                result.add(current_number)\n\
    \                result.add(delimeter_copy)\n                i += 1\n        \
    \    }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp70sa4hnq.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = numbers_copy.foldLeft(List[Long]())((acc,\
    \ elem) => {\n            acc :+ elem\n            acc :+ delimeter\n        })\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6_3k8rcx.scala:19)\n\tat Problem.main(tmp6_3k8rcx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc :+ delimeter\
    \ + x.toLong)\n        result.dropRight(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpylvujy2u.scala:15)\n\tat Problem.main(tmpylvujy2u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => result += delimeter + number)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoahv4a4o.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_size = numbers.size\n        val numbers_size_2 = numbers_size\
    \ / 2\n        val numbers_size_3 = numbers_size_2 / 2\n        val numbers_size_4\
    \ = numbers_size_3 / 2\n        val numbers_size_5 = numbers_size_4 / 2\n    \
    \    val numbers_size_6 = numbers_size_5 / 2\n        val numbers_size_7 = numbers_size_6\
    \ / 2\n        val numbers_size_8 = numbers_size_7 / 2\n        val numbers_size_9\
    \ = numbers_size_8 / 2\n        val numbers_size_10 = numbers_size_9 / 2\n   \
    \     val numbers_size_11 = numbers_size_10 / 2\n        val numbers_size_12 =\
    \ numbers_size_11 / 2\n        val numbers_size_13 = numbers_size_12 / 2\n   \
    \     val numbers_size_14 = numbers_size_13 / 2\n        val numbers_size_15 =\
    \ numbers_size_14 / 2\n        val numbers_size_16 = numbers_size_15 / 2\n   \
    \     val numbers_size_17 = numbers_size_16 / 2\n        val numbers_size_18 =\
    \ numbers_size_17 / 2\n        val numbers_size_19 = numbers_size_18 / 2\n   \
    \     val numbers_size_20 = numbers_size_19 / 2\n        val numbers_size_21 =\
    \ numbers_size_20 / 2\n        val numbers_size_22 = numbers_size_21 / 2\n   \
    \     val numbers_size_23 = numbers_size_22 / 2\n        val numbers_size_24 =\
    \ numbers_size_23 / 2\n        val numbers_size_25 = numbers_size_24 / 2\n   \
    \     val numbers_size_26 = numbers_size_25 / 2\n        val numbers_size_27 =\
    \ numbers_size_26 / 2\n        val numbers_size_28 = numbers_size_27 / 2\n   \
    \     val numbers_size_29 = numbers_size_28 / 2\n        val numbers_size_30 =\
    \ numbers_size_29 / 2\n        val numbers_size_31 = numbers_size_30 / 2\n   \
    \     val numbers_size_32 = numbers_size_31 / 2\n        val numbers_size_33 =\
    \ numbers_size_32 / 2\n        val numbers_size_34 = numbers_size_33 / 2\n   \
    \     val numbers_size_35 = numbers_size_34 / 2\n        val numbers_size_36 =\
    \ numbers_size_35 / 2\n        val numbers_size_37 = numbers_size_36 / 2\n   \
    \     val numbers_size_38 = numbers_size_37 / 2\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4ve9qcp.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, number) => {\n    \
    \        acc match {\n                case Nil => List(number)\n             \
    \   case _ => acc ++ List(delimeter, number)\n            }\n        })\n    \
    \    result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val numbers_copy2 = numbers_copy.toList\n\
    \        numbers_copy2.reverse.foldLeft(List[Long]())((acc, x) => {\n        \
    \    val lastElem = acc.last\n            val newElem = lastElem + delimeter +\
    \ x\n            acc :+ newElem\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty list\n\tat scala.collection.immutable.Nil$.last(List.scala:665)\n\
    \tat scala.collection.immutable.Nil$.last(List.scala:661)\n\tat Problem$.intersperse$$anonfun$1(tmpio_sktoa.scala:13)\n\
    \tat Problem$.intersperse$$anonfun$adapted$1(tmpio_sktoa.scala:16)\n\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:169)\n\
    \tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:165)\n\tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\
    \tat Problem$.intersperse(tmpio_sktoa.scala:16)\n\tat Problem$.main(tmpio_sktoa.scala:20)\n\
    \tat Problem.main(tmpio_sktoa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.size) {\n            result.append(numbersList(i))\n\
    \            result.append(delimeter)\n            i += 1\n        }\n       \
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpds1paro2.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var last = 0\n \
    \       var i = 0\n        while (i < numbers.size) {\n            val current\
    \ = numbers(i)\n            if (current == last)\n                result += delimeter\n\
    \            result += current\n            last = current\n            i += 1\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplzmiieml.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplzmiieml.scala:18:19\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            last = current\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \         Found:    (current : Long)\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = numbers_copy.foldLeft(List[Long]())((acc,\
    \ elem) => {\n            acc :+ elem\n            acc :+ delimeter\n        })\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6_3k8rcx.scala:19)\n\tat Problem.main(tmp6_3k8rcx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        numbers_copy.zipWithIndex.foreach { case (number, index) =>\n       \
    \     if (index > 0) {\n                result.add(delimeter)\n            }\n\
    \            result.add(number)\n        }\n        result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjm_6r62u.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.size) {\n            val currentNumber\
    \ = numbersList(i)\n            val nextNumber = numbersList(i + 1)\n        \
    \    if (currentNumber != delimeter) {\n                result += currentNumber\n\
    \            }\n            result += nextNumber\n            i += 1\n       \
    \ }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx50ld8qp.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.size) {\n            if (i\
    \ > 0) {\n                result.add(delimeter)\n            }\n            result.add(numbersList(i))\n\
    \            i += 1\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc6ywbnp1.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc :+ delimeter\
    \ + x.toLong)\n        result.dropRight(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpylvujy2u.scala:15)\n\tat Problem.main(tmpylvujy2u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result += x)\n        result += delimeter\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoftp5ewk.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = numbers_copy.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ x :: acc)\n        val delimeter_copy = delimeter.toList\n    \
    \    val delimeter_copy = delimeter_copy :+ delimeter\n        val delimeter_copy_2\
    \ = delimeter_copy :+ delimeter\n        val delimeter_copy_3 = delimeter_copy\
    \ :+ delimeter\n        val delimeter_copy_4 = delimeter_copy :+ delimeter\n \
    \       val delimeter_copy_5 = delimeter_copy :+ delimeter\n        val delimeter_copy_6\
    \ = delimeter_copy :+ delimeter\n        val delimeter_copy_7 = delimeter_copy\
    \ :+ delimeter\n        val delimeter_copy_8 = delimeter_copy :+ delimeter\n \
    \       val delimeter_copy_9 = delimeter_copy :+ delimeter\n        val delimeter_copy_10\
    \ = delimeter_copy :+ delimeter\n        val delimeter_copy_11 = delimeter_copy\
    \ :+ delimeter\n        val delimeter_copy_12 = delimeter_copy :+ delimeter\n\
    \        val delimeter_copy_13 = delimeter_copy :+ delimeter\n        val delimeter_copy_14\
    \ = delimeter_copy :+ delimeter\n        val delimeter_copy_15 = delimeter_copy\
    \ :+ delimeter\n        val delimeter_copy_16 = delimeter_copy :+ delimeter\n\
    \        val delimeter_copy_17 = delimeter_copy :+ delimeter\n        val delimeter_copy_18\
    \ = delimeter_copy :+ delimeter\n        val delimeter_copy_19 = delimeter_copy\
    \ :+ delimeter\n        val delimeter_copy_20 = delimeter_copy :+ delimeter\n\
    \        val delimeter_copy_21 = delimeter_copy :+ delimeter\n        val delimeter_copy_22\
    \ = delimeter_copy :+ delimeter\n        val delimeter_copy_23 = delimeter_copy\
    \ :+ delimeter\n        val delimeter_copy_24 = delimeter_copy :+ delimeter\n\
    \        val delimeter_copy_25 = delimeter_copy :+ delimeter\n        val delimeter_copy_26\
    \ = delimeter_copy :+ delimeter\n        val delimeter_copy_27 = delimeter_copy\
    \ :+ delimeter\n        val delimeter_copy_28 = delimeter_copy :+ delimeter\n\
    \        val delime\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf7yek8fd.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf7yek8fd.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdelimeter_copy\e[0m = delimeter_copy :+ delimeter\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdelimeter_copy is already defined as \e[33mvalue\e[0m \e[35mdelimeter_copy\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpf7yek8fd.scala:11:76 --------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = numbers_copy.foldLeft(List[\e\
    [35mLong\e[0m]())((\e[36macc\e[0m, \e[36mx\e[0m) => acc ++ x :: acc)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \            ^\e[0m\n\e[31m   |\e[0m                                         \
    \   Found:    (x : Long)\n\e[31m   |\e[0m                                    \
    \        Required: IterableOnce[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpf7yek8fd.scala:12:39 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdelimeter_copy\e[0m = delimeter.toList\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m    value toList is not a member of Long - did you mean delimeter.toInt?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf7yek8fd.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659793991
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val numbers_copy2 = numbers_copy.reverse\n\
    \        val numbers_copy3 = numbers_copy2.reverse\n        val numbers_copy4\
    \ = numbers_copy3.reverse\n        numbers_copy4.takeWhile(_ < delimeter).reverse.takeWhile(_\
    \ < delimeter).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplw9v2xpj.scala:18)\n\tat Problem.main(tmplw9v2xpj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < numbers.size) {\n            result += numbers(i).toLong\n   \
    \         result += delimeter\n            i += 1\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplhna1btu.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, number) => {\n    \
    \        val newAcc = acc :+ number\n            val newDelimeter = delimeter\
    \ :+ number\n            intersperse(newAcc, newDelimeter)\n        })\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpedp36hbm.scala:12:41 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mnewDelimeter\e[0m =\
    \ delimeter :+ number\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value :+ is not a member of\
    \ Long\n1 error found\n"
  stdout: ''
  timestamp: 1659793981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc :+ delimeter\
    \ + x.toLong)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4jzw045s.scala:15)\n\tat Problem.main(tmp4jzw045s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val interspersedList = mutable.ListBuffer.empty[Long]\n\
    \        numbersList.zipWithIndex.foreach { case (number, index) =>\n        \
    \    if (index != 0) {\n                interspersedList += delimeter\n      \
    \      }\n            interspersedList += number\n        }\n        interspersedList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyerk7x42.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36minterspersedList\e[0m =\
    \ mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach{\
    \ number =>\n            result += number\n            result += delimeter\n \
    \       }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lp4m880.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc :+ delimeter\
    \ + x)\n        result.dropRight(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt84l6xkp.scala:15)\n\tat Problem.main(tmpt84l6xkp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]()) { (result, number) => result\
    \ :+ number + delimeter + number }\n        result.dropRight(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_dib2c9v.scala:15)\n\tat Problem.main(tmp_dib2c9v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var current = 0\n        var next = 0\n        var last = 0\n       \
    \ numbersList.foreach { number =>\n            current = number\n            next\
    \ = numbersList(numbersList.indexOf(number) + 1)\n            if (next != delimeter)\
    \ {\n                result.add(current)\n            }\n            last = number\n\
    \        }\n        result.add(last)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe0z9ae42.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe0z9ae42.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            current = number\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    (number : Long)\n\e[31m   |\e[0m                  \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe0z9ae42.scala:17:30\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            next = numbersList(numbersList.indexOf(number)\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    Long\n\e[31m   |\e[0m       \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpe0z9ae42.scala:21:19 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            last = number\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    (number : Long)\n\e[31m   |\e\
    [0m                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793991
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = numbers_copy.foldLeft(List[Long]())((acc,\
    \ number) => {\n            acc match {\n                case Nil => List(number)\n\
    \                case _ => acc ++ List(delimeter, number)\n            }\n   \
    \     })\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => result += delimeter + number)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoahv4a4o.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var current = 0\n        var next = 0\n        while (current < numbersList.size)\
    \ {\n            next = current + 1\n            while (next < numbersList.size\
    \ && numbers(current) == numbers(next)) {\n                next += 1\n       \
    \     }\n            result.add(numbers(current))\n            result.add(delimeter)\n\
    \            result.add(numbers(next))\n            current = next\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuny2jgou.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val interspersedList = mutable.ListBuffer.empty[Long]\n\
    \        var currentNumber = 0\n        var currentDelimeter = 0\n        var\
    \ currentListSize = numbersList.length\n        while (currentListSize > 0) {\n\
    \            interspersedList += numbers(currentNumber)\n            currentNumber\
    \ += 1\n            currentListSize -= 1\n            if (currentListSize > 0)\
    \ {\n                interspersedList += delimeter\n                currentDelimeter\
    \ += 1\n            }\n        }\n        interspersedList.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaey4v9w1.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36minterspersedList\e[0m =\
    \ mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbers_copy.size) {\n            val current\
    \ = numbers_copy(i)\n            val next = numbers_copy(i + 1)\n            if\
    \ (next == delimeter) {\n                result += current\n                i\
    \ += 1\n            } else {\n                result += current\n            \
    \    result += delimeter\n                i += 1\n            }\n        }\n \
    \       result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoevz2ot5.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc ++ List(x)\
    \ + delimeter)\n        result.dropRight(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6nixu36k.scala:10:79 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = numbers.foldLeft(List[\e\
    [35mLong\e[0m]())((\e[36macc\e[0m, \e[36mx\e[0m) => acc ++ List(x) + delimeter)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = numbersList.reverse.foldLeft(List[Long]())((acc,\
    \ number) => {\n            val newAcc = acc.reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse.take(acc.size - 1).reverse.take(acc.size - 1).reverse.take(acc.size\
    \ - 1).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx0v92u7f.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpx0v92u7f.scala:21:0 ----------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx0v92u7f.scala:13:5 ---------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx0v92u7f.scala:20:1 ---------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach{\
    \ number =>\n            val newNumber = number + delimeter\n            result\
    \ += newNumber\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9pk8lq1.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(n\
    \ => result += n)\n        result ++ numbers.take(numbers.size - 1).map(n => delimeter)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplt6q0kt0.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793990
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, number) => {\n    \
    \        val newAcc = (acc :+ number).takeWhile(_ != delimeter)\n            val\
    \ newAcc2 = newAcc :+ delimeter\n            newAcc2\n        })\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpst5qm3j7.scala:19)\n\tat Problem.main(tmpst5qm3j7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result += x)\n        result.takeWhile(x => x != delimeter).foreach(x =>\
    \ result += delimeter)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_0utq0w1.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val delimeters = numbers_copy\
    \ map {x => delimeter}\n        val result = numbers_copy map {x => x :: delimeters}\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9yqk2k59.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mList[\e\
    [1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m]\e[1m\e[31m)\e[0m\n\e\
    [31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.zipWithIndex.foreach\
    \ { case (number, index) =>\n            if (index != 0) {\n                result.add(delimeter)\n\
    \            }\n            result.add(number)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg044_lir.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.size) {\n            result.append(numbersList(i))\n\
    \            result.append(delimeter)\n            i += 1\n        }\n       \
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpds1paro2.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbersList.size) {\n            val currentNumber\
    \ = numbersList(i)\n            val nextNumber = numbersList(i + 1)\n        \
    \    if (currentNumber != delimeter) {\n                result += currentNumber\n\
    \            }\n            result += nextNumber\n            i += 1\n       \
    \ }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx50ld8qp.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc :+ delimeter\
    \ + x.toLong)\n        result.dropRight(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpylvujy2u.scala:15)\n\tat Problem.main(tmpylvujy2u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        numbersList.zipWithIndex.foreach { case (number, index) =>\n        \
    \    if (index != 0) {\n                result.add(delimeter)\n            }\n\
    \            result.add(number)\n        }\n        result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon3o4sfl.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result += x)\n        result += delimeter\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoftp5ewk.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, n) => acc :+ delimeter\
    \ + n)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxlu3f_sd.scala:15)\n\tat Problem.main(tmpxlu3f_sd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result += x)\n        result += delimeter\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoftp5ewk.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        numbersList.zipWithIndex.foreach { case (number, index) =>\n        \
    \    if (index != 0) {\n                result.add(delimeter)\n            }\n\
    \            result.add(number)\n        }\n        result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon3o4sfl.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbers_copy = numbers.toList\n        val delimeter_copy = delimeter\n\
    \        val result = numbers_copy match {\n            case Nil => Nil\n    \
    \        case x :: xs => x :: intersperse(xs, delimeter_copy)\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6l_x_h1a.scala:20)\n\tat Problem.main(tmp6l_x_h1a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => result += delimeter + number)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoahv4a4o.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val interspersedList = mutable.ListBuffer.empty[Long]\n\
    \        numbersList.zipWithIndex.foreach { case (number, index) =>\n        \
    \    if (index != 0) {\n                interspersedList += delimeter\n      \
    \      }\n            interspersedList += number\n        }\n        interspersedList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyerk7x42.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36minterspersedList\e[0m =\
    \ mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = numbers.foldLeft(List[Long]())((acc, x) => acc :+ delimeter\
    \ + x.toLong)\n        result.dropRight(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpylvujy2u.scala:15)\n\tat Problem.main(tmpylvujy2u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            result += number\n            result += delimeter\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqg3l910.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersWithDelimeter = numbers.map(n => delimeter*n).toList\n   \
    \     numbersWithDelimeter.take(numbers.size/2).zip(numbersWithDelimeter.drop(numbers.size/2)).map(n\
    \ => n._1 + n._2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp1t0on4x.scala:15)\n\tat Problem.main(tmpp1t0on4x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result += x)\n        result ++ (numbers.take(numbers.size - 1).map(x =>\
    \ delimeter))\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0nv_tm7h.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        numbersList.zipWithIndex.foreach { case (number, index) =>\n        \
    \    if (index != 0) {\n                result.add(delimeter)\n            }\n\
    \            result.add(number)\n        }\n        result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon3o4sfl.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => result += x)\n        result ++ numbers.map(x => delimeter + x)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqmwo4wt.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793992
