name: HumanEval_36_fizz_buzz
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the number of times the digit 7 appears in integers less than n which\
  \ are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n    // >>>\
  \ fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n    def\
  \ fizzBuzz(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) ==\
  \ (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
  \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
  \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
  \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
completions: ["        val nums = mutable.ListBuffer(n)\n        var count = 0\n \
    \       while (nums.nonEmpty) {\n            val n = nums.head\n            if\
    \ (n % 11 == 0 || n % 13 == 0) {\n                count += 1\n            }\n\
    \            nums = nums.tail\n        }\n        count", "        var count =\
    \ 0\n        for(i <- 1 to n) {\n            if(i % 11 == 0 || i % 13 == 0) {\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   val nums = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until n) {\n\
    \            if (i % 11 == 0 || i % 13 == 0) {\n                nums += i\n  \
    \          }\n        }\n        nums.count(_ % 7 == 0)", "        val counts\
    \ = mutable.HashMap.empty[Long, Int]\n        for(i <- 1 to n) {\n           \
    \ val d = i % 11\n            val e = i % 13\n            val f = i % 17\n   \
    \         val g = i % 19\n            val h = i % 23\n            val j = i %\
    \ 37\n            val k = i % 53\n            val m = i % 67\n            val\
    \ n = i % 79\n            val o = i % 89\n            val p = i % 97\n       \
    \     val q = i % 109\n            val r = i % 127\n            val s = i % 147\n\
    \            val t = i % 159\n            val u = i % 179\n            val v =\
    \ i % 197\n            val w = i % 209\n            val x = i % 217\n        \
    \    val y = i % 229\n            val z = i % 239\n            val a = i % 247\n\
    \            val b = i % 255\n            val c = i % 261\n            val d =\
    \ i % 273\n            val e = i % 283\n            val f = i % 293\n        \
    \    val g = i % 307\n            val h = i % 317\n            val j = i % 327\n\
    \            val k = i % 337\n            val m = i % 347\n            val n =\
    \ i % 357\n            val o = i % 367\n            val p = i % 377\n        \
    \    val q = i % 387\n            val r = i % 397\n            val s = i % 409\n\
    \            val t = i % 419\n            val u = i % 429\n            val v =\
    \ i % 439\n            val w = i % 449\n            val x = i % 457\n        \
    \    val y = i % 467\n            val z = i % 477\n            val a = i % 487\n\
    \            val b = i % 497\n            val c = i % 509\n            val d =\
    \ i % 519\n            val e = i % 529\n            val f = i % 539\n        \
    \    val g = i % 549\n            val h = i % 559\n            val j = i % 567\n\
    \            val k = i % 577\n            val m = i % 587\n            val n =\
    \ i % 597\n            val o = i % 607\n            val p = i % 617\n        \
    \    val q = i % 627\n            val r = i % 637\n            val s = i % 647\n\
    \            val t = i % 657\n            val u = i % 667\n            val v =\
    \ i % 677\n            val w = i % 679\n            val x = i % 687\n        \
    \    val y = i % 697\n            val z = i % 707\n            val a = i % 717\n\
    \            val b = i % 737\n            val c = i % 767\n            val d =\
    \ i % 787\n            val e = i % 797\n            val f = i % 809\n        \
    \    val g = i % 819\n            val h = i % 829", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 1 to n) {\n            val d = i % 11\n            val\
    \ e = (i % 13) + 1\n            counts += (d -> e)\n        }\n        counts.filter(_._2\
    \ == 7).length", "        val nums = mutable.ListBuffer[Long]()\n        for(i\
    \ <- 1 to n) {\n            if(i % 11 == 0 || i % 13 == 0) {\n               \
    \ nums += i\n            }\n        }\n        nums.count(_ == 7l)", "       \
    \ val ns = n.toString.toInt\n        val nm = n % 11\n        val nn = n % 13\n\
    \        val ns = ns % 11\n        val nm = nm % 13\n        val nn = nn % 11\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val nn = nn % 13\n\
    \        val ns = ns % 13\n        val nm = nm % 13\n        val ", "        val\
    \ counts = mutable.HashMap[Int, Int]()\n        for(i <- 1 to n) {\n         \
    \   val remainder = i % 11\n            val isDivisibleBy11 = remainder == 0\n\
    \            val isDivisibleBy13 = remainder == 1\n            if(isDivisibleBy11\
    \ || isDivisibleBy13) {\n                counts(i) = counts.getOrElse(i, 0) +\
    \ 1\n            }\n        }\n        counts.values.sum", "        val nums =\
    \ mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n) {\n            if\
    \ (i % 11 == 0 || i % 13 == 0) {\n                nums += i\n            }\n \
    \       }\n        nums.count(_ % 7 == 0)", "        val nums = mutable.ListBuffer(n).filter(_\
    \ % 11 == 0 || _ % 13 == 0)\n        val count = nums.count(_ == 7).asInstanceOf[Long]\n\
    \        count + (if (nums.isEmpty) 0 else 1)", "        val count = mutable.HashMap[Int,\
    \ Int]()\n        for(i <- 1 to n) {\n            val remainder = i % 11\n   \
    \         val remainder2 = i % 13\n            if(remainder == 7 && remainder2\
    \ == 7) {\n                count(i) = 1\n            }\n        }\n        count.values.sum",
  "        val nums = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n) {\n\
    \            if (i % 11 == 0 || i % 13 == 0) {\n                nums += i\n  \
    \          }\n        }\n        nums.count(_ == 7l)", "        val result = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n) {\n            val remainder = n % i\n            if(remainder\
    \ == 0 || remainder == 11 || remainder == 13) {\n                result += i\n\
    \            }\n        }\n        result.size", "        val counts = mutable.HashMap.empty[Long,\
    \ Long]\n        val divisors = mutable.HashSet.empty[Long]\n        val divisorsCount\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount2 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount3 = mutable.HashSet.empty[Long]\n        val divisorsCount4\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount5 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount6 = mutable.HashSet.empty[Long]\n        val divisorsCount7\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount8 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount9 = mutable.HashSet.empty[Long]\n        val divisorsCount10\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount11 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount12 = mutable.HashSet.empty[Long]\n        val divisorsCount13\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount14 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount15 = mutable.HashSet.empty[Long]\n        val divisorsCount16\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount17 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount18 = mutable.HashSet.empty[Long]\n        val divisorsCount19\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount20 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount21 = mutable.HashSet.empty[Long]\n        val divisorsCount22\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount23 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount24 = mutable.HashSet.empty[Long]\n        val divisorsCount25\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount26 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount27 = mutable.HashSet.empty[Long]\n        val divisorsCount28\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount29 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount30 = mutable.HashSet.empty[Long]\n        val divisorsCount31\
    \ = mutable.HashSet.empty[Long]\n        ", "        val nums = mutable.ArrayBuffer(n)\n\
    \        val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n  \
    \      val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize\
    \ = numsSetIterator.size\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextSize = numsSetIteratorNext.size\n        val numsSetIteratorNextNext\
    \ = numsSetIteratorNext.next\n        val numsSetIteratorNextNextSize = numsSetIteratorNextNext.size\n\
    \        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n    \
    \    val numsSetIteratorNextNextNextSize = numsSetIteratorNextNextNext.size\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextSize = numsSetIteratorNextNextNextNext.size\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextSize = numsSetIteratorNextNextNextNextNext.size\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextSize = numsSetIteratorNextNextNextNextNextNext.size\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextSize = numsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextSize = numsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextSize = numsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext",
  "        var count = 0\n        var nums = mutable.ArrayBuffer.empty[Long]\n   \
    \     for (i <- 0 until n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        for (i <- 0 until\
    \ nums.length) {\n            if (nums(i) == 7) {\n                count += 1\n\
    \            }\n        }\n        count", "        var count = 0\n        var\
    \ remainder = n % 11\n        if (remainder == 0) count = count + 1\n        remainder\
    \ = n % 13\n        if (remainder == 0) count = count + 1\n        remainder =\
    \ n % 11\n        if (remainder == 0) count = count + 1\n        remainder = n\
    \ % 13\n        if (remainder == 0) count = count + 1\n        remainder = n %\
    \ 11\n        if (remainder == 0) count = count + 1\n        remainder = n % 13\n\
    \        if (remainder == 0) count = count + 1\n        remainder = n % 11\n \
    \       if (remainder == 0) count = count + 1\n        remainder = n % 13\n  \
    \      if (remainder == 0) count = count + 1\n        remainder = n % 11\n   \
    \     if (remainder == 0) count = count + 1\n        remainder = n % 13\n    \
    \    if (remainder == 0) count = count + 1\n        remainder = n % 11\n     \
    \   if (remainder == 0) count = count + 1\n        remainder = n % 13\n      \
    \  if (remainder == 0) count = count + 1\n        remainder = n % 11\n       \
    \ if (remainder == 0) count = count + 1\n        remainder = n % 13\n        if\
    \ (remainder == 0) count = count + 1\n        remainder = n % 11\n        if (remainder\
    \ == 0) count = count + 1\n        remainder = n % 13\n        if (remainder ==\
    \ 0) count = count + 1\n        remainder = n % 11\n        if (remainder == 0)\
    \ count = count + 1\n        remainder = n % 13\n        if (remainder == 0) count\
    \ = count + 1\n        remainder = n % 11\n        if (remainder == 0) count =\
    \ count + 1\n        remainder = n % 13\n        if (remainder == 0) count = count\
    \ + 1\n        remainder = n % 11\n        if (remainder == 0) count = count +\
    \ 1\n        remainder = n % 13\n        if (remainder == 0) count = count + 1\n\
    \        remainder = n % 11\n        if (remainder == 0) count = count + 1\n \
    \       remainder = n % 13\n        if (remainder == 0) count = count + 1\n  \
    \      remainder = n % 11\n        if (remainder == 0) count = count + 1\n   \
    \     remainder = n % 13\n        if (remainder == 0) count = count + 1\n    \
    \    remainder = n % 11\n        if (remainder == 0) count = count + 1\n     \
    \   remainder = n % 13\n        if (remainder == 0) count = count + 1\n      \
    \  remainder = n % 11\n        if (remainder == 0) count = count + 1\n       \
    \ remainder = n % 13\n        if (remainder == 0) count = count + 1\n        remainder\
    \ = n % 11\n        if (remainder == 0) count = count + 1\n        remainder =\
    \ n % 13\n        if (remainder == 0) count = count + 1\n        remainder = n\
    \ % 11\n        if (remainder == 0) count = count + 1\n        remainder = n %\
    \ 13\n        if (remainder == 0) count = count + 1", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors", "        val count = mutable.HashMap[Int, Int]()\n        for(i <-\
    \ 1 to n) {\n            val d = i % 11\n            val e = (i % 13) + 1\n  \
    \          val f = i % 17\n            val g = i % 23\n            val h = i %\
    \ 29\n            val j = i % 37\n            val k = i % 53\n            val\
    \ m = i % 67\n            val n = i % 79\n            val o = i % 89\n       \
    \     val p = i % 97\n            val q = i % 103\n            val r = i % 113\n\
    \            val s = i % 131\n            val t = i % 151\n            val u =\
    \ i % 171\n            val v = i % 191\n            val w = i % 211\n        \
    \    val x = i % 221\n            val y = i % 241\n            val z = i % 261\n\
    \            val a = i % 281\n            val b = i % 301\n            val c =\
    \ i % 321\n            val d = i % 341\n            val e = i % 361\n        \
    \    val f = i % 381\n            val g = i % 401\n            val h = i % 421\n\
    \            val j = i % 441\n            val k = i % 462\n            val m =\
    \ i % 481\n            val n = i % 501\n            val o = i % 521\n        \
    \    val p = i % 541\n            val q = i % 562\n            val r = i % 581\n\
    \            val s = i % 601\n            val t = i % 622\n            val u =\
    \ i % 641\n            val v = i % 661\n            val w = i % 681\n        \
    \    val x = i % 701\n            val y = i % 721\n            val z = i % 741\n\
    \            val a = i % 762\n            val b = i % 781\n            val c =\
    \ i % 801\n            val d = i % 822\n            val e = i % 841\n        \
    \    val f = i % 861\n            val g = i % 881\n            val h = i % 902\n\
    \            val j = i % 922\n            val k = i % 942\n            val m =\
    \ i % 962\n            val n = i % 982\n            val o = i % 1002\n       \
    \     val p = i % 1022\n            val q = i % 1042\n            val r = i %\
    \ 1062\n            val s = i % 1082\n            val t = i % 1102\n         \
    \   val u = i % 1122\n            val v = i % 1142\n            val w = i % 1162\n\
    \            val x = i % 1182\n            val y = i % 1202\n            val z\
    \ = i % 1222\n            val a = i % 1242\n            val b = i % 1262\n   \
    \         val c = i % 1292\n            val d = ", "        val count = mutable.ListBuffer.empty[Long]\n\
    \        for(i <- 0 until n){\n            if((i % 11) == 0 || (i % 13) == 0){\n\
    \                count += i\n            }\n        }\n        count.length",
  "        val counts = mutable.HashMap.empty[Long, Int]\n        for(i <- 0 until\
    \ n){\n            val remainder = i % 11\n            val isDivisibleBy11 = remainder\
    \ == 0\n            val isDivisibleBy13 = remainder == 1\n            val isDivisibleBy7\
    \ = remainder == 7\n            val isDivisibleBy3 = (remainder == 3) || (remainder\
    \ == 7)\n            if(isDivisibleBy11 && isDivisibleBy13 && isDivisibleBy7 &&\
    \ isDivisibleBy3){\n                counts(i) = 1\n            }\n        }\n\
    \        counts.values.sum", "        var count = 0\n        for(i <- 0 until\
    \ n){\n            if((i%11 == 0) || (i%13 == 0)){\n                count += 1\n\
    \            }\n        }\n        count", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        var count = 0\n        for(i <- 0 until n){\n            if(i % 11 ==\
    \ 0 || i % 13 == 0){\n                nums += i\n                count += 1\n\
    \            }\n        }\n        val result = nums.count(_ == 7)\n        count",
  "        val result = mutable.Set[Long]()\n        for(i <- 1 to n){\n         \
    \   if((i % 11) == 0 || (i % 13) == 0){\n                result += i\n       \
    \     }\n        }\n        result.size", "        var count = 0\n        var\
    \ i = n\n        while (i > 0) {\n            val remainder = i % 11\n       \
    \     if (remainder == 7) {\n                count += 1\n            }\n     \
    \       i /= 11\n        }\n        count", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors", "        val nums = mutable.ListBuffer(n)\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val divisors = mutable.ListBuffer[Long]()\n        val divisorsCount\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount2 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount3 = mutable.ListBuffer[Long]()\n        val divisorsCount4\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount5 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount6 = mutable.ListBuffer[Long]()\n        val divisorsCount7\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount8 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount9 = mutable.ListBuffer[Long]()\n        val divisorsCount10\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount11 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount12 = mutable.ListBuffer[Long]()\n        val divisorsCount13\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount14 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount15 = mutable.ListBuffer[Long]()\n        val divisorsCount16\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount17 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount18 = mutable.ListBuffer[Long]()\n        val divisorsCount19\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount20 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount21 = mutable.ListBuffer[Long]()\n        val divisorsCount22\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount23 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount24 = mutable.ListBuffer[Long]()\n        val divisorsCount25\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount26 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount27 = mutable.ListBuffer[Long]()\n        val divisorsCount28\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount29 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount30 = mutable.ListBuffer[Long]()\n        val divisorsCount31\
    \ = mutable.", "        val nums = mutable.ListBuffer(n)\n        var count =\
    \ 0\n        while(nums.nonEmpty) {\n            val num = nums.head\n       \
    \     if(num % 11 == 0 || num % 13 == 0) {\n                count += 1\n     \
    \       }\n            nums = nums.tail\n        }\n        count", "        val\
    \ count = mutable.ListBuffer.empty[Long]\n        val remainder = n % 11\n   \
    \     if (remainder == 0 || remainder == 13) {\n            count += n\n     \
    \   }\n        n / 11\n        while (n > 0) {\n            val remainder = n\
    \ % 11\n            if (remainder == 0 || remainder == 13) {\n               \
    \ count += n\n            }\n            n / 11\n        }\n        count.sum",
  "        val count = mutable.HashMap.empty[Long, Long]\n        val divisors = mutable.HashSet.empty[Long]\n\
    \        for (i <- 1 to n) {\n            val d = i % 11\n            if (d ==\
    \ 0 || d == 7) {\n                val b = i % 13\n                if (b == 0 ||\
    \ b == 7) {\n                    count.put(i, count.getOrElse(i, 0l) + 1)\n  \
    \              }\n            }\n        }\n        count.values.sum", "     \
    \   val counts = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount2 = mutable.HashMap[Int, Int]()\n        val divisorsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount4 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount5 = mutable.HashMap[Int, Int]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount7 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount8 = mutable.HashMap[Int, Int]()\n        val divisorsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount10 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount11 = mutable.HashMap[Int, Int]()\n        val divisorsCount12 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount14 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount15 = mutable.HashMap[Int, Int]()\n        val divisorsCount16 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount18 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount19 = mutable.HashMap[Int, Int]()\n        val divisorsCount20 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount22 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount23 = mutable.HashMap[Int, Int]()\n        val divisorsCount24 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount25 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount26 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount27 = mutable.HashMap[Int, Int]()\n        val divisorsCount28 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount29 = mutable.HashMap[Int,\
    \ Int]()\n        val divisors", "        val count = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                count += i\n            }\n        }\n        count.length",
  "        val counts = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount2 = mutable.HashMap[Int, Int]()\n        val divisorsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount4 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount5 = mutable.HashMap[Int, Int]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount7 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount8 = mutable.HashMap[Int, Int]()\n        val divisorsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount10 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount11 = mutable.HashMap[Int, Int]()\n        val divisorsCount12 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount14 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount15 = mutable.HashMap[Int, Int]()\n        val divisorsCount16 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount18 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount19 = mutable.HashMap[Int, Int]()\n        val divisorsCount20 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount22 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount23 = mutable.HashMap[Int, Int]()\n        val divisorsCount24 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount25 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount26 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount27 = mutable.HashMap[Int, Int]()\n        val divisorsCount28 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount29 = mutable.HashMap[Int,\
    \ Int]()\n        val divisors", "        val nums = mutable.ListBuffer(n)\n \
    \       val numsCount = mutable.ListBuffer(0)\n        while(nums.nonEmpty) {\n\
    \            val num = nums.head\n            numsCount += numsCount(numsCount(num)\
    \ + 1)\n            if(num % 11 == 0 || num % 13 == 0) {\n                numsCount\
    \ += 1\n            }\n            numsCount += numsCount(numsCount(num) + 1)\n\
    \            nums -= num\n        }\n        numsCount.last", "        val nums\
    \ = mutable.ArrayBuffer(n).map(_.toString.toInt)\n        val counts = mutable.ArrayBuffer(nums.size)\n\
    \        for(i <- 0 until nums.size) {\n            val num = nums(i)\n      \
    \      val remainder = num % 11\n            val isDivisibleBy11 = num % 11 ==\
    \ 0\n            val isDivisibleBy13 = num % 13 == 0\n            if(isDivisibleBy11\
    \ || isDivisibleBy13) {\n                counts(i) = 1\n            }\n      \
    \  }\n        val result = counts.sum\n        if(result > 0) result else 0",
  "        val nums = mutable.ListBuffer[Long]()\n        for(i <- 0 until n){\n \
    \           if(i % 11 == 0 || i % 13 == 0){\n                nums += i\n     \
    \       }\n        }\n        nums.count(_ % 7 == 0)", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 1 to n) {\n            val d = i % 11\n            val\
    \ e = (i % 13) + 1\n            if (d == 7 && e == 1) counts(i) else counts(i)\
    \ = counts(i) + 1\n        }\n        counts.values.sum", "        val counts\
    \ = mutable.HashMap[Int, Int]()\n        for(i <- 1 to n) {\n            val d\
    \ = i % 11\n            val e = (i % 13) + 1\n            counts(d) += e\n   \
    \     }\n        counts.values.sum", "        var count = 0\n        for(i <-\
    \ 0 until n){\n            if((i%11 == 0) || (i%13 == 0)){\n                count\
    \ += 1\n            }\n        }\n        count", "        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 0 until n) {\n            val remainder = n % 10\n \
    \           if (remainder == 7 || remainder == 11 || remainder == 13) {\n    \
    \            val count = count.getOrElse(remainder, 0)\n                count\
    \ += 1\n                count.put(remainder, count)\n            }\n         \
    \   n = n / 10\n        }\n        count.values.sum", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors", "        val counts = mutable.HashMap[Int, Int]()\n        for(i\
    \ <- 1 to n){\n            val remainder = n % i\n            if(remainder ==\
    \ 0 || remainder == 11 || remainder == 13){\n                counts(i) = counts.getOrElse(i,\
    \ 0) + 1\n            }\n        }\n        counts.values.sum", "        var count\
    \ = 0\n        for(i <- 1 to n) {\n            if((i%11 == 0) || (i%13 == 0))\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       val count = mutable.HashMap.empty[Long, Int]\n        for (i <- 0 until\
    \ n) {\n            val remainder = i % 11\n            if (remainder == 0 ||\
    \ remainder == 13) {\n                val key = i / 11\n                if (count.contains(key))\
    \ {\n                    count(key) = count(key) + 1\n                } else {\n\
    \                    count(key) = 1\n                }\n            }\n      \
    \  }\n        count.values.sum", "        val count = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 0 until n){\n            val remainder = i % 11\n          \
    \  if(remainder == 0 || remainder == 13){\n                val digit = i % 10\n\
    \                if(count.contains(digit)){\n                    count(digit)\
    \ += 1\n                } else {\n                    count(digit) = 1\n     \
    \           }\n            }\n        }\n        count.values.sum", "        val\
    \ count = mutable.HashMap.empty[Long, Long]\n        val divisors = mutable.HashSet.empty[Long]\n\
    \        divisors += 11\n        divisors += 13\n        divisors += 7\n     \
    \   divisors.foreach(divisor => {\n            val divisorCount = n.toInt/divisor\n\
    \            count += (divisor -> divisorCount)\n        })\n        count.values.sum",
  "        val counts = mutable.HashMap[Int, Int]()\n        for(i <- 1 to n) {\n\
    \            val remainder = i % 11\n            val isFizz = (remainder == 0)\n\
    \            val isBuzz = (remainder == 6)\n            val isFizzBuzz = (isFizz\
    \ && isBuzz)\n            if(isFizzBuzz) {\n                counts.put(i, 1)\n\
    \            } else {\n                counts.put(i, 0)\n            }\n     \
    \   }\n        counts.values.sum", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        for(i <- 1 to n) {\n            val remainder = i % 11\n   \
    \         val isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13\
    \ = remainder == 1\n            if(isDivisibleBy11 || isDivisibleBy13) {\n   \
    \             counts(i.toInt) += 1\n            }\n        }\n        counts.values.sum",
  "        val nums = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until n)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                nums += i\n\
    \            }\n        }\n        nums.count(_ % 7 == 0)", "        val nums\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 0 until n){\n          \
    \  if(i % 11 == 0 || i % 13 == 0){\n                nums += i\n            }\n\
    \        }\n        nums.count(_ % 7 == 0)", "        val nums = mutable.ListBuffer(n)\n\
    \        var count = 0\n        while(nums.nonEmpty) {\n            val num =\
    \ nums.head\n            nums.remove(num)\n            val remainder = num % 11\n\
    \            val fizz = num % 13\n            if(fizz == 0) count += 1\n     \
    \       if(remainder == 0 || remainder == 11) count += 1\n            if(remainder\
    \ == 0 || remainder == 13) count += 1\n        }\n        count", "        val\
    \ nums = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n            if(i\
    \ % 11 == 0 || i % 13 == 0){\n                nums += i\n            }\n     \
    \   }\n        nums.count(_ == 7l)", "        val nums = mutable.ArrayBuffer(n)\n\
    \        val numsCount = mutable.ArrayBuffer(0)\n        val numsCount2 = mutable.ArrayBuffer(0)\n\
    \        val numsCount3 = mutable.ArrayBuffer(0)\n        val numsCount4 = mutable.ArrayBuffer(0)\n\
    \        val numsCount5 = mutable.ArrayBuffer(0)\n        val numsCount6 = mutable.ArrayBuffer(0)\n\
    \        val numsCount7 = mutable.ArrayBuffer(0)\n        val numsCount8 = mutable.ArrayBuffer(0)\n\
    \        val numsCount9 = mutable.ArrayBuffer(0)\n        val numsCount10 = mutable.ArrayBuffer(0)\n\
    \        val numsCount11 = mutable.ArrayBuffer(0)\n        val numsCount12 = mutable.ArrayBuffer(0)\n\
    \        val numsCount13 = mutable.ArrayBuffer(0)\n        val numsCount14 = mutable.ArrayBuffer(0)\n\
    \        val numsCount15 = mutable.ArrayBuffer(0)\n        val numsCount16 = mutable.ArrayBuffer(0)\n\
    \        val numsCount17 = mutable.ArrayBuffer(0)\n        val numsCount18 = mutable.ArrayBuffer(0)\n\
    \        val numsCount19 = mutable.ArrayBuffer(0)\n        val numsCount20 = mutable.ArrayBuffer(0)\n\
    \        val numsCount21 = mutable.ArrayBuffer(0)\n        val numsCount22 = mutable.ArrayBuffer(0)\n\
    \        val numsCount23 = mutable.ArrayBuffer(0)\n        val numsCount24 = mutable.ArrayBuffer(0)\n\
    \        val numsCount25 = mutable.ArrayBuffer(0)\n        val numsCount26 = mutable.ArrayBuffer(0)\n\
    \        val numsCount27 = mutable.ArrayBuffer(0)\n        val numsCount28 = mutable.ArrayBuffer(0)\n\
    \        val numsCount29 = mutable.ArrayBuffer(0)\n        val numsCount30 = mutable.ArrayBuffer(0)\n\
    \        val numsCount31 = mutable.ArrayBuffer(0)\n        val numsCount32 = mutable.ArrayBuffer(0)\n\
    \        val numsCount33 = mutable.ArrayBuffer(0)\n        val numsCount34 = mutable.ArrayBuffer(0)\n\
    \        val numsCount35 = mutable.ArrayBuffer(0)\n        val numsCount36 = mutable.ArrayBuffer(0)\n\
    \        val numsCount37 = mutable.ArrayBuffer(0)\n        val numsCount38 = mutable.ArrayBuffer(0)\n\
    \        val numsCount39 = mutable.ArrayBuffer(0)\n        val numsCount40 = mut",
  "        val counts = mutable.HashMap[Int, Int]()\n        for (i <- 0 until n)\
    \ {\n            val d = i % 11\n            val e = i % 13\n            if (d\
    \ == 7 && e != 7) {\n                counts.put(d, counts.getOrElse(d, 0) + 1)\n\
    \            }\n        }\n        counts.values.sum", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)", "        val result = mutable.ListBuffer[Long]()\n        val divisors\
    \ = mutable.ListBuffer[Long](11, 13)\n        val divisorsSet = divisors.toSet\n\
    \        val divisorsSetIterator = divisorsSet.iterator\n        val remainder\
    \ = n % divisorsSet.last\n        divisorsSet.lastOption match {\n           \
    \ case Some(divisor) =>\n                val divisorsSetIterator = divisorsSet.iterator\n\
    \                val remainder = n % divisor\n                divisorsSetIterator.next\
    \ match {\n                    case Some(divisor) =>\n                       \
    \ divisorsSetIterator.next match {\n                            case Some(divisor)\
    \ =>\n                                divisorsSetIterator.next match {\n     \
    \                               case Some(divisor) =>\n                      \
    \                  divisorsSetIterator.next match {\n                        \
    \                    case Some(divisor) =>\n                                 \
    \               divisorsSetIterator.next match {\n                           \
    \                         case Some(divisor) =>\n                            \
    \                            divisorsSetIterator.next match {\n              \
    \                                              case Some(divisor) =>\n       \
    \                                                         divisorsSetIterator.next\
    \ match {\n                                                                  \
    \  case Some(divisor) =>\n                                                   \
    \                     divisorsSetIterator.next match {\n                     \
    \                                                       case Some(divisor) =>\n\
    \                                                                            \
    \    divisorsSetIterator.next match {\n                                      \
    \                                              case Some(divisor) =>\n       \
    \                                                                            \
    \     divisorsSetIterator.next match {\n                                     \
    \                                                       case Some(divisor) =>\n\
    \                                                                            \
    \                    divisorsSetIterator.next match {\n                      \
    \                                                                            \
    \  case Some(divisor) =>\n                                                   \
    \                                                     divisorsSetIterator.next\
    \ match {\n                                                                  \
    \                                          case Some(divisor) =>\n           \
    \                                                                            \
    \                         divisorsSetIterator.next match {\n                 \
    \                                                                            \
    \                       case Some(divisor) =>\n                              \
    \                                                                            \
    \              divisorsSetIterator.next match {\n                            \
    \                                                                            \
    \                    case Some(divisor) =>\n                                 \
    \                                                                            \
    \                   divisorsSetIterator.next match {\n                       \
    \                                                                            \
    \                                 case Some(divisor) =>\n                    \
    \                                                                            \
    \                                        divisorsSetIterator.next match {\n  \
    \                                                                            \
    \                                                              case Some(divisor)\
    \ =>\n                                                                       \
    \                                                                         divisorsSetIterator.next\
    \ match {\n                                                                  \
    \                                                                            \
    \      case Some(divisor) =>\n                                               \
    \                                                                            \
    \                             divisorsSetIterator.next match {\n             \
    \                                                                            \
    \                                                                   case Some(divisor)\
    \ =>\n                                                                       \
    \                                                                            \
    \             divisorsSetIterator.next match {\n                             \
    \                                                                            \
    \                                                           case Some(divisor)\
    \ =>\n                                                                       \
    \                                                                            \
    \                     divisorsSetIterator.next match {\n                     \
    \                                                                            \
    \                                                                           case\
    \ Some(divisor) =>\n                                                         \
    \                                                                            \
    \                                           divisorsSetIterator.next match {\n\
    \                                                                            \
    \                                                                            \
    \                            case Some(divisor) =>\n                         \
    \                                                                            \
    \                                                                            \
    \       ", "        val count = mutable.ListBuffer.empty[Long]\n        val divisors\
    \ = mutable.ListBuffer.empty[Long]\n        val divisorsCount = mutable.ListBuffer.empty[Long]\n\
    \        val divisorsCount2 = mutable.ListBuffer.empty[Long]\n        val divisorsCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val divisorsCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val divisorsCount5 = mutable.ListBuffer.empty[Long]\n        val divisorsCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val divisorsCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val divisorsCount8 = mutable.ListBuffer.empty[Long]\n        val divisorsCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val divisorsCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val divisorsCount11 = mutable.ListBuffer.empty[Long]\n        val divisorsCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val divisorsCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val divisorsCount14 = mutable.ListBuffer.empty[Long]\n        val divisorsCount15\
    \ = mutable.ListBuffer.empty[Long]\n        val divisorsCount16 = mutable.ListBuffer.empty[Long]\n\
    \        val divisorsCount17 = mutable.ListBuffer.empty[Long]\n        val divisorsCount18\
    \ = mutable.ListBuffer.empty[Long]\n        val divisorsCount19 = mutable.ListBuffer.empty[Long]\n\
    \        val divisorsCount20 = mutable.ListBuffer.empty[Long]\n        val divisorsCount21\
    \ = mutable.ListBuffer.empty[Long]\n        val divisorsCount22 = mutable.ListBuffer.empty[Long]\n\
    \        val divisorsCount23 = mutable.ListBuffer.empty[Long]\n        val divisorsCount24\
    \ = mutable.ListBuffer.empty[Long]\n        val divisorsCount25 = mutable.ListBuffer.empty[Long]\n\
    \        val divisorsCount26 = mutable.ListBuffer.empty[Long]\n        val divisorsCount27\
    \ = mutable.ListBuffer.empty[Long]\n        val divisorsCount28 = mutable.ListBuffer.empty[Long]\n\
    \        val divisorsCount29 = mutable.ListBuffer.empty[Long]\n        val divisorsCount30\
    \ = mutable.ListBuffer.empty[Long]\n        val divisorsCount31 = mutable.ListBuffer.empty[Long]\n\
    \        val divisors", "        val count = mutable.HashMap.empty[Long, Long]\n\
    \        for (i <- 0 until n) {\n            val remainder = n % 10\n        \
    \    if (remainder == 7 || remainder == 11 || remainder == 13) {\n           \
    \     val count = count.getOrElseUpdate(remainder, 0) + 1\n                count._1\n\
    \            } else {\n                0\n            }\n        }", "       \
    \ val nums = mutable.ListBuffer(n).filter(_ % 11 == 0 || _ % 13 == 0)\n      \
    \  nums.count(_ == 7)", "        val counts = mutable.HashMap[Int, Int]()\n  \
    \      val digits = n.toString.reverse.grouped(3).map(_.toInt)\n        for (d\
    \ <- digits) {\n            counts(d) match {\n                case Some(count)\
    \ => counts(d) + count\n                case None => counts(d) += 1\n        \
    \    }\n        }\n        counts.values.sum", "        val nums = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n    \
    \            nums += i\n            }\n        }\n        nums.count(_ == 7l).toLong",
  "        val counts = mutable.HashMap.empty[Long, Int]\n        val divisors = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount = mutable.HashMap.empty[Long, Int]\n        divisors.update(n/11)\n\
    \        divisors.update(n/13)\n        divisorsCount.update(n/11, 1)\n      \
    \  divisorsCount.update(n/13, 1)\n        divisorsCount.update(n/21, 2)\n    \
    \    divisorsCount.update(n/31, 3)\n        divisorsCount.update(n/41, 4)\n  \
    \      divisorsCount.update(n/51, 5)\n        divisorsCount.update(n/61, 6)\n\
    \        divisorsCount.update(n/71, 7)\n        divisorsCount.update(n/81, 8)\n\
    \        divisorsCount.update(n/91, 9)\n        divisorsCount.update(n/101, 10)\n\
    \        divisorsCount.update(n/111, 11)\n        divisorsCount.update(n/121,\
    \ 12)\n        divisorsCount.update(n/131, 13)\n        divisorsCount.update(n/141,\
    \ 14)\n        divisorsCount.update(n/151, 15)\n        divisorsCount.update(n/161,\
    \ 16)\n        divisorsCount.update(n/171, 17)\n        divisorsCount.update(n/181,\
    \ 18)\n        divisorsCount.update(n/191, 19)\n        divisorsCount.update(n/201,\
    \ 20)\n        divisorsCount.update(n/211, 21)\n        divisorsCount.update(n/221,\
    \ 22)\n        divisorsCount.update(n/231, 23)\n        divisorsCount.update(n/241,\
    \ 24)\n        divisorsCount.update(n/251, 25)\n        divisorsCount.update(n/261,\
    \ 26)\n        divisorsCount.update(n/271, 27)\n        divisorsCount.update(n/281,\
    \ 28)\n        divisorsCount.update(n/291, 29)\n        divisorsCount.update(n/301,\
    \ 30)\n        divisorsCount.update(n/311, 31)\n        divisorsCount.update(n/321,\
    \ 32)\n        divisorsCount.update(n/331, 33)\n        divisorsCount.update(n/341,\
    \ 34)\n        divisorsCount.update(n/351, 35)\n        divisorsCount.update(n/361,\
    \ 36)\n        divisorsCoun", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if((i % 11) == 0 || (i % 13) == 0){\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)", "        val nums = mutable.ListBuffer(n)\n        val numsStr = nums.map(_.toString).mkString(\"\
    ,\")\n        val numsStrArr = numsStr.split(\",\")\n        val numsStrArrLen\
    \ = numsStrArr.length\n        val numsStrArrLen2 = numsStrArrLen / 3\n      \
    \  val numsStrArrLen3 = numsStrArrLen / 3\n        val numsStrArrLen4 = numsStrArrLen\
    \ / 3\n        val numsStrArrLen5 = numsStrArrLen / 3\n        val numsStrArrLen6\
    \ = numsStrArrLen / 3\n        val numsStrArrLen7 = numsStrArrLen / 3\n      \
    \  val numsStrArrLen8 = numsStrArrLen / 3\n        val numsStrArrLen9 = numsStrArrLen\
    \ / 3\n        val numsStrArrLen10 = numsStrArrLen / 3\n        val numsStrArrLen11\
    \ = numsStrArrLen / 3\n        val numsStrArrLen12 = numsStrArrLen / 3\n     \
    \   val numsStrArrLen13 = numsStrArrLen / 3\n        val numsStrArrLen14 = numsStrArrLen\
    \ / 3\n        val numsStrArrLen15 = numsStrArrLen / 3\n        val numsStrArrLen16\
    \ = numsStrArrLen / 3\n        val numsStrArrLen17 = numsStrArrLen / 3\n     \
    \   val numsStrArrLen18 = numsStrArrLen / 3\n        val numsStrArrLen19 = numsStrArrLen\
    \ / 3\n        val numsStrArrLen20 = numsStrArrLen / 3\n        val numsStrArrLen21\
    \ = numsStrArrLen / 3\n        val numsStrArrLen22 = numsStrArrLen / 3\n     \
    \   val numsStrArrLen23 = numsStrArrLen / 3\n        val numsStrArrLen24 = numsStrArrLen\
    \ / 3\n        val numsStrArrLen25 = numsStrArrLen / 3\n        val numsStrArrLen26\
    \ = numsStrArrLen / 3\n        val numsStrArrLen27 = numsStrArrLen / 3\n     \
    \   val numsStrArrLen28 = numsStrArrLen / 3\n        val numsStrArrLen29 = num",
  "        val count = mutable.HashMap.empty[Long, Int]\n        for(i <- 1 to n)\
    \ {\n            val d = i % 11\n            val e = i % 13\n            if(d\
    \ != 0 && e != 0) {\n                val count = count.getOrElseUpdate(d, 0)\n\
    \                count += e\n                count.toLong\n            }\n   \
    \     }", "        var count = 0\n        var remainder = n\n        while (remainder\
    \ > 0) {\n            if (remainder % 11 == 0 || remainder % 13 == 0) {\n    \
    \            count += 1\n            }\n            remainder = remainder / 10\n\
    \        }\n        count", "        val counts = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n) {\n            val remainder = n % i\n            if(remainder\
    \ == 0 || remainder == 11 || remainder == 13) {\n                counts(i) = counts.getOrElse(i,\
    \ 0) + 1\n            }\n        }\n        counts.values.sum", "        var count\
    \ = 0\n        for(i <- 1 to n) {\n            if((i % 11) == 0 || (i % 13) ==\
    \ 0) {\n                count += 1\n            }\n        }\n        count",
  "        val counts = mutable.HashMap.empty[Long, Int]\n        val divisors = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount = mutable.HashMap.empty[Long, Int]\n        val divisorsCount2\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount3 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount4 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount5 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount6\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount7 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount8 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount9 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount10\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount11 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount12 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount13 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount14\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount15 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount16 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount17 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount18\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount19 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount20 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount21 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount22\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount23 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount24 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount25 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount26\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount27 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount28 = mutable.HashMap.", "        val counts =\
    \ mutable.HashMap[Int, Int]()\n        for(i <- 0 until n){\n            val remainder\
    \ = i % 11\n            val isFizz = (remainder == 0)\n            val isBuzz\
    \ = (remainder == 6)\n            val isFizzBuzz = (isFizz && isBuzz)\n      \
    \      if(isFizzBuzz){\n                counts(i) = 1\n            }\n       \
    \ }\n        counts.values.sum", "        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        for (i <-\
    \ 1 to n) {\n            val remainder = n % i\n            if (remainder == 0\
    \ || remainder == 11 || remainder == 13) {\n                divisors += i\n  \
    \          }\n            count += (remainder == 7) ? 1 : 0\n        }\n     \
    \   divisors.toList.sorted.foldLeft(0)((acc, d) => acc + count(d))", "       \
    \ val count = mutable.HashMap.empty[Long, Int]\n        for(i <- 1 to n) {\n \
    \           val remainder = i % 11\n            val remainder2 = i % 13\n    \
    \        if(remainder == 7 && remainder2 == 7) {\n                count(i) = 1\n\
    \            }\n        }\n        count.values.sum", "        val ns = n.toString.toInt\n\
    \        val nm = n % 11\n        val nn = n % 13\n        val nm = nm / 11\n\
    \        val nn = nn / 13\n        val nm = nm % 11\n        val nn = nn % 13\n\
    \        val nm = nm / 11\n        val nn = nn / 13\n        val nm = nm % 11\n\
    \        val nn = nn % 13\n        val nm = nm / 11\n        val nn = nn / 13\n\
    \        val nm = nm % 11\n        val nn = nn % 13\n        val nm = nm / 11\n\
    \        val nn = nn / 13\n        val nm = nm % 11\n        val nn = nn % 13\n\
    \        val nm = nm / 11\n        val nn = nn / 13\n        val nm = nm % 11\n\
    \        val nn = nn % 13\n        val nm = nm / 11\n        val nn = nn / 13\n\
    \        val nm = nm % 11\n        val nn = nn % 13\n        val nm = nm / 11\n\
    \        val nn = nn / 13\n        val nm = nm % 11\n        val nn = nn % 13\n\
    \        val nm = nm / 11\n        val nn = nn / 13\n        val nm = nm % 11\n\
    \        val nn = nn % 13\n        val nm = nm / 11\n        val nn = nn / 13\n\
    \        val nm = nm % 11\n        val nn = nn % 13\n        val nm = nm / 11\n\
    \        val nn = nn / 13\n        val nm = nm % 11\n        val nn = nn % 13\n\
    \        val nm = nm / 11\n        val nn = nn / 13\n        val nm = nm % 11\n\
    \        val nn = nn % 13\n        val nm = nm / 11\n        val nn = nn / 13\n\
    \        val nm = nm % 11\n        val nn = nn % 13\n        val nm = nm / 11\n\
    \        val nn = nn / 13\n        val nm = nm % 11\n        val nn = nn % 13\n\
    \        val nm = nm / 11\n        val nn = nn / 13\n        val nm = nm % 11\n\
    \        val nn = nn % 13\n        val nm = nm / 11\n        val n", "       \
    \ val count = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashSet[Int]()\n\
    \        divisors.add(11)\n        divisors.add(13)\n        divisors.add(7)\n\
    \        divisors.foreach(divisor => {\n            val remainder = n % divisor\n\
    \            val remainderCount = if (remainder == 0) 1 else count((remainder))\n\
    \            count.put(remainder, remainderCount + 1)\n        })\n        count.values.sum",
  "        val counts = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount2 = mutable.HashMap[Int, Int]()\n        val divisorsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount4 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount5 = mutable.HashMap[Int, Int]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount7 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount8 = mutable.HashMap[Int, Int]()\n        val divisorsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount10 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount11 = mutable.HashMap[Int, Int]()\n        val divisorsCount12 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount14 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount15 = mutable.HashMap[Int, Int]()\n        val divisorsCount16 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount18 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount19 = mutable.HashMap[Int, Int]()\n        val divisorsCount20 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount22 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount23 = mutable.HashMap[Int, Int]()\n        val divisorsCount24 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount25 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount26 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount27 = mutable.HashMap[Int, Int]()\n        val divisorsCount28 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount29 = mutable.HashMap[Int,\
    \ Int]()\n        val divisors", "        val count = mutable.ListBuffer.empty[Long]\n\
    \        for(i <- 1 to n) {\n            val remainder = i % 11\n            val\
    \ isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13 = remainder\
    \ == 1\n            if(isDivisibleBy11 || isDivisibleBy13) {\n               \
    \ count += i\n            }\n        }\n        count.length", "        val counts\
    \ = mutable.HashMap[Int, Int]()\n        for(i <- 1 to n) {\n            val remainder\
    \ = i % 11\n            val isDivisibleBy11 = remainder == 0\n            val\
    \ isDivisibleBy13 = remainder == 1\n            if(isDivisibleBy11 || isDivisibleBy13)\
    \ {\n                counts(i.toInt) += 1\n            }\n        }\n        counts.values.sum",
  "        val counts = mutable.HashMap[Int, Int]()\n        for(i <- 0 until n) {\n\
    \            val d = i % 11\n            val e = (i % 13) + 1\n            counts(d)\
    \ += e\n        }\n        counts.values.sum", "        var count = 0\n      \
    \  var remainder = n\n        while (remainder > 0) {\n            if (remainder\
    \ % 11 == 0 || remainder % 13 == 0) {\n                count += 1\n          \
    \  }\n            remainder = remainder / 10\n        }\n        count", "   \
    \     var count = 0\n        var digit = 7\n        while(n != 0) {\n        \
    \    val remainder = n % 10\n            if(remainder == digit) {\n          \
    \      count += 1\n            }\n            n /= 10\n        }\n        count",
  "        val ns = n.toString.toInt\n        var count = 0\n        var i = 0\n \
    \       while(i < ns) {\n            val d = ns(i).toInt\n            if((d %\
    \ 11) == 0 || (d % 13) == 0) {\n                count += 1\n            }\n  \
    \          i += 1\n        }\n        count", "        val count = mutable.HashMap.empty[Long,\
    \ Long]\n        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n   \
    \     for (i <- 0 until digits.length)\n            if (digits(i).contains(7))\n\
    \                count(digits(i)) = count(digits(i)) + 1\n        count.values.sum",
  "        var count = 0\n        var remainder = n\n        while(remainder > 0)\
    \ {\n            val remainderDigit = remainder % 10\n            if(remainderDigit\
    \ == 7) {\n                count += 1\n            }\n            remainder =\
    \ remainder / 10\n        }\n        count", "        var count = 0\n        var\
    \ remainder = n\n        while(true){\n            val remainderMod11 = remainder\
    \ % 11\n            val remainderMod13 = remainder % 13\n            if(remainderMod11\
    \ == 0 || remainderMod13 == 0){\n                count += 1\n            }\n \
    \           if(remainder == 0){\n                break\n            }\n      \
    \      remainder = remainder / 11\n        }\n        count", "        val nums\
    \ = mutable.ListBuffer(n).filter(_ % 11 == 0 || _ % 13 == 0)\n        nums.count(_\
    \ % 7 == 0)", "        val nums = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n                nums\
    \ += i\n            }\n        }\n        nums.count(_ == 7l)", "        val counts\
    \ = mutable.HashMap.empty[Long, Int]\n        for (i <- 1 to n) {\n          \
    \  if (i % 11 == 0 || i % 13 == 0) {\n                counts.put(i, counts.getOrElse(i,\
    \ 0) + 1l) \n            }\n        }\n        counts.filter(_._2 == 7).length",
  "        val count = mutable.HashMap[Int, Int]()\n        for(i <- 1 to n) {\n \
    \           val remainder = i % 11\n            val isDivisibleBy11 = remainder\
    \ == 0\n            val isDivisibleBy13 = remainder == 1\n            val isDivisibleBy7\
    \ = i % 7 == 0\n            if(isDivisibleBy11 || isDivisibleBy13) {\n       \
    \         count((i % 11).toInt) = (count.get((i % 11).toInt) + 1)\n          \
    \  }\n            if(isDivisibleBy7) {\n                count((i % 7).toInt) =\
    \ (count.get((i % 7).toInt) + 1)\n            }\n        }\n        count.values.sum",
  "        val counts = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount2 = mutable.HashMap[Int, Int]()\n        val divisorsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount4 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount5 = mutable.HashMap[Int, Int]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount7 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount8 = mutable.HashMap[Int, Int]()\n        val divisorsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount10 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount11 = mutable.HashMap[Int, Int]()\n        val divisorsCount12 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount14 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount15 = mutable.HashMap[Int, Int]()\n        val divisorsCount16 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount18 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount19 = mutable.HashMap[Int, Int]()\n        val divisorsCount20 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount22 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount23 = mutable.HashMap[Int, Int]()\n        val divisorsCount24 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount25 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount26 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount27 = mutable.HashMap[Int, Int]()\n        val divisorsCount28 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount29 = mutable.HashMap[Int,\
    \ Int]()\n        val divisors", "        var count = 0\n        for(i <- 1 to\
    \ n) {\n            if((i.toString.toInt) mod 11 == 0 || (i.toString.toInt) mod\
    \ 13 == 0) {\n                count += 1\n            }\n        }\n        count",
  "        val counts = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount2 = mutable.HashMap[Int, Int]()\n        val divisorsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount4 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount5 = mutable.HashMap[Int, Int]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount7 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount8 = mutable.HashMap[Int, Int]()\n        val divisorsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount10 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount11 = mutable.HashMap[Int, Int]()\n        val divisorsCount12 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount14 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount15 = mutable.HashMap[Int, Int]()\n        val divisorsCount16 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount18 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount19 = mutable.HashMap[Int, Int]()\n        val divisorsCount20 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount22 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount23 = mutable.HashMap[Int, Int]()\n        val divisorsCount24 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount25 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount26 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount27 = mutable.HashMap[Int, Int]()\n        val divisorsCount28 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount29 = mutable.HashMap[Int,\
    \ Int]()\n        val divisors", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if((i % 11 == 0) || (i % 13 == 0)){\n\
    \                nums += i\n            }\n        }\n        nums.count(_ ==\
    \ 7l)", "        var count = 0\n        var remainder = n\n        while (remainder\
    \ > 0) {\n            if (remainder % 11 == 0 || remainder % 13 == 0) {\n    \
    \            count += 1\n            }\n            remainder = remainder / 10\n\
    \        }\n        count", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 0 until n){\n            val div = i / 11\n         \
    \   val mod = i % 11\n            if(div == 0 || div == 13 || mod == 0 || mod\
    \ == 13){\n                counts.put(i, 1)\n            }\n        }\n      \
    \  counts.filter(_._2 == 7).length", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        for(i <- 1 to n) {\n            val remainder = i % 11\n   \
    \         val isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13\
    \ = remainder == 1\n            val isDivisibleBy7 = remainder == 7\n        \
    \    val count = counts.getOrElse(7, 0)\n            counts.put(7, count + 1)\n\
    \            if(isDivisibleBy11 || isDivisibleBy13) {\n                counts.put(7,\
    \ 0)\n            }\n            if(isDivisibleBy7) {\n                counts.put(7,\
    \ 0)\n            }\n        }\n        counts.values.sum", "        val counts\
    \ = mutable.HashMap.empty[Long, Int]\n        for(i <- 0 until n){\n         \
    \   val remainder = n % 10\n            val isDivisibleBy11 = remainder == 0\n\
    \            val isDivisibleBy13 = remainder == 1\n            if(isDivisibleBy11\
    \ || isDivisibleBy13){\n                counts(i) = counts.getOrElse(i, 0) + 1\n\
    \            }\n            n /= 10\n        }\n        counts.foldLeft(0l){ (acc,\
    \ value) => acc + value }", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 0 until n) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                counts(i) = counts.getOrElse(i, 0) + 1\n          \
    \  }\n        }\n        counts.filter(_._2 == 1).length", "        val nums =\
    \ mutable.ListBuffer(n).filter(_ % 11 == 0 || _ % 13 == 0)\n        nums.count(_\
    \ == 7) / nums.length", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until n){\n            val d = i % 11\n            if(d ==\
    \ 0 || d == 13){\n                nums += i\n            }\n        }\n      \
    \  nums.count(_ % 7 == 0)", "        val counts = mutable.HashMap[Int, Int]()\n\
    \        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors", "        val counts = mutable.HashMap[Int, Int]()\n        val divisors\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount2 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount3 = mutable.HashMap[Int, Int]()\n        val divisorsCount4 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount5 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount6 = mutable.HashMap[Int, Int]()\n        val divisorsCount7 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount8 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount9 = mutable.HashMap[Int, Int]()\n        val divisorsCount10 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount11 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount12 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount13 = mutable.HashMap[Int, Int]()\n        val divisorsCount14 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount15 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount16 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount17 = mutable.HashMap[Int, Int]()\n        val divisorsCount18 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount19 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount20 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount21 = mutable.HashMap[Int, Int]()\n        val divisorsCount22 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount23 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount24 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount25 = mutable.HashMap[Int, Int]()\n        val divisorsCount26 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount27 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount28 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount29 = mutable.HashMap[Int, Int]()\n        val divisors", "    \
    \    val count = mutable.HashMap.empty[Long, Int]\n        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n\
    \        for (i <- 0 until digits.length)\n            if (digits(i) == 7)\n \
    \               count(digits(i)) = count(digits(i)) + 1\n        count.values.sum",
  "        val nums = mutable.ListBuffer(n).filter(_ % 11 == 0 || _ % 13 == 0)\n \
    \       nums.count(_ == 7) / nums.size", "        val count = mutable.HashMap[Int,\
    \ Int]()\n        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount", "        var count = 0\n        for(i <- 0 until n){\n     \
    \       if((i%11==0) && (i%13==0)){\n                count += 1\n            }\n\
    \        }\n        count", "        val ns = n.toString.toInt\n        val nm\
    \ = n % 11\n        val nn = n % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 11\n        val ns = ns % 13\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val nn = nn % 13\n        val ns = ns % 11\n        val nm\
    \ = nm % 13\n        val ", "        val nums = mutable.ListBuffer[Long]()\n \
    \       val divisors = mutable.ListBuffer[Long]()\n        var remainder = n\n\
    \        while(n > 0) {\n            val remainderToAdd = n % 10\n           \
    \ n /= 10\n            if(remainderToAdd == 7) {\n                nums.append(remainder)\n\
    \                divisors.append(11)\n            } else {\n                nums.append(remainder)\n\
    \                divisors.append(13)\n            }\n        }\n        val numsSorted\
    \ = nums.sorted\n        val divisorsSorted = divisors.sorted\n        var count\
    \ = 0\n        for(i <- 0 until numsSorted.length) {\n            val numsIndex\
    \ = numsSorted.indexWhere(_ == numsSorted(i))\n            val divisorsIndex =\
    \ divisorsSorted.indexWhere(_ == divisorsSorted(i))\n            if(numsIndex\
    \ < divisorsIndex) {\n                count += 1\n            } else {\n     \
    \           count += numsIndex - divisorsIndex\n            }\n        }\n   \
    \     count", "        val counts = mutable.HashMap[Int, Int]()\n        for (i\
    \ <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n              \
    \  counts.update(i.toInt, counts.getOrElse(i, 0) + 1l) \n            }\n     \
    \   }\n        counts.values.sum", "        val nums = mutable.ListBuffer(n).filter(_\
    \ % 11 == 0 || _ % 13 == 0)\n        nums.count(_ % 7 == 0)", "        val nums\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 0 until n){\n          \
    \  if(i % 11 == 0 || i % 13 == 0){\n                nums += i\n            }\n\
    \        }\n        nums.count(_ % 7 == 0)", "        var count = 0\n        for\
    \ (i <- 0 until n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n        \
    \        count += 1\n            }\n        }\n        count", "        val nums\
    \ = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n            if((i %\
    \ 11) == 0 || (i % 13) == 0){\n                nums += i\n            }\n    \
    \    }\n        nums.count(_ % 7 == 0)", "        var count = 0\n        var remainder\
    \ = n\n        while(n != 0) {\n            count += 1\n            remainder\
    \ = remainder / 10\n            if(remainder == 7) {\n                count +=\
    \ 1\n            }\n        }\n        count", "        val fizzBuzz = mutable.Set[Long]()\n\
    \        val fizz = mutable.Set[Long]()\n        val buzz = mutable.Set[Long]()\n\
    \        val fizzBuzzSet = mutable.Set[Long]()\n        val fizzSet = mutable.Set[Long]()\n\
    \        val buzzSet = mutable.Set[Long]()\n        val fizzBuzzSet2 = mutable.Set[Long]()\n\
    \        val fizzSet2 = mutable.Set[Long]()\n        val buzzSet2 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet3 = mutable.Set[Long]()\n        val fizzSet3 = mutable.Set[Long]()\n\
    \        val buzzSet3 = mutable.Set[Long]()\n        val fizzBuzzSet4 = mutable.Set[Long]()\n\
    \        val fizzSet4 = mutable.Set[Long]()\n        val buzzSet4 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet5 = mutable.Set[Long]()\n        val fizzSet5 = mutable.Set[Long]()\n\
    \        val buzzSet5 = mutable.Set[Long]()\n        val fizzBuzzSet6 = mutable.Set[Long]()\n\
    \        val fizzSet6 = mutable.Set[Long]()\n        val buzzSet6 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet7 = mutable.Set[Long]()\n        val fizzSet7 = mutable.Set[Long]()\n\
    \        val buzzSet7 = mutable.Set[Long]()\n        val fizzBuzzSet8 = mutable.Set[Long]()\n\
    \        val fizzSet8 = mutable.Set[Long]()\n        val buzzSet8 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet9 = mutable.Set[Long]()\n        val fizzSet9 = mutable.Set[Long]()\n\
    \        val buzzSet9 = mutable.Set[Long]()\n        val fizzBuzzSet10 = mutable.Set[Long]()\n\
    \        val fizzSet10 = mutable.Set[Long]()\n        val buzzSet10 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet11 = mutable.Set[Long]()\n        val fizzSet11 = mutable.Set[Long]()\n\
    \        ", "        val nums = mutable.ListBuffer(n)\n        var count = 0\n\
    \        while(nums.nonEmpty) {\n            val num = nums.head\n           \
    \ nums -= num\n            val remainder = num % 11\n            val remainder2\
    \ = num % 13\n            if (remainder == 7 || remainder2 == 7) {\n         \
    \       count += 1\n            }\n        }\n        count", "        val nums\
    \ = mutable.ListBuffer(n)\n        var count = 0\n        while (nums.nonEmpty)\
    \ {\n            val num = nums.head\n            if (num % 11 == 0 || num % 13\
    \ == 0) {\n                count += 1\n            }\n            nums -= num\n\
    \        }\n        count", "        val nums = mutable.ListBuffer[Long]()\n \
    \       for(i <- 1 to n) nums += i\n        nums.count(_ % 11 == 0 || _ % 13 ==\
    \ 0)", "        val fizzBuzz = mutable.Set[Long]()\n        val fizzBuzzSet =\
    \ mutable.Set[Long]()\n        val fizzBuzzSet2 = mutable.Set[Long]()\n      \
    \  val fizzBuzzSet3 = mutable.Set[Long]()\n        val fizzBuzzSet4 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet5 = mutable.Set[Long]()\n        val fizzBuzzSet6 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet7 = mutable.Set[Long]()\n        val fizzBuzzSet8 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet9 = mutable.Set[Long]()\n        val fizzBuzzSet10 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet11 = mutable.Set[Long]()\n        val fizzBuzzSet12 =\
    \ mutable.Set[Long]()\n        val fizzBuzzSet13 = mutable.Set[Long]()\n     \
    \   val fizzBuzzSet14 = mutable.Set[Long]()\n        val fizzBuzzSet15 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet16 = mutable.Set[Long]()\n        val fizzBuzzSet17 =\
    \ mutable.Set[Long]()\n        val fizzBuzzSet18 = mutable.Set[Long]()\n     \
    \   val fizzBuzzSet19 = mutable.Set[Long]()\n        val fizzBuzzSet20 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet21 = mutable.Set[Long]()\n        val fizzBuzzSet22 =\
    \ mutable.Set[Long]()\n        val fizzBuzzSet23 = mutable.Set[Long]()\n     \
    \   val fizzBuzzSet24 = mutable.Set[Long]()\n        val fizzBuzzSet25 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet26 = mutable.Set[Long]()\n        val fizzBuzzSet27 =\
    \ mutable.Set[Long]()\n        val fizzBuzzSet28 = mutable.Set[Long]()\n     \
    \   val fizzBuzzSet29 = mutable.Set[Long]()\n        val fizzBuzzSet30 = mutable.Set[Long]()",
  "        var count = 0\n        for (i <- 0 until n) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                count += 1\n            }\n        }\n\
    \        count", "        val nums = mutable.ListBuffer[Long]()\n        var count\
    \ = 0\n        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0)\
    \ {\n                nums += i\n                count += 1\n            }\n  \
    \      }\n        count match {\n            case 0 => 0\n            case 1 =>\
    \ 1\n            case _ => count\n        }", "        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        divisors +=\
    \ 11\n        divisors += 13\n        divisors.foreach(divisor => {\n        \
    \    val remainder = n % divisor\n            if (remainder == 0) divisors +=\
    \ divisor\n        })\n        divisors.foreach(divisor => {\n            val\
    \ remainder = n % divisor\n            if (remainder == 0) divisors += divisor\n\
    \        })\n        divisors.foreach(divisor => {\n            val remainder\
    \ = n % divisor\n            if (remainder == 0) divisors += divisor\n       \
    \ })\n        divisors.foreach(divisor => {\n            val remainder = n % divisor\n\
    \            if (remainder == 0) divisors += divisor\n        })\n        divisors.foreach(divisor\
    \ => {\n            val remainder = n % divisor\n            if (remainder ==\
    \ 0) divisors += divisor\n        })\n        divisors.foreach(divisor => {\n\
    \            val remainder = n % divisor\n            if (remainder == 0) divisors\
    \ += divisor\n        })\n        divisors.foreach(divisor => {\n            val\
    \ remainder = n % divisor\n            if (remainder == 0) divisors += divisor\n\
    \        })\n        divisors.foreach(divisor => {\n            val remainder\
    \ = n % divisor\n            if (remainder == 0) divisors += divisor\n       \
    \ })\n        divisors.foreach(divisor => {\n            val remainder = n % divisor\n\
    \            if (remainder == 0) divisors += divisor\n        })\n        divisors.foreach(divisor\
    \ => {\n            val remainder = n % divisor\n            if (remainder ==\
    \ 0) divisors += divisor\n        })\n        divisors.foreach(divisor => {\n\
    \            val remainder = n % divisor\n            if (remainder == 0) divisors\
    \ += divisor\n        })\n        divisors.foreach(divisor => {\n            val\
    \ remainder = n % divisor\n            if (remainder == 0) divisors += divisor\n\
    \        })\n        divisors.foreach(divisor => {\n            val remainder\
    \ = n % divisor\n            if (remainder == 0) divisors += divisor\n       \
    \ })\n        divisors.foreach(divisor => {\n            val remainder = n % divisor\n\
    \            if (remainder == 0) divisors += divisor\n        })\n        divisors.foreach(divisor\
    \ => {\n            val remainder = n % divisor\n            if (remainder ==\
    \ 0) divisors += divisor\n        })\n        divisors.foreach(divisor => {\n\
    \            val remainder = n % divisor\n            if (remainder == 0) divisors\
    \ += divisor\n        })\n        divisors.foreach(divisor => {\n            val\
    \ remainder = n % divisor\n            if (remainder == 0) divisors += divisor\n\
    \        })\n        divisors.foreach(divisor => {\n            val remainder\
    \ = n % divisor\n", "        val counts = mutable.HashMap[Int, Int]()\n      \
    \  val divisors = mutable.HashSet[Int]()\n        val divisorsCount = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount2 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount3 = mutable.HashMap[Int, Int]()\n        val divisorsCount4 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount5 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount6 = mutable.HashMap[Int, Int]()\n        val divisorsCount7 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount8 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount9 = mutable.HashMap[Int, Int]()\n        val divisorsCount10 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount11 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount12 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount13 = mutable.HashMap[Int, Int]()\n        val divisorsCount14 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount15 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount16 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount17 = mutable.HashMap[Int, Int]()\n        val divisorsCount18 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount19 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount20 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount21 = mutable.HashMap[Int, Int]()\n        val divisorsCount22 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount23 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount24 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount25 = mutable.HashMap[Int, Int]()\n        val divisorsCount26 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount27 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount28 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount29 = mutable.HashMap[Int, Int]()\n        val divisorsCount", " \
    \       val nums = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n   \
    \         if((i%11==0)&&(i%13==0)){\n                nums += i\n            }\n\
    \        }\n        nums.count(_==7)", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        for (i <- 1 to n) {\n            val d = i % 11\n          \
    \  if (d == 7) {\n                counts.update(i.toInt, counts.get (i.toInt)\
    \ + 1)\n            }\n        }\n        counts.values.sum", "        val nums\
    \ = mutable.ListBuffer(n).map(_.toString.toInt)\n        val numsLen = nums.size\n\
    \        val numsDivisibleBy11Or13 = nums.filter(x => x % 11 == 0 || x % 13 ==\
    \ 0)\n        val numsDivisibleBy11Or13Len = numsDivisibleBy11Or13.size\n    \
    \    val numsDivisibleBy11Or13DivisibleBy7 = (numsDivisibleBy11Or13.filter(x =>\
    \ x % 7 == 0))\n        val numsDivisibleBy11Or13DivisibleBy7Len = numsDivisibleBy11Or13DivisibleBy7.size\n\
    \        val numsDivisibleBy11Or13DivisibleBy7DivisibleBy7 = (numsDivisibleBy11Or13DivisibleBy7.filter(x\
    \ => x % 7 == 0))\n        val numsDivisibleBy11Or13DivisibleBy7DivisibleBy7Len\
    \ = numsDivisibleBy11Or13DivisibleBy7DivisibleBy7.size\n        val numsDivisibleBy11Or13DivisibleBy7DivisibleBy7DivisibleBy7\
    \ = (numsDivisibleBy11Or13DivisibleBy7DivisibleBy7.filter(x => x % 7 == 0))\n\
    \        val numsDivisibleBy11Or13DivisibleBy7DivisibleBy7DivisibleBy7Len = numsDivisibleBy11Or13DivisibleBy7DivisibleBy7DivisibleBy7.size\n\
    \        val numsDivisibleBy11Or13DivisibleBy7DivisibleBy7DivisibleBy7DivisibleBy7\
    \ = (numsDivisibleBy11Or13DivisibleBy7DivisibleBy7DivisibleBy7DivisibleBy7.filter(x\
    \ => x % 7 == 0))\n        val numsDivisibleBy11Or13DivisibleBy7DivisibleBy7DivisibleBy7DivisibleBy7Len\
    \ = numsDivisibleBy11Or13DivisibleBy7DivisibleBy7DivisibleBy7DivisibleBy7.size\n\
    \        val numsDivisibleBy11Or13DivisibleBy7DivisibleBy7DivisibleBy7DivisibleBy7DivisibleBy7\
    \ = (numsDivisibleBy11Or13DivisibleBy7DivisibleBy7DivisibleBy7DivisibleBy7DivisibleBy7DivisibleBy7.filter(x\
    \ => x % 7 == 0))\n        val numsDivisibleBy11Or13DivisibleBy7Divisible", " \
    \       val counts = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount2 = mutable.HashMap[Int, Int]()\n        val divisorsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount4 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount5 = mutable.HashMap[Int, Int]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount7 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount8 = mutable.HashMap[Int, Int]()\n        val divisorsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount10 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount11 = mutable.HashMap[Int, Int]()\n        val divisorsCount12 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount14 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount15 = mutable.HashMap[Int, Int]()\n        val divisorsCount16 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount18 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount19 = mutable.HashMap[Int, Int]()\n        val divisorsCount20 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount22 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount23 = mutable.HashMap[Int, Int]()\n        val divisorsCount24 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount25 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount26 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount27 = mutable.HashMap[Int, Int]()\n        val divisorsCount28 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount29 = mutable.HashMap[Int,\
    \ Int]()\n        val divisors", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 0 until n) {\n            val remainder = i % 11\n  \
    \          val remainder2 = i % 13\n            if(remainder == 7 && remainder2\
    \ == 7) {\n                counts(i) = 1\n            }\n        }\n        counts.values.sum",
  "        val ns = n.toString.toInt\n        val count = mutable.HashMap[Int, Int]()\n\
    \        for (i <- 0 until ns) {\n            val digit = i % 10\n           \
    \ if (digit == 7) {\n                count(digit) += 1\n            }\n      \
    \  }\n        count(7).foreach(println)\n        count(11).foreach(println)\n\
    \        count(13).foreach(println)\n        count(ns)", "        val counts =\
    \ mutable.HashMap[Int, Int]()\n        for (i <- 1 to n) {\n            val remainder\
    \ = i % 11\n            if (remainder == 0 || remainder == 13) {\n           \
    \     counts.putIfAbsent(remainder, counts.getOrElse(remainder, 0) + 1)\n    \
    \        }\n        }\n        counts.values.sum", "        val count = mutable.HashMap.empty[Long,\
    \ Long]\n        for(i <- 1 to n){\n            val div = i % 11\n           \
    \ if(div == 0 || div == 13) count += i -> 1\n            else if(i % 11 == 0)\
    \ count += i -> 1\n            else count += i -> 0\n        }\n        count.values.sum",
  "        val counts = mutable.HashMap[Int, Int]()\n        for (i <- 1 to n) {\n\
    \            val remainder = i % 11\n            if (remainder == 0 || remainder\
    \ == 13) {\n                counts.put(i, 1)\n            } else {\n         \
    \       val count = counts.get(remainder)\n                if (count == null)\
    \ counts.put(remainder, 1)\n                else counts.put(remainder, count +\
    \ 1)\n            }\n        }\n        counts.values.sum", "        val count\
    \ = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int, Int]()\n\
    \        val divisorsCount = mutable.HashMap[Int, Int]()\n        val divisorsCount2\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount4 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount5 = mutable.HashMap[Int, Int]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount7 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount8 = mutable.HashMap[Int, Int]()\n        val divisorsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount10 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount11 = mutable.HashMap[Int, Int]()\n        val divisorsCount12 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount14 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount15 = mutable.HashMap[Int, Int]()\n        val divisorsCount16 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount18 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount19 = mutable.HashMap[Int, Int]()\n        val divisorsCount20 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount22 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount23 = mutable.HashMap[Int, Int]()\n        val divisorsCount24 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount25 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount26 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount27 = mutable.HashMap[Int, Int]()\n        val divisorsCount28 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount29 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount", "        var count = 0\n        for(i <-\
    \ 1 to n){\n            if((i%11 == 0) || (i%13 == 0)){\n                count\
    \ += 1\n            }\n        }\n        count", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        val divisors = mutable.HashSet[Int]()\n        divisors.add(11)\n\
    \        divisors.add(13)\n        for(i <- 1 to n) {\n            val remainder\
    \ = i % 10\n            val divisor = divisors.find(divisor => divisor == remainder)\n\
    \            if(divisor == None) counts(remainder) = 0\n            else counts(remainder)\
    \ = counts(remainder) + 1\n        }\n        counts.values.sum", "        val\
    \ counts = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount2 = mutable.HashMap[Int, Int]()\n        val divisorsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount4 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount5 = mutable.HashMap[Int, Int]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount7 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount8 = mutable.HashMap[Int, Int]()\n        val divisorsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount10 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount11 = mutable.HashMap[Int, Int]()\n        val divisorsCount12 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount14 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount15 = mutable.HashMap[Int, Int]()\n        val divisorsCount16 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount18 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount19 = mutable.HashMap[Int, Int]()\n        val divisorsCount20 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount22 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount23 = mutable.HashMap[Int, Int]()\n        val divisorsCount24 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount25 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount26 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount27 = mutable.HashMap[Int, Int]()\n        val divisorsCount28 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount29 = mutable.HashMap[Int,\
    \ Int]()\n        val divisors", "        val nums = mutable.ListBuffer(n)\n \
    \       var count = 0\n        while(nums.nonEmpty) {\n            val num = nums.head\n\
    \            nums.remove(num)\n            val remainder = num % 11\n        \
    \    if(remainder == 7) {\n                count += 1\n            }\n       \
    \ }\n        count", "        val counts = mutable.HashMap[Int, Int]()\n     \
    \   for(i <- 1 to n) {\n            val d = i % 11\n            val m = i % 13\n\
    \            if(d == 7 && m == 0) {\n                counts(d) += 1\n        \
    \    }\n        }\n        counts.values.sum", "        val nums = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)", "        val count = mutable.HashMap[Int, Int]()\n        val remainder\
    \ = n % 11\n        val remainder2 = n % 13\n        val remainder3 = n % 17\n\
    \        val remainder4 = n % 19\n        val remainder5 = n % 23\n        val\
    \ remainder6 = n % 29\n        val remainder7 = n % 31\n        val remainder8\
    \ = n % 37\n        val remainder9 = n % 41\n        val remainder10 = n % 47\n\
    \        val remainder11 = n % 53\n        val remainder12 = n % 59\n        val\
    \ remainder13 = n % 61\n        val remainder14 = n % 67\n        val remainder15\
    \ = n % 71\n        val remainder16 = n % 77\n        val remainder17 = n % 83\n\
    \        val remainder18 = n % 89\n        val remainder19 = n % 93\n        val\
    \ remainder20 = n % 97\n        val remainder21 = n % 101\n        val remainder22\
    \ = n % 107\n        val remainder23 = n % 113\n        val remainder24 = n %\
    \ 119\n        val remainder25 = n % 127\n        val remainder26 = n % 133\n\
    \        val remainder27 = n % 139\n        val remainder28 = n % 147\n      \
    \  val remainder29 = n % 153\n        val remainder30 = n % 159\n        val remainder31\
    \ = n % 167\n        val remainder32 = n % 173\n        val remainder33 = n %\
    \ 179\n        val remainder34 = n % 185\n        val remainder35 = n % 191\n\
    \        val remainder36 = n % 197\n        val remainder37 = n % 203\n      \
    \  val remainder38 = n % 209\n        val remainder39 = n % 215\n        val remainder40\
    \ = n % 221\n        val remainder41 = n % 227\n        val remainder42 = n %\
    \ 233\n        val remainder43 = n % 239\n        val remainder44 = n % 247\n\
    \        val remainder45 = n % 253\n        val remainder46 = n % 259\n      \
    \  val remainder47 = n % 267\n        val remainder48 = n % 273\n        val remainder49\
    \ = n % 279\n        val remainder50 = n % 285\n        val remainder51 = n %\
    \ 291\n        val remainder52 = n % 297\n        val remainder53 = n % 303\n\
    \        val remainder54 = n % 309\n        val remainder55 = n % 315\n      \
    \  val remainder56 = n % ", "        val counts = mutable.HashMap[Int, Int]()\n\
    \        for (i <- 1 to n) {\n            val remainder = i % 11\n           \
    \ if (remainder == 0 || remainder == 13) {\n                counts.put(i, 1)\n\
    \            } else {\n                counts.put(i, counts.getOrElse(i, 0) +\
    \ 1)\n            }\n        }\n        counts.values.sum", "        val nums\
    \ = mutable.ListBuffer(n)\n        val result = mutable.ListBuffer[Long]()\n \
    \       val divisors = mutable.ListBuffer(11, 13)\n        divisors.foreach {\
    \ divisor =>\n            while (nums.nonEmpty) {\n                val num = nums.head\n\
    \                nums -= num\n                if (num % divisor == 0) {\n    \
    \                result += 1\n                }\n            }\n        }\n  \
    \      result.size", "        val counts = mutable.HashMap.empty[Long, Int]\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                counts(i) = counts.getOrElse(i, 0) + 1\n            }\n     \
    \   }\n        counts.values.sum", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n) {\n            val d = i % 11\n            if(d == 7)\
    \ {\n                nums += i\n            }\n        }\n        nums.length",
  "        val counts = mutable.HashMap.empty[Long, Int]\n        val divisors = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount = mutable.HashMap.empty[Long, Int]\n        val divisorsCount2\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount3 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount4 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount5 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount6\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount7 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount8 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount9 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount10\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount11 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount12 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount13 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount14\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount15 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount16 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount17 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount18\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount19 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount20 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount21 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount22\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount23 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount24 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount25 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount26\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount27 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount28 = mutable.HashMap.", "        val count =\
    \ mutable.ListBuffer.empty[Long]\n        for (i <- 1 to n) {\n            if\
    \ (i % 11 == 0 || i % 13 == 0) {\n                count += i\n            }\n\
    \        }\n        count.length", "        val count = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 0 until n){\n            val str = i.toString\n            val\
    \ digit = str.charAt(0)\n            if(digit == '7'){\n                val count\
    \ = count.get(digit)\n                if(count == null) count(0) = 1\n       \
    \         else count(0) = count(0) + 1\n            }\n        }\n        count.values.sum",
  "        val counts = mutable.HashMap.empty[Long, Int]\n        for(i <- 1 to n)\
    \ {\n            val remainder = i % 11\n            val remainder2 = i % 13\n\
    \            if(remainder == 7 && remainder2 == 7) {\n                counts(i)\
    \ = 1\n            }\n        }\n        counts.values.sum", "        val counts\
    \ = mutable.HashMap.empty[Long, Int]\n        for (i <- 1 to n) {\n          \
    \  val remainder = n % i\n            if (remainder == 0 || remainder == 11 ||\
    \ remainder == 13) {\n                counts.put(n, counts.getOrElse(n,0) + 1)\n\
    \            }\n        }\n        counts.values.sum", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 1 to n) {\n            val div = i / 11\n           \
    \ val mod = i % 11\n            val divMod = div % mod\n            val count\
    \ = counts.getOrElse(divMod, 0)\n            counts.put(divMod, count + 1)\n \
    \       }\n        counts.values.sum", "        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 0 until n){\n            val remainder = n % 10\n   \
    \         if(remainder == 7 || remainder == 11 || remainder == 13){\n        \
    \        val count = count.getOrElseUpdate(remainder, 0)\n                count\
    \ += 1\n            }\n            n = n / 10\n        }\n        count.values.sum",
  "        val count = mutable.HashMap.empty[Long, Int]\n        for(i <- 0 until\
    \ n){\n            val div = i % 11\n            val mod = i % 13\n          \
    \  if(div == 0 || mod == 0){\n                count.put(i, 1)\n            }\n\
    \        }\n        count.values.sum", "        val fizzBuzz = mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until n){\n            if(i % 11 == 0 || i % 13 == 0){\n \
    \               fizzBuzz += i\n            }\n        }\n        fizzBuzz.count(_\
    \ == 7)", "        val count = mutable.HashMap.empty[Long, Long]\n        for\
    \ (i <- 1 to n) {\n            val remainder = n % i\n            if (remainder\
    \ == 0 || remainder == 11 || remainder == 13) {\n                val count = count.getOrElse(i,\
    \ 0) + 1\n                count.put(n, count)\n            }\n        }\n    \
    \    count.values.sum", "        val nums = mutable.ListBuffer(n)\n        var\
    \ count = 0\n        while(nums.nonEmpty) {\n            val num = nums.head\n\
    \            nums -= num\n            val remainder = num % 11\n            val\
    \ divisor = num % 13\n            if(divisor == 7) {\n                count +=\
    \ 1\n            }\n            if(remainder == 7) {\n                count +=\
    \ 1\n            }\n        }\n        count", "        var count = 0\n      \
    \  for (i <- 0 until n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n   \
    \             count += 1\n            }\n        }\n        count", "        val\
    \ nums = mutable.ListBuffer[Long]()\n        for(i <- 0 until n){\n          \
    \  if((i % 11) == 0 || (i % 13) == 0){\n                nums += i\n          \
    \  }\n        }\n        nums.count(_ % 7 == 0)", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 1 to n) {\n            val remainder = i % 11\n     \
    \       val isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13\
    \ = remainder == 1\n            if(isDivisibleBy11 || isDivisibleBy13) {\n   \
    \             counts(i) = counts.getOrElse(i, 0) + 1\n            }\n        }\n\
    \        counts.values.sum", "        var count = 0\n        var remainder = n\n\
    \        while (remainder > 0){\n            if (remainder % 11 == 0 || remainder\
    \ % 13 == 0){\n                count += 1\n            }\n            remainder\
    \ = remainder / 10\n        }\n        count", "        val count = mutable.HashMap[Int,\
    \ Int]()\n        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n  \
    \      for (i <- 0 until digits.length)\n            if (digits(i).contains(7))\
    \ count(digits(i)) = count(digits(i)) + 1\n        count.values.sum", "      \
    \  val count = mutable.HashMap.empty[Long, Int]\n        for(i <- 0 until n){\n\
    \            val remainder = i % 11\n            if(remainder == 0 || remainder\
    \ == 13){\n                val digit = i % 10\n                if(count.contains(digit)){\n\
    \                    count(digit) += 1\n                }else{\n             \
    \       count(digit) = 1\n                }\n            }\n        }\n      \
    \  count.values.sum", "        val nums = mutable.ArrayBuffer.empty[Long]\n  \
    \      for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n  \
    \              nums += i\n            }\n        }\n        nums.count(_ % 7 ==\
    \ 0)", "        val counts = mutable.HashMap[Int, Int]()\n        for(i <- 1 to\
    \ n) {\n            val remainder = i % 11\n            val remainder2 = i % 13\n\
    \            if(remainder == 7 && remainder2 == 7) {\n                counts.update(i.toInt,\
    \ counts.getOrElse(i, 0) + 1l) \n            }\n        }\n        counts.values.sum",
  "        var count = 0\n        var remainder = n\n        while (remainder > 0)\
    \ {\n            if (remainder % 11 == 0 || remainder % 13 == 0) {\n         \
    \       count += 1\n            }\n            remainder = remainder / 10\n  \
    \      }\n        count", "        val nums = mutable.ListBuffer[Long]()\n   \
    \     for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n   \
    \             nums += i\n            }\n        }\n        nums.count(_ % 7 ==\
    \ 0)", "        var count = 0\n        var remainder = n\n        while(n != 0)\
    \ {\n            count += 1\n            remainder = remainder / 10\n        }\n\
    \        remainder", "        val counts = mutable.HashMap[Int, Int]()\n     \
    \   val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount2 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount3 = mutable.HashMap[Int, Int]()\n        val divisorsCount4 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount5 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount6 = mutable.HashMap[Int, Int]()\n        val divisorsCount7 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount8 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount9 = mutable.HashMap[Int, Int]()\n        val divisorsCount10 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount11 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount12 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount13 = mutable.HashMap[Int, Int]()\n        val divisorsCount14 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount15 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount16 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount17 = mutable.HashMap[Int, Int]()\n        val divisorsCount18 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount19 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount20 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount21 = mutable.HashMap[Int, Int]()\n        val divisorsCount22 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount23 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount24 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount25 = mutable.HashMap[Int, Int]()\n        val divisorsCount26 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount27 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount28 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount29 = mutable.HashMap[Int, Int]()\n        val divisors", "    \
    \    val nums = mutable.ListBuffer(n)\n        var count = 0\n        var lastDigit\
    \ = 7\n        while(nums.nonEmpty) {\n            val num = nums.head\n     \
    \       nums -= num\n            val digit = num % 10\n            if(digit ==\
    \ lastDigit) {\n                count += 1\n            } else {\n           \
    \     lastDigit = digit\n                count += 1\n            }\n        }\n\
    \        count", "        val count = mutable.ListBuffer.empty[Long]\n       \
    \ for(i <- 0 until n){\n            if((i%11 == 0) || (i%13 == 0)){\n        \
    \        count += i\n            }\n        }\n        count.length", "      \
    \  val nums = mutable.ListBuffer[Long]()\n        for(i <- 1 to n) {\n       \
    \     val d = i % 11\n            if(d == 7 || d == 13) {\n                nums\
    \ += i\n            }\n        }\n        nums.size", "        val count = mutable.HashMap[Int,\
    \ Int]()\n        for(i <- 1 to n) {\n            val remainder = i % 11\n   \
    \         val divideBy11 = i % 13\n            val divideBy13 = i % 7\n      \
    \      if(divideBy11 != 0 || divideBy13 != 0) {\n                val count = count.getOrElseUpdate(remainder,\
    \ 1)\n                count.get += 1\n            }\n        }\n        count.values.sum",
  "        val count = mutable.HashMap[Int, Int]()\n        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n\
    \        digits.foreach { case (digit, divisor) =>\n            if (divisor ==\
    \ 11 || divisor == 13) {\n                count.put(digit, count.getOrElse(digit,\
    \ 0) + 1l) \n            }\n        }\n        count.getOrElse(7, 0l)", "    \
    \    val nums = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until n)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                nums += i\n\
    \            }\n        }\n        nums.count(_ == 7l)", "        val nums = mutable.ListBuffer(n)\n\
    \        val counts = mutable.ListBuffer[Long]()\n        val divisors = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount = mutable.ListBuffer[Long]()\n        val divisorsCount2\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount3 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount4 = mutable.ListBuffer[Long]()\n        val divisorsCount5\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount6 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount7 = mutable.ListBuffer[Long]()\n        val divisorsCount8\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount9 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount10 = mutable.ListBuffer[Long]()\n        val divisorsCount11\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount12 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount13 = mutable.ListBuffer[Long]()\n        val divisorsCount14\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount15 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount16 = mutable.ListBuffer[Long]()\n        val divisorsCount17\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount18 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount19 = mutable.ListBuffer[Long]()\n        val divisorsCount20\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount21 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount22 = mutable.ListBuffer[Long]()\n        val divisorsCount23\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount24 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount25 = mutable.ListBuffer[Long]()\n        val divisorsCount26\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount27 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount28 = mutable.ListBuffer[Long]()\n        val divisorsCount29\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount30 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount31 = mutable.", "        val count = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n) {\n            if((i % 11) == 0 || (i % 13) == 0) {\n\
    \                count += i\n            }\n        }\n        count.length",
  "        val counts = mutable.HashMap.empty[Long, Int]\n        for (i <- 1 to n)\
    \ {\n            val remainder = i % 11\n            if (remainder == 0 || remainder\
    \ == 13) {\n                counts.putIfAbsent(i, 0)\n                counts(i)\
    \ += 1\n            }\n        }\n        counts.values.sum", "        var count\
    \ = 0\n        var nums = mutable.ArrayBuffer.empty[Long]\n        for(i <- 0\
    \ until n) {\n            if(i % 11 == 0 || i % 13 == 0) {\n                nums\
    \ += i\n            }\n        }\n        for(i <- 0 until nums.length) {\n  \
    \          if(nums(i) == 7) {\n                count += 1\n            }\n   \
    \     }\n        count", "        val nums = mutable.ListBuffer(n)\n        val\
    \ numsCount = mutable.ListBuffer[Long]()\n        var count = 0\n        while(nums.nonEmpty)\
    \ {\n            val num = nums.head\n            numsCount += num\n         \
    \   if(num % 11 == 0 || num % 13 == 0) {\n                count += 1\n       \
    \     }\n            nums -= num\n        }\n        numsCount.toList.sum", " \
    \       val nums = mutable.ListBuffer(n).filter(_ % 11 == 0 || _ % 13 == 0)\n\
    \        nums.count(_ % 7 == 0)", "        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(7)",
  "        val nums = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n    \
    \        if((i % 11) == 0 || (i % 13) == 0){\n                nums += i\n    \
    \        }\n        }\n        nums.count(_ % 7 == 0)", "        var count = 0\n\
    \        var remainder = n\n        while (remainder > 0) {\n            if (remainder\
    \ % 11 == 0 || remainder % 13 == 0) {\n                count += 1\n          \
    \  }\n            remainder = remainder / 10\n        }\n        count", "   \
    \     val nums = mutable.ArrayBuffer.empty[Long]\n        for(i <- 0 until n){\n\
    \            if(i % 11 == 0 || i % 13 == 0){\n                nums += i\n    \
    \        }\n        }\n        nums.count(_ % 7 == 0)", "        val counts =\
    \ mutable.HashMap[Int, Int]()\n        for(i <- 0 until n){\n            val remainder\
    \ = i % 11\n            val remainder2 = i % 13\n            if((remainder ==\
    \ 7) && (remainder2 == 7)) counts(i) = 1\n            if((remainder == 7) && (remainder2\
    \ != 7)) counts(i) = 1\n            if((remainder != 7) && (remainder2 == 7))\
    \ counts(i) = 1\n            if((remainder != 7) && (remainder2 != 7)) counts(i)\
    \ = 1\n        }\n        counts.values.sum", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        val divisorsCount\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount2 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount3 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount4 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount5\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount6 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount7 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount8 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount9\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount10 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount11 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount12 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount13\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount14 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount15 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount16 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount17\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount18 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount19 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount20 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount21\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount22 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount23 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount24 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount25\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount26 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount27 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount28 = mutable.HashMap.", "        var count = 0\n        for\
    \ (i <- 0 until n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n        \
    \        count += 1\n            }\n        }\n        count", "        val count\
    \ = mutable.ListBuffer.empty[Long]\n        val divisors = mutable.ListBuffer.empty[Long]\n\
    \        val remainder = n % 11\n        val remainder2 = n % 13\n        divisors\
    \ += 11\n        divisors += 13\n        divisors += remainder\n        divisors\
    \ += remainder2\n        divisors.foreach(x => count += n / x)\n        count.sum",
  "        val count = mutable.HashMap.empty[Long, Int]\n        for (i <- 1 to n)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count.putIfAbsent(i,\
    \ 0)\n                count(i) += 1\n            }\n        }\n        count.values.sum",
  "        val nums = mutable.ListBuffer(n).filter(_ % 11 == 0 || _ % 13 == 0)\n \
    \       nums.count(_ % 7 == 0)", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 1 to n) {\n            val d = i % 11\n            if(d\
    \ == 7) {\n                counts(i) = counts.getOrElse(i, 0) + 1\n          \
    \  }\n        }\n        counts.values.sum", "        var count = 0\n        var\
    \ remainder = n\n        while(remainder > 0) {\n            val remainderDiv\
    \ = remainder % 11\n            val remainderMod = remainder % 13\n          \
    \  if (remainderDiv == 0 || remainderMod == 0) {\n                count += 1\n\
    \            }\n            remainder = remainder / 11\n        }\n        count",
  "        val fizzBuzz = mutable.ListBuffer[Long]()\n        val divisibleBy11 =\
    \ n % 11 == 0\n        val divisibleBy13 = n % 13 == 0\n        if (divisibleBy11\
    \ && divisibleBy13) fizzBuzz += n\n        if (divisibleBy11) fizzBuzz += n\n\
    \        if (divisibleBy13) fizzBuzz += n\n        if (divisibleBy11 && divisibleBy13)\
    \ fizzBuzz += n\n        if (divisibleBy11) fizzBuzz += n\n        if (divisibleBy13)\
    \ fizzBuzz += n\n        if (divisibleBy11 && divisibleBy13) fizzBuzz += n\n \
    \       if (divisibleBy11) fizzBuzz += n\n        if (divisibleBy13) fizzBuzz\
    \ += n\n        if (divisibleBy11 && divisibleBy13) fizzBuzz += n\n        if\
    \ (divisibleBy11) fizzBuzz += n\n        if (divisibleBy13) fizzBuzz += n\n  \
    \      if (divisibleBy11 && divisibleBy13) fizzBuzz += n\n        if (divisibleBy11)\
    \ fizzBuzz += n\n        if (divisibleBy13) fizzBuzz += n\n        if (divisibleBy11\
    \ && divisibleBy13) fizzBuzz += n\n        if (divisibleBy11) fizzBuzz += n\n\
    \        if (divisibleBy13) fizzBuzz += n\n        if (divisibleBy11 && divisibleBy13)\
    \ fizzBuzz += n\n        if (divisibleBy11) fizzBuzz += n\n        if (divisibleBy13)\
    \ fizzBuzz += n\n        if (divisibleBy11 && divisibleBy13) fizzBuzz += n\n \
    \       if (divisibleBy11) fizzBuzz += n\n        if (divisibleBy13) fizzBuzz\
    \ += n\n        if (divisibleBy11 && divisibleBy13) fizzBuzz += n\n        if\
    \ (divisibleBy11) fizzBuzz += n\n        if (divisibleBy13) fizzBuzz += n\n  \
    \      if (divisibleBy11 && divisibleBy13) fizzBuzz += n\n        if (divisibleBy11)\
    \ fizzBuzz += n\n        if (divisibleBy13) fizzBuzz += n\n        if (divisibleBy11\
    \ && divisibleBy13) fizzBuzz += n\n        if (divisibleBy11) fizzBuzz += n\n\
    \        if (divisibleBy", "        var count = 0\n        var remainder = n\n\
    \        while (remainder != 0) {\n            val remainder2 = remainder % 11\n\
    \            if (remainder2 == 7) {\n                count += 1\n            }\n\
    \            remainder = remainder / 11\n        }\n        count", "        val\
    \ counts = mutable.HashMap.empty[Long, Int]\n        for (i <- 1 to n) {\n   \
    \         val div = i % 11\n            val mod10 = i % 10\n            if (div\
    \ == 0 || div == 13) {\n                counts.put(mod10, counts.getOrElse(mod10,\
    \ 0) + 1)\n            }\n        }\n        counts.values.sum", "        var\
    \ count = 0\n        val digits = mutable.ArrayBuffer(7, 11)\n        val digitCount\
    \ = mutable.ArrayBuffer(7, 11)\n        val digitCount2 = mutable.ArrayBuffer(7,\
    \ 11)\n        val digitCount3 = mutable.ArrayBuffer(7, 11)\n        val digitCount4\
    \ = mutable.ArrayBuffer(7, 11)\n        val digitCount5 = mutable.ArrayBuffer(7,\
    \ 11)\n        val digitCount6 = mutable.ArrayBuffer(7, 11)\n        val digitCount7\
    \ = mutable.ArrayBuffer(7, 11)\n        val digitCount8 = mutable.ArrayBuffer(7,\
    \ 11)\n        val digitCount9 = mutable.ArrayBuffer(7, 11)\n        val digitCount10\
    \ = mutable.ArrayBuffer(7, 11)\n        val digitCount11 = mutable.ArrayBuffer(7,\
    \ 11)\n        val digitCount12 = mutable.ArrayBuffer(7, 11)\n        val digitCount13\
    \ = mutable.ArrayBuffer(7, 11)\n        val digitCount14 = mutable.ArrayBuffer(7,\
    \ 11)\n        val digitCount15 = mutable.ArrayBuffer(7, 11)\n        val digitCount16\
    \ = mutable.ArrayBuffer(7, 11)\n        val digitCount17 = mutable.ArrayBuffer(7,\
    \ 11)\n        val digitCount18 = mutable.ArrayBuffer(7, 11)\n        val digitCount19\
    \ = mutable.ArrayBuffer(7, 11)\n        val digitCount20 = mutable.ArrayBuffer(7,\
    \ 11)\n        val digitCount21 = mutable.ArrayBuffer(7, 11)\n        val digitCount22\
    \ = mutable.ArrayBuffer(7, 11)\n        val digitCount23 = mutable.ArrayBuffer(7,\
    \ 11)\n        val digitCount24 = mutable.ArrayBuffer(7, 11)\n        val digitCount25\
    \ = mutable.ArrayBuffer(7, 11)\n        val digitCount26 = mutable.ArrayBuffer(7,\
    \ 11)\n        val digitCount27 = mutable.ArrayBuffer(7, 11)\n        val digitCount28\
    \ = mutable.ArrayBuffer(7, 11)\n        val digitCount29 = mutable.ArrayBuffer(7,\
    \ 11)\n        val digitCount30 = mutable.ArrayBuffer(7, 11)\n        val digitCount31\
    \ = mutable.ArrayBuffer(7, 11)\n        val digitCount32 = mutable.ArrayBuffer(7,\
    \ 11)\n        val digitCount33 = mutable.ArrayBuffer(7, 11)\n        val digitCount34\
    \ = mutable.ArrayBuffer(7, 11)\n        val digitCount35 = mutable.ArrayBuffer(7,\
    \ 11)\n        val digitCount36 = mutable.ArrayBuffer(7, 11)\n        val digitCount37\
    \ = mutable.ArrayBuffer(7, 11)\n        val digitCount38 = mutable.ArrayBuffer(7,\
    \ 11)\n        val digitCount39 = mutable.ArrayBuffer(7, 11)\n        val digitCount",
  "        val counts = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount2 = mutable.HashMap[Int, Int]()\n        val divisorsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount4 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount5 = mutable.HashMap[Int, Int]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount7 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount8 = mutable.HashMap[Int, Int]()\n        val divisorsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount10 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount11 = mutable.HashMap[Int, Int]()\n        val divisorsCount12 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount14 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount15 = mutable.HashMap[Int, Int]()\n        val divisorsCount16 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount18 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount19 = mutable.HashMap[Int, Int]()\n        val divisorsCount20 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount22 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount23 = mutable.HashMap[Int, Int]()\n        val divisorsCount24 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount25 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount26 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount27 = mutable.HashMap[Int, Int]()\n        val divisorsCount28 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount29 = mutable.HashMap[Int,\
    \ Int]()\n        val divisors", "        val nums = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        for (i <- 1 to n) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                nums += i\n                count += 1\n\
    \            }\n        }\n        nums.toList.count(_ == 7l)", "        val n1\
    \ = n % 11\n        val n2 = n % 13\n        val n3 = n % 17\n        val n4 =\
    \ n % 19\n        val n5 = n % 23\n        val n6 = n % 29\n        val n7 = n\
    \ % 31\n        val n8 = n % 37\n        val n9 = n % 41\n        val n10 = n\
    \ % 43\n        val n11 = n % 47\n        val n12 = n % 53\n        val n13 =\
    \ n % 59\n        val n14 = n % 61\n        val n15 = n % 67\n        val n16\
    \ = n % 71\n        val n17 = n % 77\n        val n18 = n % 83\n        val n19\
    \ = n % 89\n        val n20 = n % 97\n        val n21 = n % 103\n        val n22\
    \ = n % 107\n        val n23 = n % 113\n        val n24 = n % 119\n        val\
    \ n25 = n % 127\n        val n26 = n % 135\n        val n27 = n % 141\n      \
    \  val n28 = n % 147\n        val n29 = n % 153\n        val n30 = n % 159\n \
    \       val n31 = n % 165\n        val n32 = n % 171\n        val n33 = n % 177\n\
    \        val n34 = n % 183\n        val n35 = n % 189\n        val n36 = n % 195\n\
    \        val n37 = n % 203\n        val n38 = n % 209\n        val n39 = n % 215\n\
    \        val n40 = n % 221\n        val n41 = n % 227\n        val n42 = n % 233\n\
    \        val n43 = n % 239\n        val n44 = n % 245\n        val n45 = n % 251\n\
    \        val n46 = n % 257\n        val n47 = n % 263\n        val n48 = n % 269\n\
    \        val n49 = n % 275\n        val n50 = n % 281\n        val n51 = n % 287\n\
    \        val n52 = n % 293\n        val n53 = n % 299\n        val n54 = n % 305\n\
    \        val n55 = n % 311\n        val n56 = n % 317\n        val n57 = n % 323\n\
    \        val n58 = n % 329\n        val n59 = n % 335\n        val n60 = n % 341\n\
    \        val n61 = n % 347\n        val n62 = n % 353\n        val n63 = n % 359\n\
    \        val n64 = ", "        val counts = mutable.HashMap[Int, Int]()\n    \
    \    val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount2 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount3 = mutable.HashMap[Int, Int]()\n        val divisorsCount4 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount5 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount6 = mutable.HashMap[Int, Int]()\n        val divisorsCount7 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount8 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount9 = mutable.HashMap[Int, Int]()\n        val divisorsCount10 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount11 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount12 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount13 = mutable.HashMap[Int, Int]()\n        val divisorsCount14 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount15 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount16 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount17 = mutable.HashMap[Int, Int]()\n        val divisorsCount18 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount19 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount20 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount21 = mutable.HashMap[Int, Int]()\n        val divisorsCount22 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount23 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount24 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount25 = mutable.HashMap[Int, Int]()\n        val divisorsCount26 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount27 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount28 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount29 = mutable.HashMap[Int, Int]()\n        val divisors", "    \
    \    var count = 0\n        for(i <- 1 to n) {\n            if((i%11 == 0) ||\
    \ (i%13 == 0)) {\n                count += 1\n            }\n        }\n     \
    \   count", "        val nums = mutable.ListBuffer(n).map(_.toString.toInt)\n\
    \        val counts = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until\
    \ nums.size) {\n            val num = nums(i)\n            if(num % 11 == 0 ||\
    \ num % 13 == 0) {\n                counts += num\n            }\n        }\n\
    \        counts.sum"]
stop_tokens:
- "\n    }\n"
