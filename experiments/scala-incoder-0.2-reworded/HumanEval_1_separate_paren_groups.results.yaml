language: scala
name: HumanEval_1_separate_paren_groups
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatMap(x => x.split(\"\
    \\\\)\"))\n        paren_groups_flat.filter(x => x.trim().nonEmpty).distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfgm7hk0w.scala:13:57\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_groups_flat.filter(\e\
    [36mx\e[0m => x.trim().nonEmpty).distinct\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.map(x => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.map(x => x.replaceAll(\"\\\\)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp875thdvc.scala:32:76 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat21\e[0m\
    \ = paren_groups_flat20.map(\e[36mx\e[0m => x.replaceAll(\"\\\\)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \     unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmp875thdvc.scala:34:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp875thdvc.scala:13:62 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.map(\e[36mx\e[0m => x.replaceAll(\e[31m\"\\\\)\"\e[0m, \e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                       \
    \                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \           value replaceAll is not a member of Char\n\e[31m\e[31m-- Error: /tmp/tmp875thdvc.scala:13:84\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m = paren_groups_flat.map(\e[36mx\e\
    [0m => x.replaceAll(\e[31m\"\\\\)\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \          ^\e[0m\n\e[31m   |\e[0m                                          No\
    \ ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                 \
    \                         where:    B is a type variable\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp875thdvc.scala:33:5 ---------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /"
  stdout: ''
  timestamp: 1659795428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_size = mutable.ListBuffer[Int]()\n        val paren_group_open\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_closed = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_size = mutable.ListBuffer[Int]()\n        val paren_group_closed_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index2 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index2\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index3 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index3 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index4 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index4\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index5 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index5 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index6 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index6\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index7 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index7 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index8 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index8\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index9 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index9 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index10 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index10\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index11 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index11 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index12 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index12\
    \ = mutable.ListBuffer[Int]()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx2u8zh78.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx2u8zh78.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx2u8zh78.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_open\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpx2u8zh78.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpx2u8zh78.scala:15:36 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_group_open_size\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-expla"
  stdout: ''
  timestamp: 1659795427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"  \", \"\"))\n        val\
    \ paren_groups_with_open_braces_without_spaces_without_spaces = paren_groups_with_open_braces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg_3sw5u8.scala:19:149 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpg_3sw5u8.scala:20:164 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpg_3sw5u8.scala:21:179 -----------"
  stdout: ''
  timestamp: 1659795427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5b09tzsl.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: paren_groups_with_spaces_sorted_with_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5b09tzsl.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_parens = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_parens_without_spaces\
    \ = paren_groups_with_parens.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n      \
    \  paren_groups_with_parens_without_spaces.filter(x => x.isEmpty).map(x => x.replace(\"\
    (\", \"\").replace(\")\", \"\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk0gxdv6b.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        paren_groups_with_parens_without_spaces.filter(\e\
    [36mx\e[0m => x.isEmpty).map(\e[36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\
    \"\e[0m).replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"( \", \" (\"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\"(\
    \ \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu9w5jmj7.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpu9w5jmj7.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_strings\
    \ = paren_groups.map(x => x.replace(\")\", \"\").replace(\"(\", \"\").trim())\n\
    \        val paren_groups_strings_count = paren_groups_strings.length\n      \
    \  val paren_groups_strings_strings = paren_groups_strings.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_strings_strings_count\
    \ = paren_groups_strings_strings.length\n        val paren_groups_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings.length\n        val paren_groups_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings.length\n        val paren_groups_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings_strings.length\n        val paren_groups_strings_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings_strings_strings.length\n    \
    \    val paren_groups_strings_strings_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings_strings_strings_strings_strings.length\n\
    \        val paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings.length\n\
    \        val paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings.length\n\
    \        val paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings.length\n\
    \        val paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings.length\n\
    \        val paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_string\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp66lb1lzy.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp66lb1lzy.scala:17:57\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_strings_strings_strings_count\e[0m = paren_groups_strings_strings_strings.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \        Not found: paren_groups_strings_strings_strings\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp66lb1lzy.scala:18:65 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_strings_strings_strings_strings_count\e\
    [0m = paren_groups_strings_strings_strings_strings.length\n\e[31m\e[31m   |\e\
    [0m                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: paren_groups_strings_strings_strings_strings\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp66lb1lzy.scala:19:73\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_strings_strings_strings_strings_strings_count\e[0m = paren_groups_strings_strings_strings_strings_strings.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m         Not found: paren_groups_strings_strings_strings_strings_strings\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp66lb1lzy.scala:20:81\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_strings_strings_strings_strings_strings_strings"
  stdout: ''
  timestamp: 1659795427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_count = paren_groups.length\n        val paren_groups_with_parens\
    \ = paren_groups.map(x => x.replace(\")\", \"\").replace(\"(\", \"(\"))\n    \
    \    val paren_groups_with_parens_count = paren_groups_with_parens.length\n  \
    \      val paren_groups_with_parens_count_less_than_paren_groups = paren_groups_with_parens_count\
    \ < paren_group_count\n        val paren_groups_with_parens_count_less_than_paren_groups_count\
    \ = paren_groups_with_parens_count_less_than_paren_groups ? paren_group_count\
    \ : paren_groups_with_parens_count\n        val paren_groups_with_parens_count_less_than_paren_groups_count_less_than_paren_groups\
    \ = paren_groups_with_parens_count_less_than_paren_groups_count < paren_group_count\n\
    \        val paren_groups_with_parens_count_less_than_paren_groups_count_less_than_paren_groups_count\
    \ = paren_groups_with_parens_count_less_than_paren_groups_count ? paren_group_count\
    \ : paren_groups_with_parens_count_less_than_paren_groups_count\n        val paren_groups_with_parens_count_less_than_paren_groups_count_less_than_paren_groups_count_less_than_paren_groups\
    \ = paren_groups_with_parens_count_less_than_paren_groups_count_less_than_paren_groups_count\
    \ < paren_group_count\n        val paren_groups_with_parens_count_less_than_paren_groups_count_less_than_paren_groups_count_less_than_paren_groups_count\
    \ = paren_groups_with_parens_count_less_than_paren_groups_count_less_than_paren_groups_count\
    \ ? paren_group_count : paren_groups_with_parens_count_less_than_paren_groups_count_less_than_paren_groups\n\
    \        val paren_groups_with_parens_count_less_than_paren_groups_count_less_than_paren_groups_count_less_than_paren_groups_count_less_than_paren_groups\
    \ = paren_groups_with_parens_count_less_than_paren_groups_count_less_than_paren_groups_count_less_than_paren_groups_count_less_than_paren_groups\
    \ ? paren_group_count : paren_groups_with_parens_count_less_than_paren_groups_count_less_than_paren_groups_count_less_than_paren_groups\n\
    \        val paren_groups_with_parens_count_less_than_paren_groups_count_less_than_paren_groups_count_less_than_paren_groups_count_less_than_paren_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0_adupj.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps0_adupj.scala:16:150\
    \ -----------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_parens_count_less_than_paren_groups_count\e[0m = paren_groups_with_parens_count_less_than_paren_groups\
    \ ? paren_group_count : \e[35mparen_groups_with_parens_count\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \         Not found: type paren_groups_with_parens_count\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmps0_adupj.scala:16:128 -----------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_count_less_than_paren_groups_count\e\
    [0m = paren_groups_with_parens_count_less_than_paren_groups ? paren_group_count\
    \ : \e[35mparen_groups_with_parens_count\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value ? is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps0_adupj.scala:18:185\
    \ -----------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_parens_count_less_than_paren_groups_count_less_than_paren_groups_count\e\
    [0m = paren_groups_with_parens_count_less_than_paren_groups_count ? paren_group_count\
    \ : \e[35mparen_groups_with_parens_count_less_than_paren_groups_count\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \                                                   ^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_reversed = paren_groups_with_spaces.reverse\n\
    \        val paren_groups_with_spaces_reversed_with_spaces = paren_groups_with_spaces_reversed.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces.reverse\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces.reverse\n\
    \        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpukcmzrqx.scala:18:102 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\e\
    [0m = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpukcmzrqx.scala:19:111 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\e\
    [0m = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                           ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpukcmzrqx.scala:20:123 -----------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\e\
    [0m = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                          "
  stdout: ''
  timestamp: 1659795428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Create a stack to keep track of open\
    \ parens\n        val parenStack = mutable.Stack[String]()\n        // Create\
    \ a list to store our result\n        val result = mutable.ListBuffer[String]()\n\
    \        // Iterate over each character in the string\n        for (c <- paren_string)\
    \ {\n            // If character is opening paren, push it onto the stack\n  \
    \          if (c == '(') {\n                parenStack.push(c)\n            }\n\
    \            // If character is closing paren, pop it from the stack\n       \
    \     else if (c == ')') {\n                val poppedChar = parenStack.pop()\n\
    \                // If the popped character is not the opening paren, add it to\
    \ the result\n                if (poppedChar != '(') {\n                    result\
    \ += poppedChar\n                }\n            }\n            // If character\
    \ is not opening or closing paren, add it to the result\n            else {\n\
    \                result += c\n            }\n        }\n        // Return the\
    \ result list\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa7i1ljlk.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparenStack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa7i1ljlk.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Use a stack to keep track of which\
    \ parenthesis we're currently in\n        val paren_stack = mutable.Stack[String]()\n\
    \        // Use a list to keep track of which parenthesis we're currently in\n\
    \        val paren_list_stack = mutable.Stack[String]()\n        // Keep track\
    \ of which parenthesis we're currently in\n        var paren_list_string = \"\"\
    \n        // Keep track of which parenthesis we're currently in\n        var paren_string\
    \ = \"\"\n        // Keep track of which parenthesis we're currently in\n    \
    \    var paren_list_string = \"\"\n        // Keep track of which parenthesis\
    \ we're currently in\n        var paren_string = \"\"\n        // Keep track of\
    \ which parenthesis we're currently in\n        var paren_list_string = \"\"\n\
    \        // Keep track of which parenthesis we're currently in\n        var paren_string\
    \ = \"\"\n        // Keep track of which parenthesis we're currently in\n    \
    \    var paren_list_string = \"\"\n        // Keep track of which parenthesis\
    \ we're currently in\n        var paren_string = \"\"\n        // Keep track of\
    \ which parenthesis we're currently in\n        var paren_list_string = \"\"\n\
    \        // Keep track of which parenthesis we're currently in\n        var paren_string\
    \ = \"\"\n        // Keep track of which parenthesis we're currently in\n    \
    \    var paren_list_string = \"\"\n        // Keep track of which parenthesis\
    \ we're currently in\n        var paren_string = \"\"\n        // Keep track of\
    \ which parenthesis we're currently in\n        var paren_list_string = \"\"\n\
    \        // Keep track of which parenthesis we're currently in\n        var paren_string\
    \ = \"\"\n        // Keep track of which parenthesis we're currently in\n    \
    \    var paren_list_string = \"\"\n        // Keep track of which parenthesis\
    \ we're currently in\n        var paren_string = \"\"\n        // Keep track of\
    \ which parenthesis we're currently in\n        var paren_list_string = \"\"\n\
    \        // Keep track of which parenthesis we're currently in\n        var paren_string\
    \ = \"\"\n        // Keep track of which parenthesis we're currently in\n    \
    \    var paren_list_string = \"\"\n        // Keep track of which parenthesis\
    \ we're currently in\n        var paren_string = \"\"\n        // Keep track of\
    \ which parenthesis we're currently in\n        var paren_list_string = \"\"\n\
    \        // Keep track of which parenthesis we're currently in\n        var paren_string\
    \ = \"\"\n        // Keep track of which parenthesis we're currently in\n    \
    \    var paren_list_string = \"\"\n        // Keep track of which parenthesis\
    \ we're currently in\n        var paren_string = \"\"\n        // Keep track of\
    \ which parenthesis we're currently in\n        var paren_list_string = \"\"\n\
    \        // Keep track of which parenthesis we're currently in\n        var paren_string\
    \ = \"\"\n        // Keep track of which parenthesis we're currently in\n\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyy3jprhm.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mparen_list_string\e[0m =\
    \ \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_list_string is already defined as \e[33mvariable\e[0m \e\
    [35mparen_list_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyy3jprhm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mparen_string\e[0m = \e[31m\"\
    \"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mparen_string is already defined as \e[33mvariable\e[0m \e[35mparen_string\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyy3jprhm.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mvar\e[0m \e[36mparen_list_string\e[0m = \e[31m\"\"\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mparen_list_string is already defined as \e[33mvariable\e[0m \e[35mparen_list_string\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyy3jprhm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mvar\e[0m \e[36mparen_string\e[0m = \e[31m\"\"\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_string\
    \ is already defined as \e[33mvariable\e[0m \e[35mparen_string\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyy3jprhm.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_list_string\e[0m = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_list_string is already\
    \ defined as \e[33mvariable\e[0"
  stdout: ''
  timestamp: 1659795428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_with_brackets = paren_groups_with_spaces.map(x\
    \ => x.replace(\")\", \"\\\\)\"))\n        val paren_groups_with_spaces_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_with_brackets.map(x => x.replace(\"(\", \"\\\\(\"\
    ))\n        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_with_brackets_with_brackets.map(x => x.replace(\"\
    {\", \"\\\\{\"))\n        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets.map(x =>\
    \ x.replace(\"}\", \"\\\\}\"))\n        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"\\\\[\"))\n        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"]\", \"\\\\]\"))\n        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\":\", \"\\\\:\"))\n        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphatq57o4.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphatq57o4.scala:18:123\
    \ --------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"]\"\e[0m, \e[31m\"\\\\]\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphatq57o4.scala:19:137 -----------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\":\"\e[0m, \e[31m\"\\\\:\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-expla"
  stdout: ''
  timestamp: 1659795428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_braces = paren_groups.filter(_.startsWith(\"\
    (\"))\n        val close_braces = paren_groups.filter(_.startsWith(\")\"))\n \
    \       val unclosed_groups = paren_groups.filter(_.startsWith(\"(\") && !_.startsWith(\"\
    )\"))\n        val unclosed_groups_with_spaces = unclosed_groups.map(x => \" \"\
    \ + x)\n        val unclosed_groups_with_spaces_sorted = unclosed_groups_with_spaces.sortBy(_.length)\n\
    \        val unclosed_groups_with_spaces_sorted_with_spaces = unclosed_groups_with_spaces_sorted.map(x\
    \ => \" \" + x)\n        val unclosed_groups_with_spaces_sorted_with_spaces_sorted\
    \ = unclosed_groups_with_spaces_sorted_with_spaces.sortBy(_.length)\n        val\
    \ unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces = unclosed_groups_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => \" \" + x)\n        val unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(_.length)\n\
    \        val unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => \" \" + x)\n        val unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(_.length)\n\
    \        val unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => \" \" + x)\n        val unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(_.length)\n\
    \        val unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpj0g3iuca.scala:14:50 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36munclosed_groups\e[0m = paren_groups.filter(_.startsWith(\e\
    [31m\"(\"\e[0m) && !_.startsWith(\e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj0g3iuca.scala:24:125\
    \ --------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36munclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(_.length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj0g3iuca.scala:25:137 -----------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36munclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: unclosed_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_s"
  stdout: ''
  timestamp: 1659795428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        paren_groups_flat4.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp79rqhrdq.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp79rqhrdq.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp79rqhrdq.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79rqhrdq.scala:16:27\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        paren_groups_flat4.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"()\"))\n        val paren_groups_with_open_braces_with_brackets\
    \ = paren_groups_with_open_braces.map(x => x.replace(\")\", \"\").replace(\"(\"\
    , \"()\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets.map(x => x.replace(\")\", \"\"\
    ).replace(\"(\", \"()\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"()\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"()\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"()\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"()\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_bra\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdmdc2s90.scala:17:114 --------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"(\"\
    \e[0m, \e[31m\"()\"\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m  \
    \ |\e[0m  paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpdmdc2s90.scala:18:142 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"(\"\
    \e[0m, \e[31m\"()\"\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdmdc2s90.scala:19:170 -----------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brack"
  stdout: ''
  timestamp: 1659795428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\"(\"\
    , \" ( \"))).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \" ( \"))).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \")).filter(x => !x.isEmpty)\n        val paren_groups_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_tf8ausi.scala:16:159 --------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted.map(\e[36mx\e[0m => x.replace(\e\
    [31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).filter(x => !x.isEmpty)\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \      '}' expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_tf8ausi.scala:20:254\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).filter(x => !x.isEmpty)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                      '}' expected, but ')' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp_tf8ausi.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_tf8ausi.scala:16:184 -------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted.map(\e[36mx\e[0m => x.replace(\e\
    [31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).filter(x => !x.isEmpty)\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                "
  stdout: ''
  timestamp: 1659795427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        paren_groups_flat4.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp79rqhrdq.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp79rqhrdq.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp79rqhrdq.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79rqhrdq.scala:16:27\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        paren_groups_flat4.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\" \", \"\"))\n        val\
    \ paren_groups_with_open_braces_without_spaces_without_duplicates = paren_groups_with_open_braces_without_spaces.distinct\n\
    \        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates.map(x => x\
    \ + \"(\")\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces.map(x\
    \ => x + \"(\")\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces.distinct\n\
    \        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates.map(x\
    \ => x + \"(\")\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces.map(x\
    \ => x + \"(\")\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces.distinct\n\
    \        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_rm46gi4.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_rm46gi4.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x.length)\n      \
    \  val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0lwn3cey.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0lwn3cey.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_group_count = paren_groups.length\n\
    \        val paren_group_lengths = paren_groups.map(_.length).toList\n       \
    \ val paren_group_lengths_sum = paren_group_lengths.sum\n        val paren_group_lengths_product\
    \ = paren_group_lengths.product\n        val paren_group_lengths_product_sum =\
    \ paren_group_lengths_product.sum\n        val paren_group_lengths_product_product\
    \ = paren_group_lengths_product.product\n        val paren_group_lengths_product_product_sum\
    \ = paren_group_lengths_product_product.sum\n        val paren_group_lengths_product_product_product\
    \ = paren_group_lengths_product_product.product\n        val paren_group_lengths_product_product_product_sum\
    \ = paren_group_lengths_product_product_product.sum\n        val paren_group_lengths_product_product_product_product\
    \ = paren_group_lengths_product_product_product.product\n        val paren_group_lengths_product_product_product_product_sum\
    \ = paren_group_lengths_product_product_product_product.sum\n        val paren_group_lengths_product_product_product_product_product\
    \ = paren_group_lengths_product_product_product_product.product\n        val paren_group_lengths_product_product_product_product_product_sum\
    \ = paren_group_lengths_product_product_product_product_product.sum\n        val\
    \ paren_group_lengths_product_product_product_product_product_product = paren_group_lengths_product_product_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_product_product_sum\
    \ = paren_group_lengths_product_product_product_product_product_product.sum\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product\
    \ = paren_group_lengths_product_product_product_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_sum\
    \ = paren_group_lengths_product_product_product_product_product_product_product.sum\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_product\
    \ = paren_group_lengths_product_product_product_product_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_product_sum\
    \ = paren_group_lengths_product_product_product_product_product_product_product_product_product.sum\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_product_product\
    \ = paren_group_lengths_product_product_product_product_product_product_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_product_product_sum\
    \ = paren_group_lengths_product_product_product_product_product_product_product_product_product_product.sum\n\
    \        val paren_group_lengths_\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn7ljyvm8.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn7ljyvm8.scala:16:74\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_lengths_product_sum\e[0m = paren_group_lengths_product.sum\n\e\
    [31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value sum is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn7ljyvm8.scala:17:78\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_lengths_product_product\e[0m = paren_group_lengths_product.product\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value product is not a\
    \ member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn7ljyvm8.scala:31:106\
    \ --------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_lengths_product_product_product_product_product_product_product_product_product\e\
    [0m = paren_group_lengths_product_product_product_product_product_product_product_product_product.product\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                  ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_group_lengths_product_product_product_product_product_product_product_product_product\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpn7ljyvm8.scala:32:110 -----------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_group_lengths_product_product_product_product_product_product_product_product_product_sum\e\
    [0m = paren_group_lengths_product_product_product_product_product_product_product_pro"
  stdout: ''
  timestamp: 1659795429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size2\
    \ = paren_groups_size/2\n        val paren_groups_size3 = paren_groups_size/3\n\
    \        val paren_groups_size4 = paren_groups_size/4\n        val paren_groups_size5\
    \ = paren_groups_size/5\n        val paren_groups_size6 = paren_groups_size/6\n\
    \        val paren_groups_size7 = paren_groups_size/7\n        val paren_groups_size8\
    \ = paren_groups_size/8\n        val paren_groups_size9 = paren_groups_size/9\n\
    \        val paren_groups_size10 = paren_groups_size/10\n        val paren_groups_size11\
    \ = paren_groups_size/11\n        val paren_groups_size12 = paren_groups_size/12\n\
    \        val paren_groups_size13 = paren_groups_size/13\n        val paren_groups_size14\
    \ = paren_groups_size/14\n        val paren_groups_size15 = paren_groups_size/15\n\
    \        val paren_groups_size16 = paren_groups_size/16\n        val paren_groups_size17\
    \ = paren_groups_size/17\n        val paren_groups_size18 = paren_groups_size/18\n\
    \        val paren_groups_size19 = paren_groups_size/19\n        val paren_groups_size20\
    \ = paren_groups_size/20\n        val paren_groups_size21 = paren_groups_size/21\n\
    \        val paren_groups_size22 = paren_groups_size/22\n        val paren_groups_size23\
    \ = paren_groups_size/23\n        val paren_groups_size24 = paren_groups_size/24\n\
    \        val paren_groups_size25 = paren_groups_size/25\n        val paren_groups_size26\
    \ = paren_groups_size/26\n        val paren_groups_size27 = paren_groups_size/27\n\
    \        val paren_groups_size28 = paren_groups_size/28\n        val paren_groups_size29\
    \ = paren_groups_size/29\n        val paren_groups_size30 = paren_groups_size/30\n\
    \        val paren_groups_size31 = paren_groups_size/31\n        val paren_groups_size32\
    \ = paren_groups_size/32\n        val paren_groups_size33 = paren_groups_size/33\n\
    \        val paren_groups_size34 = paren_groups_size/34\n        val paren_groups_size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ovwk_cw.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0ovwk_cw.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"  \", \"\"))\n        val\
    \ paren_groups_with_open_braces_without_spaces_without_spaces = paren_groups_with_open_braces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpef6e1r5d.scala:19:149 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpef6e1r5d.scala:20:164 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpef6e1r5d.scala:21:179 -----------"
  stdout: ''
  timestamp: 1659795428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var paren_group\
    \ = \"\"\n        for (c <- paren_string) {\n            if (c == '(') {\n   \
    \             open_braces += 1\n                paren_group += c\n           \
    \ } else if (c == ')') {\n                closed_braces += 1\n               \
    \ if (open_braces == closed_braces) {\n                    paren_groups += paren_group\n\
    \                    paren_group = \"\"\n                    open_braces = 0\n\
    \                    closed_braces = 0\n                }\n            }\n   \
    \     }\n        if (open_braces != closed_braces) {\n            paren_groups\
    \ += paren_group\n        }\n        paren_groups.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv86tdyq_.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_open_brackets\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \"\").replace(\"\
    (\", \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_brackets_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_brackets.sortWith((x, y) => x.compareTo(y))\n\
    \        val paren_groups_with_spaces_sorted_with_open_brackets_sorted_with_open_brackets\
    \ = paren_groups_with_spaces_sorted_with_open_brackets_sorted.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_brackets_sorted_with_open_brackets_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_brackets_sorted_with_open_brackets.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_open_brackets_sorted_with_open_brackets_sorted_with_open_brackets\
    \ = paren_groups_with_spaces_sorted_with_open_brackets_sorted_with_open_brackets_sorted.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => !x.isEmpty)\n  \
    \      val paren_groups_with_spaces_sorted_with_open_brackets_sorted_with_open_brackets_sorted_with_open_brackets_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_brackets_sorted_with_open_brackets_sorted_with_open_brackets.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_open_brackets_sorted_with_open_brackets_sorted_with_open_brackets_sorted_with_open_brackets\
    \ = paren_groups_with_spaces_sorted_with_open_brackets_sorted_with_open_brackets_sorted_with_open_brackets_sorted.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => !x.isEmpty)\n  \
    \      val paren_groups_with_spaces_sorted_with_open_brackets_sorted_with_open_brackets_sorted_with_open\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0bz4i89n.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0bz4i89n.scala:13:101 -------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted\e[0m = paren_groups_with_spaces.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \                   Found:    Int\n\e[31m   |\e[0m                           \
    \                            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp0bz4i89n.scala:15:153 -------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_brackets_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_open_brackets.sortWith((\e[36mx\e[0m,\
    \ \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                       Found:    Int\n\e[31m\
    \   |\e[0m                                                       Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0bz4i89n.scala:17:205\
    \ -------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_brackets_sorted_with_open_brackets_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_open_brackets_sorted_with_open_brackets.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \                 "
  stdout: ''
  timestamp: 1659795439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \" ) \"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_without_spaces = paren_groups_with_spaces_sorted_with_spaces.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd0sxq9u3.scala:13:101\
    \ -------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                                 Found:    Int\n\e[31m   |\e\
    [0m                                                       Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpd0sxq9u3.scala:20:148\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m\
    \  paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpd0sxq9u3.scala:21:163 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m =>"
  stdout: ''
  timestamp: 1659795439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_closed_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\"))\n        val paren_groups_with_open_braces_not_nested = paren_groups_with_closed_braces.filter(x\
    \ => !x.contains(\"(\"))\n        val paren_groups_with_closed_braces_not_nested\
    \ = paren_groups_with_open_braces_not_nested.filter(x => !x.contains(\")\"))\n\
    \        paren_groups_with_closed_braces_not_nested.map(x => x.replace(\"(\",\
    \ \"\").replace(\")\", \"\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdp45hsi3.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        paren_groups_with_closed_braces_not_nested.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\")\"\
    \e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"()\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"  \", \" \"))\n       \
    \ val paren_groups_with_open_braces_without_spaces_without_brackets = paren_groups_with_open_braces_without_spaces.map(x\
    \ => x.replace(\"()\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_brackets.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpamnyn2qz.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpamnyn2qz.scala:18:136\
    \ --------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpamnyn2qz.scala:19:151 -----------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_open_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_withou"
  stdout: ''
  timestamp: 1659795439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\\")\n        paren_groups_flat5.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfnwoqo0j.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpfnwoqo0j.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpfnwoqo0j.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpfnwoqo0j.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfnwoqo0j.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        paren_groups_flat5.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659795442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.distinct\n        val paren_groups_flat3 = paren_groups_flat2.filterNot(_\
    \ == \")\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ == \"\
    \ \")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ == \"\\\
    \\\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \")\")\n\
    \        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"\\\\\")\n\
    \        val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \")\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \"\\\\\"\
    )\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \")\"\
    )\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \")\"\
    )\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \")\"\
    )\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \")\"\
    )\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat25 = paren_groups_flat24.filterNot(_ == \"(\"\
    )\n\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpci2b31m1.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpci2b31m1.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpci2b31m1.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpci2b31m1.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpci2b31m1.scala:18:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat7\e[0m\
    \ = paren_groups_flat6.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpci2b31m1.scala:19:62 -----------------------------------------\e\
    [0m\e["
  stdout: ''
  timestamp: 1659795442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_open_brace_counts\
    \ = paren_groups_with_open_braces.map(x => x.split(\"\\\\)\").length)\n      \
    \  val paren_groups_with_open_brace_counts_sum = paren_groups_with_open_brace_counts.sum\n\
    \        val paren_groups_with_open_brace_counts_average = paren_groups_with_open_brace_counts_sum\
    \ / paren_groups_with_open_brace_counts.length\n        val paren_groups_with_open_brace_counts_average\
    \ = paren_groups_with_open_brace_counts_average / paren_groups_with_open_brace_counts_sum\n\
    \        val paren_groups_with_open_brace_counts_average = paren_groups_with_open_brace_counts_average.toDouble\n\
    \        val paren_groups_with_open_brace_counts_average = paren_groups_with_open_brace_counts_average.toInt\n\
    \        val paren_groups_with_open_brace_counts_average = paren_groups_with_open_brace_counts_average.toLong\n\
    \        val paren_groups_with_open_brace_counts_average = paren_groups_with_open_brace_counts_average.toFloat\n\
    \        val paren_groups_with_open_brace_counts_average = paren_groups_with_open_brace_counts_average.toShort\n\
    \        val paren_groups_with_open_brace_counts_average = paren_groups_with_open_brace_counts_average.toByte\n\
    \        val paren_groups_with_open_brace_counts_average = paren_groups_with_open_brace_counts_average.toChar\n\
    \        val paren_groups_with_open_brace_counts_average = paren_groups_with_open_brace_counts_average.toDouble\n\
    \        val paren_groups_with_open_brace_counts_average = paren_groups_with_open_brace_counts_average.toFloat\n\
    \        val paren_groups_with_open_brace_counts_average = paren_groups_with_open_brace_counts_average.toInt\n\
    \        val paren_groups_with_open_brace_counts_average = paren_groups_with_open_brace_counts_average.toLong\n\
    \        val paren_groups_with_open_brace_counts_average = paren_groups_with_open_brace_counts_average.toShort\n\
    \        val paren_groups_with_open\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjy6geooc.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjy6geooc.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_open_brace_counts_average\e[0m = paren_groups_with_open_brace_counts_average\
    \ / paren_groups_with_open_brace_counts_sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_open_brace_counts_average is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_open_brace_counts_average\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjy6geooc.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_brace_counts_average\e\
    [0m = paren_groups_with_open_brace_counts_average.toDouble\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_open_brace_counts_average is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_open_brace_counts_average\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjy6geooc.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_brace_counts_average\e\
    [0m = paren_groups_with_open_brace_counts_average.toInt\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_open_brace_counts_average is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_open_brace_counts_average\e[0"
  stdout: ''
  timestamp: 1659795440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces.map(x => x.trim).filter(x => !x.isEmpty)\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted = paren_groups_with_spaces_sorted_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd96hqz1w.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd96hqz1w.scala:21:120\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.map(\e\
    [36mx\e[0m => x.trim).filter(\e[36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd96hqz1w.scala:22:139\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanat"
  stdout: ''
  timestamp: 1659795440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.map(x => x.replaceAll(\"\\\\)\",\"\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.map(x => x.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt3ce_o8n.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpt3ce_o8n.scala:13:62 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m = paren_groups_flat.map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\)\"\e[0m,\e[31m\"\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value replaceAll is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpt3ce_o8n.scala:13:83 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.map(\e[36mx\e[0m => x.replaceAll(\e[31m\"\\\\)\"\e[0m,\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                       \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                 No ClassTag available for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                                          where:    B is a type\
    \ variable\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt3ce_o8n.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfcl15yx5.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfcl15yx5.scala:13:101 -------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted\e[0m = paren_groups_with_spaces.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \                   Found:    Int\n\e[31m   |\e[0m                           \
    \                            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpfcl15yx5.scala:15:139 -------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces.sortWith((\e[36mx\e[0m, \e[36my\e\
    [0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                                    Found:    Int\n\e[31m   |\e[0m          \
    \                                             Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfcl15yx5.scala:17:177 -------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \                                                                         "
  stdout: ''
  timestamp: 1659795442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var paren_group_open = false\n        var paren_group_closed = false\n\
    \        var paren_group_opening_paren = 0\n        var paren_group_closing_paren\
    \ = 0\n        var paren_group_opening_paren_char = \"\"\n        var paren_group_closing_paren_char\
    \ = \"\"\n        var paren_group_opening_paren_char_count = 0\n        var paren_group_closing_paren_char_count\
    \ = 0\n        var paren_group_opening_paren_char_count2 = 0\n        var paren_group_closing_paren_char_count2\
    \ = 0\n        var paren_group_opening_paren_char_count3 = 0\n        var paren_group_closing_paren_char_count3\
    \ = 0\n        var paren_group_opening_paren_char_count4 = 0\n        var paren_group_closing_paren_char_count4\
    \ = 0\n        var paren_group_opening_paren_char_count5 = 0\n        var paren_group_closing_paren_char_count5\
    \ = 0\n        var paren_group_opening_paren_char_count6 = 0\n        var paren_group_closing_paren_char_count6\
    \ = 0\n        var paren_group_opening_paren_char_count7 = 0\n        var paren_group_closing_paren_char_count7\
    \ = 0\n        var paren_group_opening_paren_char_count8 = 0\n        var paren_group_closing_paren_char_count8\
    \ = 0\n        var paren_group_opening_paren_char_count9 = 0\n        var paren_group_closing_paren_char_count9\
    \ = 0\n        var paren_group_opening_paren_char_count10 = 0\n        var paren_group_closing_paren_char_count10\
    \ = 0\n        var paren_group_opening_paren_char_count11 = 0\n        var paren_group_closing_paren_char_count11\
    \ = 0\n        var paren_group_opening_paren_char_count12 = 0\n        var paren_group_closing_paren_char_count12\
    \ = 0\n        var paren_group_opening_paren_char_count13 = 0\n        var paren_group_closing_paren_char_count13\
    \ = 0\n        var paren_group_opening_paren_char_count14 = 0\n        var paren_group_closing_paren_char_count14\
    \ = 0\n        var paren_group_opening_paren_char_count15 = 0\n        var paren_group_closing_paren_char_count15\
    \ = 0\n        var paren_group_opening_paren_char_count16 = 0\n        var paren_group_closing_paren_char_count16\
    \ = 0\n        var paren_group_opening_paren_char_count17 = 0\n        var paren_group_closing_paren_char_count17\
    \ = 0\n        var paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_xhqlzbh.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_xhqlzbh.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_xhqlzbh.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\" \", \"\"))\n        val paren_groups_with_spaces_sorted =\
    \ paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\(|\\\\)\", \"\"\
    ))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd4delqmp.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_\n\e[31m\e[31m   |\e[0m                                          \
    \                                                                            \
    \                       ^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                              Not found: paren_\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpd4delqmp.scala:24:5 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_with_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\")\", \"\").replace(\"(\"\
    , \"\").trim())\n        val paren_groups_with_open_braces_without_spaces = paren_groups_with_open_braces_with_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_without_spaces_with_spaces\
    \ = paren_groups_with_open_braces_without_spaces.map(x => x.replace(\")\", \"\"\
    ).replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_with_spaces.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_without_spaces_without_spaces_with_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_with_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_with_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_with_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_with_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_with_spaces.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxcwplial.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxcwplial.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach { c =>\n      \
    \      if (c == '(') {\n                paren_open += c\n            } else if\
    \ (c == ')') {\n                paren_close += c\n            } else if (c ==\
    \ ' ') {\n                if (paren_open.isEmpty && paren_close.isEmpty) {\n \
    \                   paren_groups += c\n                } else {\n            \
    \        paren_groups += paren_open.toString + c\n                    paren_open.toListBuffer.clear()\n\
    \                    paren_close.toListBuffer.clear()\n                }\n   \
    \         }\n        }\n        if (paren_open.isEmpty && paren_close.isEmpty)\
    \ {\n            paren_groups += paren_string\n        } else {\n            paren_groups\
    \ += paren_open.toString + paren_string\n            paren_open.toListBuffer.clear()\n\
    \            paren_close.toListBuffer.clear()\n        }\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmlwu2hch.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmlwu2hch.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmlwu2hch.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_close\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\").trim())\n        val paren_group_strings_sorted\
    \ = paren_group_strings.sortWith((x, y) => x.compareTo(y) == -1)\n        val\
    \ paren_group_strings_sorted_grouped = paren_group_strings_sorted.grouped(2)\n\
    \        val paren_group_strings_sorted_grouped_flat = paren_group_strings_sorted_grouped.flatMap(x\
    \ => x)\n        val paren_group_strings_sorted_grouped_flat_reversed = paren_group_strings_sorted_grouped_flat.reverse\n\
    \        val paren_group_strings_sorted_grouped_flat_reversed_grouped = paren_group_strings_sorted_grouped_flat_reversed.grouped(2)\n\
    \        val paren_group_strings_sorted_grouped_flat_reversed_grouped_flat = paren_group_strings_sorted_grouped_flat_reversed_grouped.flatMap(x\
    \ => x)\n        val paren_group_strings_sorted_grouped_flat_reversed_grouped_flat_reversed\
    \ = paren_group_strings_sorted_grouped_flat_reversed_grouped_flat.reverse\n  \
    \      val paren_group_strings_sorted_grouped_flat_reversed_grouped_flat_reversed_grouped\
    \ = paren_group_strings_sorted_grouped_flat_reversed_grouped_flat_reversed.grouped(2)\n\
    \        val paren_group_strings_sorted_grouped_flat_reversed_grouped_flat_reversed_grouped_flat\
    \ = paren_group_strings_sorted_grouped_flat_reversed_grouped_flat_reversed_grouped.flatMap(x\
    \ => x)\n        val paren_group_strings_sorted_grouped_flat_reversed_grouped_flat_reversed_grouped_flat_reversed\
    \ = paren_group_strings_sorted_grouped_flat_reversed_grouped_flat_reversed_grouped_flat.reverse\n\
    \        val paren_group_strings_sorted_grouped_flat_reversed_grouped_flat_reversed_grouped_flat_reversed_grouped\
    \ = paren_group_strings_sorted_grouped_flat_reversed_grouped_flat_reversed_grouped_flat_reversed.grouped(2)\n\
    \        val paren_group_strings_sorted_grouped_flat_reversed_grouped_flat_reversed_grouped_flat_reversed_grouped_flat\
    \ = paren_group_strings_sorted_grouped_flat_reversed_grouped_flat_reversed_grouped_flat_reversed_grouped.flatMap(x\
    \ => x)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbn4_i88w.scala:16:103 -----------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_grouped_flat_reversed\e\
    [0m = paren_group_strings_sorted_grouped_flat.reverse\n\e[31m\e[31m   |\e[0m \
    \                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean paren_group_strings_sorted_grouped_flat.reversed?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbn4_i88w.scala:26:5 ---------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_group_strings_sorted = paren_group_strings.sortWith((x,\
    \ y) => x.compareTo(y))\n        paren_group_strings_sorted.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph1q0zs5g.scala:13:91\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted\e\
    [0m = paren_group_strings.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                       Found:    Int\n\e[31m   |\e[0m       \
    \                                                Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_group_strings_sorted = paren_group_strings.sortBy(x\
    \ => x.length)\n        val paren_group_strings_sorted_reversed = paren_group_strings_sorted.reverse\n\
    \        val paren_group_strings_sorted_reversed_flat = paren_group_strings_sorted_reversed.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_group_strings_sorted_reversed_flat_sorted\
    \ = paren_group_strings_sorted_reversed_flat.sortBy(x => x.length)\n        val\
    \ paren_group_strings_sorted_reversed_flat_sorted_reversed = paren_group_strings_sorted_reversed_flat_sorted.reverse\n\
    \        val paren_group_strings_sorted_reversed_flat_sorted_reversed_flat = paren_group_strings_sorted_reversed_flat_sorted_reversed.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted\
    \ = paren_group_strings_sorted_reversed_flat_sorted_reversed_flat.sortBy(x =>\
    \ x.length)\n        val paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed\
    \ = paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted.reverse\n\
    \        paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm55rp08x.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mFound:    (paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed\n\
    \e[31m   |\e[0m   : \n\e[31m   |\e[0mArray[String])\n\e[31m   |\e[0mRequired:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"\
    )\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \" \"\
    )\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"\\\\\"\
    )\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \")\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \" \")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"\\\\\"\
    )\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \")\"\
    )\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \" \"\
    )\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \")\"\
    )\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \" \"\
    )\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \")\"\
    )\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \" \"\
    )\n        val paren_groups_flat25 = paren_groups_flat24.filterNot(_ == \"\\\\\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5930ttnq.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp5930ttnq.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp5930ttnq.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp5930ttnq.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp5930ttnq.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp5930ttnq.scala:18:62 -----------------------------------------\e\
    [0m\e[0m"
  stdout: ''
  timestamp: 1659795444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.split(\"\\\\\
    )\").length).toList\n        val paren_group_lengths = paren_group_counts.map(x\
    \ => x.toDouble).toList\n        val paren_group_lengths_sum = paren_group_lengths.sum\n\
    \        val paren_group_lengths_product = paren_group_lengths.product\n     \
    \   val paren_group_lengths_product_sum = paren_group_lengths_product.sum\n  \
    \      val paren_group_lengths_product_product = paren_group_lengths_product.product\n\
    \        val paren_group_lengths_product_product_sum = paren_group_lengths_product_product.sum\n\
    \        val paren_group_lengths_product_product_product = paren_group_lengths_product_product.product\n\
    \        val paren_group_lengths_product_product_product_sum = paren_group_lengths_product_product_product.sum\n\
    \        val paren_group_lengths_product_product_product_product = paren_group_lengths_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_sum = paren_group_lengths_product_product_product_product.sum\n\
    \        val paren_group_lengths_product_product_product_product_product = paren_group_lengths_product_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_product_sum =\
    \ paren_group_lengths_product_product_product_product_product.sum\n        val\
    \ paren_group_lengths_product_product_product_product_product_product = paren_group_lengths_product_product_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_product_product_sum\
    \ = paren_group_lengths_product_product_product_product_product_product.sum\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product\
    \ = paren_group_lengths_product_product_product_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_sum\
    \ = paren_group_lengths_product_product_product_product_product_product_product.sum\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_product\
    \ = paren_group_lengths_product_product_product_product_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_product_sum\
    \ = paren_group_lengths_product_product_product_product_product_product_product_product.sum\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_product_product\
    \ = paren_group_lengths_product_product_product_product_product_product_product_product_product.product\n\
    \        val paren_group_lengths_product_product_product_product_product_product_product_product_product_sum\
    \ = paren_group_lengths_product_product_product_product_product_product_product_product_product_product.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq5lna7pr.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpq5lna7pr.scala:16:74 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_group_lengths_product_sum\e[0m = paren_group_lengths_product.sum\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value sum is not a member\
    \ of Double\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq5lna7pr.scala:17:78\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_lengths_product_product\e[0m = paren_group_lengths_product.product\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value product is not a member\
    \ of Double\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq5lna7pr.scala:31:106\
    \ --------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_lengths_product_product_product_product_product_product_product_product_product\e\
    [0m = paren_group_lengths_product_product_product_product_product_product_product_product_product.product\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                  ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_group_lengths_product_product_product_product_product_product_product_product_product\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpq5lna7pr.scala:32:110 -----------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_group_lengths_product_product_product_product_product_product_product_product_product_sum\e\
    [0m = paren_group_lengths_product_product_product_product_product_product_p"
  stdout: ''
  timestamp: 1659795442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces.filter(x => !x.isEmpty)\n   \
    \     paren_groups_with_open_braces_without_spaces_without_spaces.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9nv7jvav.scala:18)\n\tat Problem.main(tmp9nv7jvav.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(x => x.split(\"\\\\)\"))\n        val paren_groups_with_spaces =\
    \ paren_groups.map(x => x.map(y => y + \" \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.map(y => y.replaceAll(\" \", \"\")))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.map(y => y.replaceAll(\"\\\\)\", \"\")))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.map(y =>\
    \ y.replaceAll(\"\\\\(\", \"\")))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.map(y => y.replaceAll(\"\\\\)\", \"\")))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.map(y => y.replaceAll(\"\\\\)\", \"\")))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.map(y => y.replaceAll(\"\\\\)\", \"\")))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.map(y => y.replaceAll(\"\\\\)\", \"\")))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.map(y => y.replaceAll(\"\\\\)\", \"\")))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppqm8g3u1.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppqm8g3u1.scala:19:144\
    \ --------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.map(\e[36my\e[0m => y.replaceAll(\e[31m\"\\\\)\"\e[0m, \e[31m\"\
    \"\e[0m)))\n\e[31m\e[31m   |\e[0m                                            \
    \                                                                            \
    \                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmppqm8g3u1.scala:20:159 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.map(\e[36my\e[0m => y.replaceAll(\e[31m\"\\\\)\"\e[0m, \e[31m\"\
    \"\e[0m)))\n\e[31m\e[31m   |\e[0m                                            \
    \                                                                            \
    \                                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_s"
  stdout: ''
  timestamp: 1659795442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        paren_string.split(\"\\\\(\").foreach(x => paren_groups += x)\n     \
    \   paren_groups.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx4nraxnx.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach { c =>\n      \
    \      c match {\n                case '(' -> paren_open += c\n              \
    \  case ')' -> paren_closed += c\n                case _ -> paren_groups += c\n\
    \            }\n        }\n        if (paren_open.size == paren_closed.size) {\n\
    \            paren_groups\n        } else {\n            paren_groups.toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkl75vm6b.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m \e[31m')'\e[0m -> paren_closed\
    \ += c\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m      \
    \          '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpkl75vm6b.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m\
    \            '=>' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkl75vm6b.scala:11:27 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpkl75vm6b.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkl75vm6b.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkl75vm6b.scala:16:39 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m \e[31m'('\e[0m -> paren_open\
    \ += c\n\e[31m\e[31m   |\e[0m                                       ^^\e[0m\n\e\
    [31m   |\e[0m                                       Not found: +=\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available "
  stdout: ''
  timestamp: 1659795446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").filter(_.nonEmpty)\n        val paren_groups_with_paren = paren_groups.map(x\
    \ => x + \"(\")\n        val paren_groups_with_paren_closed = paren_groups_with_paren.map(x\
    \ => x + \"(\")\n        val paren_groups_with_paren_closed_and_balanced = paren_groups_with_paren.map(x\
    \ => x + \"(\")\n        val paren_groups_with_paren_closed_and_balanced_and_balanced\
    \ = paren_groups_with_paren.map(x => x + \"(\")\n        val paren_groups_with_paren_closed_and_balanced_and_balanced_and_balanced\
    \ = paren_groups_with_paren.map(x => x + \"(\")\n        val paren_groups_with_paren_closed_and_balanced_and_balanced_and_balanced_and_balanced\
    \ = paren_groups_with_paren.map(x => x + \"(\")\n        val paren_groups_with_paren_closed_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced\
    \ = paren_groups_with_paren.map(x => x + \"(\")\n        val paren_groups_with_paren_closed_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced\
    \ = paren_groups_with_paren.map(x => x + \"(\")\n        val paren_groups_with_paren_closed_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced\
    \ = paren_groups_with_paren.map(x => x + \"(\")\n        val paren_groups_with_paren_closed_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced\
    \ = paren_groups_with_paren.map(x => x + \"(\")\n        val paren_groups_with_paren_closed_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced\
    \ = paren_groups_with_paren.map(x => x + \"(\")\n        val paren_groups_with_paren_closed_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced\
    \ = paren_groups_with_paren.map(x => x + \"(\")\n        val paren_groups_with_paren_closed_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced\
    \ = paren_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphe8oq397.scala:24:188 -----------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_closed_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced_and_balanced\e\
    [0m = paren_\n\e[31m\e[31m   |\e[0m                                          \
    \                                                                            \
    \                                                                      ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Not\
    \ found: paren_\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphe8oq397.scala:25:5\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\s\", \"\"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s\", \" \"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpffyl12jm.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          Not found: paren_groups_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpffyl12jm.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => x.nonEmpty)\n        val paren_groups_with_closed_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\")).filter(x => x.nonEmpty)\n        val paren_groups_with_open_braces_not_nested\
    \ = paren_groups_with_open_braces.filter(x => paren_groups_with_closed_braces.map(y\
    \ => x + \"(\" + y + \")\").exists(y => x == y))\n        val paren_groups_with_closed_braces_not_nested\
    \ = paren_groups_with_closed_braces.filter(x => paren_groups_with_open_braces.map(y\
    \ => x + \"(\" + y + \")\").exists(y => x == y))\n        paren_groups_with_open_braces_not_nested\
    \ ++ paren_groups_with_closed_braces_not_nested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdajcctu2.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        paren_groups_with_open_braces_not_nested\
    \ ++ paren_groups_with_closed_braces_not_nested\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var paren_group = \"\"\n        var paren_open = false\n        var paren_closed\
    \ = false\n        var paren_open_braces = 0\n        var paren_closed_braces\
    \ = 0\n        var paren_open_braces_count = 0\n        var paren_closed_braces_count\
    \ = 0\n        var paren_open_braces_count_max = 0\n        var paren_closed_braces_count_max\
    \ = 0\n        var paren_open_braces_count_min = 0\n        var paren_closed_braces_count_min\
    \ = 0\n        var paren_open_braces_count_min = 0\n        var paren_closed_braces_count_min\
    \ = 0\n        var paren_open_braces_count_max = 0\n        var paren_closed_braces_count_max\
    \ = 0\n        var paren_open_braces_count_min = 0\n        var paren_closed_braces_count_min\
    \ = 0\n        var paren_open_braces_count_min = 0\n        var paren_closed_braces_count_min\
    \ = 0\n        var paren_open_braces_count_max = 0\n        var paren_closed_braces_count_max\
    \ = 0\n        var paren_open_braces_count_min = 0\n        var paren_closed_braces_count_min\
    \ = 0\n        var paren_open_braces_count_min = 0\n        var paren_closed_braces_count_min\
    \ = 0\n        var paren_open_braces_count_max = 0\n        var paren_closed_braces_count_max\
    \ = 0\n        var paren_open_braces_count_min = 0\n        var paren_closed_braces_count_min\
    \ = 0\n        var paren_open_braces_count_min = 0\n        var paren_closed_braces_count_min\
    \ = 0\n        var paren_open_braces_count_max = 0\n        var paren_closed_braces_count_max\
    \ = 0\n        var paren_open_braces_count_min = 0\n        var paren_closed_braces_count_min\
    \ = 0\n        var paren_open_braces_count_min = 0\n        var paren_closed_braces_count_min\
    \ = 0\n        var paren_open_braces_count_max = 0\n        var paren_closed_braces_count_max\
    \ = 0\n        var paren_open_braces_count_min = 0\n        var paren_closed_braces_count_min\
    \ = 0\n        var paren_open_braces_count_min = 0\n        var paren_closed_braces_count_min\
    \ = 0\n        var paren_open_braces_count_max = 0\n        var paren_closed_braces_count_max\
    \ = 0\n        var paren_open_braces_count_min = 0\n        var paren_closed_braces_count_min\
    \ = 0\n        var paren_open\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1_rxgd4a.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1_rxgd4a.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_open_braces_count_min\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_open_braces_count_min\
    \ is already defined as \e[33mvariable\e[0m \e[35mparen_open_braces_count_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1_rxgd4a.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mvar\e[0m \e[36mparen_closed_braces_count_min\e[0m =\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_braces_count_min is already defined as \e[33mvariable\e\
    [0m \e[35mparen_closed_braces_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1_rxgd4a.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mparen_open_braces_count_max\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_braces_count_max is already defined as \e[33mvariable\e\
    [0m \e[35mparen_open_braces_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1_rxgd4a.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mparen_closed_braces_count_max\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_braces_count_max is already defined as \e[33mvariable\e\
    [0m \e[35mparen_closed_braces_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659795451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcn49_p8s.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcn49_p8s.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat2 = paren_groups_flat.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat3 = paren_groups_flat2.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat4 = paren_groups_flat3.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat5 = paren_groups_flat4.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat6 = paren_groups_flat5.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat7 = paren_groups_flat6.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat8 = paren_groups_flat7.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat9 = paren_groups_flat8.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat10 = paren_groups_flat9.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_flat11 = paren_groups_flat10.flatMap(x =>\
    \ x.split(\"\\\\)\"))\n        val paren_groups_flat12 = paren_groups_flat11.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat13 = paren_groups_flat12.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat14 = paren_groups_flat13.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat15 = paren_groups_flat14.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat16 = paren_groups_flat15.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat17 = paren_groups_flat16.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat18 = paren_groups_flat17.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat19 = paren_groups_flat18.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat20 = paren_groups_flat19.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat21 = paren_groups_flat20.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat22 = paren_groups_flat21.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc8_fc5y6.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpc8_fc5y6.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.split(\"\\\\\
    )\").length).sum\n        val paren_group_lengths = paren_groups.map(x => x.split(\"\
    \\\\)\").length).max\n        val paren_group_lengths_scala = paren_group_lengths.toDouble\n\
    \        val paren_group_lengths_scala_scala = paren_group_lengths_scala.toDouble\n\
    \        val paren_group_lengths_scala_scala_scala = paren_group_lengths_scala_scala.toDouble\n\
    \        val paren_group_lengths_scala_scala_scala_scala = paren_group_lengths_scala_scala_scala.toDouble\n\
    \        val paren_group_lengths_scala_scala_scala_scala_scala = paren_group_lengths_scala_scala_scala_scala.toDouble\n\
    \        val paren_group_lengths_scala_scala_scala_scala_scala_scala = paren_group_lengths_scala_scala_scala_scala_scala.toDouble\n\
    \        val paren_group_lengths_scala_scala_scala_scala_scala_scala_scala = paren_group_lengths_scala_scala_scala_scala_scala_scala_scala.toDouble\n\
    \        val paren_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala\
    \ = paren_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala.toDouble\n\
    \        val paren_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala_scala\
    \ = paren_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala.toDouble\n\
    \        val paren_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala\
    \ = paren_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala.toDouble\n\
    \        val paren_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala\
    \ = paren_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala.toDouble\n\
    \        val paren_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpiswxuum2.scala:25:105 --------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpiswxuum2.scala:20:76\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_lengths_scala_scala_scala_scala_scala_scala_scala\e[0m = paren_group_lengths_scala_scala_scala_scala_scala_scala_scala.toDouble\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mparen_group_lengths_scala_scala_scala_scala_scala_scala_scala\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpiswxuum2.scala:21:82\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala\e\
    [0m = paren_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala.toDouble\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mparen_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiswxuum2.scala:24:192\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala_scala\e\
    [0m = paren_group_lengths_scala_scala_scala_scala_scala_scala_scala_scala_scala_s"
  stdout: ''
  timestamp: 1659795455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_size = paren_groups.size\n\
    \        val paren_groups_remainder = paren_groups_size % 2\n        val paren_groups_even\
    \ = paren_groups_size % 2 == 0\n        val paren_groups_odd = paren_groups_size\
    \ % 2 != 0\n        val paren_groups_remainder_size = paren_groups_remainder ==\
    \ 0 ? paren_groups_size : paren_groups_size - 1\n        val paren_groups_remainder_remainder\
    \ = paren_groups_remainder == 0 ? paren_groups_remainder : paren_groups_remainder\
    \ - 1\n        val paren_groups_remainder_even = paren_groups_remainder == 0 ?\
    \ paren_groups_remainder : paren_groups_remainder - 2\n        val paren_groups_remainder_odd\
    \ = paren_groups_remainder == 0 ? paren_groups_remainder : paren_groups_remainder\
    \ - 3\n        val paren_groups_remainder_remainder_size = paren_groups_remainder_remainder\
    \ == 0 ? paren_groups_remainder_size : paren_groups_remainder_size - 1\n     \
    \   val paren_groups_remainder_remainder_remainder = paren_groups_remainder_remainder\
    \ == 0 ? paren_groups_remainder_remainder : paren_groups_remainder_remainder -\
    \ 1\n        val paren_groups_remainder_remainder_even = paren_groups_remainder_remainder\
    \ == 0 ? paren_groups_remainder_remainder : paren_groups_remainder_remainder -\
    \ 2\n        val paren_groups_remainder_remainder_odd = paren_groups_remainder_remainder\
    \ == 0 ? paren_groups_remainder_remainder : paren_groups_remainder_remainder -\
    \ 3\n        val paren_groups_remainder_remainder_remainder_size = paren_groups_remainder_remainder_remainder\
    \ == 0 ? paren_groups_remainder_remainder_size : paren_groups_remainder_remainder_size\
    \ - 1\n        val paren_groups_remainder_remainder_remainder_remainder = paren_groups_remainder_remainder_remainder\
    \ == 0 ? paren_groups_remainder_remainder_remainder : paren_groups_remainder_remainder_remainder\
    \ - 1\n        val paren_groups_remainder_remainder_remainder_even = paren_groups_remainder_remainder_remainder\
    \ == 0 ? paren_groups_remainder_remainder_remainder : paren_groups_remainder_remainder_remainder\
    \ - 2\n        val paren_groups_remainder_remainder_remainder_odd = paren_groups_remainder_remainder_remainder\
    \ == 0 ? paren_groups_remainder_remainder_remainder : paren_groups_remainder_remainder_remain\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7u6yqyf.scala:16:110 -----------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remainder_size\e\
    [0m = paren_groups_remainder == \e[31m0\e[0m ? paren_groups_size : \e[35mparen_groups_size\e\
    [0m \e[35m-\e[0m \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \           Not found: type -\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpr7u6yqyf.scala:16:70 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_remainder_size\e[0m = paren_groups_remainder\
    \ == \e[31m0\e[0m ? paren_groups_size : \e[35mparen_groups_size\e[0m \e[35m-\e\
    [0m \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                              ^^^\e[0m\n\e[31m   |\e[0m                     \
    \                     value ? is not a member of Int\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpr7u6yqyf.scala:17:125 -----------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remainder_remainder\e\
    [0m = paren_groups_remainder == \e[31m0\e[0m ? paren_groups_remainder : \e[35mparen_groups_remainder\e\
    [0m \e[35m-\e[0m \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                          Not found: type -\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpr7u6yqyf.scala:17:75 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remainder_remainder\e\
    [0m = paren_groups_remainder == \e[31m0\e[0m ? paren_groups_remainder : \e[35mparen_groups_remainder\e\
    [0m \e[35m-\e[0m \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \                                            "
  stdout: ''
  timestamp: 1659795454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_open = mutable.ListBuffer[String]()\n        val paren_group_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_group_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_size = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_depth = mutable.ListBuffer[Int]()\n        val paren_group_closed_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_depth_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_depth_limit = mutable.ListBuffer[Int]()\n    \
    \    val paren_group_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_open_depth_limit_exceeded = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_closed_depth_limit_exceeded = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_open_depth_limit_exceeded_count = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_depth_limit_exceeded_count = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_depth_limit_exceeded_count_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_depth_limit_exceeded_count_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_depth_limit_exceeded_count_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_closed_depth_limit_exceeded_count_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_open_depth_limit_exceeded_count_limit_exceeded = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_closed_depth_limit_exceeded_count_limit_exceeded = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_open_depth_limit_exceeded_count_limit_exceeded_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_closed_depth_limit_exceeded_count_limit_exceeded_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_depth_limit_exceeded_count_limit_exceeded_count_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplxqzefwg.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplxqzefwg.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplxqzefwg.scala:12:31 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_group_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplxqzefwg.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed\e[0m\
    \ = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplxqzefwg.scala:14:36 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_group_open_size\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplxqzefwg.scala:15:38\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_closed_size\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31"
  stdout: ''
  timestamp: 1659795454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filterNot(x => x.contains(\")\"))\n        paren_groups_flat3.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptghnnoxy.scala:13:68 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(\e[36mx\e[0m => x.contains(\e[31m\"(\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  value\
    \ contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptghnnoxy.scala:14:69\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(\e[36mx\e[0m => x.contains(\e\
    [31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                   value contains is not a member of Char\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmptghnnoxy.scala:15:27 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        paren_groups_flat3.toList\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mChar\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mString\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\")\", \"\").replace(\"\
    (\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphbsxpvmq.scala:21:353 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\"\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \                 unclosed string literal\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmphbsxpvmq.scala:21:174 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\"\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphbsxpvmq.scala"
  stdout: ''
  timestamp: 1659795454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replaceAll(\"\
    \\\\)\", \"\"))\n        val paren_group_strings_sorted = paren_group_strings.sortWith((x,\
    \ y) => x.compareTo(y))\n        paren_group_strings_sorted.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjtpcz01e.scala:13:91\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted\e\
    [0m = paren_group_strings.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                       Found:    Int\n\e[31m   |\e[0m       \
    \                                                Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").filter(_.nonEmpty)\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\"))\n        val\
    \ paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7z73hla0.scala:16:99 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp7z73hla0.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                              ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp7z73hla0.scala:18:129 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                       "
  stdout: ''
  timestamp: 1659795453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_size = mutable.ListBuffer[Int]()\n        val paren_group_open\
    \ = mutable.ListBuffer[Boolean]()\n        val paren_group_closed = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_open_size = mutable.ListBuffer[Int]()\n        val paren_group_closed_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index = paren_group_open_index.init\n        val paren_group_closed_index\
    \ = paren_group_closed_index.init\n        val paren_group_open_size = paren_group_open_size.init\n\
    \        val paren_group_closed_size = paren_group_closed_size.init\n        val\
    \ paren_group_open = paren_group_open.init\n        val paren_group_closed = paren_group_closed.init\n\
    \        val paren_group_size = paren_group_size.init\n        val paren_group_open_index\
    \ = paren_group_open_index.init\n        val paren_group_closed_index = paren_group_closed_index.init\n\
    \        val paren_group_open_size = paren_group_open_size.init\n        val paren_group_closed_size\
    \ = paren_group_closed_size.init\n        val paren_group_open = paren_group_open.init\n\
    \        val paren_group_closed = paren_group_closed.init\n        val paren_groups\
    \ = paren_groups.init\n        val paren_group_size = paren_group_size.init\n\
    \        val paren_group_open_size = paren_group_open_size.init\n        val paren_group_closed_size\
    \ = paren_group_closed_size.init\n        val paren_group_open = paren_group_open.init\n\
    \        val paren_group_closed = paren_group_closed.init\n        val paren_group_size\
    \ = paren_group_size.init\n        val paren_group_open_size = paren_group_open_size.init\n\
    \        val paren_group_closed_size = paren_group_closed_size.init\n        val\
    \ paren_group_open = paren_group_open.init\n        val paren_group_closed = paren_group_closed.init\n\
    \        val paren_group_size = paren_group_size.init\n        val paren_group_open_size\
    \ = paren_group_open_size.init\n        val paren_group_closed_size = paren_group_closed_size.init\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa16aw6qs.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_index\e\
    [0m = paren_group_open_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa16aw6qs.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed_index\e\
    [0m = paren_group_closed_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_closed_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa16aw6qs.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_size\e\
    [0m = paren_group_open_size.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa16aw6qs.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed_size\e\
    [0m = paren_group_closed_size.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_closed_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E1"
  stdout: ''
  timestamp: 1659795453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_open_braces = paren_groups.map(paren_group\
    \ => {\n            val open_braces = paren_group.split(\"\\\\)\").map(_.trim).toList\n\
    \            val open_braces_with_close_braces = open_braces.map(open_brace =>\
    \ {\n                val close_braces = open_brace.split(\"\\\\)\").map(_.trim).toList\n\
    \                open_brace + close_braces.reverse.mkString(\"(\", \")\")\n  \
    \          })\n            open_braces_with_close_braces.reverse.mkString(\"(\"\
    , \")\")\n        })\n        paren_groups_with_open_braces.reverse.mkString(\"\
    (\", \")\")\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp81bplft2.scala:16:59\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                open_brace +\
    \ close_braces.reverse.mkString(\e[31m\"(\"\e[0m, \e[31m\")\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                           ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Found:    (String,\
    \ String)\n\e[31m   |\e[0m                                              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp81bplft2.scala:18:59\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            open_braces_with_close_braces.reverse.mkString(\e\
    [31m\"(\"\e[0m, \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                      Found:    (String, String)\n\e[31m   |\e\
    [0m                                              Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp81bplft2.scala:20:55 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        paren_groups_with_open_braces.reverse.mkString(\e\
    [31m\"(\"\e[0m, \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                  Found:    (String, String)\n\e[31m   |\e[0m\
    \                                              Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\(\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat11 = paren_groups_flat10.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat12 = paren_groups_flat11.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat25 = paren_groups_flat24.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp317nbq4s.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp317nbq4s.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp317nbq4s.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp317nbq4s.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\(\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp317nbq4s.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"\\\\)\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp317nbq4s.scala:18:62 -----------------------------------------\e\
    ["
  stdout: ''
  timestamp: 1659795457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_sizes\
    \ = paren_groups.map(_.length).toList\n        val paren_groups_sizes_sum = paren_groups_sizes.sum\n\
    \        val paren_groups_sizes_product = paren_groups_sizes.product\n       \
    \ val paren_groups_sizes_product_sum = paren_groups_sizes_product.sum\n      \
    \  val paren_groups_sizes_product_product = paren_groups_sizes_product.product\n\
    \        val paren_groups_sizes_product_product_sum = paren_groups_sizes_product_product.sum\n\
    \        val paren_groups_sizes_product_product_product = paren_groups_sizes_product_product.product\n\
    \        val paren_groups_sizes_product_product_product_sum = paren_groups_sizes_product_product_product.sum\n\
    \        val paren_groups_sizes_product_product_product_product = paren_groups_sizes_product_product_product.product\n\
    \        val paren_groups_sizes_product_product_product_product_sum = paren_groups_sizes_product_product_product_product.sum\n\
    \        val paren_groups_sizes_product_product_product_product_product = paren_groups_sizes_product_product_product_product.product\n\
    \        val paren_groups_sizes_product_product_product_product_product_sum =\
    \ paren_groups_sizes_product_product_product_product_product.sum\n        val\
    \ paren_groups_sizes_product_product_product_product_product_product = paren_groups_sizes_product_product_product_product_product.product\n\
    \        val paren_groups_sizes_product_product_product_product_product_product_sum\
    \ = paren_groups_sizes_product_product_product_product_product_product.sum\n \
    \       val paren_groups_sizes_product_product_product_product_product_product_product\
    \ = paren_groups_sizes_product_product_product_product_product_product.product\n\
    \        val paren_groups_sizes_product_product_product_product_product_product_product_sum\
    \ = paren_groups_sizes_product_product_product_product_product_product_product.sum\n\
    \        val paren_groups_sizes_product_product_product_product_product_product_product_product\
    \ = paren_groups_sizes_product_product_product_product_product_product_product.product\n\
    \        val paren_groups_sizes_product_product_product_product_product_product_product_product_sum\
    \ = paren_groups_sizes_product_product_product_product_product_product_product_product.sum\n\
    \        val paren_groups_sizes_product_product_product_product_product_product_product_product_product\
    \ = paren_groups_sizes_product_product_product_product_product_product_product_product_product.product\n\
    \        val paren_groups_sizes_product_product_product_product_product_product_product_product_product_sum\
    \ = paren_groups_sizes_product_product_product_product_product_product_product_product_product_product.sum\n\
    \        val paren_groups_sizes_product_product_product_product_product_product_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkzor5w8q.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkzor5w8q.scala:16:72\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_sizes_product_sum\e[0m = paren_groups_sizes_product.sum\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value sum is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkzor5w8q.scala:17:76\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_sizes_product_product\e[0m = paren_groups_sizes_product.product\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value product is not a\
    \ member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkzor5w8q.scala:31:105\
    \ --------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_sizes_product_product_product_product_product_product_product_product_product\e\
    [0m = paren_groups_sizes_product_product_product_product_product_product_product_product_product.product\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                 ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_sizes_product_product_product_product_product_product_product_product_product\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkzor5w8q.scala:32:109 -----------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_sizes_product_product_product_product_product_product_product_product_product_sum\e\
    [0m = paren_groups_sizes_product_product_product_product_product_product_product_product_product_p"
  stdout: ''
  timestamp: 1659795455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_count = paren_groups.length\n\
    \        val paren_groups_remainder = paren_groups_count % paren_groups.length\n\
    \        val paren_groups_remainder_count = paren_groups_remainder == 0 ? paren_groups_count\
    \ - paren_groups_count : paren_groups_count - paren_groups_remainder\n       \
    \ val paren_groups_remainder_strings = paren_groups.take(paren_groups_remainder_count)\n\
    \        val paren_groups_remainder_strings_count = paren_groups_remainder_strings.length\n\
    \        val paren_groups_remainder_strings_remainder = paren_groups_remainder_strings_count\
    \ % paren_groups_remainder_strings.length\n        val paren_groups_remainder_strings_remainder_count\
    \ = paren_groups_remainder_strings_remainder == 0 ? paren_groups_remainder_strings_count\
    \ - paren_groups_remainder_strings_count : paren_groups_remainder_strings_count\
    \ - paren_groups_remainder_strings_remainder\n        val paren_groups_remainder_strings_remainder_strings\
    \ = paren_groups_remainder_strings.take(paren_groups_remainder_strings_remainder_count)\n\
    \        val paren_groups_remainder_strings_remainder_strings_count = paren_groups_remainder_strings_remainder_strings.length\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder = paren_groups_remainder_strings_remainder_strings_count\
    \ % paren_groups_remainder_strings_remainder_strings.length\n        val paren_groups_remainder_strings_remainder_strings_remainder_count\
    \ = paren_groups_remainder_strings_remainder_strings_remainder == 0 ? paren_groups_remainder_strings_remainder_strings_count\
    \ - paren_groups_remainder_strings_remainder_strings_count : paren_groups_remainder_strings_remainder_strings_count\
    \ - paren_groups_remainder_strings_remainder_strings_remainder\n        val paren_groups_remainder_strings_remainder_strings_remainder_strings\
    \ = paren_groups_remainder_strings_remainder_strings.take(paren_groups_remainder_strings_remainder_strings_remainder_count)\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder_strings_count\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings.length\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings_count %\
    \ paren_groups_remainder_string\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0guqb0l.scala:14:134 -----------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remainder_count\e\
    [0m = paren_groups_remainder == \e[31m0\e[0m ? paren_groups_count - paren_groups_count\
    \ : \e[35mparen_groups_count\e[0m \e[35m-\e[0m \e[35mparen_groups_remainder\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                              \
    \         Not found: type -\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpa0guqb0l.scala:14:71 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_remainder_count\e[0m = paren_groups_remainder\
    \ == \e[31m0\e[0m ? paren_groups_count - paren_groups_count : \e[35mparen_groups_count\e\
    [0m \e[35m-\e[0m \e[35mparen_groups_remainder\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                                                                 ^^^\e[0m\n\e\
    [31m   |\e[0m                                          value ? is not a member\
    \ of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0guqb0l.scala:18:224\
    \ -----------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_remainder_strings_remainder_count\e[0m = paren_groups_remainder_strings_remainder\
    \ == \e[31m0\e[0m ? paren_groups_remainder_strings_count - paren_groups_remainder_strings_count\
    \ : \e[35mparen_groups_remainder_strings_count\e[0m \e[35m-\e[0m \e[35mparen_groups_remainder_strings_remainder\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                                            \
    \                                                                            \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \                       Not found: type -\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found "
  stdout: ''
  timestamp: 1659795457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filter(_ != \")\")\n        val paren_groups_flat3 = paren_groups_flat2.filter(_\
    \ != \")\")\n        val paren_groups_flat4 = paren_groups_flat3.filter(_ != \"\
    )\")\n        val paren_groups_flat5 = paren_groups_flat4.filter(_ != \")\")\n\
    \        val paren_groups_flat6 = paren_groups_flat5.filter(_ != \")\")\n    \
    \    val paren_groups_flat7 = paren_groups_flat6.filter(_ != \")\")\n        val\
    \ paren_groups_flat8 = paren_groups_flat7.filter(_ != \")\")\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filter(_ != \")\")\n        val paren_groups_flat10 = paren_groups_flat9.filter(_\
    \ != \")\")\n        val paren_groups_flat11 = paren_groups_flat10.filter(_ !=\
    \ \")\")\n        val paren_groups_flat12 = paren_groups_flat11.filter(_ != \"\
    )\")\n        val paren_groups_flat13 = paren_groups_flat12.filter(_ != \")\"\
    )\n        val paren_groups_flat14 = paren_groups_flat13.filter(_ != \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filter(_ != \")\")\n  \
    \      val paren_groups_flat16 = paren_groups_flat15.filter(_ != \")\")\n    \
    \    val paren_groups_flat17 = paren_groups_flat16.filter(_ != \")\")\n      \
    \  val paren_groups_flat18 = paren_groups_flat17.filter(_ != \")\")\n        val\
    \ paren_groups_flat19 = paren_groups_flat18.filter(_ != \")\")\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filter(_ != \")\")\n        val paren_groups_flat21 =\
    \ paren_groups_flat20.filter(_ != \")\")\n        val paren_groups_flat22 = paren_groups_flat21.filter(_\
    \ != \")\")\n        val paren_groups_flat23 = paren_groups_flat22.filter(_ !=\
    \ \")\")\n        val paren_groups_flat24 = paren_groups_flat23.filter(_ != \"\
    )\")\n        val paren_groups_flat25 = paren_groups_flat24.filter(_ != \")\"\
    )\n        val paren_groups_flat26 = paren_groups_flat25.filter(_ != \")\")\n\
    \        val paren_groups_flat27 = paren_groups_flat26.filter(_ != \")\")\n  \
    \      val paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprmf1a5ab.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmprmf1a5ab.scala:13:58\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m = paren_groups_flat.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmprmf1a5ab.scala:14:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmprmf1a5ab.scala:15:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m = paren_groups_flat3.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmprmf1a5ab.scala:16:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m = paren_groups_flat4.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmprmf1a5ab.scala:17:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m = paren_groups_flat5.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Valu"
  stdout: ''
  timestamp: 1659795458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_count = paren_groups.length\n        val paren_groups_with_parens\
    \ = paren_groups.map(x => x + \"(\")\n        val paren_groups_with_parens_count\
    \ = paren_groups_with_parens.length\n        val paren_groups_with_parens_count_with_parens\
    \ = paren_groups_with_parens_count + 1\n        val paren_groups_with_parens_count_with_parens_count\
    \ = paren_groups_with_parens_count_with_parens + 1\n        val paren_groups_with_parens_count_with_parens_count_with_parens\
    \ = paren_groups_with_parens_count_with_parens_count + 1\n        val paren_groups_with_parens_count_with_parens_count_with_parens_count\
    \ = paren_groups_with_parens_count_with_parens_count_with_parens + 1\n       \
    \ val paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ = paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ + 1\n        val paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count\
    \ = paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ + 1\n        val paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ = paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ + 1\n        val paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ = paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ + 1\n        val paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ = paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ + 1\n        val paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ = paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ + 1\n        val paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_paren\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplvfe9cd_.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplvfe9cd_.scala:19:93\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_parens_count_with_parens_count_with_parens_count_with_parens\e\
    [0m = paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                       ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmplvfe9cd_.scala:21:111 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\e\
    [0m = paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmplvfe9cd_.scala:22:129 --------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\e\
    [0m = paren_groups_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens_count_with_parens\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1659795455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Your code here\n        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val paren_group_stack = mutable.ListBuffer[String]()\n\
    \        paren_string.foreach(c => {\n            c match {\n                case\
    \ '(' -> paren_group_stack ++= paren_group\n                case ')' =>\n    \
    \                paren_group_stack.reverse.foreach(g => {\n                  \
    \      paren_groups ++= g\n                    })\n                    paren_group_stack.reverse.clear()\n\
    \                case _ =>\n                    paren_group_stack.reverse.foreach(g\
    \ => {\n                        paren_groups ++= g\n                    })\n \
    \                   paren_group_stack.reverse.clear()\n            }\n       \
    \ })\n        paren_group_stack.reverse.foreach(g => {\n            paren_groups\
    \ ++= g\n        })\n        paren_groups.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt6373pnf.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m \e[31m')'\e[0m =>\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                '=>'\
    \ expected, but 'case' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt6373pnf.scala:12:27\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpt6373pnf.scala:13:32 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_group_stack\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt6373pnf.scala:16:46 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m \e[31m'('\e[0m -> paren_group_stack\
    \ ++= paren_group\n\e[31m\e[31m   |\e[0m                                     \
    \         ^^^\e[0m\n\e[31m   |\e[0m                                          \
    \    Not found: ++=\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\" \", \"\"))\n        val\
    \ paren_groups_with_open_braces_without_spaces_without_duplicates = paren_groups_with_open_braces_without_spaces.distinct\n\
    \        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates.map(x => x.replace(\"\
    (\", \"(\"))\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces.map(x\
    \ => x.replace(\")\", \")\"))\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces.distinct\n\
    \        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates.map(x\
    \ => x.replace(\"(\", \"(\"))\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces.map(x\
    \ => x.replace(\")\", \")\"))\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates.map(x\
    \ => x.replace(\"(\", \"(\"))\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces_without_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_buuol9s.scala:19:161 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \           ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m \
    \  |\e[0m  paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp_buuol9s.scala:20:180 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"(\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ availab"
  stdout: ''
  timestamp: 1659795457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_size = mutable.ListBuffer[Int]()\n        paren_string.foreach\
    \ { x =>\n            if (x == '(') {\n                paren_groups += x\n   \
    \             paren_group_size += 1\n            } else if (x == ')') {\n    \
    \            if (paren_group_size.last == 0) {\n                    paren_groups\
    \ += x\n                    paren_group_size += 1\n                } else {\n\
    \                    paren_group_size -= 1\n                }\n            }\n\
    \        }\n        paren_groups.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyg3gq7yo.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyg3gq7yo.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat23\
    \ = paren_groups_flat22.flat\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp94ftnkq2.scala:13:66 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.flatMap(\e[36mx\e[0m => x.split(\e[31m\"\\\\)\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value\
    \ split is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp94ftnkq2.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_list\
    \ = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list2 =\
    \ paren_groups_size.map(x => List(x))\n        val paren_groups_size_list3 = paren_groups_size.map(x\
    \ => List(x))\n        val paren_groups_size_list4 = paren_groups_size.map(x =>\
    \ List(x))\n        val paren_groups_size_list5 = paren_groups_size.map(x => List(x))\n\
    \        val paren_groups_size_list6 = paren_groups_size.map(x => List(x))\n \
    \       val paren_groups_size_list7 = paren_groups_size.map(x => List(x))\n  \
    \      val paren_groups_size_list8 = paren_groups_size.map(x => List(x))\n   \
    \     val paren_groups_size_list9 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list10 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list11 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list12 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list13 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list14 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list15 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list16 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list17 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list18 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list19 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list20 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list21 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list22 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list23 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list24 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list25 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list26 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc8nm7qqk.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:13:55\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:14:56\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list2\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:15:56\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list3\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:16:56\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list4\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:17:56\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list5\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    "
  stdout: ''
  timestamp: 1659795469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_reversed\
    \ = paren_groups_size.reverse\n        val paren_groups_size_reversed_size = paren_groups_size_reversed.length\n\
    \        val paren_groups_size_reversed_size_2 = paren_groups_size_reversed_size\
    \ / 2\n        val paren_groups_size_reversed_size_3 = paren_groups_size_reversed_size\
    \ / 3\n        val paren_groups_size_reversed_size_4 = paren_groups_size_reversed_size\
    \ / 4\n        val paren_groups_size_reversed_size_5 = paren_groups_size_reversed_size\
    \ / 5\n        val paren_groups_size_reversed_size_6 = paren_groups_size_reversed_size\
    \ / 6\n        val paren_groups_size_reversed_size_7 = paren_groups_size_reversed_size\
    \ / 7\n        val paren_groups_size_reversed_size_8 = paren_groups_size_reversed_size\
    \ / 8\n        val paren_groups_size_reversed_size_9 = paren_groups_size_reversed_size\
    \ / 9\n        val paren_groups_size_reversed_size_10 = paren_groups_size_reversed_size\
    \ / 10\n        val paren_groups_size_reversed_size_11 = paren_groups_size_reversed_size\
    \ / 11\n        val paren_groups_size_reversed_size_12 = paren_groups_size_reversed_size\
    \ / 12\n        val paren_groups_size_reversed_size_13 = paren_groups_size_reversed_size\
    \ / 13\n        val paren_groups_size_reversed_size_14 = paren_groups_size_reversed_size\
    \ / 14\n        val paren_groups_size_reversed_size_15 = paren_groups_size_reversed_size\
    \ / 15\n        val paren_groups_size_reversed_size_16 = paren_groups_size_reversed_size\
    \ / 16\n        val paren_groups_size_reversed_size_17 = paren_groups_size_reversed_size\
    \ / 17\n        val paren_groups_size_reversed_size_18 = paren_groups_size_reversed_size\
    \ / 18\n        val paren_groups_size_reversed_size_19 = paren_groups_size_reversed_size\
    \ / 19\n        val paren_groups_size_reversed_size_20 = paren_groups_size_reversed_size\
    \ / 20\n        val paren_groups_size_reversed_size_21 = paren_groups_size_reversed_size\
    \ / 21\n        val paren_groups_size_reversed_size_22 = paren_groups_size_reversed_size\
    \ / 22\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp_o2qqk9g.scala:36:11 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_o2qqk9g.scala:13:59 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_reversed\e\
    [0m = paren_groups_size.reverse\n\e[31m\e[31m   |\e[0m                       \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                         value reverse is not a member of Int\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_o2qqk9g.scala:37:5 ---------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Your code here\n        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val paren_group_size = mutable.ListBuffer[Int]()\n\
    \        paren_string.foreach {\n            c =>\n            if (c == '(') {\n\
    \                paren_groups += c\n                paren_group_size += 0\n  \
    \          } else if (c == ')') {\n                paren_group_size -= 1\n   \
    \             if (paren_group_size.get == 0) {\n                    paren_groups\
    \ += paren_groups.take(paren_groups.size-1)\n                    paren_group_size.clear()\n\
    \                }\n            }\n        }\n        paren_groups.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5m1ql86.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5m1ql86.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_parens = paren_groups.map(x => x.replace(\"\
    )\", \"\\\\)\"))\n        val paren_groups_with_parens_without_spaces = paren_groups_with_parens.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_parens_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces.map(x => x.replace(\"  \", \" \"))\n\
    \        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps45cwy19.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmps45cwy19.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_parens = paren_groups.map(x => x.replace(\"\
    )\", \"\\\\)\"))\n        val paren_groups_with_parens_with_brackets = paren_groups_with_parens.map(x\
    \ => x.replace(\"(\", \"\\\\(\"))\n        val paren_groups_with_parens_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets.map(x => x.replace(\"{\", \"\\\\{\"\
    ))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets.map(x => x.replace(\"\
    }\", \"\\\\}\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets_with_brackets.map(x =>\
    \ x.replace(\"[\", \"\\\\[\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"]\", \"\\\\]\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"{\", \"\\\\{\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"}\", \"\\\\}\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_bra\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpypt2smqp.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpypt2smqp.scala:18:123\
    \ --------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"{\"\e[0m, \e[31m\"\\\\{\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpypt2smqp.scala:19:137 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"}\"\e[0m, \e[31m\"\\\\}\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpypt2smqp.scala:21:5 ---------------------\e[0m\e"
  stdout: ''
  timestamp: 1659795466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_parens = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"()\"))\n        val paren_groups_with_parens_without_spaces\
    \ = paren_groups_with_parens.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n      \
    \  val paren_groups_with_parens_without_spaces_without_brackets = paren_groups_with_parens_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_brackets_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_brackets.map(x => x.replaceAll(\"\
    \\\\(\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_brackets_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_brackets_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_brackets_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\(\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\(\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\(\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsxn45gfr.scala:21:345 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_parens_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replaceAll(\"\\\\(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \                 unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpsxn45gfr.scala:23:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsxn45gfr.scala:22:5 ---------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsxn45gfr.scala:23:4 -------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: \\(def\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Create an empty list to store our results\n\
    \        var result: List[String] = Nil\n\n        // Iterate over each character\
    \ in the string\n        for (c <- paren_string) {\n            // If the character\
    \ is a left paren, add it to the list\n            if (c == '(') {\n         \
    \       result ::= c\n            }\n            // If the character is a right\
    \ paren, remove it from the list\n            else if (c == ')') {\n         \
    \       result ::= result.takeWhile(_ != '(')\n            }\n            // If\
    \ the character is a space, ignore it\n            else if (c == ' ') {\n    \
    \        }\n            // If the character is not a left paren or right paren,\
    \ add it to the list\n            else {\n                result ::= c\n     \
    \       }\n        }\n\n        // Return the list of results\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppp0yl14b.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                result ::= c\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String]\
    \ - did you mean List[String].::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppp0yl14b.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                result ::=\
    \ result.takeWhile(_ != \e[31m'('\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String] -\
    \ did you mean List[String].::?\n\e[31m\e[31m-- Error: /tmp/tmppp0yl14b.scala:22:44\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \         result ::= result.takeWhile(_ != \e[31m'('\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppp0yl14b.scala:29:23 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                result ::= c\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String]\
    \ - did you mean List[String].::?\n4 errors found\n"
  stdout: ''
  timestamp: 1659795466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).filter(_.nonEmpty)\n        val paren_groups_with_open_braces\
    \ = paren_groups.map(paren_group => {\n            val open_braces = paren_group.split(\"\
    \\\\)\").map(_.trim).filter(_.nonEmpty)\n            val closed_parens = open_braces.map(open_brace\
    \ => {\n                val closed_paren_groups = open_brace.split(\"\\\\)\").map(_.trim).filter(_.nonEmpty)\n\
    \                val closed_paren_groups_with_open_braces = closed_paren_groups.map(closed_paren_group\
    \ => {\n                    val open_braces = closed_paren_group.split(\"\\\\\
    (\").map(_.trim).filter(_.nonEmpty)\n                    val closed_parens = open_braces.map(open_brace\
    \ => {\n                        val closed_paren_groups = open_brace.split(\"\\\
    \\(\").map(_.trim).filter(_.nonEmpty)\n                        val closed_paren_groups_with_open_braces\
    \ = closed_paren_groups.map(closed_paren_group => {\n                        \
    \    val open_braces = closed_paren_group.split(\"\\\\)\").map(_.trim).filter(_.nonEmpty)\n\
    \                            val closed_parens = open_braces.map(open_brace =>\
    \ {\n                                val closed_paren_groups = open_brace.split(\"\
    \\\\)\").map(_.trim).filter(_.nonEmpty)\n                                val closed_paren_groups_with_open_braces\
    \ = closed_paren_groups.map(closed_paren_group => {\n                        \
    \            val open_braces = closed_paren_group.split(\"\\\\)\").map(_.trim).filter(_.nonEmpty)\n\
    \                                    val closed_parens = open_braces.map(open_brace\
    \ => {\n                                        val closed_paren_groups = open_brace.split(\"\
    \\\\)\").map(_.trim).filter(_.nonEmpty)\n                                    \
    \    val closed_paren_groups_with_open_braces = closed_paren_groups.map(closed_paren_group\
    \ => {\n                                            val open_braces = closed_paren_group.split(\"\
    \\\\)\").map(_.trim).filter(_.nonEmpty)\n                                    \
    \        val closed_parens = open_braces.map(open_brace => {\n               \
    \                                 val closed_paren_groups = open_brace.split(\"\
    \\\\)\").map(_.trim).filter(_.nonEmpty)\n                                    \
    \            val closed_paren_groups_with_open_braces = closed_paren_groups.map(closed_paren_group\
    \ => {\n                                                    val open_braces =\
    \ close\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl27e2n9d.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpl27e2n9d.scala:43:0 ----------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl27e2n9d.scala:33:70 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                                                    \e\
    [33mval\e[0m \e[36mopen_braces\e[0m = close\n\e[31m\e[31m   |\e[0m           \
    \                                                           ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        Not found: close\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl27e2n9d.scala:42:1\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_remainder\
    \ = paren_groups_count % paren_groups.length\n        val paren_groups_remainder_count\
    \ = paren_groups_remainder / paren_groups.length\n        val paren_groups_remainder_remainder\
    \ = paren_groups_remainder % paren_groups.length\n        val paren_groups_remainder_remainder_count\
    \ = paren_groups_remainder_remainder / paren_groups.length\n        val paren_groups_remainder_remainder_remainder\
    \ = paren_groups_remainder_remainder % paren_groups.length\n        val paren_groups_remainder_remainder_remainder_count\
    \ = paren_groups_remainder_remainder_remainder / paren_groups.length\n       \
    \ val paren_groups_remainder_remainder_remainder_count = paren_groups_remainder_remainder_remainder\
    \ % paren_groups.length\n        val paren_groups_remainder_remainder_remainder_count\
    \ = paren_groups_remainder_remainder_remainder % paren_groups.length\n       \
    \ val paren_groups_remainder_remainder_remainder_count = paren_groups_remainder_remainder_remainder\
    \ % paren_groups.length\n        val paren_groups_remainder_remainder_remainder_count\
    \ = paren_groups_remainder_remainder_remainder % paren_groups.length\n       \
    \ val paren_groups_remainder_remainder_remainder_count = paren_groups_remainder_remainder_remainder\
    \ % paren_groups.length\n        val paren_groups_remainder_remainder_remainder_count\
    \ = paren_groups_remainder_remainder_remainder % paren_groups.length\n       \
    \ val paren_groups_remainder_remainder_remainder_count = paren_groups_remainder_remainder_remainder\
    \ % paren_groups.length\n        val paren_groups_remainder_remainder_remainder_count\
    \ = paren_groups_remainder_remainder_remainder % paren_groups.length\n       \
    \ val paren_groups_remainder_remainder_remainder_count = paren_groups_remainder_remainder_remainder\
    \ % paren_groups.length\n        val paren_groups_remainder_remainder_remainder_count\
    \ = paren_groups_remainder_remainder_remainder % paren_groups.length\n       \
    \ val paren_groups_remainder_remainder_remainder_count = paren_groups_remainder_remainder_remainder\
    \ % paren_groups.length\n        val paren_groups_remainder_remainder_remainder_count\
    \ = paren_groups_remainder_remainder_remainder % paren_groups.length\n       \
    \ val paren_groups_remainder_remainder_remainder_count = paren_groups_remainder_remainder_remainder\
    \ % paren_groups.length\n        val paren_groups_remain\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5p_pnfv5.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5p_pnfv5.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_remainder_remainder_remainder_count\e[0m = paren_groups_remainder_remainder_remainder\
    \ % paren_groups.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remainder_remainder_remainder_count is already\
    \ defined as \e[33mvalue\e[0m \e[35mparen_groups_remainder_remainder_remainder_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5p_pnfv5.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remainder_remainder_remainder_count\e\
    [0m = paren_groups_remainder_remainder_remainder % paren_groups.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remainder_remainder_remainder_count is already\
    \ defined as \e[33mvalue\e[0m \e[35mparen_groups_remainder_remainder_remainder_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5p_pnfv5.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remainder_remainder_remainder_count\e\
    [0m = paren_groups_remainder_remainder_remainder % paren_groups.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remainder_remainder_remainder_count is already\
    \ defined as"
  stdout: ''
  timestamp: 1659795466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        paren_group_strings.filter(x => !x.isEmpty)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1h75vt9m.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_group_strings.filter(\e\
    [36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_size = paren_groups.size\n\
    \        val paren_groups_remaining = paren_groups_size - paren_groups.filter(_.contains(\"\
    (\")).size\n        val paren_groups_remaining_size = paren_groups_remaining +\
    \ paren_groups.filter(_.contains(\")\")).size\n        val paren_groups_remaining_size2\
    \ = paren_groups_remaining_size + paren_groups.filter(_.contains(\")\")).size\n\
    \        val paren_groups_remaining_size3 = paren_groups_remaining_size2 + paren_groups.filter(_.contains(\"\
    )\")).size\n        val paren_groups_remaining_size4 = paren_groups_remaining_size3\
    \ + paren_groups.filter(_.contains(\")\")).size\n        val paren_groups_remaining_size5\
    \ = paren_groups_remaining_size4 + paren_groups.filter(_.contains(\")\")).size\n\
    \        val paren_groups_remaining_size6 = paren_groups_remaining_size5 + paren_groups.filter(_.contains(\"\
    )\")).size\n        val paren_groups_remaining_size7 = paren_groups_remaining_size6\
    \ + paren_groups.filter(_.contains(\")\")).size\n        val paren_groups_remaining_size8\
    \ = paren_groups_remaining_size7 + paren_groups.filter(_.contains(\")\")).size\n\
    \        val paren_groups_remaining_size9 = paren_groups_remaining_size8 + paren_groups.filter(_.contains(\"\
    )\")).size\n        val paren_groups_remaining_size10 = paren_groups_remaining_size9\
    \ + paren_groups.filter(_.contains(\")\")).size\n        val paren_groups_remaining_size11\
    \ = paren_groups_remaining_size10 + paren_groups.filter(_.contains(\")\")).size\n\
    \        val paren_groups_remaining_size12 = paren_groups_remaining_size11 + paren_groups.filter(_.contains(\"\
    )\")).size\n        val paren_groups_remaining_size13 = paren_groups_remaining_size12\
    \ + paren_groups.filter(_.contains(\")\")).size\n        val paren_groups_remaining_size14\
    \ = paren_groups_remaining_size13 + paren_groups.filter(_.contains(\")\")).size\n\
    \        val paren_groups_remaining_size15 = paren_groups_remaining_size14 + paren_groups.filter(_.contains(\"\
    )\")).size\n        val paren_groups_remaining_size16 = paren_groups_remaining_size15\
    \ + paren_groups.filter(_.contains(\")\")).size\n        val paren_groups_remaining_size17\
    \ = paren_groups_remaining_size16\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ls4ql41.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_size = mutable.ListBuffer[Int]()\n        val paren_group_open\
    \ = mutable.ListBuffer[Boolean]()\n        paren_string.foreach { c =>\n     \
    \       c match {\n                case '(' => paren_group_size += 1 // Increment\
    \ the size of this group\n                case ')' =>\n                    if\
    \ (paren_group_size.last == paren_group_size.last) // If this group is closed\n\
    \                        paren_groups += paren_group_size.last // Add the group\
    \ to the list\n                    paren_group_size.last -= 1 // Decrement the\
    \ size of the group\n                    paren_group_open += false // Open this\
    \ group\n                case ' ' =>\n                    if (paren_group_open.last)\
    \ // If this group is open\n                        paren_groups += paren_group_size.last\
    \ // Add the group to the list\n                    paren_group_size.last -= 1\
    \ // Decrement the size of the group\n                    paren_group_open +=\
    \ true // Close this group\n            }\n        }\n        paren_groups.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_5v1_rq.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_5v1_rq.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_5v1_rq.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_open\e[0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\"(\"\
    , \" ( \"))).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.map(x\
    \ => x.replace(\"(\", \" ( \"))).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuukue4yb.scala:16:159 --------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted.map(\e[36mx\e[0m => x.replace(\e\
    [31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).filter(x => !x.isEmpty)\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \      '}' expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuukue4yb.scala:20:247\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).filter(x => !x.isEmpty)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                               '}' expected, but ')' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpuukue4yb.scala:24:4 ----------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m  \
    \  '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuukue4yb.scala:16:184\
    \ -------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted.map(\e[36mx\e[0m => x.replace(\e\
    [31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).filter(x => !x.isEmpty)\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                              "
  stdout: ''
  timestamp: 1659795466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Use a stack to keep track of which\
    \ parenthesis are open\n        val paren_stack = mutable.Stack[String]()\n  \
    \      // Use a list to keep track of which parenthesis are closed\n        val\
    \ paren_closed = mutable.ListBuffer[String]()\n        // Use a list to keep track\
    \ of which parenthesis are open\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        // Use a list to keep track of which parenthesis are open\n        val\
    \ paren_open2 = mutable.ListBuffer[String]()\n        // Use a list to keep track\
    \ of which parenthesis are open\n        val paren_open3 = mutable.ListBuffer[String]()\n\
    \        // Use a list to keep track of which parenthesis are open\n        val\
    \ paren_open4 = mutable.ListBuffer[String]()\n        // Use a list to keep track\
    \ of which parenthesis are open\n        val paren_open5 = mutable.ListBuffer[String]()\n\
    \        // Use a list to keep track of which parenthesis are open\n        val\
    \ paren_open6 = mutable.ListBuffer[String]()\n        // Use a list to keep track\
    \ of which parenthesis are open\n        val paren_open7 = mutable.ListBuffer[String]()\n\
    \        // Use a list to keep track of which parenthesis are open\n        val\
    \ paren_open8 = mutable.ListBuffer[String]()\n        // Use a list to keep track\
    \ of which parenthesis are open\n        val paren_open9 = mutable.ListBuffer[String]()\n\
    \        // Use a list to keep track of which parenthesis are open\n        val\
    \ paren_open10 = mutable.ListBuffer[String]()\n        // Use a list to keep track\
    \ of which parenthesis are open\n        val paren_open11 = mutable.ListBuffer[String]()\n\
    \        // Use a list to keep track of which parenthesis are open\n        val\
    \ paren_open12 = mutable.ListBuffer[String]()\n        // Use a list to keep track\
    \ of which parenthesis are open\n        val paren_open13 = mutable.ListBuffer[String]()\n\
    \        // Use a list to keep track of which parenthesis are open\n        val\
    \ paren_open14 = mutable.ListBuffer[String]()\n        // Use a list to keep track\
    \ of which parenthesis are open\n        val paren_open15 = mutable.ListBuffer[String]()\n\
    \        // Use a list to keep track of which parenthesis are open\n        val\
    \ paren_open16 = mutable.ListBuffer[String]()\n        // Use a list to \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeiovju3w.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpeiovju3w.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeiovju3w.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpeiovju3w.scala:18:26 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_open2\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpeiovju3w.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_open3\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpeiovju3w.scala:22:26 -------"
  stdout: ''
  timestamp: 1659795466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").filter(_.nonEmpty).toList\n        val paren_group_stack = mutable.Stack[String]()\n\
    \        val paren_group_result: List[String] = Nil\n        for (paren_group\
    \ <- paren_groups) {\n            paren_group_stack push paren_group\n       \
    \     while (paren_group_stack.nonEmpty) {\n                val paren_group_top\
    \ = paren_group_stack.pop()\n                val paren_group_bottom = paren_group_stack.pop()\n\
    \                if (paren_group_top != paren_group_bottom) {\n              \
    \      paren_group_result ::= paren_group_top\n                }\n           \
    \ }\n        }\n        paren_group_result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvqohnqaz.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_stack\e[0m =\
    \ mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvqohnqaz.scala:20:39\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                    paren_group_result\
    \ ::= paren_group_top\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String] - did you mean paren_group_result.::?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.split(\"\\\\\
    )\").length).toList\n        val paren_group_counts_sum = paren_group_counts.sum\n\
    \        val paren_group_counts_average = paren_group_counts_sum / paren_groups.length\n\
    \        val paren_group_counts_min = paren_group_counts.min\n        val paren_group_counts_max\
    \ = paren_group_counts.max\n        val paren_group_counts_range = paren_group_counts_max\
    \ - paren_group_counts_min\n        val paren_group_counts_range_average = paren_group_counts_range\
    \ / paren_groups.length\n        val paren_group_counts_range_min = paren_group_counts_min\
    \ * paren_group_counts_average\n        val paren_group_counts_range_max = paren_group_counts_max\
    \ * paren_group_counts_average\n        val paren_group_counts_range_min = paren_group_counts_min\
    \ * paren_group_counts_average\n        val paren_group_counts_range_max = paren_group_counts_max\
    \ * paren_group_counts_average\n        val paren_group_counts_range_average =\
    \ paren_group_counts_range / paren_groups.length\n        val paren_group_counts_range_average\
    \ = paren_group_counts_range / paren_groups.length\n        val paren_group_counts_range_average\
    \ = paren_group_counts_range / paren_groups.length\n        val paren_group_counts_range_average\
    \ = paren_group_counts_range / paren_groups.length\n        val paren_group_counts_range_average\
    \ = paren_group_counts_range / paren_groups.length\n        val paren_group_counts_range_average\
    \ = paren_group_counts_range / paren_groups.length\n        val paren_group_counts_range_average\
    \ = paren_group_counts_range / paren_groups.length\n        val paren_group_counts_range_average\
    \ = paren_group_counts_range / paren_groups.length\n        val paren_group_counts_range_average\
    \ = paren_group_counts_range / paren_groups.length\n        val paren_group_counts_range_average\
    \ = paren_group_counts_range / paren_groups.length\n        val paren_group_counts_range_average\
    \ = paren_group_counts_range / paren_groups.length\n        val paren_group_counts_range_average\
    \ = paren_group_counts_range / paren_groups.length\n        val paren_group_counts_range_average\
    \ = paren_group_count\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6e2ya52d.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_range_min\e\
    [0m = paren_group_counts_min * paren_group_counts_average\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_counts_range_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_counts_range_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6e2ya52d.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_range_max\e\
    [0m = paren_group_counts_max * paren_group_counts_average\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_counts_range_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_counts_range_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6e2ya52d.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_range_average\e\
    [0m = paren_group_counts_range / paren_groups.length\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_counts_range_average is already defined as \e\
    [33mvalue\e[0m \e[35mparen_group_counts_range_average\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6e2ya52d.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_counts_range_average\e[0m = paren_group_counts_range / paren_groups.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filter(_ != \")\")\n        val paren_groups_flat3 = paren_groups_flat2.filter(_\
    \ != \")\")\n        val paren_groups_flat4 = paren_groups_flat3.filter(_ != \"\
    )\")\n        val paren_groups_flat5 = paren_groups_flat4.filter(_ != \")\")\n\
    \        val paren_groups_flat6 = paren_groups_flat5.filter(_ != \")\")\n    \
    \    val paren_groups_flat7 = paren_groups_flat6.filter(_ != \")\")\n        val\
    \ paren_groups_flat8 = paren_groups_flat7.filter(_ != \")\")\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filter(_ != \")\")\n        val paren_groups_flat10 = paren_groups_flat9.filter(_\
    \ != \")\")\n        val paren_groups_flat11 = paren_groups_flat10.filter(_ !=\
    \ \")\")\n        val paren_groups_flat12 = paren_groups_flat11.filter(_ != \"\
    )\")\n        val paren_groups_flat13 = paren_groups_flat12.filter(_ != \")\"\
    )\n        val paren_groups_flat14 = paren_groups_flat13.filter(_ != \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filter(_ != \")\")\n  \
    \      val paren_groups_flat16 = paren_groups_flat15.filter(_ != \")\")\n    \
    \    val paren_groups_flat17 = paren_groups_flat16.filter(_ != \")\")\n      \
    \  val paren_groups_flat18 = paren_groups_flat17.filter(_ != \")\")\n        val\
    \ paren_groups_flat19 = paren_groups_flat18.filter(_ != \")\")\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filter(_ != \")\")\n        val paren_groups_flat21 =\
    \ paren_groups_flat20.filter(_ != \")\")\n        val paren_groups_flat22 = paren_groups_flat21.filter(_\
    \ != \")\")\n        val paren_groups_flat23 = paren_groups_flat22.filter(_ !=\
    \ \")\")\n        val paren_groups_flat24 = paren_groups_flat23.filter(_ != \"\
    )\")\n        val paren_groups_flat25 = paren_groups_flat24.filter(_ != \")\"\
    )\n        val paren_groups_flat26 = paren_groups_flat25.filter(_ != \")\")\n\
    \        val paren_groups_flat27 = paren_groups_flat26.filter(_ != \")\")\n  \
    \      val paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprmf1a5ab.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmprmf1a5ab.scala:13:58\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m = paren_groups_flat.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmprmf1a5ab.scala:14:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmprmf1a5ab.scala:15:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m = paren_groups_flat3.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmprmf1a5ab.scala:16:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m = paren_groups_flat4.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmprmf1a5ab.scala:17:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m = paren_groups_flat5.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Valu"
  stdout: ''
  timestamp: 1659795458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Initialize a list to store the result\n\
    \        var result : List[String] = Nil\n        // Iterate over each character\
    \ in the string\n        for (c <- paren_string) {\n            // If the character\
    \ is a left parenthesis, add it to the list\n            if (c == '(') {\n   \
    \             result ::= c\n            }\n            // If the character is\
    \ a right parenthesis, remove it from the list\n            else if (c == ')')\
    \ {\n                result ::= result.takeWhile(_ != '(')\n            }\n  \
    \          // If the character is a space, ignore it\n            else if (c ==\
    \ ' ') {\n            }\n            // If the character is not a left or right\
    \ parenthesis, ignore it\n            else {\n            }\n        }\n     \
    \   // Return the list\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpforodbzk.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                result ::= c\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String]\
    \ - did you mean List[String].::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpforodbzk.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                result ::=\
    \ result.takeWhile(_ != \e[31m'('\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String] -\
    \ did you mean List[String].::?\n\e[31m\e[31m-- Error: /tmp/tmpforodbzk.scala:21:44\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \         result ::= result.takeWhile(_ != \e[31m'('\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types String and Char cannot be compared with == or !=\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replaceAll(\"\
    \\\\)\", \"\").replaceAll(\"\\\\(\", \"\"))\n        paren_group_strings.filter(x\
    \ => !x.isEmpty)\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsh4qcvg8.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_group_strings.filter(\e\
    [36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_stack = mutable.ListBuffer[String]()\n        val paren_group_open\
    \ = mutable.ListBuffer[String]()\n        val paren_group_closed = mutable.ListBuffer[String]()\n\
    \        val paren_group_open_index = mutable.ListBuffer[Int]()\n        val paren_group_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8jgu0pke.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp8jgu0pke.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_index\e\
    [0m = paren_group_open_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8jgu0pke.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed_index\e\
    [0m = paren_group_closed_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_closed_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8jgu0pke.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open\e[0m =\
    \ paren_group_open.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open is already defined as \e[33mvalue\e[0m \e\
    [35mparen_group_open\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8jgu0pke.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed\e[0m\
    \ = paren_group_closed.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_list_with_parens\
    \ = mutable.ListBuffer[String]()\n        var paren_groups_list_with_parens_count\
    \ = 0\n        for (paren_group <- paren_groups) {\n            val paren_group_count\
    \ = paren_group.length\n            if (paren_group_count > paren_groups_list_with_parens_count)\
    \ {\n                paren_groups_list_with_parens_count = paren_group_count\n\
    \                paren_groups_list_with_parens += paren_group\n            }\n\
    \        }\n        paren_groups_list_with_parens.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqhjgvcf4.scala:13:44 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_with_parens\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m         \
    \                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatMap(x => x.split(\"\
    \\\\)\"))\n        paren_groups_flat.filter(x => x.contains(\"(\") && !x.contains(\"\
    )\"))\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq0v_a28u.scala:13:32\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_groups_flat.filter(\e\
    [36mx\e[0m => x.contains(\e[31m\"(\"\e[0m) && !x.contains(\e[31m\")\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strs = paren_groups.map(x => x.replace(\")\"\
    , \"\"))\n        val paren_group_strs_sorted = paren_group_strs.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_group_strs_sorted_grouped = paren_group_strs_sorted.grouped(2)\n\
    \        val paren_group_strs_sorted_grouped_flat = paren_group_strs_sorted_grouped.flatMap(x\
    \ => x)\n        val paren_group_strs_sorted_grouped_flat_sorted = paren_group_strs_sorted_grouped_flat.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_group_strs_sorted_grouped_flat_sorted_grouped\
    \ = paren_group_strs_sorted_grouped_flat_sorted.grouped(2)\n        val paren_group_strs_sorted_grouped_flat_sorted_grouped_flat\
    \ = paren_group_strs_sorted_grouped_flat_sorted_grouped.flatMap(x => x)\n    \
    \    val paren_group_strs_sorted_grouped_flat_sorted_grouped_flat_sorted = paren_group_strs_sorted_grouped_flat_sorted_grouped_flat.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_group_strs_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped\
    \ = paren_group_strs_sorted_grouped_flat_sorted_grouped_flat_sorted.grouped(2)\n\
    \        val paren_group_strs_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped_flat\
    \ = paren_group_strs_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped.flatMap(x\
    \ => x)\n        val paren_group_strs_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped_flat_sorted\
    \ = paren_group_strs_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped_flat.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_group_strs_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped\
    \ = paren_group_strs_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped_flat_sorted.grouped(2)\n\
    \        val paren_group_strs_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped_flat\
    \ = paren_group_strs_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped.flatMap(x\
    \ => x)\n        val paren_group_strs_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped_flat_sorted\
    \ = paren_group_strs_sorted_grou\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqc9ih7ty.scala:16:95 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strs_sorted_grouped_flat_sorted\e\
    [0m = paren_group_strs_sorted_grouped_flat.sortWith((\e[36mx\e[0m, \e[36my\e[0m)\
    \ => x.compareTo(y) == -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value sortWith is not a member of Iterator[String]\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqc9ih7ty.scala:25:118 -----------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strs_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped_flat_sorted_grouped_flat_sorted\e\
    [0m = paren_group_strs_sorted_grou\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                             Not found: paren_group_strs_sorted_grou\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqc9ih7ty.scala:26:5 ---------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\"(\"\
    , \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgnj4nor5.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgnj4nor5.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_stack = mutable.ListBuffer[String]()\n        val paren_group_open\
    \ = mutable.ListBuffer[String]()\n        val paren_group_closed = mutable.ListBuffer[String]()\n\
    \        val paren_group_open_index = mutable.ListBuffer[Int]()\n        val paren_group_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8jgu0pke.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp8jgu0pke.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_index\e\
    [0m = paren_group_open_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8jgu0pke.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed_index\e\
    [0m = paren_group_closed_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_closed_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8jgu0pke.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open\e[0m =\
    \ paren_group_open.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open is already defined as \e[33mvalue\e[0m \e\
    [35mparen_group_open\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8jgu0pke.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed\e[0m\
    \ = paren_group_closed.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).filter(_.nonEmpty)\n        val paren_groups_size = paren_groups.size\n\
    \        val paren_groups_remaining = paren_groups_size - paren_groups.filter(_.nonEmpty).size\n\
    \        val paren_groups_remaining_strings = paren_groups_remaining match {\n\
    \            case 0 => Nil\n            case _ => paren_groups.take(paren_groups_remaining).map(_.mkString(\"\
    (\", \")\"))\n        }\n        paren_groups_remaining_strings.map(paren_groups\
    \ => paren_groups.mkString(\"(\", \")\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaazqvg9i.scala:16:79\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m _\
    \ => paren_groups.take(paren_groups_remaining).map(_.mkString(\e[31m\"(\"\e[0m,\
    \ \e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                                  \
    \                                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                             Found:    (String, String)\n\e[31m\
    \   |\e[0m                                              Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaazqvg9i.scala:18:39 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        paren_groups_remaining_strings.map(\e[36mparen_groups\e\
    [0m => paren_groups.mkString(\e[31m\"(\"\e[0m, \e[31m\")\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     value map is not a member of Object\n2 errors found\n"
  stdout: ''
  timestamp: 1659795477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        paren_string.split(\"\\\\(\").foreach(x\
    \ => {\n            val open = x.split(\"\\\\)\")\n            paren_open += open(0)\n\
    \            paren_closed += open(1)\n        })\n        paren_closed.foreach(x\
    \ => {\n            paren_groups += x\n        })\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp661fk0mh.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp661fk0mh.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp661fk0mh.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces.map(x => x.replace(\"(\", \" (\
    \ \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqtcevb_7.scala:22:177 --------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                            \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqtcevb_7.scala:20:148\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m\
    \  paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpqtcevb_7.scala:21:163 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_witho"
  stdout: ''
  timestamp: 1659795478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_parens = paren_groups.map(x => x.replace(\"\
    )\", \")(\"))\n        val paren_groups_with_parens_with_brackets = paren_groups_with_parens.map(x\
    \ => x.replace(\"(\", \"[(\"))\n        val paren_groups_with_parens_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets.map(x => x.replace(\"[\", \"[[\"))\n\
    \        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets.map(x => x.replace(\"\
    ]\", \"]]\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets_with_brackets.map(x =>\
    \ x.replace(\"[[\", \"[[[\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"]]\", \"]]]\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"]]]\", \"]]]]\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_bra\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp17gaskcl.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp17gaskcl.scala:17:123\
    \ -----------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"]]\"\e[0m, \e[31m\"]]]\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp17gaskcl.scala:18:165\
    \ -----------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"]]]\"\e[0m, \e[31m\"]]]]\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659795477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.split(\"\\\\\
    )\").length).sum\n        val paren_group_lengths = paren_groups.map(x => x.split(\"\
    \\\\)\").length).max\n        val paren_group_lengths_array = paren_group_lengths.toArray\n\
    \        val paren_group_lengths_array_sorted = paren_group_lengths_array.sort\n\
    \        val paren_group_lengths_array_sorted_reversed = paren_group_lengths_array_sorted.reverse\n\
    \        val paren_group_lengths_array_sorted_reversed_sorted = paren_group_lengths_array_sorted_reversed.sort\n\
    \        val paren_group_lengths_array_sorted_reversed_sorted_length = paren_group_lengths_array_sorted_reversed_sorted.length\n\
    \        val paren_group_lengths_array_sorted_reversed_sorted_length_minus_1 =\
    \ paren_group_lengths_array_sorted_reversed_sorted_length - 1\n        val paren_group_lengths_array_sorted_reversed_sorted_length_minus_2\
    \ = paren_group_lengths_array_sorted_reversed_sorted_length_minus_1 - 1\n    \
    \    val paren_group_lengths_array_sorted_reversed_sorted_length_minus_3 = paren_group_lengths_array_sorted_reversed_sorted_length_minus_2\
    \ - 1\n        val paren_group_lengths_array_sorted_reversed_sorted_length_minus_4\
    \ = paren_group_lengths_array_sorted_reversed_sorted_length_minus_3 - 1\n    \
    \    val paren_group_lengths_array_sorted_reversed_sorted_length_minus_5 = paren_group_lengths_array_sorted_reversed_sorted_length_minus_4\
    \ - 1\n        val paren_group_lengths_array_sorted_reversed_sorted_length_minus_6\
    \ = paren_group_lengths_array_sorted_reversed_sorted_length_minus_5 - 1\n    \
    \    val paren_group_lengths_array_sorted_reversed_sorted_length_minus_7 = paren_group_lengths_array_sorted_reversed_sorted_length_minus_6\
    \ - 1\n        val paren_group_lengths_array_sorted_reversed_sorted_length_minus_8\
    \ = paren_group_lengths_array_sorted_reversed_sorted_length_minus_7 - 1\n    \
    \    val paren_group_lengths_array_sorted_reversed_sorted_length_minus_9 = paren_group_lengths_array_sorted_reversed_sorted_length_minus_8\
    \ - 1\n        val paren_group_lengths_array_sorted_reversed_sorted_length_minus_10\
    \ = paren_group_lengths_array_sorted_reversed_sorted_length_minus_9 - 1\n    \
    \    val paren_group_lengths_array_sorted_reversed_sorted_length_minus_11 = paren_group_lengths_array_sorted_reversed_sorted_length_minus_10\
    \ - 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdp4f4a2v.scala:14:60 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_group_lengths_array\e\
    [0m = paren_group_lengths.toArray\n\e[31m\e[31m   |\e[0m                     \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                            value toArray is not a member of Int\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdp4f4a2v.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replaceAll(\"\
    \\\\)\", \"\"))\n        val paren_groups_with_closed_braces = paren_groups_with_open_braces.map(x\
    \ => x.replaceAll(\"\\\\(\", \"\"))\n        paren_groups_with_closed_braces.filter(x\
    \ => x.contains(\")\")).map(x => x.replaceAll(\"\\\\)\", \"\"))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpub58w39b.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        paren_groups_with_closed_braces.filter(\e\
    [36mx\e[0m => x.contains(\e[31m\")\"\e[0m)).map(\e[36mx\e[0m => x.replaceAll(\e\
    [31m\"\\\\)\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\"))\n        val\
    \ paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgdyux9kj.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgdyux9kj.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(x => x.trim).filter(x => x.nonEmpty)\n        val paren_groups_with_open_braces\
    \ = paren_groups.map(x => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x\
    \ => x.nonEmpty)\n        val paren_groups_with_open_braces_with_braces = paren_groups_with_open_braces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => x.nonEmpty)\n  \
    \      val paren_groups_with_open_braces_with_braces_with_braces = paren_groups_with_open_braces_with_braces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => x.nonEmpty)\n  \
    \      val paren_groups_with_open_braces_with_braces_with_braces_with_braces =\
    \ paren_groups_with_open_braces_with_braces_with_braces.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => x.nonEmpty)\n        val paren_groups_with_open_braces_with_braces_with_braces_with_braces_with_braces\
    \ = paren_groups_with_open_braces_with_braces_with_braces_with_braces.map(x =>\
    \ x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => x.nonEmpty)\n     \
    \   val paren_groups_with_open_braces_with_braces_with_braces_with_braces_with_braces_with_braces\
    \ = paren_groups_with_open_braces_with_braces_with_braces_with_braces_with_braces_with_braces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => x.nonEmpty)\n  \
    \      val paren_groups_with_open_braces_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces\
    \ = paren_groups_with_open_braces_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => x.nonEmpty)\n  \
    \      val paren_groups_with_open_braces_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces\
    \ = paren_groups_with_open_braces_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces_with_b\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5yeoly2r.scala:17:104 --------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_braces_with_braces_with_braces_with_braces_with_braces\e\
    [0m = paren_groups_with_open_braces_with_braces_with_braces_with_braces_with_braces_with_braces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"(\"\
    \e[0m, \e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.nonEmpty)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_with_braces_with_braces_with_braces_with_braces_with_braces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp5yeoly2r.scala:18:116 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces\e\
    [0m = paren_groups_with_open_braces_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"(\"\
    \e[0m, \e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.nonEmpty)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                          ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5yeoly2r.scala:19:128 -----------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces\e\
    [0m = paren_groups_with_open_braces_with_braces_with_braces_with"
  stdout: ''
  timestamp: 1659795479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_paren_groups = paren_groups.filter(x\
    \ => x.startsWith(\"(\"))\n        val close_paren_groups = paren_groups.filter(x\
    \ => x.endsWith(\")\"))\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_group\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphmnpy111.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopen_paren_groups_count\e\
    [0m = open_paren_groups.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_paren_groups_count is already defined as \e[33mvalue\e\
    [0m \e[35mopen_paren_groups_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphmnpy111.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclose_paren_groups_count\e\
    [0m = close_paren_groups.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_paren_groups_count is already defined as \e[33mvalue\e\
    [0m \e[35mclose_paren_groups_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphmnpy111.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopen_paren_groups_count\e\
    [0m = open_paren_groups.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_paren_groups_count is already defined as \e[33mvalue\e\
    [0m \e[35mopen_paren_groups_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphmnpy111.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mclose_paren_groups_count\e\
    [0m = close_paren_groups.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_paren_groups_count is already defined as \e[33mvalue\e\
    [0m \e[35mclose_paren_groups_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Nami"
  stdout: ''
  timestamp: 1659795479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"  \", \"\"))\n        val\
    \ paren_groups_with_open_braces_without_spaces_without_spaces = paren_groups_with_open_braces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpef6e1r5d.scala:19:149 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpef6e1r5d.scala:20:164 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpef6e1r5d.scala:21:179 -----------"
  stdout: ''
  timestamp: 1659795428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces.map(x => x.replace(\"( \", \"\
    \ (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces.sortBy(x => x.length)\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted.map(x =>\
    \ x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1iu4mhvc.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1iu4mhvc.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_remainder\
    \ = paren_groups_size % 2\n        val paren_groups_size_remainder_size = paren_groups_size_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder = paren_groups_size_remainder_size\
    \ % 2\n        val paren_groups_size_remainder_size_remainder_remainder = paren_groups_size_remainder_size_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder + 1\n     \
    \   val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder +\
    \ 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_re\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphrg8ag05.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\e\
    [0m = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmphrg8ag05.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\e\
    [0m = paren_groups_size_remainder_size_re\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E"
  stdout: ''
  timestamp: 1659795478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_open_braces_with_brackets\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"[\").replace(\"\
    )\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets.map(x => x.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets.map(x => x.replace(\"\
    (\", \"[\").replace(\")\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"(\").replace(\"]\", \")\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"(\", \"[\").replace(\")\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv_ufrfva.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv_ufrfva.scala:18:142\
    \ --------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m  \
    \ |\e[0m  paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpv_ufrfva.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcn49_p8s.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcn49_p8s.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_list\
    \ = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list2 =\
    \ paren_groups_size.map(x => List(x))\n        val paren_groups_size_list3 = paren_groups_size.map(x\
    \ => List(x))\n        val paren_groups_size_list4 = paren_groups_size.map(x =>\
    \ List(x))\n        val paren_groups_size_list5 = paren_groups_size.map(x => List(x))\n\
    \        val paren_groups_size_list6 = paren_groups_size.map(x => List(x))\n \
    \       val paren_groups_size_list7 = paren_groups_size.map(x => List(x))\n  \
    \      val paren_groups_size_list8 = paren_groups_size.map(x => List(x))\n   \
    \     val paren_groups_size_list9 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list10 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list11 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list12 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list13 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list14 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list15 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list16 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list17 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list18 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list19 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list20 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list21 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list22 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list23 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list24 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list25 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list26 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc8nm7qqk.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:13:55\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:14:56\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list2\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:15:56\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list3\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:16:56\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list4\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:17:56\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list5\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    "
  stdout: ''
  timestamp: 1659795469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val open_parens = mutable.ListBuffer[String]()\n\
    \        val close_parens = mutable.ListBuffer[String]()\n        val paren_opens\
    \ = mutable.ListBuffer[String]()\n        val paren_closes = mutable.ListBuffer[String]()\n\
    \        val paren_group_strings = mutable.ListBuffer[String]()\n        val paren_group_opens\
    \ = mutable.ListBuffer[String]()\n        val paren_group_closes = mutable.ListBuffer[String]()\n\
    \        val paren_group_opens_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_closes_count = mutable.ListBuffer[Int]()\n        val paren_group_opens_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_closes_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_count_min = mutable.ListBuffer[Int]()\n       \
    \ val paren_group_closes_count_min = mutable.ListBuffer[Int]()\n        val paren_group_opens_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_closes_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_count_max = mutable.ListBuffer[Int]()\n       \
    \ val paren_group_closes_count_max = mutable.ListBuffer[Int]()\n        val paren_group_opens_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_closes_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_count_max = mutable.ListBuffer[Int]()\n       \
    \ val paren_group_closes_count_max = mutable.ListBuffer[Int]()\n        val paren_group_opens_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_closes_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_count_max = mutable.ListBuffer[Int]()\n       \
    \ val paren_group_closes_count_max = mutable.ListBuffer[Int]()\n        val paren_group_opens_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_closes_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn7akekl5.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn7akekl5.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_opens_count_min\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_opens_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_opens_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn7akekl5.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closes_count_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closes_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_closes_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn7akekl5.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_group_opens_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_opens_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_opens_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn7akekl5.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closes_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_group\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24kz6_t8.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_group\n\e[31m\e[31m   |\e[0m                                     \
    \                                                                            \
    \                            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                                   Not found: paren_group\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp24kz6_t8.scala:24:5 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var open_brace_count\
    \ = 0\n        var closed_brace_count = 0\n        var open_brace_group = 0\n\
    \        var closed_brace_group = 0\n        var open_brace_group_count = 0\n\
    \        var closed_brace_group_count = 0\n        var open_brace_group_paren\
    \ = 0\n        var closed_brace_group_paren = 0\n        var open_brace_group_paren_count\
    \ = 0\n        var closed_brace_group_paren_count = 0\n        var open_brace_group_paren_paren\
    \ = 0\n        var closed_brace_group_paren_paren = 0\n        var open_brace_group_paren_paren_count\
    \ = 0\n        var closed_brace_group_paren_paren_count = 0\n        var open_brace_group_paren_paren_paren\
    \ = 0\n        var closed_brace_group_paren_paren_paren = 0\n        var open_brace_group_paren_paren_paren_count\
    \ = 0\n        var closed_brace_group_paren_paren_paren_count = 0\n        var\
    \ open_brace_group_paren_paren_paren_paren = 0\n        var closed_brace_group_paren_paren_paren_paren\
    \ = 0\n        var open_brace_group_paren_paren_paren_paren_count = 0\n      \
    \  var closed_brace_group_paren_paren_paren_paren_count = 0\n        var open_brace_group_paren_paren_paren_paren_paren\
    \ = 0\n        var closed_brace_group_paren_paren_paren_paren_paren = 0\n    \
    \    var open_brace_group_paren_paren_paren_paren_paren_count = 0\n        var\
    \ closed_brace_group_paren_paren_paren_paren_paren_count = 0\n        var open_brace_group_paren_paren_paren_paren_paren_paren\
    \ = 0\n        var closed_brace_group_paren_paren_paren_paren_paren_paren = 0\n\
    \        var open_brace_group_paren_paren_paren_paren_paren_paren_count = 0\n\
    \        var closed_brace_group_paren_paren_paren_paren_paren_paren_count = 0\n\
    \        var open_brace_group_paren_paren_paren_paren_paren_paren_paren = 0\n\
    \        var closed_brace_group_paren_paren_paren_paren_paren_paren_paren = 0\n\
    \        var open_brace_group_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n        var closed_brace_group_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n        var open_brace_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzxubes84.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzxubes84.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzxubes84.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replaceAll(\"\
    \\\\)\", \"\").replaceAll(\"\\\\(\", \"\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n \
    \       val paren_groups_with_open_braces_without_spaces_without_spaces = paren_groups_with_open_braces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces.map(x => x.replaceAll(\"\
    \\\\(\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\(\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm9g98t81.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm9g98t81.scala:19:149\
    \ --------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\s+\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpm9g98t81.scala:20:164 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\)\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \                     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_sp"
  stdout: ''
  timestamp: 1659795481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size2\
    \ = paren_groups_size + 1\n        val paren_groups_size3 = paren_groups_size2\
    \ + 1\n        val paren_groups_size4 = paren_groups_size3 + 1\n        val paren_groups_size5\
    \ = paren_groups_size4 + 1\n        val paren_groups_size6 = paren_groups_size5\
    \ + 1\n        val paren_groups_size7 = paren_groups_size6 + 1\n        val paren_groups_size8\
    \ = paren_groups_size7 + 1\n        val paren_groups_size9 = paren_groups_size8\
    \ + 1\n        val paren_groups_size10 = paren_groups_size9 + 1\n        val paren_groups_size11\
    \ = paren_groups_size10 + 1\n        val paren_groups_size12 = paren_groups_size11\
    \ + 1\n        val paren_groups_size13 = paren_groups_size12 + 1\n        val\
    \ paren_groups_size14 = paren_groups_size13 + 1\n        val paren_groups_size15\
    \ = paren_groups_size14 + 1\n        val paren_groups_size16 = paren_groups_size15\
    \ + 1\n        val paren_groups_size17 = paren_groups_size16 + 1\n        val\
    \ paren_groups_size18 = paren_groups_size17 + 1\n        val paren_groups_size19\
    \ = paren_groups_size18 + 1\n        val paren_groups_size20 = paren_groups_size19\
    \ + 1\n        val paren_groups_size21 = paren_groups_size20 + 1\n        val\
    \ paren_groups_size22 = paren_groups_size21 + 1\n        val paren_groups_size23\
    \ = paren_groups_size22 + 1\n        val paren_groups_size24 = paren_groups_size23\
    \ + 1\n        val paren_groups_size25 = paren_groups_size24 + 1\n        val\
    \ paren_groups_size26 = paren_groups_size25 + 1\n        val paren_groups_size27\
    \ = paren_groups_size26 + 1\n        val paren_groups_size28 = paren_groups_size27\
    \ + 1\n        val paren_groups_size29 = paren_groups_size28 + 1\n        val\
    \ paren_groups_size30 = paren_groups_size29 + 1\n        val paren_groups_size31\
    \ = paren_groups_size30 + 1\n        val paren_groups_size32 = paren_groups_size31\
    \ + 1\n        val paren_groups_size33 = paren_groups_size32 + 1\n        val\
    \ paren_groups_size34 = paren_groups_size33 + 1\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpla8e1xk7.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpla8e1xk7.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x.length)\n        val paren_groups_with_spaces_sorted_reversed\
    \ = paren_groups_with_spaces_sorted.reverse\n        val paren_groups_with_spaces_sorted_reversed_with_spaces\
    \ = paren_groups_with_spaces_sorted_reversed.map(x => x.replaceAll(\"\\\\s+\"\
    , \" \"))\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces.sortBy(x => x.length)\n\
    \        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz3ty829w.scala:23:143 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_reversed_with_spaces_\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: paren_groups_with_spaces_sorted_reversed_with_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz3ty829w.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_reversed = paren_groups_with_spaces.reverse\n\
    \        val paren_groups_with_spaces_reversed_with_spaces = paren_groups_with_spaces_reversed.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces.reverse\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces.reverse\n\
    \        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces.reverse\n\
    \        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_group\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcmd746ig.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmd746ig.scala:21:144\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\e\
    [0m = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcmd746ig.scala:22:153\
    \ --------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\e\
    [0m = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m  "
  stdout: ''
  timestamp: 1659795482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcn49_p8s.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcn49_p8s.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_parens = paren_groups.map(paren\
    \ => paren.split(\"\\\\)\").map(_.trim).toList)\n        paren_groups_with_parens.filter(paren\
    \ => paren.size != paren_groups.size).map(paren => paren.mkString(\"(\", \")\"\
    )).toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsuhcyxz2.scala:13:110\
    \ -------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_groups_with_parens.filter(\e\
    [36mparen\e[0m => paren.size != paren_groups.size).map(\e[36mparen\e[0m => paren.mkString(\e\
    [31m\"(\"\e[0m, \e[31m\")\"\e[0m)).toList\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                     Found:    (String, String)\n\e[31m   |\e[0m            \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_size = paren_groups.size\n\
    \        val paren_groups_remaining = paren_groups_size - paren_groups.filter(_.contains(\"\
    )\")).size\n        val paren_groups_remaining_size = paren_groups_remaining +\
    \ paren_groups_size\n        val paren_groups_remaining_remaining = paren_groups_remaining_size\
    \ - paren_groups_remaining.filter(_.contains(\")\")).size\n        val paren_groups_remaining_remaining_size\
    \ = paren_groups_remaining_remaining + paren_groups_remaining.size\n        val\
    \ paren_groups_remaining_remaining_remaining = paren_groups_remaining_remaining_size\
    \ - paren_groups_remaining_remaining.filter(_.contains(\")\")).size\n        val\
    \ paren_groups_remaining_remaining_remaining_size = paren_groups_remaining_remaining_remaining\
    \ + paren_groups_remaining_remaining.size\n        val paren_groups_remaining_remaining_remaining_remaining\
    \ = paren_groups_remaining_remaining_remaining_size - paren_groups_remaining_remaining_remaining.filter(_.contains(\"\
    )\")).size\n        val paren_groups_remaining_remaining_remaining_remaining_size\
    \ = paren_groups_remaining_remaining_remaining_remaining + paren_groups_remaining_remaining.size\n\
    \        val paren_groups_remaining_remaining_remaining_remaining_remaining =\
    \ paren_groups_remaining_remaining_remaining_remaining_size - paren_groups_remaining_remaining_remaining_remaining.filter(_.contains(\"\
    )\")).size\n        val paren_groups_remaining_remaining_remaining_remaining_remaining_size\
    \ = paren_groups_remaining_remaining_remaining_remaining_remaining + paren_groups_remaining_remaining.size\n\
    \        val paren_groups_remaining_remaining_remaining_remaining_remaining_remaining\
    \ = paren_groups_remaining_remaining_remaining_remaining_remaining_remaining_size\
    \ - paren_groups_remaining_remaining_remaining_remaining_remaining.filter(_.contains(\"\
    )\")).size\n        val paren_groups_remaining_remaining_remaining_remaining_remaining_remaining_size\
    \ = paren_groups_remaining_remaining_remaining_remaining_remaining_remaining +\
    \ paren_groups_remaining_remaining.size\n        val paren_groups_remaining_remaining_remaining_remaining_remaining_remaining_remaining\
    \ = paren_groups_remaining_remaining_remaining_remaining_remaining_remaining_size\
    \ - paren_groups_remaining_remaining_remaining_remaining_remaining.filter(_.contains(\"\
    )\")).size\n        val paren_groups_remaining_remaining_remaining_remaining_remaining_remaining_remaining_size\
    \ = paren_groups_remaining_remaining_remaining_remaining_remaining_remaining_remaining_remaining\
    \ + paren_groups_remaining_remaining.size\n        val paren_groups_remaining_remaining_remaining_remaining_remaining_remaining_remaining_remaining_remaining\
    \ = paren_groups_remaining_remaining_remaining_remaining_remaining_remaining_remaining_remaining_size\
    \ - paren_groups_remaining_remaining_remaining_remaining_remaining_remaining.filter(_.contains(\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphkxch3yu.scala:27:308 ----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_remaining_remaining_remaining_remaining_remaining_remaining_remaining_remaining\e\
    [0m = paren_groups_remaining_remaining_remaining_remaining_remaining_remaining_remaining_remaining_size\
    \ - paren_groups_remaining_remaining_remaining_remaining_remaining_remaining.filter(_.contains(\"\
    )\n\e[31m\e[31m   |\e[0m                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                       unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmphkxch3yu.scala:29:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphkxch3yu.scala:15:100 -----------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_remaining\e\
    [0m = paren_groups_remaining_size - paren_groups_remaining.filter(_.contains(\e\
    [31m\")\"\e[0m)).size\n\e[31m\e[31m   |\e[0m                                 \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     value filter is not a member\
    \ of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphkxch3yu.scala:24:92 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_remaining_remaining_remaining_remaining_remaining_size\e\
    [0m = paren_groups_remaining_remaining_remaining_remaining_remaining_remaining\
    \ + paren_groups_remaining_remaining.size\n\e[31m\e[31m   |\e[0m              "
  stdout: ''
  timestamp: 1659795484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(paren_group => paren_group.split(\"\
    \\\\)\"))\n        paren_group_strings.filter(paren_group => paren_group.length\
    \ == paren_group(0).length).map(paren_group => paren_group(0))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdj2o9si8.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_group_strings.filter(\e\
    [36mparen_group\e[0m => paren_group.length == paren_group(\e[31m0\e[0m).length).map(\e\
    [36mparen_group\e[0m => paren_group(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_parens = paren_groups.filter(_.startsWith(\"\
    (\"))\n        val close_parens = paren_groups.filter(_.endsWith(\")\"))\n   \
    \     val open_parens_count = open_parens.map(_.length).sum\n        val close_parens_count\
    \ = close_parens.map(_.length).sum\n        val open_parens_not_nested = open_parens.filter(_.contains(\"\
    (\"))\n        val close_parens_not_nested = close_parens.filter(_.contains(\"\
    )\"))\n        val open_parens_not_nested_count = open_parens_not_nested.map(_.length).sum\n\
    \        val close_parens_not_nested_count = close_parens_not_nested.map(_.length).sum\n\
    \        val open_parens_not_nested_not_balanced = open_parens_not_nested.filter(_.contains(\"\
    {\"))\n        val close_parens_not_nested_not_balanced = close_parens_not_nested.filter(_.contains(\"\
    }\"))\n        val open_parens_not_nested_not_balanced_count = open_parens_not_nested_not_balanced.map(_.length).sum\n\
    \        val close_parens_not_nested_not_balanced_count = close_parens_not_nested_not_balanced.map(_.length).sum\n\
    \        val open_parens_not_nested_not_balanced_not_nested = open_parens_not_nested_not_balanced.filter(_.contains(\"\
    {\"))\n        val close_parens_not_nested_not_balanced_not_nested = close_parens_not_nested_not_balanced.filter(_.contains(\"\
    }\"))\n        val open_parens_not_nested_not_balanced_not_nested_count = open_parens_not_nested_not_balanced_not_nested.map(_.length).sum\n\
    \        val close_parens_not_nested_not_balanced_not_nested_count = close_parens_not_nested_not_balanced_not_nested.map(_.length).sum\n\
    \        val open_parens_not_nested_not_balanced_not_nested_not_nested = open_parens_not_nested_not_balanced_not_nested.filter(_.contains(\"\
    {\"))\n        val close_parens_not_nested_not_balanced_not_nested_not_nested\
    \ = close_parens_not_nested_not_balanced_not_nested.filter(_.contains(\"}\"))\n\
    \        val open_parens_not_nested_not_balanced_not_nested_not_nested_count =\
    \ open_parens_not_nested_not_balanced_not_nested_not_nested.map(_.length).sum\n\
    \        val close_parens_not_nested_not_balanced_not_nested_not_nested_count\
    \ = close_parens_not_nested_not_balanced_not_nested_not_nested.map(_.length).sum\n\
    \        val open_parens_not_nested_not_balance\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmlgtipyj.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmlgtipyj.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_list\
    \ = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list2 =\
    \ paren_groups_size.map(x => List(x))\n        val paren_groups_size_list3 = paren_groups_size.map(x\
    \ => List(x))\n        val paren_groups_size_list4 = paren_groups_size.map(x =>\
    \ List(x))\n        val paren_groups_size_list5 = paren_groups_size.map(x => List(x))\n\
    \        val paren_groups_size_list6 = paren_groups_size.map(x => List(x))\n \
    \       val paren_groups_size_list7 = paren_groups_size.map(x => List(x))\n  \
    \      val paren_groups_size_list8 = paren_groups_size.map(x => List(x))\n   \
    \     val paren_groups_size_list9 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list10 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list11 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list12 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list13 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list14 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list15 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list16 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list17 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list18 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list19 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list20 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list21 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list22 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list23 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list24 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list25 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list26 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc8nm7qqk.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:13:55\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:14:56\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list2\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:15:56\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list3\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:16:56\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list4\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8nm7qqk.scala:17:56\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list5\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    "
  stdout: ''
  timestamp: 1659795469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"\
    )\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \" \"\
    )\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"\\\\\"\
    )\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \")\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \" \")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"\\\\\"\
    )\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \")\"\
    )\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \" \"\
    )\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \")\"\
    )\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \" \"\
    )\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \")\"\
    )\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \" \"\
    )\n        val paren_groups_flat25 = paren_groups_flat24.filterNot(_ == \"\\\\\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5930ttnq.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp5930ttnq.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp5930ttnq.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp5930ttnq.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp5930ttnq.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp5930ttnq.scala:18:62 -----------------------------------------\e\
    [0m\e[0m"
  stdout: ''
  timestamp: 1659795444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_open = mutable.ListBuffer[String]()\n        val paren_group_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_group_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_size = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_depth = mutable.ListBuffer[Int]()\n        val paren_group_closed_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_depth_max = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_depth_max = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_depth_min = mutable.ListBuffer[Int]()\n        val paren_group_closed_depth_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_depth_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_depth_sum = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_depth_avg = mutable.ListBuffer[Int]()\n        val paren_group_closed_depth_avg\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_depth_min = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_depth_min = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_depth_sum = mutable.ListBuffer[Int]()\n        val paren_group_closed_depth_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_depth_avg = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_depth_avg = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_depth_min = mutable.ListBuffer[Int]()\n        val paren_group_closed_depth_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_depth_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_depth_sum = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_depth_avg = mutable.ListBuffer[Int]()\n        val paren_group_closed_depth_avg\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_depth_min = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_depth_min = mutable.ListBuffer\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubkhrhid.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_depth_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_depth_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_depth_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubkhrhid.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed_depth_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed_depth_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_closed_depth_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubkhrhid.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_depth_sum\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_depth_sum is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_depth_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubkhrhid.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed_depth_sum\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed_depth_sum is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_closed_depth_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloade"
  stdout: ''
  timestamp: 1659795486
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer.empty[String]\n\
    \        val paren_group_open = mutable.ListBuffer.empty[String]\n        val\
    \ paren_group_closed = mutable.ListBuffer.empty[String]\n        val paren_group_open_index\
    \ = mutable.ListBuffer.empty[Int]\n        val paren_group_closed_index = mutable.ListBuffer.empty[Int]\n\
    \        val paren_group_open_index = paren_group_open_index.init\n        val\
    \ paren_group_closed_index = paren_group_closed_index.init\n        val paren_group_open\
    \ = paren_group_open.init\n        val paren_group_closed = paren_group_closed.init\n\
    \        val paren_group_open_index = paren_group_open_index.init\n        val\
    \ paren_group_closed_index = paren_group_closed_index.init\n        val paren_group_open\
    \ = paren_group_open.init\n        val paren_group_closed = paren_group_closed.init\n\
    \        val paren_group_open_index = paren_group_open_index.init\n        val\
    \ paren_group_closed_index = paren_group_closed_index.init\n        val paren_group_open\
    \ = paren_group_open.init\n        val paren_group_closed = paren_group_closed.init\n\
    \        val paren_group_open_index = paren_group_open_index.init\n        val\
    \ paren_group_closed_index = paren_group_closed_index.init\n        val paren_group_open\
    \ = paren_group_open.init\n        val paren_group_closed = paren_group_closed.init\n\
    \        val paren_group_open_index = paren_group_open_index.init\n        val\
    \ paren_group_closed_index = paren_group_closed_index.init\n        val paren_group_open\
    \ = paren_group_open.init\n        val paren_group_closed = paren_group_closed.init\n\
    \        val paren_group_open_index = paren_group_open_index.init\n        val\
    \ paren_group_closed_index = paren_group_closed_index.init\n        val paren_group_open\
    \ = paren_group_open.init\n        val paren_group_closed = paren_group_closed.init\n\
    \        val paren_group_open_index = paren_group_open_index.init\n        val\
    \ paren_group_closed_index = paren_group_closed_index.init\n        val paren_group_open\
    \ = paren_group_open.init\n        val paren_group_closed = paren_group_closed.init\n\
    \        val paren_group_open_index = paren_group_open_index.init\n        val\
    \ paren_group_closed_index = paren_group_closed_index.init\n        val \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8ji49cdi.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp8ji49cdi.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_index\e\
    [0m = paren_group_open_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ji49cdi.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed_index\e\
    [0m = paren_group_closed_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_closed_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ji49cdi.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open\e[0m =\
    \ paren_group_open.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open is already defined as \e[33mvalue\e[0m \e\
    [35mparen_group_open\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8ji49cdi.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed\e[0m\
    \ = paren_group_closed.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_with_spaces = paren_groups_with_spaces_trimmed.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_trimmed_with_spaces.map(x => x.trim())\n        val\
    \ paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces = paren_groups_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces.map(x =>\
    \ x.trim())\n        val paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\" \", \"\"))\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8xv3aerb.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_stack = mutable.Stack[String]()\n        val paren_group_open\
    \ = mutable.HashSet[String]()\n        paren_string.foreach { x =>\n         \
    \   val open_brace = x.toString.indexOf('(')\n            val close_brace = x.toString.lastIndexOf(')')\n\
    \            val open_paren = x.toString.indexOf('(')\n            val close_paren\
    \ = x.toString.lastIndexOf(')')\n            if (open_paren == -1 && close_paren\
    \ == -1) {\n                paren_groups += x\n            } else if (open_paren\
    \ != -1 && close_paren != -1) {\n                if (open_paren == close_brace)\
    \ {\n                    paren_group_stack += x\n                } else if (open_paren\
    \ == close_brace + 1) {\n                    paren_group_stack += x\n        \
    \            paren_groups += paren_group_stack.toList\n                    paren_group_stack.clear()\n\
    \                } else {\n                    paren_group_stack += x\n      \
    \              paren_groups += paren_group_stack.toList\n                    paren_group_stack.clear()\n\
    \                }\n            } else if (open_paren != -1 && close_paren ==\
    \ -1) {\n                if (open_paren == close_brace) {\n                  \
    \  paren_group_stack += x\n                    paren_groups += paren_group_stack.toList\n\
    \                    paren_group_stack.clear()\n                } else {\n   \
    \                 paren_group_stack += x\n                    paren_groups +=\
    \ paren_group_stack.toList\n                    paren_group_stack.clear()\n  \
    \              }\n            } else if (open_paren == -1 && close_paren != -1)\
    \ {\n                if (open_paren == close_brace) {\n                    paren_group_stack\
    \ += x\n                    paren_groups += paren_group_stack.toList\n       \
    \             paren_group_stack.clear()\n                } else {\n          \
    \          paren_group_stack += x\n                    paren_groups += paren_group_stack.toList\n\
    \                    paren_group_stack.clear()\n                }\n          \
    \  } else if (open_paren != -1 && close_paren != -1) {\n                if (open_paren\
    \ == close_brace) {\n                    paren_group_stack += x\n            \
    \        paren_groups += paren_group_stack.toList\n                    paren_group_stack.clear()\n\
    \                } else {\n                    paren_group_stack += x\n      \
    \              paren_groups += paren_group_stack.toList\n                    paren_group_stack.clear()\n\
    \                }\n            }\n        }\n        paren_groups += paren_group_stack.toList\n\
    \        paren_groups\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6vz9hm3v.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6vz9hm3v.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_stack\e[0m =\
    \ mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6vz9hm3v.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_open\e[0m = mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795486
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_group_strings_sorted = paren_group_strings.sortWith((x,y)\
    \ => x.compareTo(y) == -1)\n        val paren_group_strings_sorted_reversed =\
    \ paren_group_strings_sorted.reverse\n        val paren_group_strings_sorted_reversed_flat\
    \ = paren_group_strings_sorted_reversed.flatMap(x => x.split(\"\\\\)\"))\n   \
    \     val paren_group_strings_sorted_reversed_flat_sorted = paren_group_strings_sorted_reversed_flat.sortWith((x,y)\
    \ => x.compareTo(y) == -1)\n        val paren_group_strings_sorted_reversed_flat_sorted_reversed\
    \ = paren_group_strings_sorted_reversed_flat_sorted.reverse\n        val paren_group_strings_sorted_reversed_flat_sorted_reversed_flat\
    \ = paren_group_strings_sorted_reversed_flat_sorted_reversed.flatMap(x => x.split(\"\
    \\\\)\"))\n        val paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted\
    \ = paren_group_strings_sorted_reversed_flat_sorted_reversed_flat.sortWith((x,y)\
    \ => x.compareTo(y) == -1)\n        val paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed\
    \ = paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted.reverse\n\
    \        val paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat\
    \ = paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat_sorted\
    \ = paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat_sorted.sortWith((x,y)\
    \ => x.compareTo(y) == -1)\n        val paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed\
    \ = paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed.reverse\n\
    \        val paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat\
    \ = paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat.flatMap(x\
    \ => x.split(\"\\\\)\"))\n        val paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat_sorted\
    \ = paren_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgj8mqn3p.scala:21:97 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat\e\
    [0m = paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat.flatMap(\e\
    [36mx\e[0m => x.split(\e[31m\"\\\\)\"\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \           ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m \
    \  |\e[0m  paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpgj8mqn3p.scala:22:104 --------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat_sorted\e\
    [0m = paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat_sorted.sortWith((\e\
    [36mx\e[0m,\e[36my\e[0m) => x.compareTo(y) == -\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpgj8mqn3p.scala:23:113 --------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed\e\
    [0m = paren_group_strings_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed_flat_sorted_reversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e"
  stdout: ''
  timestamp: 1659795490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_closed_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\"))\n        paren_groups_with_closed_braces.filter(x => x.isEmpty).map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr_tbsibk.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        paren_groups_with_closed_braces.filter(\e\
    [36mx\e[0m => x.isEmpty).map(\e[36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\
    \"\e[0m).replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\"(\"\
    , \" ( \"))).sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.map(x => x.replace(\"\
    )\", \" ) \")).sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \" ( \"))).sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.map(x\
    \ => x.replace(\")\", \" ) \")).sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \" ( \"))).sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.map(x\
    \ => x.replace(\")\", \" ) \")).sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \" \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3vbqxxy3.scala:16:159 --------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted.map(\e[36mx\e[0m => x.replace(\e\
    [31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).sortBy(x => x)\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                                                                            \
    \     ^\e[0m\n\e[31m   |\e[0m                                             '}'\
    \ expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3vbqxxy3.scala:18:197\
    \ --------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).sortBy(x => x)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0m                                             '}' expected, but ')' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3vbqxxy3.scala:20:235 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).sortBy(x => x)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                   eof expected, but ')' found\n\e[31m\e[31m-- ["
  stdout: ''
  timestamp: 1659795489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Use a stack to keep track of which\
    \ parenthesis are currently open\n        val paren_stack = mutable.Stack[String]()\n\
    \        // Use a list to keep track of which parenthesis are currently open\n\
    \        val paren_list_stack = mutable.ListBuffer[String]()\n        // Keep\
    \ track of which parenthesis are currently open\n        var paren_open = false\n\
    \        // Keep track of which parenthesis are currently closed\n        var\
    \ paren_closed = false\n        // Keep track of which parenthesis are currently\
    \ open\n        var paren_list_open = false\n        // Keep track of which parenthesis\
    \ are currently closed\n        var paren_list_closed = false\n        // Keep\
    \ track of which parenthesis are currently open\n        var paren_list_open =\
    \ false\n        // Keep track of which parenthesis are currently closed\n   \
    \     var paren_list_closed = false\n        // Keep track of which parenthesis\
    \ are currently open\n        var paren_list_open = false\n        // Keep track\
    \ of which parenthesis are currently closed\n        var paren_list_closed = false\n\
    \        // Keep track of which parenthesis are currently open\n        var paren_list_open\
    \ = false\n        // Keep track of which parenthesis are currently closed\n \
    \       var paren_list_closed = false\n        // Keep track of which parenthesis\
    \ are currently open\n        var paren_list_open = false\n        // Keep track\
    \ of which parenthesis are currently closed\n        var paren_list_closed = false\n\
    \        // Keep track of which parenthesis are currently open\n        var paren_list_open\
    \ = false\n        // Keep track of which parenthesis are currently closed\n \
    \       var paren_list_closed = false\n        // Keep track of which parenthesis\
    \ are currently open\n        var paren_list_open = false\n        // Keep track\
    \ of which parenthesis are currently closed\n        var paren_list_closed = false\n\
    \        // Keep track of which parenthesis are currently open\n        var paren_list_open\
    \ = false\n        // Keep track of which parenthesis are currently closed\n \
    \       var paren_list_closed = false\n        // Keep track of which parenthesis\
    \ are currently open\n        var paren_list_open = false\n        // Keep track\
    \ of which parenthesis are currently closed\n        var paren_list_closed = false\n\
    \        // Keep track of which parenthesis are currently open\n        var paren_list_open\
    \ = false\n        // Keep track of which parenthesis are currently closed\n \
    \       var paren_list_closed = false\n        // Keep track of which parenthesis\
    \ are currently open\n        var paren_list_open = false\n        // Keep track\
    \ of which parenthesis are currently closed\n        var paren_list_closed = false\n\
    \        // Keep track of which parenthesis are currently open\n        var paren_list_open\
    \ = false\n        // Keep track of which parenthesis are currently closed\n \
    \       var paren_list_closed = false\n        // \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl_i2gdyq.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mparen_list_open\e[0m = \e\
    [31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_list_open is already defined as \e[33mvariable\e[0m \e[35mparen_list_open\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl_i2gdyq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mvar\e[0m \e[36mparen_list_closed\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mparen_list_closed is already defined as \e[33mvariable\e[0m \e[35mparen_list_closed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl_i2gdyq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mvar\e[0m \e[36mparen_list_open\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mparen_list_open is already defined as \e[33mvariable\e[0m \e[35mparen_list_open\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl_i2gdyq.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mvar\e[0m \e[36mparen_list_closed\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mparen_list_closed is already defined as \e[33mvariable\e[0m \e[35mparen_list_closed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl_i2gdyq.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mvar\e[0m \e[36mparen_list_open\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mparen_"
  stdout: ''
  timestamp: 1659795490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.length < y.length)\n        val paren_groups_with_spaces_sorted_with_open_brackets\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"(\", \"\\\\(\"))\n  \
    \      val paren_groups_with_spaces_sorted_with_open_brackets_without_spaces =\
    \ paren_groups_with_spaces_sorted_with_open_brackets.map(x => x.replace(\")\"\
    , \"\\\\)\"))\n        val paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_brackets_without_spaces.map(x =>\
    \ x.replace(\")\", \"\\\\)\"))\n        val paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\\\\)\"))\n        val paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\\\\)\"))\n        val paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\\\\)\"))\n        val paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\\\\)\"))\n        val paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb7zws30f.scala:19:140 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\\\\)\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpb7zws30f.scala:20:155 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\\\\)\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  paren_groups_with_spaces_sorted_with_open_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpb7zws30f.scala:21:170 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_gr"
  stdout: ''
  timestamp: 1659795491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_paren_groups = paren_groups.filter(_.contains(\"\
    (\"))\n        val close_paren_groups = paren_groups.filter(_.contains(\")\"))\n\
    \        val open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_count = open_paren_groups.length\n        val close_paren_groups_count\
    \ = close_paren_groups.length\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr6zvu_mg.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr6zvu_mg.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopen_paren_groups_count\e[0m = open_paren_groups.length\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mopen_paren_groups_count is already defined as \e[33mvalue\e[0m\
    \ \e[35mopen_paren_groups_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr6zvu_mg.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclose_paren_groups_count\e\
    [0m = close_paren_groups.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_paren_groups_count is already defined as \e[33mvalue\e\
    [0m \e[35mclose_paren_groups_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr6zvu_mg.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopen_paren_groups_count\e\
    [0m = open_paren_groups.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_paren_groups_count is already defined as \e[33mvalue\e\
    [0m \e[35mopen_paren_groups_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr6zvu_mg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mclose_paren_groups_count\e\
    [0m = close_paren_groups.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_paren_groups_count is already defined as "
  stdout: ''
  timestamp: 1659795492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\s\", \"\"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s\", \" \"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpffyl12jm.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          Not found: paren_groups_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpffyl12jm.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_with_brackets\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"[\").replace(\"\
    )\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets.map(x => x.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets.map(x => x.replace(\"\
    (\", \"[\").replace(\")\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"(\").replace(\"]\", \")\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"(\", \"[\").replace(\")\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"(\").replace(\"]\", \")\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj824usb2.scala:18:142 -----------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"[\"\e[0m, \e[31m\"(\"\e[0m).replace(\e[31m\"]\"\
    \e[0m, \e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj824usb2.scala:19:170\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj824usb2.scala:20:5\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659795491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Initialize a list to store all the\
    \ groups of parentheses\n        var groups: List[String] = Nil\n        // Initialize\
    \ a stack to store all the parentheses\n        var stack: List[String] = Nil\n\
    \        // Iterate through the string and add all the parentheses to the stack\n\
    \        for (i <- 0 until paren_string.length) {\n            if (paren_string(i)\
    \ == '(') {\n                stack = stack :+ paren_string(i)\n            } else\
    \ if (paren_string(i) == ')') {\n                groups = groups :+ stack.reverse.mkString\n\
    \                stack = Nil\n            } else {\n                stack = stack\
    \ :+ paren_string(i)\n            }\n        }\n        // Add the last group\
    \ to the list\n        groups = groups :+ stack.reverse.mkString\n        return\
    \ groups\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsal__f0k.scala:18:45\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                stack = stack\
    \ :+ paren_string(i)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    Char\n\e[31m  \
    \ |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsal__f0k.scala:23:45 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                stack = stack :+ paren_string(i)\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Found:    Char\n\e[31m   |\e[0m   \
    \                              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_remainder\
    \ = paren_groups_count % paren_groups.length\n        val paren_groups_remainder_count\
    \ = paren_groups_remainder + 1\n        val paren_groups_remainder_strings = paren_groups.take(paren_groups_remainder_count)\n\
    \        val paren_groups_remainder_strings_count = paren_groups_remainder_strings.length\n\
    \        val paren_groups_remainder_strings_remainder = paren_groups_remainder_strings_count\
    \ % paren_groups_remainder_strings.length\n        val paren_groups_remainder_strings_remainder_count\
    \ = paren_groups_remainder_strings_remainder + 1\n        val paren_groups_remainder_strings_remainder_strings\
    \ = paren_groups_remainder_strings.take(paren_groups_remainder_strings_remainder_count)\n\
    \        val paren_groups_remainder_strings_remainder_strings_count = paren_groups_remainder_strings_remainder_strings.length\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder = paren_groups_remainder_strings_remainder_strings_count\
    \ % paren_groups_remainder_strings_remainder_strings.length\n        val paren_groups_remainder_strings_remainder_strings_remainder_count\
    \ = paren_groups_remainder_strings_remainder_strings_remainder + 1\n        val\
    \ paren_groups_remainder_strings_remainder_strings_remainder_strings = paren_groups_remainder_strings_remainder_strings.take(paren_groups_remainder_strings_remainder_strings_remainder_count)\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder_strings_count\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings.length\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings_count %\
    \ paren_groups_remainder_strings_remainder_strings_remainder_strings.length\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_count\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder\
    \ + 1\n        val paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings.take(paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_count)\n\
    \        val paren_groups_remainder_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8nesd0qi.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8nesd0qi.scala:27:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings\e\
    [0m = paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings.take(paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_count)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                           ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8nesd0qi.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replaceAll(\"\
    \\\\)\", \"\"))\n        val paren_groups_with_open_braces_without_spaces = paren_groups_with_open_braces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_duplicates\
    \ = paren_groups_with_open_braces_without_spaces.distinct\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates.map(x => x.replaceAll(\"\
    \\\\(\", \"(\"))\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces.distinct\n\
    \        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces.map(x\
    \ => x.replaceAll(\"\\\\)\", \")\"))\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates.map(x\
    \ => x.replaceAll(\"\\\\)\", \")\"))\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn4_nssqd.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn4_nssqd.scala:18:146\
    \ --------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces.map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\)\"\e[0m, \e[31m\")\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpn4_nssqd.scala:19:161 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces.map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\s+\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\n\
    \e[31m   |\e[0m\e[0m "
  stdout: ''
  timestamp: 1659795492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\"(\"\
    , \" ( \"))).map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \" ( \"))).map(x => x.replace(\")\", \" ) \")).map(x =>\
    \ x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \" ( \"))).map(x => x.replace(\")\", \" ) \")).map(x =>\
    \ x.replace(\")\", \" ) \")).map(x => x.replace(\")\", \" ) \"))\n        val\
    \ paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \" ( \"))).map(x => x.replace(\")\", \" ) \")).map(x =>\
    \ x.replace(\")\", \" ) \")).map(x => x.replace(\")\", \" ) \")).map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\"\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpue48ay0s.scala:16:159 --------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted.map(\e[36mx\e[0m => x.replace(\e\
    [31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).map(x => x.replace(\e[31m\")\"\e[0m, \e\
    [31m\" ) \"\e[0m))\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                            \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                       '}' expected, but ')' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpue48ay0s.scala:18:197 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).map(x => x.replace(\e\
    [31m\")\"\e[0m, \e[31m\" ) \"\e[0m)).map(x => x.replace(\e[31m\")\"\e[0m, \e[31m\"\
    \ ) \"\e[0m))\n\e[31m\e[31m   |\e[0m                                         \
    \                                                                            \
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0m                                             '}' expected,\
    \ but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpue48ay0s.scala:19:204\
    \ --------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).map(x => x.replace(\e\
    [31m\")\"\e[0m, \e[31m\" ) \"\e[0m)).map(x => x.replace(\e[31m\")\"\e[0m, \e[31m\"\
    \ ) \"\e[0m)).map(x => x.replace(\e[31m\")\"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                     "
  stdout: ''
  timestamp: 1659795492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_sorted\
    \ = paren_groups_with_open_braces.sortBy(x => x)\n        val paren_groups_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted.map(x => x.replace(\")\", \"\").replace(\"\
    (\", \"\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces.sortBy(x => x)\n   \
    \     val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.sortBy(x\
    \ => x)\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_brace\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpynl7tmap.scala:18:116 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\e\
    [0m = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"(\"\
    \e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                              \
    \                                                                            \
    \          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m  \
    \ |\e[0m  paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpynl7tmap.scala:19:123 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\e\
    [0m = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpynl7tmap.scala:21:147 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\e\
    [0m = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_b"
  stdout: ''
  timestamp: 1659795494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer.empty[String]\n\
    \        val paren_stack = mutable.ListBuffer.empty[String]\n        paren_string.foreach\
    \ { char =>\n            if (char == '(') {\n                paren_stack += char\n\
    \            } else if (char == ')') {\n                if (paren_stack.isEmpty)\
    \ {\n                    paren_groups += paren_stack.toList\n                \
    \    paren_stack = mutable.ListBuffer.empty[String]\n                } else {\n\
    \                    paren_stack -= char\n                }\n            }\n \
    \       }\n        if (paren_stack.isEmpty) {\n            paren_groups += paren_stack.toList\n\
    \        }\n        paren_groups.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9d_klrie.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9d_klrie.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9d_klrie.scala:19:34 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    paren_stack = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var paren_open = 0\n        var paren_close = 0\n        var paren_group\
    \ = \"\"\n        var paren_group_open = 0\n        var paren_group_close = 0\n\
    \        var paren_group_open_brace = 0\n        var paren_group_close_brace =\
    \ 0\n        var paren_group_open_brace_count = 0\n        var paren_group_close_brace_count\
    \ = 0\n        var paren_group_open_brace_count_in_paren = 0\n        var paren_group_close_brace_count_in_paren\
    \ = 0\n        var paren_group_open_brace_count_in_paren_after_paren = 0\n   \
    \     var paren_group_close_brace_count_in_paren_after_paren = 0\n        var\
    \ paren_group_open_brace_count_in_paren_after_paren_after_paren = 0\n        var\
    \ paren_group_close_brace_count_in_paren_after_paren_after_paren = 0\n       \
    \ var paren_group_open_brace_count_in_paren_after_paren_after_paren_after_paren\
    \ = 0\n        var paren_group_close_brace_count_in_paren_after_paren_after_paren_after_paren\
    \ = 0\n        var paren_group_open_brace_count_in_paren_after_paren_after_paren_after_paren_after_paren\
    \ = 0\n        var paren_group_close_brace_count_in_paren_after_paren_after_paren_after_paren_after_paren\
    \ = 0\n        var paren_group_open_brace_count_in_paren_after_paren_after_paren_after_paren_after_paren_after_paren\
    \ = 0\n        var paren_group_close_brace_count_in_paren_after_paren_after_paren_after_paren_after_paren_after_paren\
    \ = 0\n        var paren_group_open_brace_count_in_paren_after_paren_after_paren_after_paren_after_paren_after_paren_after_paren\
    \ = 0\n        var paren_group_close_brace_count_in_paren_after_paren_after_paren_after_paren_after_paren_after_paren_after_paren\
    \ = 0\n        var paren_group_open_brace_count_in_paren_after_paren_after_paren_after_paren_after_paren_after_paren_after_paren_after_paren\
    \ = 0\n        var paren_group_close_brace_count_in_paren_after_paren_after_paren_after_paren_after_paren_after_paren_after_paren_after_paren\
    \ = 0\n        var paren_group_open_brace_count_in_paren_after_paren_after_paren_after_paren_after_paren_after_paren_after_paren_after_paren_after_paren\
    \ = 0\n        var paren_group_close_brace_count_in_paren_after_paren\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpri5sxay4.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpri5sxay4.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpri5sxay4.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_stack = mutable.Stack[String]()\n        paren_string.foreach(c\
    \ => {\n            c match {\n                case '(' -> paren_group_stack push\
    \ c\n                case ')' =>\n                    paren_group_stack.pop\n\
    \                case ' ' =>\n                    paren_groups += paren_group_stack.toList\n\
    \                    paren_group_stack = mutable.Stack[String]()\n           \
    \ }\n        })\n        paren_groups += paren_group_stack.toList\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpopqny1mp.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m \e[31m')'\e[0m =>\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                '=>'\
    \ expected, but 'case' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpopqny1mp.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpopqny1mp.scala:12:32 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_group_stack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpopqny1mp.scala:15:46 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mcase\e[0m \e[31m'('\e[0m -> paren_group_stack\
    \ push c\n\e[31m\e[31m   |\e[0m                                              ^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Not found: push\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpopqny1mp.scala:20:40\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                    paren_group_stack\
    \ = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659795492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.filterNot(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiod5qus1.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiod5qus1.scala:13:68\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_flat2\e[0m = paren_groups_flat.filterNot(\e[36mx\e[0m => x.contains(\e\
    [31m\"(\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                  value contains is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpiod5qus1.scala:14:69 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                                                        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value contains is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiod5qus1.scala:15:69 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(\e[36mx\e[0m => x.contains(\e[31m\")\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \ value contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpiod5qus1.scala:16:69 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m = paren_groups_flat4.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                                                        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value contains is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiod5qus1.scala:17:69 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filte"
  stdout: ''
  timestamp: 1659795499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer.empty[String]\n\
    \        var paren_count = 0\n        var open_brace_count = 0\n        var close_brace_count\
    \ = 0\n        var paren_open = false\n        var paren_close = false\n     \
    \   var open_brace_open = false\n        var close_brace_open = false\n      \
    \  var open_brace_close = false\n        var close_brace_close = false\n     \
    \   var open_brace_open = false\n        var close_brace_open = false\n      \
    \  var open_brace_close = false\n        var close_brace_close = false\n     \
    \   var open_brace_open = false\n        var close_brace_open = false\n      \
    \  var open_brace_close = false\n        var close_brace_close = false\n     \
    \   var open_brace_open = false\n        var close_brace_open = false\n      \
    \  var open_brace_close = false\n        var close_brace_close = false\n     \
    \   var open_brace_open = false\n        var close_brace_open = false\n      \
    \  var open_brace_close = false\n        var open_brace_open = false\n       \
    \ var close_brace_open = false\n        var open_brace_close = false\n       \
    \ var open_brace_open = false\n        var close_brace_open = false\n        var\
    \ open_brace_close = false\n        var open_brace_open = false\n        var close_brace_open\
    \ = false\n        var open_brace_close = false\n        var open_brace_open =\
    \ false\n        var close_brace_open = false\n        var open_brace_close =\
    \ false\n        var open_brace_open = false\n        var close_brace_open = false\n\
    \        var open_brace_close = false\n        var open_brace_open = false\n \
    \       var close_brace_open = false\n        var open_brace_close = false\n \
    \       var open_brace_open = false\n        var close_brace_open = false\n  \
    \      var open_brace_close = false\n        var open_brace_open = false\n   \
    \     var close_brace_open = false\n        var open_brace_close = false\n   \
    \     var open_brace_open = false\n        var close_brace_open = false\n    \
    \    var open_brace_close = false\n        var open_brace_open = false\n     \
    \   var close_brace_open = false\n        var open_brace_close = false\n     \
    \   var open_brace_open = false\n        var close_brace_open = false\n      \
    \  var open_brace_close = false\n        var open_brace_open = false\n       \
    \ var close_brace_open = false\n        var open_brace_close = false\n       \
    \ var open_brace_open = false\n        var close_brace_open = false\n        var\
    \ open_brace_close = false\n        var open\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzo2fork.scala:76:4 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfzo2fork.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopen_brace_open\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mopen_brace_open is already\
    \ defined as \e[33mvariable\e[0m \e[35mopen_brace_open\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfzo2fork.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mclose_brace_open\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mclose_brace_open is already\
    \ defined as \e[33mvariable\e[0m \e[35mclose_brace_open\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfzo2fork.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopen_brace_close\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mopen_brace_close is already\
    \ defined as \e[33mvariable\e[0m \e[35mopen_brace_close\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfzo2fork.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mclose_brace_close\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mclose_brace_close is already\
    \ defined as \e[33mvariable\e[0m \e[35mclose_brace_close\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfzo2fork.scala:25:1"
  stdout: ''
  timestamp: 1659795496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index = mutable.ListBuffer[Int]()\n        val paren_open_index2\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index2 = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index3 = mutable.ListBuffer[Int]()\n        val paren_closed_index3\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_index4 = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index4 = mutable.ListBuffer[Int]()\n        val paren_open_index5\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index5 = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index6 = mutable.ListBuffer[Int]()\n        val paren_closed_index6\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_index7 = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index7 = mutable.ListBuffer[Int]()\n        val paren_open_index8\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index8 = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index9 = mutable.ListBuffer[Int]()\n        val paren_closed_index9\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_index10 = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index10 = mutable.ListBuffer[Int]()\n        val paren_open_index11\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index11 = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index12 = mutable.ListBuffer[Int]()\n        val paren_closed_index12\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_index13 = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index13 = mutable.ListBuffer[Int]()\n        val paren_open_index14\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index14 = mutable.ListBuffer[Int]()\n\
    \        val paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz2xhp5ih.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2xhp5ih.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpz2xhp5ih.scala:12:25 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpz2xhp5ih.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2xhp5ih.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_open_index\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2xhp5ih.scala:15:33\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_closed_index\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e["
  stdout: ''
  timestamp: 1659795495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filterNot(x => x.contains(\")(\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.filterNot(x => x.contains(\")(\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcgy3qv7f.scala:13:68 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(\e[36mx\e[0m => x.contains(\e[31m\"(\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  value\
    \ contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcgy3qv7f.scala:14:69\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(\e[36mx\e[0m => x.contains(\e\
    [31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                   value contains is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpcgy3qv7f.scala:15:69 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m = paren_groups_flat3.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\")(\"\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                                                         ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  value contains is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcgy3qv7f.scala:16:69\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_flat5\e[0m = paren_groups_flat4.filterNot(\e[36mx\e[0m => x.contains(\e\
    [31m\")(\"\e[0m))\n\e[31m\e[31m   |\e[0m                                     \
    \                              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    value contains is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpcgy3qv7f.scala:17:69 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m = paren_groups_flat5.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\")(\"\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                                                         ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              "
  stdout: ''
  timestamp: 1659795503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size2\
    \ = paren_groups_size * paren_groups_size\n        val paren_groups_size3 = paren_groups_size2\
    \ * paren_groups_size\n        val paren_groups_size4 = paren_groups_size3 * paren_groups_size\n\
    \        val paren_groups_size5 = paren_groups_size4 * paren_groups_size\n   \
    \     val paren_groups_size6 = paren_groups_size5 * paren_groups_size\n      \
    \  val paren_groups_size7 = paren_groups_size6 * paren_groups_size\n        val\
    \ paren_groups_size8 = paren_groups_size7 * paren_groups_size\n        val paren_groups_size9\
    \ = paren_groups_size8 * paren_groups_size\n        val paren_groups_size10 =\
    \ paren_groups_size9 * paren_groups_size\n        val paren_groups_size11 = paren_groups_size10\
    \ * paren_groups_size\n        val paren_groups_size12 = paren_groups_size11 *\
    \ paren_groups_size\n        val paren_groups_size13 = paren_groups_size12 * paren_groups_size\n\
    \        val paren_groups_size14 = paren_groups_size13 * paren_groups_size\n \
    \       val paren_groups_size15 = paren_groups_size14 * paren_groups_size\n  \
    \      val paren_groups_size16 = paren_groups_size15 * paren_groups_size\n   \
    \     val paren_groups_size17 = paren_groups_size16 * paren_groups_size\n    \
    \    val paren_groups_size18 = paren_groups_size17 * paren_groups_size\n     \
    \   val paren_groups_size19 = paren_groups_size18 * paren_groups_size\n      \
    \  val paren_groups_size20 = paren_groups_size19 * paren_groups_size\n       \
    \ val paren_groups_size21 = paren_groups_size20 * paren_groups_size\n        val\
    \ paren_groups_size22 = paren_groups_size21 * paren_groups_size\n        val paren_groups_size23\
    \ = paren_groups_size22 * paren_groups_size\n        val paren_groups_size24 =\
    \ paren_groups_size23 * paren_groups_size\n        val paren_groups_size25 = paren_groups_size24\
    \ * paren_groups_size\n        val paren_groups_size26 = paren_groups_size25 *\
    \ paren_groups_size\n        val paren_groups_size27 = paren_groups_size26 * paren_groups_size\n\
    \        val paren_groups_size28 = paren_groups_size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuibm5vhw.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795498
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\").trim())\n        paren_group_strings.filter(x\
    \ => !x.isEmpty)\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1apisu8a.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_group_strings.filter(\e\
    [36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795498
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x + \" \").filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_group\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe10saku4.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_group\n\e[31m\e[31m   |\e[0m                                     \
    \                                                                            \
    \                            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                                   Not found: paren_group\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe10saku4.scala:24:5 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \" ) \"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_trimmed = paren_groups_with_spaces_sorted_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\"( \", \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy22wdfz2.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpy22wdfz2.scala:20:106\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpy22wdfz2.scala:21:114 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                              ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpy22wdfz2.scala:22:130 -----------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\e\
    ["
  stdout: ''
  timestamp: 1659795502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_open_braces_without_spaces_without_parens\
    \ = paren_groups_with_open_braces_without_spaces.map(x => x.replace(\")\", \"\"\
    )).filter(x => !x.isEmpty)\n        val paren_groups_with_open_braces_without_spaces_without_parens_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_parens.map(x => x.replace(\"\
    (\", \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens\
    \ = paren_groups_with_open_braces_without_spaces_without_parens_without_spaces.map(x\
    \ => x.replace(\")\", \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens.map(x\
    \ => x.replace(\"(\", \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens\
    \ = paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces.map(x\
    \ => x.replace(\")\", \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens.map(x\
    \ => x.replace(\"(\", \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens\
    \ = paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces.map(x\
    \ => x.replace(\")\", \"\")).filter(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8nc8ydh0.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8nc8ydh0.scala:20:335\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m)).filter(x \n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                                  Not found: x\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8nc8ydh0.scala:21:5 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x.length)\n      \
    \  val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0lwn3cey.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0lwn3cey.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"(\", \" ( \"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppcu00ibr.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppcu00ibr.scala:21:122\
    \ --------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.size < y.size)\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                                     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppcu00ibr.scala:22:134 -----------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: "
  stdout: ''
  timestamp: 1659795503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\")\n        paren_groups_flat5.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2ghe9gjx.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp2ghe9gjx.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp2ghe9gjx.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp2ghe9gjx.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ghe9gjx.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        paren_groups_flat5.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659795504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces.filter(x => !x.contains(\"(\"\
    ))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed.map(x => x.replace(\"\
    (\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted_with_spaces.filter(x\
    \ => !x.contains(\"(\"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted_with_spaces_trimmed_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_sorted_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4lukfrj2.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4lukfrj2.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Use a stack to keep track of which\
    \ parenthesis levels are open\n        val paren_stack = mutable.Stack[Int]()\n\
    \        // Use a list to keep track of which parenthesis levels are open\n  \
    \      val paren_groups = mutable.ListBuffer[String]()\n        // Keep track\
    \ of how many open parenthesis levels are in the stack\n        var paren_level\
    \ = 0\n        // Iterate through each character in the string\n        for (c\
    \ <- paren_string) {\n            // If the character is a left parenthesis, push\
    \ it onto the stack\n            if (c == '(') {\n                paren_stack.push(paren_level)\n\
    \            }\n            // If the character is a right parenthesis, pop it\
    \ from the stack\n            if (c == ')') {\n                paren_stack.pop()\n\
    \            }\n            // If the character is a space\n            if (c\
    \ == ' ') {\n                // If there are still open parenthesis levels in\
    \ the stack\n                if (paren_stack.nonEmpty) {\n                   \
    \ // Then add a new parenthesis group\n                    paren_groups += paren_stack.last.toString\n\
    \                    // And reset the level\n                    paren_level =\
    \ 0\n                }\n            }\n            // If the character is a left\
    \ parenthesis\n            if (c == '(') {\n                // Increment the level\n\
    \                paren_level += 1\n            }\n            // If the character\
    \ is a right parenthesis\n            if (c == ')') {\n                // Decrement\
    \ the level\n                paren_level -= 1\n            }\n        }\n    \
    \    // If the stack is not empty\n        if (paren_stack.nonEmpty) {\n     \
    \       // Then add a new parenthesis group\n            paren_groups += paren_stack.last.toString\n\
    \        }\n        // Return the list of parenthesis groups\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8y4rh2zw.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8y4rh2zw.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_closed_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"(\").replace(\"\
    )\", \"\"))\n        val paren_groups_with_open_braces_not_nested = paren_groups_with_closed_braces.filter(x\
    \ => !x.contains(\"(\"))\n        val paren_groups_with_closed_braces_not_nested\
    \ = paren_groups_with_open_braces_not_nested.filter(x => !x.contains(\")\"))\n\
    \        val paren_groups_with_open_braces_not_nested_and_not_closed = paren_groups_with_closed_braces_not_nested.filter(x\
    \ => !x.contains(\"(\") && !x.contains(\")\"))\n        val paren_groups_with_closed_braces_not_nested_and_not_closed\
    \ = paren_groups_with_open_braces_not_nested_and_not_closed.filter(x => !x.contains(\"\
    (\") && !x.contains(\")\"))\n        val paren_groups_with_open_braces_not_nested_and_closed\
    \ = paren_groups_with_closed_braces_not_nested_and_not_closed.filter(x => !x.contains(\"\
    (\") && x.contains(\")\"))\n        val paren_groups_with_closed_braces_not_nested_and_closed\
    \ = paren_groups_with_open_braces_not_nested_and_closed.filter(x => !x.contains(\"\
    (\") && x.contains(\")\"))\n        val paren_groups_with_open_braces_not_nested_and_closed_and_not_closed\
    \ = paren_groups_with_closed_braces_not_nested_and_closed.filter(x => !x.contains(\"\
    (\") && !x.contains(\")\") && !x.contains(\")\"))\n        val paren_groups_with_closed_braces_not_nested_and_closed_and_not_closed\
    \ = paren_groups_with_open_braces_not_nested_and_closed_and_not_closed.filter(x\
    \ => !x.contains(\"(\") && !x.contains(\")\") && !x.contains(\")\"))\n       \
    \ val paren_groups_with_open_braces_not_nested_and_closed_and_closed = paren_groups_with_closed_braces_not_nested_and_closed_and_not_closed.filter(x\
    \ => !x.contains(\"(\") && !x.contains(\")\") && x.contains(\")\"))\n        val\
    \ paren_groups_with_closed_braces_not_nested_and_closed_and_closed = paren_groups_with_open_braces_not_nested_and_closed_and_closed.filter(x\
    \ => !x.contains(\"(\") && !\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb6lwf7_0.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb6lwf7_0.scala:23:174\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_closed_braces_not_nested_and_closed_and_closed\e[0m = paren_groups_with_open_braces_not_nested_and_closed_and_closed.filter(\e\
    [36mx\e[0m => !x.contains(\e[31m\"(\"\e[0m) && !\n\e[31m\e[31m   |\e[0m      \
    \                                                                            \
    \                                                                            \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \                       Not found: !\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpb6lwf7_0.scala:24:5 ---------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size2\
    \ = paren_groups_size * 2\n        val paren_groups_size3 = paren_groups_size2\
    \ * 2\n        val paren_groups_size4 = paren_groups_size3 * 2\n        val paren_groups_size5\
    \ = paren_groups_size4 * 2\n        val paren_groups_size6 = paren_groups_size5\
    \ * 2\n        val paren_groups_size7 = paren_groups_size6 * 2\n        val paren_groups_size8\
    \ = paren_groups_size7 * 2\n        val paren_groups_size9 = paren_groups_size8\
    \ * 2\n        val paren_groups_size10 = paren_groups_size9 * 2\n        val paren_groups_size11\
    \ = paren_groups_size10 * 2\n        val paren_groups_size12 = paren_groups_size11\
    \ * 2\n        val paren_groups_size13 = paren_groups_size12 * 2\n        val\
    \ paren_groups_size14 = paren_groups_size13 * 2\n        val paren_groups_size15\
    \ = paren_groups_size14 * 2\n        val paren_groups_size16 = paren_groups_size15\
    \ * 2\n        val paren_groups_size17 = paren_groups_size16 * 2\n        val\
    \ paren_groups_size18 = paren_groups_size17 * 2\n        val paren_groups_size19\
    \ = paren_groups_size18 * 2\n        val paren_groups_size20 = paren_groups_size19\
    \ * 2\n        val paren_groups_size21 = paren_groups_size20 * 2\n        val\
    \ paren_groups_size22 = paren_groups_size21 * 2\n        val paren_groups_size23\
    \ = paren_groups_size22 * 2\n        val paren_groups_size24 = paren_groups_size23\
    \ * 2\n        val paren_groups_size25 = paren_groups_size24 * 2\n        val\
    \ paren_groups_size26 = paren_groups_size25 * 2\n        val paren_groups_size27\
    \ = paren_groups_size26 * 2\n        val paren_groups_size28 = paren_groups_size27\
    \ * 2\n        val paren_groups_size29 = paren_groups_size28 * 2\n        val\
    \ paren_groups_size30 = paren_groups_size29 * 2\n        val paren_groups_size31\
    \ = paren_groups_size30 * 2\n        val paren_groups_size32 = paren_groups_size31\
    \ * 2\n        val paren_groups_size33 = paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf0d26f26.scala:44:34 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size33\e[0m\
    \ = paren_\n\e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Not found: paren_\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf0d26f26.scala:45:5 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.flatMap(x => x.split(\"\\\\)\"))\n        val paren_groups_flat23\
    \ = paren_groups_flat22.flat\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp94ftnkq2.scala:13:66 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.flatMap(\e[36mx\e[0m => x.split(\e[31m\"\\\\)\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value\
    \ split is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp94ftnkq2.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_strings\
    \ = paren_groups.map(x => x.replace(\")\", \"\"))\n        val paren_groups_strings_count\
    \ = paren_groups_strings.length\n        val paren_groups_strings_strings_count\
    \ = paren_groups_strings_count * paren_groups_strings_count\n        val paren_groups_strings_strings_strings_count\
    \ = paren_groups_strings_strings_count * paren_groups_strings_count\n        val\
    \ paren_groups_strings_strings_strings_strings_count = paren_groups_strings_strings_strings_count\
    \ * paren_groups_strings_count\n        val paren_groups_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings_count * paren_groups_strings_count\n\
    \        val paren_groups_strings_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings_strings_count * paren_groups_strings_count\n\
    \        val paren_groups_strings_strings_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings_strings_strings_count * paren_groups_strings_count\n\
    \        val paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ * paren_groups_strings_count\n        val paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ * paren_groups_strings_count\n        val paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ * paren_groups_strings_count\n        val paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ * paren_groups_strings_count\n        val paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ = paren_groups_strings_string\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplhx2g8gz.scala:21:97 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_strings_strings_strings_strings_strings_strings_strings_strings_count\e\
    [0m = paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ * paren_groups_strings_count\n\e[31m\e[31m   |\e[0m                        \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_count\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmplhx2g8gz.scala:22:105 --------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\e\
    [0m = paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ * paren_groups_strings_count\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m\
    \  paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmplhx2g8gz.scala:23:113 --------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\e\
    [0m = paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_count\
    \ * paren_groups_strings_count\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \             ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  paren_group"
  stdout: ''
  timestamp: 1659795504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_brace_counts\
    \ = paren_groups_with_open_braces.map(x => x.split(\"\\\\)\").length)\n      \
    \  val paren_groups_with_open_brace_counts_sum = paren_groups_with_open_brace_counts.sum\n\
    \        val paren_groups_with_open_brace_counts_average = paren_groups_with_open_brace_counts_sum\
    \ / paren_groups_with_open_brace_counts.length\n        val paren_groups_with_open_brace_counts_average\
    \ = paren_groups_with_open_brace_counts_average.toDouble\n        val paren_groups_with_open_brace_counts_average\
    \ = paren_groups_with_open_brace_counts_average.toInt\n        val paren_groups_with_open_brace_counts_average\
    \ = paren_groups_with_open_brace_counts_average.toLong\n        val paren_groups_with_open_brace_counts_average\
    \ = paren_groups_with_open_brace_counts_average.toFloat\n        val paren_groups_with_open_brace_counts_average\
    \ = paren_groups_with_open_brace_counts_average.toShort\n        val paren_groups_with_open_brace_counts_average\
    \ = paren_groups_with_open_brace_counts_average.toByte\n        val paren_groups_with_open_brace_counts_average\
    \ = paren_groups_with_open_brace_counts_average.toChar\n        val paren_groups_with_open_brace_counts_average\
    \ = paren_groups_with_open_brace_counts_average.toDouble\n        val paren_groups_with_open_brace_counts_average\
    \ = paren_groups_with_open_brace_counts_average.toFloat\n        val paren_groups_with_open_brace_counts_average\
    \ = paren_groups_with_open_brace_counts_average.toInt\n        val paren_groups_with_open_brace_counts_average\
    \ = paren_groups_with_open_brace_counts_average.toLong\n        val paren_groups_with_open_brace_counts_average\
    \ = paren_groups_with_open_brace_counts_average.toShort\n        val paren_groups_with_open_brace_counts_average\
    \ = paren_groups_with_open_brace_counts_average.toByte\n        val paren_groups_with_open_brace_counts_average\
    \ = paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqce4kvr7.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_brace_counts_average\e\
    [0m = paren_groups_with_open_brace_counts_average.toDouble\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_open_brace_counts_average is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_open_brace_counts_average\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqce4kvr7.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_brace_counts_average\e\
    [0m = paren_groups_with_open_brace_counts_average.toInt\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_open_brace_counts_average is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_open_brace_counts_average\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqce4kvr7.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_brace_counts_average\e\
    [0m = paren_groups_with_open_brace_counts_average.toLong\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_open_brace_counts_average is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_open_brace_counts_average\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqce4kvr7.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mpar"
  stdout: ''
  timestamp: 1659795503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.filterNot(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_oxwopp.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9_oxwopp.scala:13:68\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_flat2\e[0m = paren_groups_flat.filterNot(\e[36mx\e[0m => x.contains(\e\
    [31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                  value contains is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp9_oxwopp.scala:14:69 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\"(\"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                                                        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value contains is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9_oxwopp.scala:15:69 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(\e[36mx\e[0m => x.contains(\e[31m\")\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \ value contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9_oxwopp.scala:16:69 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m = paren_groups_flat4.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\"(\"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                                                        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value contains is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9_oxwopp.scala:17:69 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filte"
  stdout: ''
  timestamp: 1659795506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var open_brackets\
    \ = 0\n        var closed_brackets = 0\n        var open_brackets_count = 0\n\
    \        var closed_brackets_count = 0\n        var open_braces_count = 0\n  \
    \      var closed_braces_count = 0\n        var open_braces_count_in_group = 0\n\
    \        var closed_braces_count_in_group = 0\n        var open_brackets_count_in_group\
    \ = 0\n        var closed_brackets_count_in_group = 0\n        var open_brackets_count_in_group_count\
    \ = 0\n        var closed_brackets_count_in_group_count = 0\n        var open_braces_count_in_group_count\
    \ = 0\n        var closed_braces_count_in_group_count = 0\n        var open_braces_count_in_group_count_in_group\
    \ = 0\n        var closed_braces_count_in_group_count_in_group = 0\n        var\
    \ open_brackets_count_in_group_count_in_group = 0\n        var closed_brackets_count_in_group_count_in_group\
    \ = 0\n        var open_brackets_count_in_group_count_in_group_count = 0\n   \
    \     var closed_brackets_count_in_group_count_in_group_count = 0\n        var\
    \ open_braces_count_in_group_count_in_group_count = 0\n        var closed_braces_count_in_group_count_in_group_count\
    \ = 0\n        var open_braces_count_in_group_count_in_group_count_in_group =\
    \ 0\n        var closed_braces_count_in_group_count_in_group_count_in_group =\
    \ 0\n        var open_brackets_count_in_group_count_in_group_count_in_group =\
    \ 0\n        var closed_brackets_count_in_group_count_in_group_count_in_group\
    \ = 0\n        var open_brackets_count_in_group_count_in_group_count_in_group_count\
    \ = 0\n        var closed_brackets_count_in_group_count_in_group_count_in_group\
    \ = 0\n        var open_braces_count_in_group_count_in_group_count_in_group_count\
    \ = 0\n        var closed_braces_count_in_group_count_in_group_count_in_group\
    \ = 0\n        var open_braces_count_in_group_count_in_group_count_in_group_count_in_group\
    \ = 0\n        var closed_braces_count_in_group_count_in_group_count_in_group_count_in_group\
    \ = 0\n        var open_brackets_count_in_group_count_in_group_count_in_group_count_in_group\
    \ = 0\n        var closed_brackets_count_in_group_count_in_group_count_in_group_count_in_group\
    \ = 0\n        var open_brackets_count_in_group_count_in_group_count_in_group_count_in_group_count\
    \ = 0\n        var closed_brackets_count_in_group_count_in_group_count_in_group_count_in_group\
    \ = 0\n        var open_braces_count_in_group_count_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcjkoc1hk.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcjkoc1hk.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mclosed_brackets_count_in_group_count_in_group_count_in_group\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosed_brackets_count_in_group_count_in_group_count_in_group\
    \ is already defined as \e[33mvariable\e[0m \e[35mclosed_brackets_count_in_group_count_in_group_count_in_group\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcjkoc1hk.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mvar\e[0m \e[36mclosed_braces_count_in_group_count_in_group_count_in_group\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosed_braces_count_in_group_count_in_group_count_in_group\
    \ is already defined as \e[33mvariable\e[0m \e[35mclosed_braces_count_in_group_count_in_group_count_in_group\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcjkoc1hk.scala:49:12 ---------------------------\e[0m\e[0m\n\e\
    [31m49 |\e[0m        \e[33mvar\e[0m \e[36mclosed_brackets_count_in_group_count_in_group_count_in_group_count_in_group\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosed_brackets_count_in_group_count_in_group_count_in_group_count_in_group\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  closed_brackets_count_in_group_count_in_group_count_in_group_count_in_group\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overl"
  stdout: ''
  timestamp: 1659795504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(x => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_parens\
    \ = paren_groups.map(x => x.replace(\")\", \"\\\\)\"))\n        val paren_groups_with_parens_with_brackets\
    \ = paren_groups_with_parens.map(x => x.replace(\"(\", \"\\\\(\"))\n        val\
    \ paren_groups_with_parens_with_brackets_with_brackets = paren_groups_with_parens_with_brackets.map(x\
    \ => x.replace(\"{\", \"\\\\{\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets.map(x => x.replace(\"\
    }\", \"\\\\}\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets_with_brackets.map(x =>\
    \ x.replace(\"[\", \"\\\\[\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"]\", \"\\\\]\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"{\", \"\\\\{\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"}\", \"\\\\}\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe51g4swy.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe51g4swy.scala:19:137\
    \ --------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"}\"\e[0m, \e[31m\"\\\\}\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpe51g4swy.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var paren_group\
    \ = \"\"\n        for (c <- paren_string) {\n            if (c == '(') {\n   \
    \             open_braces += 1\n            } else if (c == '{') {\n         \
    \       closed_braces += 1\n            } else if (c == '}') {\n             \
    \   closed_braces -= 1\n            } else if (c == ')') {\n                open_braces\
    \ -= 1\n            }\n            if (open_braces == 0 && closed_braces == 0)\
    \ {\n                paren_group += c\n            }\n            if (open_braces\
    \ > 0 && closed_braces == 0) {\n                paren_groups += paren_group\n\
    \                paren_group = \"\"\n            }\n        }\n        if (open_braces\
    \ > 0 && closed_braces > 0) {\n            paren_groups += paren_group\n     \
    \   }\n        paren_groups.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon4avggi.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n \
    \       val paren_groups_with_open_braces_without_spaces_without_duplicates =\
    \ paren_groups_with_open_braces_without_spaces.distinct\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates.map(x => x\
    \ + \"(\")\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces.map(x\
    \ => x + \"()\")\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces.map(x\
    \ => x + \"()()\")\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_spaces.map(x\
    \ => x + \"()()()\")\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x + \"()()()()\")\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x + \"()()()()()\")\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_brace\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_kq1xqy_.scala:19:155 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x + \e[31m\"()()()()\"\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp_kq1xqy_.scala:20:170 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x + \e[31m\"()()()()()\"\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_kq1xqy_.sc"
  stdout: ''
  timestamp: 1659795505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \"\").replace(\"\
    (\", \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces.sortWith((x, y) => x.length\
    \ <= y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => !x.isEmpty)\n  \
    \      val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => !x.isEmpty)\n  \
    \      val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdam3vyrq.scala:21:142 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdam3vyrq.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_count = paren_groups.length\n\
    \        val paren_groups_remaining = paren_groups_count - 1\n        val paren_groups_remainder_count\
    \ = paren_groups_remaining / 2\n        val paren_groups_remainder_remaining =\
    \ paren_groups_remaining - paren_groups_remainder_count\n        val paren_groups_remainder_remainder_count\
    \ = paren_groups_remainder_remaining / 2\n        val paren_groups_remainder_remainder_remaining\
    \ = paren_groups_remainder_remaining - paren_groups_remainder_remainder_count\n\
    \        val paren_groups_remainder_remainder_remainder_count = paren_groups_remainder_remainder_remaining\
    \ / 2\n        val paren_groups_remainder_remainder_remainder_count = paren_groups_remainder_remainder_remaining\
    \ - paren_groups_remainder_remainder_remainder_count\n        val paren_groups_remainder_remainder_remainder_count_2\
    \ = paren_groups_remainder_remainder_remainder_count / 2\n        val paren_groups_remainder_remainder_remainder_count_3\
    \ = paren_groups_remainder_remainder_remainder_count - paren_groups_remainder_remainder_remainder_count_2\n\
    \        val paren_groups_remainder_remainder_remainder_count_4 = paren_groups_remainder_remainder_remainder_count\
    \ - paren_groups_remainder_remainder_remainder_count_3\n        val paren_groups_remainder_remainder_remainder_count_5\
    \ = paren_groups_remainder_remainder_remainder_count - paren_groups_remainder_remainder_remainder_count_4\n\
    \        val paren_groups_remainder_remainder_remainder_count_6 = paren_groups_remainder_remainder_remainder_count\
    \ - paren_groups_remainder_remainder_remainder_count_5\n        val paren_groups_remainder_remainder_remainder_count_7\
    \ = paren_groups_remainder_remainder_remainder_count - paren_groups_remainder_remainder_remainder_count_6\n\
    \        val paren_groups_remainder_remainder_remainder_count_8 = paren_groups_remainder_remainder_remainder_count\
    \ - paren_groups_remainder_remainder_remainder_count_7\n        val paren_groups_remainder_remainder_remainder_count_9\
    \ = paren_groups_remainder_remainder_remainder_count - paren_groups_remainder_remainder_remainder_count_8\n\
    \        val paren_groups_remainder_remainder_remainder_count_10 = paren_groups_remainder_remainder_remainder_count\
    \ - paren_groups_remainder_remainder_remainder_count_9\n        val paren_groups_remainder_remainder_remainder_count_11\
    \ = paren_groups_remainder_\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9l8xa1pg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remainder_remainder_remainder_count\e\
    [0m = paren_groups_remainder_remainder_remaining - paren_groups_remainder_remainder_remainder_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remainder_remainder_remainder_count is already\
    \ defined as \e[33mvalue\e[0m \e[35mparen_groups_remainder_remainder_remainder_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp9l8xa1pg.scala:29:66 ------------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remainder_remainder_remainder_count_11\e\
    [0m = paren_groups_remainder_\n\e[31m\e[31m   |\e[0m                         \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      Not found: paren_groups_remainder_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9l8xa1pg.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_parens = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_parens_without_spaces\
    \ = paren_groups_with_parens.map(x => x.replace(\"  \", \" \"))\n        val paren_groups_with_parens_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces.filter(x => !x.isEmpty)\n        val\
    \ paren_groups_with_parens_without_spaces_without_spaces_without_spaces = paren_groups_with_parens_without_spaces_without_spaces.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0kg3skxc.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0kg3skxc.scala:21:174\
    \ --------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(\e\
    [36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0kg3skxc.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        paren_string.split(\"\\\\(\").foreach(x => paren_groups += x)\n     \
    \   paren_groups.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx4nraxnx.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var paren_group\
    \ = \"\"\n        var paren_group_open = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opening_char = \"\"\n        var paren_group_closing_char\
    \ = \"\"\n        var paren_group_opening_char_count = 0\n        var paren_group_closing_char_count\
    \ = 0\n        var paren_group_opening_char_is_space = false\n        var paren_group_closing_char_is_space\
    \ = false\n        var paren_group_opening_char_is_digit = false\n        var\
    \ paren_group_closing_char_is_digit = false\n        var paren_group_opening_char_is_letter\
    \ = false\n        var paren_group_closing_char_is_letter = false\n        var\
    \ paren_group_opening_char_is_letter = false\n        var paren_group_closing_char_is_letter\
    \ = false\n        var paren_group_opening_char_is_letter = false\n        var\
    \ paren_group_closing_char_is_letter = false\n        var paren_group_opening_char_is_letter\
    \ = false\n        var paren_group_closing_char_is_letter = false\n        var\
    \ paren_group_opening_char_is_letter = false\n        var paren_group_closing_char_is_letter\
    \ = false\n        var paren_group_opening_char_is_letter = false\n        var\
    \ paren_group_closing_char_is_letter = false\n        var paren_group_opening_char_is_letter\
    \ = false\n        var paren_group_closing_char_is_letter = false\n        var\
    \ paren_group_opening_char_is_letter = false\n        var paren_group_closing_char_is_letter\
    \ = false\n        var paren_group_opening_char_is_letter = false\n        var\
    \ paren_group_closing_char_is_letter = false\n        var paren_group_opening_char_is_letter\
    \ = false\n        var paren_group_closing_char_is_letter = false\n        var\
    \ paren_group_opening_char_is_letter = false\n        var paren_group_closing_char_is_letter\
    \ = false\n        var paren_group_opening_char_is_letter = false\n        var\
    \ paren_group_closing_char_is_letter = false\n        var paren_group_opening_char_is_letter\
    \ = false\n        var paren_group_closing_char_is_letter = false\n        var\
    \ paren_group_opening_char_is_letter = false\n        var paren_group_closing_char_is_letter\
    \ = false\n        var paren_group_opening_char_is_letter = false\n        var\
    \ paren_group_closing_char_is_letter = false\n        var paren_group_opening_char_is_letter\
    \ = false\n        var paren_group_closing_char_is_letter = false\n        var\
    \ paren_group_opening_char_is_letter = false\n        var paren_group_closing_char_is_letter\
    \ = false\n        var paren_group_opening_char_is_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg402r38z.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg402r38z.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_group_opening_char_is_letter\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mparen_group_opening_char_is_letter is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_opening_char_is_letter\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg402r38z.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_group_closing_char_is_letter\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mparen_group_closing_char_is_letter is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_closing_char_is_letter\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg402r38z.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_group_opening_char_is_letter\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mparen_group_opening_char_is_letter is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_opening_char_is_letter\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg402r38z.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_group_closing_char_is_letter\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mparen_grou"
  stdout: ''
  timestamp: 1659795507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_parens\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \"\").replace(\"\
    (\", \"\"))\n        val paren_groups_with_spaces_sorted_with_parens_sorted =\
    \ paren_groups_with_spaces_sorted_with_parens.sortWith((x, y) => x.size < y.size)\n\
    \        val paren_groups_with_spaces_sorted_with_parens_sorted_with_parens =\
    \ paren_groups_with_spaces_sorted_with_parens_sorted.map(x => x.replace(\")\"\
    , \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_sorted_with_parens_sorted_with_parens_sorted\
    \ = paren_groups_with_spaces_sorted_with_parens_sorted_with_parens.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_parens_sorted_with_parens_sorted_with_parens\
    \ = paren_groups_with_spaces_sorted_with_parens_sorted_with_parens_sorted.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = paren_groups_with_spaces_sorted_with_parens_sorted_with_parens_sorted_with_parens.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\
    \ = paren_groups_with_spaces_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = paren_groups_with_spaces_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\
    \ = paren_groups_with_spaces_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_sorted_with_parens_sorted_with_parens_sorted_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvra9mzaw.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvra9mzaw.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\"(\"\
    , \" ( \"))).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \" ( \"))).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzjw28mrp.scala:16:159 --------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted.map(\e[36mx\e[0m => x.replace(\e\
    [31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).filter(x => !x.isEmpty)\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \      '}' expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzjw28mrp.scala:20:235\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).filter(x => !x.isEmpty)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                   '}' expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpzjw28mrp.scala:24:4 ----------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected,\
    \ but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzjw28mrp.scala:16:184\
    \ -------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted.map(\e[36mx\e[0m => x.replace(\e\
    [31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).filter(x => !x.isEmpty)\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                      "
  stdout: ''
  timestamp: 1659795508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces : Int = 0\n        var close_braces : Int = 0\n     \
    \   var paren_count : Int = 0\n        paren_string.foreach { c =>\n         \
    \   c match {\n                case '(' -> paren_count += 1\n                case\
    \ ')' -> paren_count -= 1\n                case ')' -> close_braces += 1\n   \
    \             case '(' -> open_braces += 1\n                case ')' -> close_braces\
    \ -= 1\n                case ' ' -> if (paren_count == 0 && close_braces == 0\
    \ && open_braces == 0) paren_groups += paren_string.substring(0,paren_count)\n\
    \            }\n        }\n        paren_groups\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqif0p551.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m \e[31m')'\e[0m -> paren_count\
    \ -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e\
    [0m                '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpqif0p551.scala:20:16 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m                \e[33mcase\e[0m \e[31m'('\e[0m -> open_braces +=\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m\
    \                '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpqif0p551.scala:22:16 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m                \e[33mcase\e[0m \e[31m' '\e[0m -> \e[33mif\e[0m (paren_count\
    \ == \e[31m0\e[0m && close_braces == \e[31m0\e[0m && open_braces == \e[31m0\e\
    [0m) paren_groups += paren_string.substring(\e[31m0\e[0m,paren_count)\n\e[31m\e\
    [31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                '=>' expected,\
    \ but 'case' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqif0p551.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqif0p551.scala:17:40 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                \e[33mcase\e[0m \e[31m'('\e[0m -> paren_count += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                                        ^^\e[0m\n\e\
    [31m   |\e[0m                                        Not found: +=\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqif0p551.scala:19:41 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m \e[31m')'\e[0m -> close_braces\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \    ^"
  stdout: ''
  timestamp: 1659795507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_closed_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\"))\n        val paren_groups_with_open_braces_not_nested = paren_groups_with_closed_braces.filter(x\
    \ => x.contains(\"(\") == false)\n        val paren_groups_with_closed_braces_not_nested\
    \ = paren_groups_with_open_braces_not_nested.filter(x => x.contains(\")\") ==\
    \ false)\n        paren_groups_with_closed_braces_not_nested.map(x => x.replace(\"\
    (\", \"\").replace(\")\", \"\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_6p1rssf.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        paren_groups_with_closed_braces_not_nested.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\")\"\
    \e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
