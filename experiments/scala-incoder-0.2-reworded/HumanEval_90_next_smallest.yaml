name: HumanEval_90_next_smallest
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return None if there\
  \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
  \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
  \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n    //\
  \ None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
  \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
  \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n  \
  \  assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(1l));\n\
  \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n  \
  \  assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
  \    }\n\n}\n"
completions: ["        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index == -1) {\n            None\n        } else\
    \ {\n            val nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if (index == 0) None\n        else Some(lst.apply(index - 1))", "       \
    \ val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == lst.size) {\n            None\n        } else {\n      \
    \      Some(lst.apply(index + 1))\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index ==\
    \ -1) {\n            None\n        } else {\n            Some(lst.apply(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if(index == lst.size - 1) None\n        else Some(lst.apply(index\
    \ + 1))", "        if (lst.isEmpty) None\n        else {\n            val smallest\
    \ = lst.head\n            val rest = lst.tail\n            val smallest2 = rest.minBy(_.toLong)\n\
    \            if (smallest < smallest2) Some(smallest2)\n            else nextSmallest(rest)\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index == -1) {\n            None\n        } else\
    \ {\n            val next = lst.apply(index + 1)\n            Some(next)\n   \
    \     }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if (index == 0) None\n        else Some(lst.apply(index + 1))", "       \
    \ val smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if(index\
    \ < lst.size - 1) {\n            Some(lst.apply(index + 1))\n        } else {\n\
    \            None\n        }", "        val smallest = lst.min\n        val index\
    \ = lst.indexOf(smallest)\n        if(index == 0) None\n        else Some(lst.apply(index\
    \ - 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index + 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if(index == lst.size - 1) {\n            None\n        } else {\n       \
    \     Some(lst.apply(index + 1))\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index - 1))", "        if (lst.isEmpty) None\n     \
    \   else {\n            val smallest = lst.head\n            val rest = lst.tail\n\
    \            val smallest2 = rest.minBy(_.toLong)\n            if (smallest2 ==\
    \ smallest) Some(smallest2)\n            else nextSmallest(rest)\n        }",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == 0) None\n        else Some(lst.apply(index - 1))", "      \
    \  val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(_ == smallest)\n        if (index != -1) {\n\
    \            val nextSmallest = lst(index + 1)\n            if (nextSmallest <\
    \ smallest) {\n                Some(nextSmallest)\n            } else {\n    \
    \            None\n            }\n        } else {\n            None\n       \
    \ }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == 0) None else Some(lst.apply(index+1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n        if\
    \ (index == -1) {\n            None\n        } else {\n            val next =\
    \ lst.apply(index + 1)\n            if (next < smallest) {\n                Some(next)\n\
    \            } else {\n                None\n            }\n        }", "    \
    \    val smallest = lst.min\n        val secondSmallest = lst.filter(x => x <\
    \ smallest).max\n        if (secondSmallest == smallest) None else secondSmallest",
  "        val smallest = lst.min\n        val secondSmallest = lst.filter(x => x\
    \ < smallest).min\n        if (secondSmallest == smallest) None else secondSmallest",
  "        val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            val\
    \ next = lst.apply(index + 1)\n            if (next < smallest) {\n          \
    \      Some(next)\n            } else {\n                None\n            }\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index < lst.size - 1)\
    \ {\n            Some(lst(index + 1))\n        } else {\n            None\n  \
    \      }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if (index == 0) None\n        else Some(lst.apply(index - 1))", "       \
    \ val smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if(index\
    \ == 0) None\n        else Some(lst.apply(index - 1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n        if\
    \ (index < lst.size) {\n            Some(lst.apply(index + 1))\n        } else\
    \ {\n            None\n        }", "        val smallest = lst.min\n        val\
    \ index = lst.indexOf(smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ + 1))", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index < lst.size) {\n            Some(lst(index\
    \ + 1))\n        } else {\n            None\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(_ == smallest)\n        if (index\
    \ == lst.size) {\n            None\n        } else {\n            Some(lst(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if (index == 0) None\n        else Some(lst.apply(index - 1))", "       \
    \ val smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if\
    \ (index == 0) None\n        else Some(lst.apply(index + 1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if(index == lst.size\
    \ - 1) None\n        else Some(lst.apply(index + 1))", "        val smallest =\
    \ lst.min\n        val index = lst.indexOf(smallest)\n        if (index == 0)\
    \ None\n        else Some(lst.apply(index - 1))", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.filter(_ < smallest).min\n        secondSmallest\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if(index == 0) None\n        else Some(lst.apply(index - 1))", "    \
    \    val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index + 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == 0) None else Some(lst(index+1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n        if(index\
    \ == lst.size) None else Some(lst.apply(index + 1))", "        val smallest =\
    \ lst.min\n        val index = lst.indexOf(smallest)\n        if (index < lst.size\
    \ - 1) {\n            Some(lst.apply(index + 1))\n        } else {\n         \
    \   None\n        }", "        val smallest = lst.min\n        val secondSmallest\
    \ = lst.filter(x => x < smallest).max\n        if (secondSmallest == smallest)\
    \ None else secondSmallest", "        val smallest = lst.min\n        val index\
    \ = lst.indexOf(smallest)\n        if (index == -1) {\n            None\n    \
    \    } else {\n            Some(lst.apply(index + 1))\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index < lst.size) {\n            Some(lst(index + 1))\n        }\
    \ else {\n            None\n        }", "        val smallest = lst.min\n    \
    \    val index = lst.indexWhere(x => x < smallest)\n        if (index < 0) None\n\
    \        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n \
    \       val index = lst.indexOf(smallest)\n        if(index == 0) None\n     \
    \   else Some(lst.apply(index - 1))", "        val smallest = lst.min\n      \
    \  val index = lst.indexOf(smallest)\n        if (index > 0) {\n            Some(lst.apply(index\
    \ - 1))\n        } else {\n            None\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if(index == 0)\
    \ None\n        else Some(lst.apply(index+1))", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst(index + 1))\n        } else {\n            None\n  \
    \      }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val secondSmallest = lst.filter(x => x <\
    \ smallest).min\n        secondSmallest match {\n            case Some(x) => Some(x)\n\
    \            case None => None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if(index == 0) None\n    \
    \    else Some(lst.apply(index - 1))", "        val smallest = lst.min\n     \
    \   val index = lst.indexOf(smallest)\n        if (index == 0) None\n        else\
    \ Some(lst.apply(index - 1))", "        val smallest = lst.min\n        val index\
    \ = lst.indexOf(smallest)\n        if (index > 0) {\n            Some(lst.apply(index\
    \ - 1))\n        } else {\n            None\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index < lst.size\
    \ - 1) {\n            Some(lst(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val rest = lst.filter(_ != smallest)\n        if (rest.isEmpty) None\n\
    \        else Some(rest.min.toLong)", "        val smallest = lst.min\n      \
    \  val index = lst.indexWhere(x => x < smallest)\n        if (index == -1) {\n\
    \            None\n        } else {\n            val nextSmallest = lst(index\
    \ + 1)\n            Some(nextSmallest)\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index - 1))", "        val smallest = lst.min\n    \
    \    val index = lst.indexWhere(x => x == smallest)\n        if (index == 0) None\
    \ else Some(lst.apply(index - 1))", "        val smallest = lst.min\n        val\
    \ index = lst.indexWhere(x => x == smallest)\n        if (index == 0) None\n \
    \       else Some(lst.apply(index - 1))", "        val smallest = lst.min\n  \
    \      val index = lst.indexOf(smallest)\n        if (index == 0) None\n     \
    \   else Some(lst.apply(index+1))", "        if (lst.isEmpty) None\n        else\
    \ {\n            val smallest = lst.head\n            val rest = lst.tail\n  \
    \          if (smallest < rest.min) Some(smallest)\n            else nextSmallest(rest)\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index == lst.size - 1) {\n            None\n\
    \        } else {\n            Some(lst.apply(index + 1))\n        }", "     \
    \   val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == lst.size - 1)\
    \ None\n        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x < smallest)\n        if (index == -1)\
    \ {\n            None\n        } else {\n            val next = lst.apply(index\
    \ + 1)\n            Some(next)\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index ==\
    \ -1) {\n            None\n        } else {\n            val next = lst.apply(index\
    \ + 1)\n            Some(next)\n        }", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.filter(_ < smallest).min\n        secondSmallest\
    \ match {\n            case Some(smallest) => Some(secondSmallest)\n         \
    \   case None => None\n        }", "        val smallest = lst.min\n        val\
    \ index = lst.indexOf(smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ - 1))", "        if (lst.isEmpty) None\n        else {\n            val smallest\
    \ = lst.head\n            val rest = lst.tail\n            if (smallest.compareTo(rest.head)\
    \ < 0) Some(rest.head)\n            else nextSmallest(rest)\n        }", "   \
    \     val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index < 0) None\n        else Some(lst.apply(index + 1))", "    \
    \    val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == lst.size - 1) None\n        else Some(lst.apply(index +\
    \ 1))", "        val smallest = lst.min\n        val index = lst.indexWhere(_\
    \ == smallest)\n        if (index == -1) {\n            None\n        } else {\n\
    \            val nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if (index < lst.size - 1) {\n            Some(lst(index + 1))\n        }\
    \ else {\n            None\n        }", "        val smallest = lst.min\n    \
    \    val index = lst.indexWhere(x => x == smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst(index + 1))\n        } else {\n            None\n  \
    \      }", "        val smallest = lst.min\n        val secondSmallest = lst.filter(_\
    \ < smallest).min\n        if (secondSmallest == smallest) None else secondSmallest",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == 0) None\n        else Some(lst.apply(index - 1))", "      \
    \  val smallest = lst.min\n        val index = lst.indexOf(smallest)\n       \
    \ if(index == 0) None\n        else Some(lst.apply(index+1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n        if\
    \ (index < lst.size) {\n            Some(lst.apply(index + 1))\n        } else\
    \ {\n            None\n        }", "        val smallest = lst.min\n        val\
    \ index = lst.indexOf(smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ - 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index + 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if (index == 0) None\n        else Some(lst.apply(index - 1))", "       \
    \ val smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if\
    \ (index < lst.size - 1) {\n            Some(lst(index + 1))\n        } else {\n\
    \            None\n        }", "        val smallest = lst.min\n        val index\
    \ = lst.indexWhere(x => x == smallest)\n        if (index < lst.size) {\n    \
    \        Some(lst.apply(index + 1))\n        } else {\n            None\n    \
    \    }", "        if (lst.isEmpty) None\n        else {\n            val smallest\
    \ = lst.head\n            val rest = lst.tail\n            val smallestIndex =\
    \ lst.indexWhere(x => x == smallest)\n            if (smallestIndex == 0) None\n\
    \            else Some(rest.apply(smallestIndex + 1))\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == 0) None else Some(lst.apply(index+1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index == 0)\
    \ None\n        else Some(lst.apply(index - 1))", "        val smallest = lst.min\n\
    \        val rest = lst.filter(_ != smallest)\n        if (rest.isEmpty) None\n\
    \        else Some(rest.min.toLong)", "        val smallest = lst.min\n      \
    \  val secondSmallest = lst.minBy { x => x - smallest }\n        if (secondSmallest\
    \ == smallest) None else secondSmallest", "        val smallest = lst.min\n  \
    \      val index = lst.indexOf(smallest)\n        if(index == 0) None\n      \
    \  else Some(lst.apply(index+1))", "        val smallest = lst.min\n        val\
    \ index = lst.indexWhere(x => x == smallest)\n        if (index < lst.size) {\n\
    \            Some(lst(index + 1))\n        } else {\n            None\n      \
    \  }", "        val smallest = lst.min\n        val index = lst.indexWhere(x =>\
    \ x == smallest)\n        if (index == lst.size) {\n            None\n       \
    \ } else {\n            Some(lst.apply(index + 1))\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n        if(index\
    \ < lst.size) Some(lst.apply(index + 1))\n        else None", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if(index == 0)\
    \ None\n        else Some(lst.apply(index - 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index ==\
    \ lst.size) {\n            None\n        } else {\n            Some(lst.apply(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     if (lst.isEmpty) None\n        else {\n            val smallest = lst.head\n\
    \            val rest = lst.tail\n            val smallestIndex = rest.indexOf(smallest)\n\
    \            if (smallestIndex == 0) None\n            else Some(rest.apply(smallestIndex\
    \ + 1))\n        }", "        val smallest = lst.min\n        val secondSmallest\
    \ = lst.filter(x => x < smallest).min\n        secondSmallest match {\n      \
    \      case Some(x) => Some(x)\n            case None => None\n        }", " \
    \       val smallest = lst.min\n        val rest = lst.filter(_ != smallest)\n\
    \        if (rest.isEmpty) None\n        else Some(rest.min.toLong)", "      \
    \  if (lst.isEmpty) None\n        else {\n            val smallest = lst.head\n\
    \            val rest = lst.tail\n            if (smallest < rest.min) Some(rest.min)\n\
    \            else nextSmallest(rest)\n        }", "        if (lst.isEmpty) None\n\
    \        else {\n            val smallest = lst.min\n            val index = lst.indexOf(smallest)\n\
    \            if (index == 0) None\n            else Some(lst.apply(index - 1))\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            val\
    \ next = lst.apply(index + 1)\n            Some(next)\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index ==\
    \ 0) None\n        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n\
    \        val rest = lst.filter(_ != smallest)\n        if (rest.isEmpty) None\n\
    \        else Some(rest.min.toLong)", "        val smallest = lst.min\n      \
    \  val index = lst.indexWhere(x => x < smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            val\
    \ nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n        }", " \
    \       if (lst.isEmpty) None\n        else lst.minBy(_ < lst(1))", "        val\
    \ smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if (index\
    \ == 0) None\n        else Some(lst.apply(index - 1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index == 0)\
    \ None\n        else Some(lst.apply(index - 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val rest = lst.filter(_\
    \ != smallest)\n        if (rest.isEmpty) None\n        else Some(rest.min.toLong)",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == -1) {\n            None\n        } else {\n            val\
    \ next = lst.updated(index, lst.apply(index + 1))\n            Some(next)\n  \
    \      }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index < lst.size) {\n            Some(lst.apply(index\
    \ + 1))\n        } else {\n            None\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n        if\
    \ (index < lst.size) {\n            Some(lst.apply(index + 1))\n        } else\
    \ {\n            None\n        }", "        val smallest = lst.min\n        val\
    \ index = lst.indexOf(smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ - 1))", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if(index == -1)\n            None\n        else\n\
    \            Some(lst.apply(index+1))", "        val smallest = lst.min\n    \
    \    val index = lst.indexOf(smallest)\n        if (index == 0) None\n       \
    \ else Some(lst.apply(index - 1))", "        val smallest = lst.min\n        val\
    \ index = lst.indexOf(smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ - 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val secondSmallest = lst.filter(_ < smallest).min\n\
    \        if (secondSmallest == smallest) None else secondSmallest", "        val\
    \ smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            val\
    \ next = lst.apply(index + 1)\n            Some(next)\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if (index\
    \ == 0) None\n        else Some(lst.apply(index - 1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index == 0)\
    \ None\n        else Some(lst.apply(index - 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index + 1))", "        val smallest = lst.min\n    \
    \    val index = lst.indexWhere(x => x == smallest)\n        if (index == -1)\
    \ {\n            None\n        } else {\n            Some(lst.apply(index + 1))\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if(index == -1) {\n            None\n        } else {\n            Some(lst(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if(index == 0) None\n        else Some(lst.apply(index - 1))", "    \
    \    val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x < smallest)\n        if (index == -1)\
    \ {\n            None\n        } else {\n            Some(lst.apply(index + 1))\n\
    \        }", "        if (lst.isEmpty) None\n        else {\n            val smallest\
    \ = lst.head\n            val rest = lst.tail\n            if (smallest < rest.min)\
    \ Some(smallest)\n            else nextSmallest(rest)\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        if (lst.isEmpty) None\n\
    \        else {\n            val smallest = lst.head\n            val rest = lst.tail\n\
    \            if (smallest.compareTo(rest.head) < 0) Some(rest.head)\n        \
    \    else nextSmallest(rest)\n        }", "        val smallest = lst.min\n  \
    \      val index = lst.indexWhere(x => x < smallest)\n        if (index < 0) None\n\
    \        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n \
    \       val secondSmallest = lst.minBy { x => x - smallest }\n        if (secondSmallest\
    \ == smallest) None else Some(secondSmallest)", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index - 1))", "        val smallest = lst.min\n    \
    \    val index = lst.indexOf(smallest)\n        if (index < lst.size - 1) {\n\
    \            Some(lst(index + 1))\n        } else {\n            None\n      \
    \  }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if(index == 0) None\n    \
    \    else Some(lst.apply(index - 1))", "        val smallest = lst.min\n     \
    \   val index = lst.indexWhere(x => x < smallest)\n        if (index == lst.size)\
    \ {\n            None\n        } else {\n            Some(lst.apply(index + 1))\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(_\
    \ == smallest)\n        if (index < lst.size) {\n            Some(lst.apply(index\
    \ + 1))\n        } else {\n            None\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index == 0)\
    \ None\n        else Some(lst.apply(index - 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index - 1))", "        val smallest = lst.min\n    \
    \    val index = lst.indexWhere(x => x < smallest)\n        if (index == 0) None\n\
    \        else Some(lst.apply(index + 1))", "        if (lst.isEmpty) None\n  \
    \      else {\n            val smallest = lst.head\n            val rest = lst.tail\n\
    \            if (smallest.compareTo(rest.head) < 0) Some(rest.head)\n        \
    \    else nextSmallest(rest)\n        }", "        val smallest = lst.min\n  \
    \      val index = lst.indexOf(smallest)\n        if (index > 0) {\n         \
    \   Some(lst.apply(index - 1))\n        } else {\n            None\n        }",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == 0) None\n        else Some(lst.apply(index - 1))", "      \
    \  val smallest = lst.min\n        val index = lst.indexOf(smallest)\n       \
    \ if (index == 0) None\n        else Some(lst.apply(index + 1))", "        val\
    \ smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == lst.size) {\n            None\n        } else {\n      \
    \      Some(lst.apply(index + 1))\n        }", "        if (lst.isEmpty) None\n\
    \        else {\n            val smallest = lst.min\n            val secondSmallest\
    \ = lst.filter(_ < smallest).min\n            Some(secondSmallest)\n        }",
  "        val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index < lst.size) {\n            Some(lst(index + 1))\n        }\
    \ else {\n            None\n        }", "        val smallest = lst.min\n    \
    \    val index = lst.indexWhere(x => x == smallest)\n        if (index < lst.size\
    \ - 1) {\n            Some(lst(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index == -1) {\n            None\n        } else\
    \ {\n            Some(lst.apply(index + 1))\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if(index == 0)\
    \ None\n        else Some(lst.apply(index - 1))", "        val smallest = lst.min\n\
    \        val rest = lst.filter(_ != smallest)\n        if (rest.isEmpty) None\n\
    \        else Some(rest.min.toLong)", "        val smallest = lst.min\n      \
    \  val secondSmallest = lst.filter(_ < smallest).min\n        secondSmallest match\
    \ {\n            case Some(smallest) => Some(secondSmallest)\n            case\
    \ None => None\n        }", "        val smallest = lst.min\n        val rest\
    \ = lst.filter(_ != smallest)\n        if (rest.isEmpty) None else Some(rest.min.next)",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == 0) None\n        else Some(lst.apply(index - 1))", "      \
    \  val smallest = lst.min\n        val index = lst.indexOf(smallest)\n       \
    \ if(index == 0) None else Some(lst.apply(index+1))", "        val smallest =\
    \ lst.min\n        val index = lst.indexOf(smallest)\n        if (index == 0)\
    \ None\n        else Some(lst.apply(index - 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index + 1))", "        val smallest = lst.min\n    \
    \    val index = lst.indexOf(smallest)\n        if (index == -1) {\n         \
    \   None\n        } else {\n            val next = lst.apply(index + 1)\n    \
    \        if (next < smallest) {\n                Some(next)\n            } else\
    \ {\n                None\n            }\n        }", "        val smallest =\
    \ lst.min\n        val index = lst.indexWhere(x => x == smallest)\n        if\
    \ (index == -1) {\n            None\n        } else {\n            val next =\
    \ lst.apply(index + 1)\n            Some(next)\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if(index == 0)\
    \ None\n        else Some(lst.apply(index - 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index - 1))", "        val smallest = lst.min\n    \
    \    val index = lst.indexWhere(x => x == smallest)\n        if (index == -1)\
    \ {\n            None\n        } else {\n            val next = lst.apply(index\
    \ + 1)\n            Some(next)\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index - 1))", "        val smallest = lst.min\n    \
    \    val index = lst.indexWhere(x => x < smallest)\n        if (index == lst.size)\
    \ {\n            None\n        } else {\n            Some(lst.apply(index + 1))\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst.apply(index + 1))\n\
    \        } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if(index < lst.size - 1) {\n\
    \            Some(lst(index + 1))\n        } else {\n            None\n      \
    \  }", "        val smallest = lst.min\n        val index = lst.indexWhere(x =>\
    \ x == smallest)\n        if (index == lst.size) {\n            None\n       \
    \ } else {\n            Some(lst.apply(index + 1))\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index == 0)\
    \ None\n        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index < lst.size\
    \ - 1) {\n            Some(lst(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index < lst.size) {\n            Some(lst(index\
    \ + 1))\n        } else {\n            None\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n        if\
    \ (index < lst.size) {\n            Some(lst.apply(index + 1))\n        } else\
    \ {\n            None\n        }", "        val smallest = lst.min\n        val\
    \ rest = lst.filter(_ != smallest)\n        if (rest.size == 0) {\n          \
    \  None\n        } else {\n            Some(rest.min.toLong)\n        }", "  \
    \      val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == -1) {\n            None\n        } else {\n            val\
    \ nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n        }", " \
    \       val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == 0) None else Some(lst.apply(index+1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index < lst.size\
    \ - 1) {\n            Some(lst(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index == lst.size) {\n            None\n    \
    \    } else {\n            Some(lst.apply(index + 1))\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if (index\
    \ < lst.size - 1) {\n            Some(lst(index + 1))\n        } else {\n    \
    \        None\n        }", "        val smallest = lst.min\n        val index\
    \ = lst.indexWhere(x => x == smallest)\n        if (index < lst.size - 1) {\n\
    \            Some(lst(index + 1))\n        } else {\n            None\n      \
    \  }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index ==\
    \ -1) {\n            None\n        } else {\n            val next = lst.apply(index\
    \ + 1)\n            if (next < smallest) {\n                Some(next)\n     \
    \       } else {\n                None\n            }\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            val\
    \ nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n        }", " \
    \       val smallest = lst.min\n        val index = lst.indexOf(smallest)\n  \
    \      if (index == 0) None\n        else Some(lst.apply(index - 1))", "     \
    \   val smallest = lst.min\n        val index = lst.indexOf(smallest)\n      \
    \  if (index == 0) None\n        else Some(lst.apply(index - 1))", "        val\
    \ smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if (index\
    \ == lst.size - 1) None\n        else Some(lst.apply(index + 1))", "        val\
    \ smallest = lst.min\n        val rest = lst.filter(_ != smallest)\n        if\
    \ (rest.size == 0) None\n        else Some(rest.min.toLong)", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index == 0)\
    \ None\n        else Some(lst.apply(index + 1))"]
stop_tokens:
- "\n    }\n"
