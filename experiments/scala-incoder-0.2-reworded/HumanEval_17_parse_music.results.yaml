language: scala
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n\
    \        val music_list_size = music_list.size\n        val music_list_size_half\
    \ = music_list_size / 2\n        val music_list_size_quarter = music_list_size\
    \ / 4\n        val music_list_size_whole = music_list_size % 4\n        val music_list_size_last_beat\
    \ = music_list_size_whole - music_list_size_quarter\n        val music_list_size_last_beat_half\
    \ = music_list_size_last_beat / 2\n        val music_list_size_last_beat_quarter\
    \ = music_list_size_last_beat / 4\n        val music_list_size_last_beat_whole\
    \ = music_list_size_last_beat % 4\n        val music_list_size_last_beat_last_beat\
    \ = music_list_size_last_beat_whole - music_list_size_last_beat_quarter\n    \
    \    val music_list_size_last_beat_last_beat_half = music_list_size_last_beat_last_beat\
    \ / 2\n        val music_list_size_last_beat_last_beat_quarter = music_list_size_last_beat_last_beat\
    \ / 4\n        val music_list_size_last_beat_last_beat_whole = music_list_size_last_beat_last_beat\
    \ % 4\n        val music_list_size_last_beat_last_beat_last_beat = music_list_size_last_beat_last_beat_whole\
    \ - music_list_size_last_beat_last_beat_quarter\n        val music_list_size_last_beat_last_beat_last_beat_half\
    \ = music_list_size_last_beat_last_beat_last_beat / 2\n        val music_list_size_last_beat_last_beat_last_beat_quarter\
    \ = music_list_size_last_beat_last_beat_last_beat / 4\n        val music_list_size_last_beat_last_beat_last_beat_whole\
    \ = music_list_size_last_beat_last_beat_last_beat % 4\n        val music_list_size_last_beat_last_beat_last_beat_last_beat\
    \ = music_list_size_last_beat_last_beat_last_beat_whole - music_list_size_last_beat_last_beat_last_beat_quarter\n\
    \        val music_list_size_last_beat_last_beat_last_beat_last_beat_half = music_list_size_last_beat_last_beat_last_beat_last_beat\
    \ / 2\n        val music_list_size_last_beat_last_beat_last_beat_last_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr7v9wr_o.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr7v9wr_o.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                val beat = music_string.substring(0, 1)\n            \
    \    val rest = music_string.substring(1, music_string.length)\n             \
    \   beat.toLong\n            }).toList\n            note.toLong :: beats\n   \
    \     }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk8x46y1y.scala:23:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m            \e\
    [33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e[31m1\e\
    [0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = music_string.substring(\e\
    [31m1\e[0m, music_string.length)\n\e[31m17 |\e[0m            \e[33mval\e[0m \e\
    [36mbeats\e[0m = rest.split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\
    \e[31m18 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m, music_string.length)\n\e[31m20 |\e\
    [0m                beat.toLong\n\e[31m21 |\e[0m            }).toList\n\e[31m22\
    \ |\e[0m            note.toLong :: beats\n\e[31m23 |\e[0m        }).toList\n\e\
    [31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e\
    [31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val notes_length = notes_array.length\n        val notes_array = notes_array.map(_.toLong).toArray\n\
    \        val note\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcuibgyqp.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcuibgyqp.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_length\e[0m = notes_array.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcuibgyqp.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(_.toLong).toArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcuibgyqp.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcuibgyqp.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(_.toLong).toArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E16"
  stdout: ''
  timestamp: 1659799838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(rest =>\
    \ rest.split(\"o\").map(rest => rest.split(\"|\").map(rest => rest.split(\".\"\
    ).map(rest => rest.toLong).sum.toLong).sum.toLong).sum.toLong).sum.toLong\n  \
    \          beats.toLong\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmp4sks_v1q.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmp4sks_v1q.scala:19)\n\tat Problem$.main(tmp4sks_v1q.scala:22)\n\
    \tat Problem.main(tmp4sks_v1q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \   val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                beat.toLong * rest.toLong\n            }).sum\n            note.toLong\
    \ * beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppxkqjsfr.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.toLong\
    \ * rest.toLong\n\e[31m20 |\e[0m            }).sum\n\e[31m21 |\e[0m          \
    \  note.toLong * beats\n\e[31m22 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \   val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                beat.toLong * rest.length\n            }).sum\n            note\
    \ -> beats\n        }).groupBy(music_string => {\n            music_string._1\n\
    \        }).values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2am1_4c3.scala:24:18\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m            \e\
    [33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e[31m1\e\
    [0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m17\
    \ |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.toLong\
    \ * rest.length\n\e[31m20 |\e[0m            }).sum\n\e[31m21 |\e[0m          \
    \  note -> beats\n\e[31m22 |\e[0m        }).groupBy(\e[36mmusic_string\e[0m =>\
    \ {\n\e[31m23 |\e[0m            music_string._1\n\e[31m24 |\e[0m        }).values.toList\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mArray\e[0m\e[1m\e[31m[\e[0m\e[1m\e[31m(\e[0m\e[1m\e[31mString\e[0m\e\
    [1m\e[31m,\e[0m\e[1m\e[31m \e[0mLong\e[1m\e[31m)\e[0m\e[1m\e[31m]\e[0m]\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"\\\\ \").map(music_string =>\
    \ {\n                val note = music_string.charAt(0).toLowerCase\n         \
    \       val beats = music_string.substring(1).toInt\n                note -> beats\n\
    \            }).toList\n            val note = notes.head\n            val beats\
    \ = notes.last\n            note -> beats\n        }).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplihx9chl.scala:16:50 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e[0m = music_string.charAt(\e\
    [31m0\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmplihx9chl.scala:19:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            }).toList\n\e[31m\e[31m   |\e[0m        \
    \      ^\e[0m\n\e[31m   |\e[0m              No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m              where:    B is a type variable\n\e[31m\e\
    [31m-- Error: /tmp/tmplihx9chl.scala:23:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m          ^\e\
    [0m\n\e[31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m          where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1).dropRight(1)\n\
    \            val beats = rest.split(\"|\").map(x => x.toLong).sum\n          \
    \  beats * note.toLong\n        }).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8huor16a.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).dropRight(\e[31m1\e[0m)\n\e[31m17 |\e\
    [0m            \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\e[31m\"|\"\e[0m).map(\e\
    [36mx\e[0m => x.toLong).sum\n\e[31m18 |\e[0m            beats * note.toLong\n\e\
    [31m19 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\").map(_.toInt).toList\n\
    \        val notes = music_list.map(music_string => {\n            val note =\
    \ music_string.substring(0, 1)\n            val beats = music_string.substring(1).length\n\
    \            note -> beats\n        })\n        val notes_count = notes.map(x\
    \ => x._2).sum\n        val notes_count_list = notes.map(x => x._1).distinct\n\
    \        val notes_count_list_count = notes_count_list.map(x => notes_count.count(_\
    \ == x))\n        val notes_count_list_count_list = notes_count_list_count.map(x\
    \ => x._1).distinct\n        val notes_count_list_count_list_count = notes_count_list_count_list.map(x\
    \ => x._1).distinct\n        val notes_count_list_count_list_count_list = notes_count_list_count_list_count.map(x\
    \ => x._1).distinct\n        val notes_count_list_count_list_count_list_count\
    \ = notes_count_list_count_list_count_list.map(x => x._1).distinct\n        val\
    \ notes_count_list_count_list_count_list_count_list = notes_count_list_count_list_count_list_count.map(x\
    \ => x._1).distinct\n        val notes_count_list_count_list_count_list_count_list_count\
    \ = notes_count_list_count_list_count_list_count_list.map(x => x._1).distinct\n\
    \        val notes_count_list_count_list_count_list_count_list_count_list = notes_count_list_count_list_count_list_count_list_count.map(x\
    \ => x._1).distinct\n        val notes_count_list_count_list_count_list_count_list_count_list\
    \ = notes_count_list_count_list_count_list_count_list_count_list.map(x => x._1).distinct\n\
    \        val notes_count_list_count_list_count_list_count_list_count_list_count\
    \ = notes_count_list_count_list_count_list_count_list_count_list_count.map(x =>\
    \ x._1).distinct\n        val notes_count_list_count_list_count_list_count_list_count_list_count_list\
    \ = notes_count_list_count_list_count_list_count_list_count_list_count_list.map(x\
    \ => x._1).distinct\n        val notes_count_list_count_list_count_list_count_list_count_list_count_list_count\
    \ = notes_count_list_count_list_count_list_count_list_count_list_count_list_count.map(x\
    \ => x._1).distinct\n        val notes_count_list_count_list_count_list_count_list_count_list_count_list_count_list\
    \ = notes_count_list_count_list_count_list_count_list_count_list_count_list_count.map(x\
    \ => x._1).distinct\n        val notes_count_list_count_list_count_list_count_list_count_list_count_list_count_list_count\
    \ = note\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7mxt0mn8.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_list_count_list_count_list_count_list_count_list\e\
    [0m = notes_count_list_count_list_count_list_count_list_count_list.map(\e[36mx\e\
    [0m => x._1).distinct\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_count_list_count_list_count_list_count_list_count_list\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_count_list_count_list_count_list_count_list_count_list\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp7mxt0mn8.scala:16:36 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value substring is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7mxt0mn8.scala:17:37 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m1\e[0m).length\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value substring is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7mxt0mn8.scala:20:43 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_count\e[0m = notes.map(\e\
    [36mx\e[0m => x._2).sum\n\e[31m\e[31m   |\e[0m                               \
    \          ^^^^\e[0m\n\e[31m   |\e[0mvalue _2 is not a member of Nothing, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import concurrent.duration.durationToPair\n\e[31m   |\e[0m\n\e[31m\e[31m--\
    \ Error: /tmp/tmp7mxt0mn8.scala:20:50 -------------------"
  stdout: ''
  timestamp: 1659799840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"\\\\ \").map(music_string =>\
    \ {\n                val note = music_string.substring(0, 1)\n               \
    \ val beats = music_string.substring(1).split(\"o\").map(music_string => {\n \
    \                   val beat = music_string.substring(0, 1)\n                \
    \    beat.charAt(0).toLong\n                })\n                (note, beats)\n\
    \            })\n            notes.map(music_string => {\n                music_string._1.charAt(0).toLong\n\
    \            })\n        }).flatten.distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsibtx8mk.scala:26:19\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"\\\\ \"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e\
    [0m = music_string.substring(\e[31m0\e[0m, \e[31m1\e[0m)\n\e[31m17 |\e[0m    \
    \            \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e[31m1\e\
    [0m).split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m18 |\e[0m\
    \                    \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m19 |\e[0m                    beat.charAt(\e[31m0\e\
    [0m).toLong\n\e[31m20 |\e[0m                })\n\e[31m21 |\e[0m              \
    \  (note, beats)\n\e[31m22 |\e[0m            })\n\e[31m23 |\e[0m            notes.map(\e\
    [36mmusic_string\e[0m => {\n\e[31m24 |\e[0m                music_string._1.charAt(\e\
    [31m0\e[0m).toLong\n\e[31m25 |\e[0m            })\n\e[31m26 |\e[0m        }).flatten.distinct\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e\
    [31mArray\e[0m[Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_2 =\
    \ music_list_size / 2\n        val music_list_size_3 = music_list_size_2 / 2\n\
    \        val music_list_size_4 = music_list_size_3 / 2\n        val music_list_size_5\
    \ = music_list_size_4 / 2\n        val music_list_size_6 = music_list_size_5 /\
    \ 2\n        val music_list_size_7 = music_list_size_6 / 2\n        val music_list_size_8\
    \ = music_list_size_7 / 2\n        val music_list_size_9 = music_list_size_8 /\
    \ 2\n        val music_list_size_10 = music_list_size_9 / 2\n        val music_list_size_11\
    \ = music_list_size_10 / 2\n        val music_list_size_12 = music_list_size_11\
    \ / 2\n        val music_list_size_13 = music_list_size_12 / 2\n        val music_list_size_14\
    \ = music_list_size_13 / 2\n        val music_list_size_15 = music_list_size_14\
    \ / 2\n        val music_list_size_16 = music_list_size_15 / 2\n        val music_list_size_17\
    \ = music_list_size_16 / 2\n        val music_list_size_18 = music_list_size_17\
    \ / 2\n        val music_list_size_19 = music_list_size_18 / 2\n        val music_list_size_20\
    \ = music_list_size_19 / 2\n        val music_list_size_21 = music_list_size_20\
    \ / 2\n        val music_list_size_22 = music_list_size_21 / 2\n        val music_list_size_23\
    \ = music_list_size_22 / 2\n        val music_list_size_24 = music_list_size_23\
    \ / 2\n        val music_list_size_25 = music_list_size_24 / 2\n        val music_list_size_26\
    \ = music_list_size_25 / 2\n        val music_list_size_27 = music_list_size_26\
    \ / 2\n        val music_list_size_28 = music_list_size_27 / 2\n        val music_list_size_29\
    \ = music_list_size_28 / 2\n        val music_list_size_30 = music_list_size_29\
    \ / 2\n        val music_list_size_31 = music_list_size_30 / 2\n        val music_list_size_32\
    \ = music_list_size_31 / 2\n        val music_list_size_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwxdjovpx.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwxdjovpx.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_count = notes.length\n        val notes_beats = notes.map(_.length.toLong)\n\
    \        val notes_beats_count = notes_beats.sum\n        val notes_beats_count_2\
    \ = notes_beats_count / 2\n        val notes_beats_count_3 = notes_beats_count\
    \ / 3\n        val notes_beats_count_4 = notes_beats_count / 4\n        val notes_beats_count_5\
    \ = notes_beats_count / 5\n        val notes_beats_count_6 = notes_beats_count\
    \ / 6\n        val notes_beats_count_7 = notes_beats_count / 7\n        val notes_beats_count_8\
    \ = notes_beats_count / 8\n        val notes_beats_count_9 = notes_beats_count\
    \ / 9\n        val notes_beats_count_10 = notes_beats_count / 10\n        val\
    \ notes_beats_count_11 = notes_beats_count / 11\n        val notes_beats_count_12\
    \ = notes_beats_count / 12\n        val notes_beats_count_13 = notes_beats_count\
    \ / 13\n        val notes_beats_count_14 = notes_beats_count / 14\n        val\
    \ notes_beats_count_15 = notes_beats_count / 15\n        val notes_beats_count_16\
    \ = notes_beats_count / 16\n        val notes_beats_count_17 = notes_beats_count\
    \ / 17\n        val notes_beats_count_18 = notes_beats_count / 18\n        val\
    \ notes_beats_count_19 = notes_beats_count / 19\n        val notes_beats_count_20\
    \ = notes_beats_count / 20\n        val notes_beats_count_21 = notes_beats_count\
    \ / 21\n        val notes_beats_count_22 = notes_beats_count / 22\n        val\
    \ notes_beats_count_23 = notes_beats_count / 23\n        val notes_beats_count_24\
    \ = notes_beats_count / 24\n        val notes_beats_count_25 = notes_beats_count\
    \ / 25\n        val notes_beats_count_26 = notes_beats_count / 26\n        val\
    \ notes_beats_count_27 = notes_beats_count / 27\n        val notes_beats_count_28\
    \ = notes_beats_count / 28\n        val notes_beats_count_29 = notes_beats_count\
    \ / 29\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp61lfwepo.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \")\n     \
    \   val music_list_length = music_list.length\n        val music_list_without_notes\
    \ = music_list.filterNot(music_list => music_list.isEmpty)\n        val music_list_without_notes_length\
    \ = music_list_without_notes.length\n        val music_list_without_notes_without_notes\
    \ = music_list_without_notes.filterNot(music_list_without_notes => music_list_without_notes.isEmpty)\n\
    \        val music_list_without_notes_without_notes_length = music_list_without_notes_without_notes.length\n\
    \        val music_list_without_notes_without_notes_without_notes = music_list_without_notes_without_notes.filterNot(music_list_without_notes_without_notes\
    \ => music_list_without_notes_without_notes.isEmpty)\n        val music_list_without_notes_without_notes_without_notes_length\
    \ = music_list_without_notes_without_notes_without_notes.length\n        val music_list_without_notes_without_notes_without_notes_without_notes\
    \ = music_list_without_notes_without_notes_without_notes.filterNot(music_list_without_notes_without_notes_without_notes\
    \ => music_list_without_notes_without_notes_without_notes.isEmpty)\n        val\
    \ music_list_without_notes_without_notes_without_notes_without_notes_length =\
    \ music_list_without_notes_without_notes_without_notes_without_notes.length\n\
    \        val music_list_without_notes_without_notes_without_notes_without_notes_without_notes\
    \ = music_list_without_notes_without_notes_without_notes_without_notes.filterNot(music_list_without_notes_without_notes_without_notes_without_notes\
    \ => music_list_without_notes_without_notes_without_notes_without_notes.isEmpty)\n\
    \        val music_list_without_notes_without_notes_without_notes_without_notes_without_notes_length\
    \ = music_list_without_notes_without_notes_without_notes_without_notes_without_notes.length\n\
    \        val music_list_without_notes_without_notes_without_notes_without_notes_without_notes_without_notes\
    \ = music_list_without_notes_without_notes_without_notes_without_notes_without_notes_without_notes.length\n\
    \        val music_list_without_notes_without_notes_without_notes_without_notes_without_notes_without_notes_length\
    \ = music_list_without_notes_without_notes_without_notes_without_notes_without_notes_without_notes.length\n\
    \        val music_list_without_notes_without_notes_without_notes_without_notes_without_note\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpagt__l_4.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpagt__l_4.scala:26:109\
    \ --------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_without_notes_without_notes_without_notes_without_notes_without_notes_without_notes\e\
    [0m = music_list_without_notes_without_notes_without_notes_without_notes_without_notes_without_notes.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                     ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_list_without_notes_without_notes_without_notes_without_notes_without_notes_without_notes\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpagt__l_4.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"o\").map(music_string => {\n\
    \                val note = music_string.split(\"|\")\n                note(0)\n\
    \            }).toList\n            val beats = notes.map(note => {\n        \
    \        val beat = note.split(\".\").map(music_string => {\n                \
    \    val beat = music_string.split(\"|\")\n                    beat(0)\n     \
    \           }).toList\n                beat.map(beat => {\n                  \
    \  val beat = beat.map(music_string => {\n                        val beat = music_string.split(\"\
    |\")\n                        beat(0)\n                    }).toList\n       \
    \             beat.map(beat => {\n                        val beat = beat.map(music_string\
    \ => {\n                            val beat = music_string.split(\"|\")\n   \
    \                         beat(0)\n                        }).toList\n       \
    \                 beat.map(beat => {\n                            val beat = beat.map(music_string\
    \ => {\n                                val beat = music_string.split(\"|\")\n\
    \                                beat(0)\n                            }).toList\n\
    \                            beat.map(beat => {\n                            \
    \    val beat = beat.map(music_string => {\n                                 \
    \   val beat = music_string.split(\"|\")\n                                   \
    \ beat(0)\n                                }).toList\n                       \
    \         beat.map(beat => {\n                                    val beat = beat.map(music_string\
    \ => {\n                                        val beat = music_string.split(\"\
    |\")\n                                        beat(0)\n                      \
    \              }).toList\n                                    beat.map(beat =>\
    \ {\n                                        val beat = beat.map(music_string\
    \ => {\n                                            val beat = music_string.split(\"\
    |\")\n                                            beat(0)\n                  \
    \                      }).toList\n                                        beat.map(beat\
    \ => {\n                                            val beat = beat.map(music_string\
    \ => {\n                                                val beat = music_string.split(\"\
    |\")\n                                                beat(0)\n              \
    \                              }).toList\n                                   \
    \         beat.map(beat => {\n                                               \
    \ val beat = beat.map(music_string => {\n                                    \
    \                val beat = music_string.split(\"|\")\n                      \
    \                              beat(0)\n                                     \
    \           }).toList\n                                                beat.map(beat\
    \ => {\n                                                    val beat = beat.map(music_string\
    \ => {\n                                                        val beat = music_string.split(\"\
    |\")\n                                                        beat(0)\n      \
    \                                              }).toList\n                   \
    \                                 beat.map(beat => {\n                       \
    \                                 val beat = beat.map(music_string => {\n    \
    \                                                        val beat = music_string.split(\"\
    |\")\n                                                            beat(0)\n  \
    \                                                      }).toList\n           \
    \                                             beat.map(beat => {\n           \
    \                                                 val beat = beat.map(music_string\
    \ => {\n                                                                val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpvmdkzqnb.scala:76:67 ---------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m                                                    \
    \            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m                          \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                                            pattern expected\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpvmdkzqnb.scala:78:4 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpvmdkzqnb.scala:87:0 ----------------------------\e[0m\e[0m\n\e[31m87\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_count = notes.length\n        val notes_beats = notes.map(n => n.length.toLong)\n\
    \        val notes_beats_count = notes_beats.sum\n        val notes_beats_count_2\
    \ = notes_beats_count * 2\n        val notes_beats_count_3 = notes_beats_count\
    \ * 3\n        val notes_beats_count_4 = notes_beats_count * 4\n        val notes_beats_count_5\
    \ = notes_beats_count * 5\n        val notes_beats_count_6 = notes_beats_count\
    \ * 6\n        val notes_beats_count_7 = notes_beats_count * 7\n        val notes_beats_count_8\
    \ = notes_beats_count * 8\n        val notes_beats_count_9 = notes_beats_count\
    \ * 9\n        val notes_beats_count_10 = notes_beats_count * 10\n        val\
    \ notes_beats_count_11 = notes_beats_count * 11\n        val notes_beats_count_12\
    \ = notes_beats_count * 12\n        val notes_beats_count_13 = notes_beats_count\
    \ * 13\n        val notes_beats_count_14 = notes_beats_count * 14\n        val\
    \ notes_beats_count_15 = notes_beats_count * 15\n        val notes_beats_count_16\
    \ = notes_beats_count * 16\n        val notes_beats_count_17 = notes_beats_count\
    \ * 17\n        val notes_beats_count_18 = notes_beats_count * 18\n        val\
    \ notes_beats_count_19 = notes_beats_count * 19\n        val notes_beats_count_20\
    \ = notes_beats_count * 20\n        val notes_beats_count_21 = notes_beats_count\
    \ * 21\n        val notes_beats_count_22 = notes_beats_count * 22\n        val\
    \ notes_beats_count_23 = notes_beats_count * 23\n        val notes_beats_count_24\
    \ = notes_beats_count * 24\n        val notes_beats_count_25 = notes_beats_count\
    \ * 25\n        val notes_beats_count_26 = notes_beats_count * 26\n        val\
    \ notes_beats_count_27 = notes_beats_count * 27\n        val notes_beats_count_28\
    \ = notes_beats_count * 28\n        val notes_beats_count_29 = notes_beats_count\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpty7_izpz.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_notes = music_string.split(\"\\\\|\")\n\
    \        val notes = music_notes.map(music_note => music_note.split(\"o\"))\n\
    \        val notes_length = notes.map(music_note => music_note.size)\n       \
    \ val notes_length_sum = notes_length.foldLeft(0l)(_ + _)\n        val notes_length_average\
    \ = notes_length_sum / notes_length.length\n        val notes_length_average_list\
    \ = notes_length_average.toList.map(_.toLong)\n        val notes_length_average_list2\
    \ = notes_length_average_list.toList.sortWith(_ < _)\n        val notes_length_average_list3\
    \ = notes_length_average_list2.toList.sortWith(_ < _)\n        val notes_length_average_list4\
    \ = notes_length_average_list3.toList.sortWith(_ < _)\n        val notes_length_average_list5\
    \ = notes_length_average_list4.toList.sortWith(_ < _)\n        val notes_length_average_list6\
    \ = notes_length_average_list5.toList.sortWith(_ < _)\n        val notes_length_average_list7\
    \ = notes_length_average_list6.toList.sortWith(_ < _)\n        val notes_length_average_list8\
    \ = notes_length_average_list7.toList.sortWith(_ < _)\n        val notes_length_average_list9\
    \ = notes_length_average_list8.toList.sortWith(_ < _)\n        val notes_length_average_list10\
    \ = notes_length_average_list9.toList.sortWith(_ < _)\n        val notes_length_average_list11\
    \ = notes_length_average_list10.toList.sortWith(_ < _)\n        val notes_length_average_list12\
    \ = notes_length_average_list11.toList.sortWith(_ < _)\n        val notes_length_average_list13\
    \ = notes_length_average_list12.toList.sortWith(_ < _)\n        val notes_length_average_list14\
    \ = notes_length_average_list13.toList.sortWith(_ < _)\n        val notes_length_average_list15\
    \ = notes_length_average_list14.toList.sortWith(_ < _)\n        val notes_length_average_list16\
    \ = notes_length_average_list15.toList.sortWith(_ < _)\n        val notes_length_average_list17\
    \ = notes_length_average_list16.toList.sortWith(_ < _)\n        val notes_length_average_list18\
    \ = notes_length_average_list17.toList.sortWith(_ < _)\n        val notes_length_average\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj2nohvyq.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj2nohvyq.scala:19:61\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_length_average_list\e[0m = notes_length_average.toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toList is not a member of Long - did you mean notes_length_average.toInt?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj2nohvyq.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase)\n\
    \        val notes = music_list.filterNot(_ == \"O\")\n        val notes_length\
    \ = notes.map(_.length).sum\n        val notes_last_beat = notes.map(_.last).sum\n\
    \        val notes_last_beats = notes_last_beat/notes_length\n        val notes_last_beats_int\
    \ = notes_last_beats.toInt\n        val notes_last_beats_ints = notes_last_beats_int.toList.map(_.toLong)\n\
    \        val notes_last_beats_ints_sorted = notes_last_beats_ints.sortBy(_)\n\
    \        val notes_last_beats_ints_sorted_length = notes_last_beats_ints_sorted.length\n\
    \        val notes_last_beats_ints_sorted_length = notes_last_beats_ints_sorted_length.toLong\n\
    \        val notes_last_beats_ints_sorted_length_2 = notes_last_beats_ints_sorted_length/2\n\
    \        val notes_last_beats_ints_sorted_length_3 = notes_last_beats_ints_sorted_length/3\n\
    \        val notes_last_beats_ints_sorted_length_4 = notes_last_beats_ints_sorted_length/4\n\
    \        val notes_last_beats_ints_sorted_length_5 = notes_last_beats_ints_sorted_length/5\n\
    \        val notes_last_beats_ints_sorted_length_6 = notes_last_beats_ints_sorted_length/6\n\
    \        val notes_last_beats_ints_sorted_length_7 = notes_last_beats_ints_sorted_length/7\n\
    \        val notes_last_beats_ints_sorted_length_8 = notes_last_beats_ints_sorted_length/8\n\
    \        val notes_last_beats_ints_sorted_length_9 = notes_last_beats_ints_sorted_length/9\n\
    \        val notes_last_beats_ints_sorted_length_10 = notes_last_beats_ints_sorted_length/10\n\
    \        val notes_last_beats_ints_sorted_length_11 = notes_last_beats_ints_sorted_length/11\n\
    \        val notes_last_beats_ints_sorted_length_12 = notes_last_beats_ints_sorted_length/12\n\
    \        val notes_last_beats_ints_sorted_length_13 = notes_last_beats_ints_sorted_length/13\n\
    \        val notes_last_beats_ints_sorted_length_14 = notes_last_beats_ints_sorted_length/14\n\
    \        val notes_last_beats_ints_sorted_length_15 = notes_last_beats_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9f0ra4fo.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beats_ints_sorted_length\e\
    [0m = notes_last_beats_ints_sorted_length.toLong\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_last_beats_ints_sorted_length is already defined as\
    \ \e[33mvalue\e[0m \e[35mnotes_last_beats_ints_sorted_length\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9f0ra4fo.scala:20:57\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_last_beats_ints\e[0m = notes_last_beats_int.toList.map(_.toLong)\n\e\
    [31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toList is not a member of Int - did you mean notes_last_beats_int.toInt?\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmp9f0ra4fo.scala:21:72 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beats_ints_sorted\e\
    [0m = notes_last_beats_ints.sortBy(_)\n\e[31m\e[31m   |\e[0m                 \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$6 of expanded function:\n\e[31m   |\e[0m   _$6 =>\
    \ notes_last_beats_ints.sortBy(_$6).\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9f0ra4fo.scala:37:53\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_last_beats_ints_sorted_length_15\e[0m = notes_last_beats_\n\e[31m\e\
    [31m   |\e[0m                                                     ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Not found: notes_last_beats_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9f0ra4fo.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e"
  stdout: ''
  timestamp: 1659799839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_count = notes.length\n        val notes_beats = notes.map(x => x.toInt)\n\
    \        val notes_beats_count = notes_beats.map(x => x.toLong)\n        val notes_beats_count_sum\
    \ = notes_beats_count.sum\n        val notes_beats_count_count_sum = notes_beats_count.map(x\
    \ => x.toLong).sum\n        val notes_beats_count_count_count_sum = notes_beats_count.map(x\
    \ => x.toLong).map(x => x.toLong).sum\n        val notes_beats_count_count_count_count_sum\
    \ = notes_beats_count.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n\
    \        val notes_beats_count_count_count_count_count_sum = notes_beats_count.map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n\
    \        val notes_beats_count_count_count_count_count_count_sum = notes_beats_count.map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).sum\n        val notes_beats_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n        val notes_beats_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).sum\n        val notes_beats_count_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count.map(x => x.toLong).map(x => x.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk9vsflto.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpk9vsflto.scala:27:138\
    \ -----------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_beats_count_count_count_count_count_count_count_count_count_count_sum\e\
    [0m = notes_beats_count.map(\e[36mx\e[0m => x.toLong).map(\e[36mx\e[0m => x.to\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \    ^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mto\e[0m in \e[33mtrait\e[0m \e[35mIntegralProxy\e\
    [0m with types\n\e[31m   |\e[0m (end: Long, step: Long): scala.collection.immutable.NumericRange.Inclusive[Long]\n\
    \e[31m   |\e[0m (end: Long): scala.collection.immutable.NumericRange.Inclusive[Long]\n\
    \e[31m   |\e[0mboth match expected type B\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpk9vsflto.scala:28:5 ---------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(rest => {\n                val\
    \ beat = rest.charAt(0)\n                val rest = rest.substring(1).trim\n \
    \               val rest = rest.toLong\n                beat match {\n       \
    \             case \"o\" => rest\n                    case \"o|\" => rest / 2\n\
    \                    case \".|\" => rest / 4\n                    case _ => throw\
    \ new Exception(\"Invalid music string: \" + music_string)\n                }\n\
    \            }).sum\n            note match {\n                case \"o\" => beats\n\
    \                case \"o|\" => beats / 2\n                case \".|\" => beats\
    \ / 4\n                case _ => throw new Exception(\"Invalid music string: \"\
    \ + music_string)\n            }\n        }).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5ia6isbt.scala:20:20 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mrest\e[0m = rest.toLong\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mrest is already defined as \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmp5ia6isbt.scala:27:14\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \     }).sum\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m     \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \        where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmp5ia6isbt.scala:29:21\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \         \e[33mcase\e[0m \e[31m\"o\"\e[0m => beats\n\e[31m\e[31m   |\e[0m   \
    \                  ^^^\e[0m\n\e[31m   |\e[0m        Values of types String and\
    \ Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp5ia6isbt.scala:30:21\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m30 |\e[0m       \
    \         \e[33mcase\e[0m \e[31m\"o|\"\e[0m => beats / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp5ia6isbt.scala:31:21 -----------------------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                \e[33mcase\e[0m \e[31m\".|\"\e[0m => beats\
    \ / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp5ia6isbt.scala:34:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        }).sum\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\
    \e[31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m          where:    B is a type variable\n6 errors found\n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_length = music_list.length\n        val music_list_beats\
    \ = music_list.map(music_string => {\n            val music_string_length = music_string.length\n\
    \            val music_string_beats = music_string.split(\"o\").length\n     \
    \       music_string_beats * music_string_length\n        }).toList\n        val\
    \ music_list_beats_length = music_list_beats.length\n        val music_list_beats_length\
    \ = music_list_beats_length / music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_length\
    \ / 4\n        val music_list_beats_length = music_list_beats_length.toLong\n\
    \        val music_list_beats_length = music_list_beats_length / 2\n        val\
    \ music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length\
    \ = music_list_beats_length / 1\n        val music_list_beats_length = music_list_beats_length.toLong\n\
    \        val music_list_beats_length = music_list_beats_length / 4\n        val\
    \ music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length\
    \ = music_list_beats_length / 2\n        val music_list_beats_length = music_list_beats_length.toLong\n\
    \        val music_list_beats_length = music_list_beats_length / 1\n        val\
    \ music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length.toLong\n\
    \        val music_list_beats_length = music_list_beats_length / 2\n        val\
    \ music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length\
    \ = music_list_beats_length / 1\n        val music_list_beats_length = music_list_beats_length.toLong\n\
    \        val music_list_beats_length = music_list_beats_length / 4\n        val\
    \ music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length\
    \ = music_list_beats_length / 2\n        val music_list_beats_length = music_list_beats_length.toLong\n\
    \        val music_list_beat\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2rlgtt0j.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2rlgtt0j.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_beats_length\e[0m = music_list_beats_length / music_list_length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2rlgtt0j.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2rlgtt0j.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2rlgtt0j.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"\\\\ \").map(music_string =>\
    \ {\n                val note = music_string.charAt(0).toLowerCase\n         \
    \       val beats = music_string.substring(1).toLong\n                note\n \
    \           })\n            notes.map(note => {\n                note match {\n\
    \                    case \"o\" => 4l.toLong\n                    case \"o|\"\
    \ => 2l.toLong\n                    case \".|\" => 1l.toLong\n               \
    \     case _ => 0l.toLong\n                }\n            }).sum\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr8k8_yk1.scala:16:50 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e[0m = music_string.charAt(\e\
    [31m0\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmpr8k8_yk1.scala:19:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            })\n\e[31m\e[31m   |\e[0m              ^\e\
    [0m\n\e[31m   |\e[0m              No ClassTag available for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m              where:    B is a type variable\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpr8k8_yk1.scala:28:10 -----------------------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\
    \e[31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m          where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n\
    \        val music_list = music_list.filter(music_string => music_string != \"\
    .\")\n        val music_list = music_list.filter(music_string => music_string\
    \ != \"o\")\n        val music_list = music_list.filter(music_string => music_string\
    \ != \"|\")\n        val music_list = music_list.filter(music_string => music_string\
    \ != \"o|\")\n        val music_list = music_list.filter(music_string => music_string\
    \ != \".|\")\n        val music_list = music_list.filter(music_string => music_string\
    \ != \"o|.\")\n        val music_list = music_list.filter(music_string => music_string\
    \ != \"o|o\")\n        val music_list = music_list.filter(music_string => music_string\
    \ != \"o|o|\")\n        val music_list = music_list.filter(music_string => music_string\
    \ != \"o|o|.\")\n        val music_list = music_list.filter(music_string => music_string\
    \ != \"o|o|o\")\n        val music_list = music_list.filter(music_string => music_string\
    \ != \"o|o|o|\")\n        val music_list = music_list.filter(music_string => music_string\
    \ != \"o|o|o|.\")\n        val music_list = music_list.filter(music_string =>\
    \ music_string != \"o|o|o|o\")\n        val music_list = music_list.filter(music_string\
    \ => music_string != \"o|o|o|o|\")\n        val music_list = music_list.filter(music_string\
    \ => music_string != \"o|o|o|o|.\")\n        val music_list = music_list.filter(music_string\
    \ => music_string != \"o|o|o|o|o\")\n        val music_list = music_list.filter(music_string\
    \ => music_string != \"o|o|o|o|o|\")\n        val music_list = music_list.filter(music_string\
    \ => music_string != \"o|o|o|o|o|.\")\n        val music_list = music_list.filter(music_string\
    \ => music_string != \"o|o|o|o|o|o\")\n        val music_list = music_list.filter(music_string\
    \ => music_string != \"o|o|o|o|o|o|\")\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpd6l6vb9a.scala:35:11 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpd6l6vb9a.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e[0m = music_list.filter(\e\
    [36mmusic_string\e[0m => music_string != \e[31m\".\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list is already defined as \e[33mvalue\e[0m \e[35mmusic_list\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6l6vb9a.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e[0m = music_list.filter(\e\
    [36mmusic_string\e[0m => music_string != \e[31m\"o\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list is already defined as \e[33mvalue\e[0m \e[35mmusic_list\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6l6vb9a.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e[0m = music_list.filter(\e\
    [36mmusic_string\e[0m => music_string != \e[31m\"|\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list is already defined as \e[33mvalue\e[0m \e[35mmusic_list\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd6l6vb9a.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e[0m = music_li"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase())\n\
    \        val notes_count = notes.map(x => if (x == \"O\") 4 else if (x == \"|\"\
    ) 2 else 1)\n        val beats_count = notes_count.map(x => x * 4)\n        val\
    \ beats_count_sum = beats_count.sum\n        val beats_count_list = beats_count.toList\n\
    \        val notes_count_list = notes_count.toList\n        val notes_count_list_sum\
    \ = notes_count_list.sum\n        val notes_count_list_list_sum = notes_count_list.map(x\
    \ => x * 4).sum\n        val notes_count_list_list_list_sum = notes_count_list.map(x\
    \ => x * 4).map(x => x * 4).sum\n        val notes_count_list_list_list_list_sum\
    \ = notes_count_list.map(x => x * 4).map(x => x * 4).map(x => x * 4).sum\n   \
    \     val notes_count_list_list_list_list_list_sum = notes_count_list.map(x =>\
    \ x * 4).map(x => x * 4).map(x => x * 4).map(x => x * 4).sum\n        val notes_count_list_list_list_list_list_list_sum\
    \ = notes_count_list.map(x => x * 4).map(x => x * 4).map(x => x * 4).map(x =>\
    \ x * 4).map(x => x * 4).sum\n        val notes_count_list_list_list_list_list_list_list_sum\
    \ = notes_count_list.map(x => x * 4).map(x => x * 4).map(x => x * 4).map(x =>\
    \ x * 4).map(x => x * 4).map(x => x * 4).sum\n        val notes_count_list_list_list_list_list_list_list_list_sum\
    \ = notes_count_list.map(x => x * 4).map(x => x * 4).map(x => x * 4).map(x =>\
    \ x * 4).map(x => x * 4).map(x => x * 4).map(x => x * 4).sum\n        val notes_count_list_list_list_list_list_list_list_list_list_sum\
    \ = notes_count_list.map(x => x * 4).map(x => x * 4).map(x => x * 4).map(x =>\
    \ x * 4).map(x => x * 4).map(x => x * 4).map(x => x * 4).map(x => x * 4).sum\n\
    \        val notes_count_list_list_list_list_list_list_list_list_list_sum = notes_count_list.map(x\
    \ => x * 4).map(x => x * 4).map(x => x * 4).map(x => x * 4).map(x => x * 4).map(x\
    \ => x * 4\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphh_k693y.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphh_k693y.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_count_list_list_list_list_list_list_list_list_list_sum\e[0m = notes_count_list.map(\e\
    [36mx\e[0m => x * \e[31m4\e[0m).map(\e[36mx\e[0m => x * \e[31m4\e[0m).map(\e[36mx\e\
    [0m => x * \e[31m4\e[0m).map(\e[36mx\e[0m => x * \e[31m4\e[0m).map(\e[36mx\e[0m\
    \ => x * \e[31m4\e[0m).map(\e[36mx\e[0m => x * \e[31m4\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_count_list_list_list_list_list_list_list_list_list_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_count_list_list_list_list_list_list_list_list_list_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmphh_k693y.scala:30:5 ---------------------\e[0m\e[0m\n\
    \e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\").map(_.toInt).toList\n\
    \        val music_beats = music_list.map(music_note => music_note / 4)\n    \
    \    val music_rest = music_list.map(music_note => music_note % 4)\n        music_beats\
    \ ++ music_rest\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwd7n2pg8.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        music_beats ++ music_rest\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_2 =\
    \ music_list_size / 2\n        val music_list_size_3 = music_list_size_2 / 2\n\
    \        val music_list_size_4 = music_list_size_3 / 2\n        val music_list_size_5\
    \ = music_list_size_4 / 2\n        val music_list_size_6 = music_list_size_5 /\
    \ 2\n        val music_list_size_7 = music_list_size_6 / 2\n        val music_list_size_8\
    \ = music_list_size_7 / 2\n        val music_list_size_9 = music_list_size_8 /\
    \ 2\n        val music_list_size_10 = music_list_size_9 / 2\n        val music_list_size_11\
    \ = music_list_size_10 / 2\n        val music_list_size_12 = music_list_size_11\
    \ / 2\n        val music_list_size_13 = music_list_size_12 / 2\n        val music_list_size_14\
    \ = music_list_size_13 / 2\n        val music_list_size_15 = music_list_size_14\
    \ / 2\n        val music_list_size_16 = music_list_size_15 / 2\n        val music_list_size_17\
    \ = music_list_size_16 / 2\n        val music_list_size_18 = music_list_size_17\
    \ / 2\n        val music_list_size_19 = music_list_size_18 / 2\n        val music_list_size_20\
    \ = music_list_size_19 / 2\n        val music_list_size_21 = music_list_size_20\
    \ / 2\n        val music_list_size_22 = music_list_size_21 / 2\n        val music_list_size_23\
    \ = music_list_size_22 / 2\n        val music_list_size_24 = music_list_size_23\
    \ / 2\n        val music_list_size_25 = music_list_size_24 / 2\n        val music_list_size_26\
    \ = music_list_size_25 / 2\n        val music_list_size_27 = music_list_size_26\
    \ / 2\n        val music_list_size_28 = music_list_size_27 / 2\n        val music_list_size_29\
    \ = music_list_size_28 / 2\n        val music_list_size_30 = music_list_size_29\
    \ / 2\n        val music_list_size_31 = music_list_size_30 / 2\n        val music_list_size_32\
    \ = music_list_size_31 / 2\n        val music_list_size_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwxdjovpx.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwxdjovpx.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest2 = music_string.substring(1).split(\"|\").map(music_string =>\
    \ {\n                        val rest2 = music_string.charAt(0)\n            \
    \            val rest3 = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                            val rest3 = music_string.charAt(0)\n     \
    \                       val rest4 = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                val rest4 = music_string.charAt(0)\n \
    \                               val rest5 = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                    val rest5 = music_string.charAt(0)\n\
    \                                    val rest6 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest6\
    \ = music_string.charAt(0)\n                                        val rest7\
    \ = music_string.substring(1).split(\"o\").map(music_string => {\n           \
    \                                 val rest7 = music_string.charAt(0)\n       \
    \                                     val rest8 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                val\
    \ rest8 = music_string.charAt(0)\n                                           \
    \     val rest9 = music_string.substring(1).split(\"o\").map(music_string => {\n\
    \                                                    val rest9 = music_string.charAt(0)\n\
    \                                                    val rest10 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \       val rest10 = music_string.charAt(0)\n                                \
    \                        val rest11 = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                            val rest11\
    \ = music_string.charAt(0)\n                                                 \
    \           val rest12 = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                                                val rest12\
    \ = music_string.charAt(0)\n                                                 \
    \               val rest13 = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                                    val\
    \ rest13 = music_string.charAt(0)\n                                          \
    \                          val rest14 = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \                    val rest14 = music_string.charAt(0)\n                   \
    \                                                     val rest15 = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                           val rest15 = music_string.charAt(0)\n            \
    \                                                                val rest16 =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \                                                                   val rest16\
    \ = music_string.charAt(\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa0kwglvm.scala:49:113 --------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest16\e[0m = music_string.charAt(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa0kwglvm.scala:51:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m51 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpa0kwglvm.scala:60:0 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase)\n\
    \        val music_list_size = music_list.size\n        val music_list_size_half\
    \ = music_list_size / 2\n        val music_list_size_quarter = music_list_size\
    \ / 4\n        val music_list_size_whole = music_list_size.toLong\n        val\
    \ music_list_size_quarter = music_list_size_quarter / 4\n        val music_list_size_whole\
    \ = music_list_size_whole / 4\n        val music_list_size_half = music_list_size_half\
    \ / 2\n        val music_list_size_quarter = music_list_size_quarter / 4\n   \
    \     val music_list_size_whole = music_list_size_whole / 4\n        val music_list_size_half\
    \ = music_list_size_half / 2\n        val music_list_size_quarter = music_list_size_quarter\
    \ / 4\n        val music_list_size_whole = music_list_size_whole / 4\n       \
    \ val music_list_size_half = music_list_size_half / 2\n        val music_list_size_quarter\
    \ = music_list_size_quarter / 4\n        val music_list_size_whole = music_list_size_whole\
    \ / 4\n        val music_list_size_half = music_list_size_half / 2\n        val\
    \ music_list_size_quarter = music_list_size_quarter / 4\n        val music_list_size_whole\
    \ = music_list_size_whole / 4\n        val music_list_size_half = music_list_size_half\
    \ / 2\n        val music_list_size_quarter = music_list_size_quarter / 4\n   \
    \     val music_list_size_whole = music_list_size_whole / 4\n        val music_list_size_half\
    \ = music_list_size_half / 2\n        val music_list_size_quarter = music_list_size_quarter\
    \ / 4\n        val music_list_size_whole = music_list_size_whole / 4\n       \
    \ val music_list_size_half = music_list_size_half / 2\n        val music_list_size_quarter\
    \ = music_list_size_quarter / 4\n        val music_list_size_whole = music_list_size_whole\
    \ / 4\n        val music_list_size_half = music_list_size_half / 2\n        val\
    \ music_list_size_quarter = music_list_size_quarter / 4\n        val music_list_size_whole\
    \ = music_list_size_whole / 4\n        val music_list_size_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkt3wmyzr.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkt3wmyzr.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_quarter\e[0m = music_list_size_quarter / \e[31m4\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_quarter is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_size_quarter\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkt3wmyzr.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole\e\
    [0m = music_list_size_whole / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_size_whole\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkt3wmyzr.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_half\e[0m\
    \ = music_list_size_half / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_half is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_list_size_half\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkt3wmyzr.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_quarter\e\
    [0m = music_list_size_quarter / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_quarter is "
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \   val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                beat.toLong * rest.length\n            }).sum\n            note.toLong\
    \ * beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjadz4yn9.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.toLong\
    \ * rest.length\n\e[31m20 |\e[0m            }).sum\n\e[31m21 |\e[0m          \
    \  note.toLong * beats\n\e[31m22 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\").map(_.toUpperCase()).map(n\
    \ => n.charAt(0).toInt)\n        val notes_count = notes.toList\n        val notes_count_sorted\
    \ = notes_count.sortBy(_)\n        val notes_count_sorted_reversed = notes_count_sorted.reverse\n\
    \        val notes_count_sorted_reversed_count = notes_count_sorted_reversed.count\n\
    \        val notes_count_sorted_reversed_count_sorted = notes_count_sorted_reversed_count.sortBy(_)\n\
    \        val notes_count_sorted_reversed_count_sorted_count = notes_count_sorted_reversed_count_sorted.count\n\
    \        val notes_count_sorted_reversed_count_sorted_count_sorted = notes_count_sorted_reversed_count_sorted_count.sortBy(_)\n\
    \        val notes_count_sorted_reversed_count_sorted_count_sorted_count = notes_count_sorted_reversed_count_sorted_count_sorted.count\n\
    \        val notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted\
    \ = notes_count_sorted_reversed_count_sorted_count_sorted_count.sortBy(_)\n  \
    \      val notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count\
    \ = notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted.count\n\
    \        val notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted\
    \ = notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count.sortBy(_)\n\
    \        val notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\
    \ = notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted.count\n\
    \        val notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\
    \ = notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count.sortBy(_)\n\
    \        val notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\
    \ = notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted.count\n\
    \        val notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\
    \ = notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted.count\n\
    \        val notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\
    \ = notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted.count\n\
    \        val notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\
    \ = notes_count_sorted_reversed_count_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdw98nvm7.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\e\
    [0m = notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpdw98nvm7.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\e\
    [0m = notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted.count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_count_sorted_reversed_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted_count_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmpdw98nvm7.scala:16:54 -------------"
  stdout: ''
  timestamp: 1659799850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_notes = music_string.split(\"\\\\|\")\n\
    \        val music_notes_length = music_notes.length\n        val music_notes_beats\
    \ = music_notes.map(_.length.toInt)\n        val music_notes_beats_length = music_notes_beats.length\n\
    \        val music_notes_beats_sum = music_notes_beats.sum\n        val music_notes_beats_average\
    \ = music_notes_beats_sum / music_notes_beats_length\n        val music_notes_beats_average_length\
    \ = music_notes_beats_average.length\n        val music_notes_beats_average_length_sum\
    \ = music_notes_beats_average_length * music_notes_beats_average\n        val\
    \ music_notes_beats_average_length_average = music_notes_beats_average_length_sum\
    \ / music_notes_beats_length\n        val music_notes_beats_average_length_average_length\
    \ = music_notes_beats_average_length_average.length\n        val music_notes_beats_average_length_average_length_sum\
    \ = music_notes_beats_average_length_average_length * music_notes_beats_average_length_average\n\
    \        val music_notes_beats_average_length_average_length_average = music_notes_beats_average_length_average_length_sum\
    \ / music_notes_beats_length\n        val music_notes_beats_average_length_average_length_average_length\
    \ = music_notes_beats_average_length_average_length_average.length\n        val\
    \ music_notes_beats_average_length_average_length_average_length_sum = music_notes_beats_average_length_average_length_average_length\
    \ * music_notes_beats_average_length_average_length_average\n        val music_notes_beats_average_length_average_length_average_length_average\
    \ = music_notes_beats_average_length_average_length_average_length_sum / music_notes_beats_length\n\
    \        val music_notes_beats_average_length_average_length_average_length_average_length\
    \ = music_notes_beats_average_length_average_length_average_average_length.length\n\
    \        val music_notes_beats_average_length_average_length_average_length_average_length_sum\
    \ = music_notes_beats_average_length_average_length_average_length_average_length\
    \ * music_notes_beats_average_length_average_length_average_length_average\n \
    \       val music_notes_beats_average_length_average_length_average_length_average_length_average\
    \ = music_notes_beats_average_length_average_length_average_length_average_length_sum\
    \ / music_notes_beats_length\n        val music_notes_beats_average_length_average_length_average_length_average_length_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph7p49bw4.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph7p49bw4.scala:20:73\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_notes_beats_average_length\e[0m = music_notes_beats_average.length\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value length is not a\
    \ member of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7p49bw4.scala:29:92\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_notes_beats_average_length_average_length_average_length_average_length\e\
    [0m = music_notes_beats_average_length_average_length_average_average_length.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: music_notes_beats_average_length_average_length_average_average_length\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph7p49bw4.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \   val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                beat.asInstanceOf[Int] * rest.asInstanceOf[Int]\n           \
    \ }).sum\n            note.asInstanceOf[Int] * beats.asInstanceOf[Int]\n     \
    \   }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpld5pohb3.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Int\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e\
    [0m = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.asInstanceOf[\e\
    [35mInt\e[0m] * rest.asInstanceOf[\e[35mInt\e[0m]\n\e[31m20 |\e[0m           \
    \ }).sum\n\e[31m21 |\e[0m            note.asInstanceOf[\e[35mInt\e[0m] * beats.asInstanceOf[\e\
    [35mInt\e[0m]\n\e[31m22 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_length = notes.length\n        val notes_beats = notes.map(_.length.toLong)\n\
    \        val notes_beats_length = notes_beats.sum\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdnubg3h6.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdnubg3h6.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdnubg3h6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdnubg3h6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdnubg3h6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |"
  stdout: ''
  timestamp: 1659799850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n\
    \        val notes = music_list.filter(_ != \"o\")\n        val notes_length =\
    \ notes.length\n        val notes_length_in_beats = notes_length / 4\n       \
    \ val notes_length_in_beats_in_beats = notes_length_in_beats / 4\n        val\
    \ notes_length_in_beats_in_beats_in_beats = notes_length_in_beats / 8\n      \
    \  val notes_length_in_beats_in_beats_in_beats_in_beats = notes_length_in_beats\
    \ / 16\n        val notes_length_in_beats_in_beats_in_beats_in_beats_in_beats\
    \ = notes_length_in_beats / 32\n        val notes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\
    \ = notes_length_in_beats / 64\n        val notes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\
    \ = notes_length_in_beats / 128\n        val notes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\
    \ = notes_length_in_beats / 256\n        val notes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\
    \ = notes_length_in_beats / 512\n        val notes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\
    \ = notes_length_in_beats / 1024\n        val notes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\
    \ = notes_length_in_beats / 2048\n        val notes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\
    \ = notes_length_in_beats / 4096\n        val notes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\
    \ = notes_length_in_beats / 8192\n        val notes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\
    \ = notes_length_in_beats / 16384\n        val notes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\
    \ = notes_length_in_beats / 32768\n        val notes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\
    \ = notes_length_in_beats / \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp289hgmgj.scala:32:176 --------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnotes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\e\
    [0m = notes_length_in_beats / \n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                                                                            ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp289hgmgj.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mnotes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\e\
    [0m = notes_length_in_beats / \e[31m128\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_length_in_beats_in_beats_in_beats_in_beats_in_beats_in_beats\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp289hgmgj.scala:33:5 ---------------------\e[0m\e[0m\n\
    \e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_length = notes.length\n        val notes_beats = notes.map(_.length.toInt)\n\
    \        val notes_beats_length = notes_beats.sum\n        val notes_beats_length_half\
    \ = notes_beats_length / 2\n        val notes_beats_length_quarter = notes_beats_length\
    \ / 4\n        val notes_beats_length_whole = notes_beats_length\n        val\
    \ notes_beats_length_half_length = notes_beats_length_half * 2\n        val notes_beats_length_quarter_length\
    \ = notes_beats_length_quarter * 4\n        val notes_beats_length_whole_length\
    \ = notes_beats_length_whole * 8\n        val notes_beats_length_half_length_length\
    \ = notes_beats_length_half_length * 2\n        val notes_beats_length_quarter_length_length\
    \ = notes_beats_length_quarter_length * 4\n        val notes_beats_length_whole_length_length\
    \ = notes_beats_length_whole_length * 8\n        val notes_beats_length_half_length_length_length\
    \ = notes_beats_length_half_length_length * 2\n        val notes_beats_length_quarter_length_length_length\
    \ = notes_beats_length_quarter_length_length * 4\n        val notes_beats_length_whole_length_length_length\
    \ = notes_beats_length_whole_length_length * 8\n        val notes_beats_length_half_length_length_length_length\
    \ = notes_beats_length_half_length_length_length * 2\n        val notes_beats_length_quarter_length_length_length_length\
    \ = notes_beats_length_quarter_length_length_length * 4\n        val notes_beats_length_whole_length_length_length_length\
    \ = notes_beats_length_whole_length_length_length * 8\n        val notes_beats_length_half_length_length_length_length_length\
    \ = notes_beats_length_half_length_length_length_length * 2\n        val notes_beats_length_quarter_length_length_length_length_length\
    \ = notes_beats_length_quarter_length_length_length_length * 4\n        val notes_beats_length_whole_length_length_length_length_length\
    \ = notes_beats_length_whole_length_length_length_length * 8\n        val notes_beats_length_half_length_length_length_length_length\
    \ = notes_beats_length_half_length_length_length_length * 2\n        val notes_beats_length_quarter_length_length_length_length_length\
    \ = notes_beats_length_quarter_length_length_length_length_length * 4\n      \
    \  val notes_beats_length_whole_length_length_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxglt0c14.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxglt0c14.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_beats_length_half_length_length_length_length_length\e[0m = notes_beats_length_half_length_length_length_length\
    \ * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length_half_length_length_length_length_length\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_beats_length_half_length_length_length_length_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxglt0c14.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length_quarter_length_length_length_length_length\e\
    [0m = notes_beats_length_quarter_length_length_length_length_length * \e[31m4\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length_quarter_length_length_length_length_length\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_beats_length_quarter_length_length_length_length_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpxglt0c14.scala:39:5 ---------------------\e[0m\e[0m\n\
    \e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val notes = music_string.split(\"|\")\n            val notes_length\
    \ = notes.length\n            val notes_beats = notes.map(note => {\n        \
    \        val notes = note.split(\"o\")\n                notes.length\n       \
    \     }).sum\n            notes_beats\n        }).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw5iwzlxh.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Int\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e\
    [31m\"|\"\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mnotes_length\e\
    [0m = notes.length\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mnotes_beats\e\
    [0m = notes.map(\e[36mnote\e[0m => {\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36mnotes\e[0m = note.split(\e[31m\"o\"\e[0m)\n\e[31m19 |\e[0m         \
    \       notes.length\n\e[31m20 |\e[0m            }).sum\n\e[31m21 |\e[0m     \
    \       notes_beats\n\e[31m22 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(_.toInt).sum\n            beats\
    \ * note.toLong\n        }).sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxwnii84u.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.charAt(\e[31m0\e[0m)\n\
    \e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = music_string.substring(\e\
    [31m1\e[0m).trim\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m =\
    \ rest.split(\e[31m\"|\"\e[0m).map(_.toInt).sum\n\e[31m18 |\e[0m            beats\
    \ * note.toLong\n\e[31m19 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \")\n     \
    \   val music_list_size = music_list.size\n        val music_list_size_2 = music_list_size\
    \ / 2\n        val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 /\
    \ 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_size_33 = musi\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv5rbcrv2.scala:47:33 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_33\e[0m\
    \ = musi\n\e[31m\e[31m   |\e[0m                                 ^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Not found: musi\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv5rbcrv2.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \   val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                beat.asInstanceOf[String].toLong * 4\n            }).sum\n  \
    \          note.asInstanceOf[String].toLong * beats\n        }).sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqt2er3tq.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.asInstanceOf[\e\
    [35mString\e[0m].toLong * \e[31m4\e[0m\n\e[31m20 |\e[0m            }).sum\n\e\
    [31m21 |\e[0m            note.asInstanceOf[\e[35mString\e[0m].toLong * beats\n\
    \e[31m22 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val notes = music_string.split(\"|\").map(music_string => {\n   \
    \             val note = music_string.split(\"o\").head\n                val beats\
    \ = music_string.split(\"o|\").head.toLong\n                note.toLong * beats\n\
    \            }).sum\n            notes\n        }).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfrf9y4qr.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"|\"\e\
    [0m).map(\e[36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e\
    [0m \e[36mnote\e[0m = music_string.split(\e[31m\"o\"\e[0m).head\n\e[31m17 |\e\
    [0m                \e[33mval\e[0m \e[36mbeats\e[0m = music_string.split(\e[31m\"\
    o|\"\e[0m).head.toLong\n\e[31m18 |\e[0m                note.toLong * beats\n\e\
    [31m19 |\e[0m            }).sum\n\e[31m20 |\e[0m            notes\n\e[31m21 |\e\
    [0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_beats =\
    \ music_list.map(music_string => {\n            val music_string_array = music_string.split(\"\
    \ \")\n            val music_string_beats = music_string_array.map(music_string\
    \ => {\n                val music_string_array = music_string.split(\"o\")\n \
    \               val music_string_beats = music_string_array.map(music_string =>\
    \ {\n                    val music_string_array = music_string.split(\"|\")\n\
    \                    val music_string_beats = music_string_array.map(music_string\
    \ => {\n                        val music_string_array = music_string.split(\"\
    .\").map(music_string => {\n                            val music_string_array\
    \ = music_string.split(\"\\\\\")\n                            val music_string_beats\
    \ = music_string_array.map(music_string => {\n                               \
    \ val music_string_array = music_string.split(\"\\\\|\")\n                   \
    \             val music_string_beats = music_string_array.map(music_string =>\
    \ {\n                                    val music_string_array = music_string.split(\"\
    \\\\|\")\n                                    val music_string_beats = music_string_array.map(music_string\
    \ => {\n                                        val music_string_array = music_string.split(\"\
    \\\\|\")\n                                        val music_string_beats = music_string_array.map(music_string\
    \ => {\n                                            val music_string_array = music_string.split(\"\
    \\\\|\")\n                                            val music_string_beats =\
    \ music_string_array.map(music_string => {\n                                 \
    \               val music_string_array = music_string.split(\"\\\\|\")\n     \
    \                                           val music_string_beats = music_string_array.map(music_string\
    \ => {\n                                                    val music_string_array\
    \ = music_string.split(\"\\\\|\")\n                                          \
    \          val music_string_beats = music_string_array.map(music_string => {\n\
    \                                                        val music_string_array\
    \ = music_string.split(\"\\\\|\")\n                                          \
    \              val music_string_beats = music_string_array.map(music_string =>\
    \ {\n                                                            val music_string_array\
    \ = music_string.split(\"\\\\|\")\n                                          \
    \                  val music_string_beats = music_string_array.map(music_string\
    \ => {\n                                                                val music_string_array\
    \ = music_string.split(\"\\\\|\")\n                                          \
    \                      val music_string_beats = music_string_array.map(music_string\
    \ => {\n                                                                    val\
    \ music_string_array = music_string.split(\"\\\\|\")\n                       \
    \                                             val music_string_beats = music_string_array.map(music_string\
    \ => {\n                                                                     \
    \   val music_string_array = music_string.split(\"\\\\|\")\n                 \
    \                                                       val music_string_beats\
    \ = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx9fm8x8s.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpx9fm8x8s.scala:58:0 ----------------------------\e[0m\e[0m\n\e[31m58\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx9fm8x8s.scala:47:97 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                                                    \
    \                    \e[33mval\e[0m \e[36mmusic_string_beats\e[0m = musi\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                 ^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                                        Not found: musi\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx9fm8x8s.scala:57:1 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(rest =>\
    \ rest.split(\"o\").length.toLong)\n            beats.sum\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpq9xamj1l.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmpq9xamj1l.scala:19)\n\tat Problem$.main(tmpq9xamj1l.scala:22)\n\
    \tat Problem.main(tmpq9xamj1l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"\\\\ \").map(music_string =>\
    \ {\n                val note = music_string.charAt(0)\n                val beats\
    \ = music_string.substring(1).toInt\n                note -> beats\n         \
    \   }).toList\n            val note = notes.head\n            val beats = notes.last\n\
    \            note -> beats\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa_7sltea.scala:23:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"\\\\ \"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e\
    [0m = music_string.charAt(\e[31m0\e[0m)\n\e[31m17 |\e[0m                \e[33mval\e\
    [0m \e[36mbeats\e[0m = music_string.substring(\e[31m1\e[0m).toInt\n\e[31m18 |\e\
    [0m                note -> beats\n\e[31m19 |\e[0m            }).toList\n\e[31m20\
    \ |\e[0m            \e[33mval\e[0m \e[36mnote\e[0m = notes.head\n\e[31m21 |\e\
    [0m            \e[33mval\e[0m \e[36mbeats\e[0m = notes.last\n\e[31m22 |\e[0m \
    \           note -> beats\n\e[31m23 |\e[0m        }).toList\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[((Char, Int), (Char,\
    \ Int))]\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val music_note = music_string.substring(0, 1)\n            val music_rest\
    \ = music_string.substring(1, 2)\n            val music_rest2 = music_string.substring(2,\
    \ 3)\n            val music_rest3 = music_string.substring(3, 4)\n           \
    \ val music_rest4 = music_string.substring(4, 5)\n            val music_rest5\
    \ = music_string.substring(5, 6)\n            val music_rest6 = music_string.substring(6,\
    \ 7)\n            val music_rest7 = music_string.substring(7, 8)\n           \
    \ val music_rest8 = music_string.substring(8, 9)\n            val music_rest9\
    \ = music_string.substring(9, 10)\n            val music_rest10 = music_string.substring(10,\
    \ 11)\n            val music_rest11 = music_string.substring(11, 12)\n       \
    \     val music_rest12 = music_string.substring(12, 13)\n            val music_rest13\
    \ = music_string.substring(13, 14)\n            val music_rest14 = music_string.substring(14,\
    \ 15)\n            val music_rest15 = music_string.substring(15, 16)\n       \
    \     val music_rest16 = music_string.substring(16, 17)\n            val music_rest17\
    \ = music_string.substring(17, 18)\n            val music_rest18 = music_string.substring(18,\
    \ 19)\n            val music_rest19 = music_string.substring(19, 20)\n       \
    \     val music_rest20 = music_string.substring(20, 21)\n            val music_rest21\
    \ = music_string.substring(21, 22)\n            val music_rest22 = music_string.substring(22,\
    \ 23)\n            val music_rest23 = music_string.substring(23, 24)\n       \
    \     val music_rest24 = music_string.substring(24, 25)\n            val music_rest25\
    \ = music_string.substring(25, 26)\n            val music_rest26 = music_string.substring(26,\
    \ 27)\n            val music_rest27 = music_string.substring(27, 28)\n       \
    \     val music_rest28 = music_string.substring(28, 29)\n            val music_rest29\
    \ = music_string.substring(29, 30)\n            val music_rest30 = music_string.substring(30,\
    \ 31)\n            val music_rest31 = music_string.substring(31, 32)\n       \
    \     val music_rest32 = music_string.substring(32, 33)\n            val music_rest33\
    \ = music_string.substring(33, 34)\n            val music_rest34 = music_string.substring(34,\
    \ 35)\n            val music_rest35 = music_string.substring(35, 36)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu1ur9yk1.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpu1ur9yk1.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \   val beats = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                beats.toLong * rest.length\n            }).sum\n            note.toLong\
    \ * beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplt4y3i3d.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beats.toLong\
    \ * rest.length\n\e[31m20 |\e[0m            }).sum\n\e[31m21 |\e[0m          \
    \  note.toLong * beats\n\e[31m22 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(_.toLong).sum\n\
    \            beats.toLong\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmptu00cn5q.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmptu00cn5q.scala:19)\n\tat Problem$.main(tmptu00cn5q.scala:22)\n\
    \tat Problem.main(tmptu00cn5q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase())\n\
    \        val notes_count = notes.count\n        val notes_last_beat = notes.map(_.length.toLong).sum\n\
    \        val notes_last_beats = notes.map(_.length.toLong).map(_.toLong).sum\n\
    \        val notes_last_beats_count = notes_last_beats.toLong\n        val notes_last_beats_count_minus_one\
    \ = notes_last_beats_count - 1\n        val notes_last_beats_count_minus_one_minus_one\
    \ = notes_last_beats_count_minus_one - 1\n        val notes_last_beats_count_minus_one_minus_one_minus_one\
    \ = notes_last_beats_count_minus_one_minus_one - 1\n        val notes_last_beats_count_minus_one_minus_one_minus_one_minus_one\
    \ = notes_last_beats_count_minus_one_minus_one_minus_one - 1\n        val notes_last_beats_count_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = notes_last_beats_count_minus_one_minus_one_minus_one_minus_one - 1\n     \
    \   val notes_last_beats_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = notes_last_beats_count_minus_one_minus_one_minus_one_minus_one_minus_one -\
    \ 1\n        val notes_last_beats_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = notes_last_beats_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ - 1\n        val notes_last_beats_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = notes_last_beats_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ - 1\n        val notes_last_beats_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = notes_last_beats_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ - 1\n        val notes_last_beats_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_min\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1s_4kcqs.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1s_4kcqs.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase)\n\
    \        val notes_count = notes.map(n => n.length).sum\n        val beats_count\
    \ = notes_count / 4\n        val notes_array = notes.map(n => n.toChar).map(c\
    \ => c.toInt).toArray\n        val notes_array = notes_array.take(notes_count)\n\
    \        val beats_array = notes_array.map(n => n % 4).toArray\n        val notes_array\
    \ = notes_array.take(beats_count)\n        val beats_array = beats_array.map(n\
    \ => n % 2).toArray\n        val notes_array = notes_array.take(beats_count)\n\
    \        val beats_array = beats_array.map(n => n).toArray\n        val notes_array\
    \ = notes_array.take(beats_count)\n        val beats_array = beats_array.map(n\
    \ => n).toArray\n        val notes_array = notes_array.take(beats_count)\n   \
    \     val beats_array = beats_array.map(n => n).toArray\n        val notes_array\
    \ = notes_array.take(beats_count)\n        val beats_array = beats_array.map(n\
    \ => n).toArray\n        val notes_array = notes_array.take(beats_count)\n   \
    \     val beats_array = beats_array.map(n => n).toArray\n        val notes_array\
    \ = notes_array.take(beats_count)\n        val beats_array = beats_array.map(n\
    \ => n).toArray\n        val notes_array = notes_array.take(beats_count)\n   \
    \     val beats_array = beats_array.map(n => n).toArray\n        val notes_array\
    \ = notes_array.take(beats_count)\n        val beats_array = beats_array.map(n\
    \ => n).toArray\n        val notes_array = notes_array.take(beats_count)\n   \
    \     val beats_array = beats_array.map(n => n).toArray\n        val notes_array\
    \ = notes_array.take(beats_count)\n        val beats_array = beats_array.map(n\
    \ => n).toArray\n        val notes_array = notes_array.take(beats_count)\n   \
    \     val beats_array = beats_array.map(n => n).toArray\n        val notes_array\
    \ = notes_array.take(beats_count)\n        val beats_array = beats_array.map(n\
    \ => n).toArray\n        val notes_array = notes_array.take(beats_count)\n   \
    \     val beats_array = beats_array.map(n => n).toArray\n        val notes_array\
    \ = notes_array.take(\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplyp93sqd.scala:48:43 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.take(\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplyp93sqd.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_array\e[0m = notes_array.take(notes_count)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnotes_array\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplyp93sqd.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_array\e[0m = notes_array.take(beats_count)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnotes_array\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplyp93sqd.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbeats_array\e[0m = beats_array.map(\e[36mn\e[0m => n % \e[31m2\e[0m).toArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbeats_array is already defined as \e[33mvalue\e[0m \e[35mbeats_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplyp93sqd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.take(beats_count)\n\
    \e[31m\e[31m   "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n\
    \        val music_beats = music_list.map(music_note => {\n            val note\
    \ = music_note.charAt(0)\n            val beats = music_note.substring(1).split(\"\
    |\").map(_.toInt).toList\n            val notes = note match {\n             \
    \   case 'O' => (1l, 4l)\n                case 'O|' => (2l, 2l)\n            \
    \    case '.|' => (1l, 1l)\n                case _ => (0l, 0l)\n            }\n\
    \            (notes(0), beats(0))\n        }).toList\n        val music_beats_count\
    \ = music_beats.map(music_beat => {\n            val note = music_beat._1\n  \
    \          val beats = music_beat._2\n            val notes = note match {\n \
    \               case 'O' => (4l, 4l)\n                case 'O|' => (2l, 2l)\n\
    \                case '.|' => (1l, 1l)\n                case _ => (0l, 0l)\n \
    \           }\n            (notes(0), beats(0))\n        }).reduce((a, b) => a._1\
    \ + b._1)\n        music_beats_count.toList.map(music_beat_count => music_beat_count._1\
    \ + music_beat_count._2)\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwrtgn834.scala:20:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m'O\e[0m|' => (\e\
    [31m2l\e[0m, \e[31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0msymbol literal 'O is no longer supported,\n\e[31m   |\e[0muse a\
    \ string literal \"O\" or an application Symbol(\"O\") instead,\n\e[31m   |\e\
    [0mor enclose in braces '{O} if you want a quoted expression.\n\e[31m   |\e[0mFor\
    \ now, you can also `import language.deprecated.symbolLiterals` to accept\n\e\
    [31m   |\e[0mthe idiom, but this possibility might no longer be available in the\
    \ future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwrtgn834.scala:20:26 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m'O\e[0m|' => (\e\
    [31m2l\e[0m, \e[31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^\e\
    [0m\n\e[31m   |\e[0m                          '{' expected, but '=>' found\n\e\
    [31m\e[31m-- Error: /tmp/tmpwrtgn834.scala:21:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m '.|' => (\e[31m1l\e[0m,\
    \ \e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e\
    [0m                     unclosed character literal\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpwrtgn834.scala:24:0 ----------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            (notes(\e[31m0\e[0m), beats(\e[31m0\e[0m))\n\e[31m\e\
    [31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'=>' expected, but 'end of statement' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwrtgn834.scala:25:9 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m         ^\e\
    [0m\n\e[31m   |\e[0m         '}' expected, but ')' found\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpwrtgn834.scala:31:21 -----------------------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                \e[33mcase\e[0m \e[31m'O\e[0m|' => (\e[31m2l\e\
    [0m, \e[31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m\
    \   |\e[0msymbol literal 'O is no longer supported,\n\e[31m   |\e[0muse a string\
    \ literal \"O\" or an application Symbol(\"O\") instead,\n\e[31m   |\e[0mor enclose\
    \ in "
  stdout: ''
  timestamp: 1659799861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val notes = music_string.split(\"|\")\n            val beats = notes.map(note\
    \ => note.split(\"o\").length.toLong)\n            beats.sum\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3x6w8iv2.scala:21)\n\tat Problem.main(tmp3x6w8iv2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(x =>\
    \ x.toInt).toList\n        val music_length = music_list.length\n        val music_beats\
    \ = music_list.map(x => x.toLong).sum\n        val music_notes = music_list.map(x\
    \ => x.toLong / music_beats)\n        val music_notes_length = music_notes.length\n\
    \        val music_notes_length = music_notes_length / 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ + music_notes_length\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length + music_notes_length\n  \
    \      val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length + music_notes_length\n        val music_notes_length =\
    \ music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ + music_notes_length\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length + music_notes_length\n  \
    \      val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length + music_notes_length\n        val music_notes_length =\
    \ music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ + music_notes_length\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length + music_notes_length\n  \
    \      val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length + music_notes_length\n        val music_notes_length =\
    \ music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ + music_notes_length\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length + music_notes_length\n  \
    \      val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length + music_notes_length\n        val music_notes_length =\
    \ musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9a4l4re8.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9a4l4re8.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9a4l4re8.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length + music_notes_length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9a4l4re8.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9a4l4re8.scala:23:12 ------------------"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(rest =>\
    \ {\n                val beat = rest.substring(0, 1)\n                val rest\
    \ = rest.substring(1, rest.length)\n                val rest = rest.toLong\n \
    \               beat.toLong * rest\n            }).sum\n            beats * note.toLong\n\
    \        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd4hmjje1.scala:20:20 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mrest\e[0m = rest.toLong\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mrest is already defined as \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpd4hmjje1.scala:22:14\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     }).sum\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m     \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \        where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpd4hmjje1.scala:24:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ }).sum\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a\
    \ type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659799861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(_.toLong).sum\n            beats\
    \ * note.charAt(0).toLong\n        }).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi5_p3gpm.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(_.toLong).sum\n\
    \e[31m17 |\e[0m            beats * note.charAt(\e[31m0\e[0m).toLong\n\e[31m18\
    \ |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase()).filter(_.length\
    \ == 1).map(x => x.toInt)\n        val notesLength = notes.map(_.toString.length).sum\n\
    \        val notesLast = notes.map(x => x.toString.last)\n        val notesLastLength\
    \ = notesLast.map(_.toString.length).sum\n        val notesLastLast = notesLast.map(x\
    \ => x.toString.last)\n        val notesLastLastLength = notesLastLast.map(_.toString.length).sum\n\
    \        val notesLastLastLast = notesLastLast.map(x => x.toString.last)\n   \
    \     val notesLastLastLastLength = notesLastLastLast.map(_.toString.length).sum\n\
    \        val notesLastLastLastLast = notesLastLastLast.map(x => x.toString.last)\n\
    \        val notesLastLastLastLastLength = notesLastLastLastLast.map(_.toString.length).sum\n\
    \        val notesLastLastLastLastLast = notesLastLastLastLast.map(x => x.toString.last)\n\
    \        val notesLastLastLastLastLastLength = notesLastLastLastLastLast.map(_.toString.length).sum\n\
    \        val notesLastLastLastLastLastLast = notesLastLastLastLastLast.map(x =>\
    \ x.toString.last)\n        val notesLastLastLastLastLastLastLength = notesLastLastLastLastLastLast.map(_.toString.length).sum\n\
    \        val notesLastLastLastLastLastLastLast = notesLastLastLastLastLastLastLast.map(x\
    \ => x.toString.last)\n        val notesLastLastLastLastLastLastLastLength = notesLastLastLastLastLastLastLast.map(_.toString.length).sum\n\
    \        val notesLastLastLastLastLastLastLastLastLength = notesLastLastLastLastLastLastLastLast.map(_.toString.length).sum\n\
    \        val notesLastLastLastLastLastLastLastLastLength = notesLastLastLastLastLastLastLastLastLast.map(_.toString.length).sum\n\
    \        val notesLastLastLastLastLastLastLastLastLength = notesLastLastLastLastLastLastLastLastLastLast.map(_.toString.length).sum\n\
    \        val notesLastLastLastLastLastLastLastLastLastLength = notesLastLastLastLastLastLastLastLastLastLast.map(_.toString.length).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyi0198as.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnotesLastLastLastLastLastLastLastLastLength\e\
    [0m = notesLastLastLastLastLastLastLastLastLast.map(_.toString.length).sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotesLastLastLastLastLastLastLastLastLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mnotesLastLastLastLastLastLastLastLastLength\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyi0198as.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnotesLastLastLastLastLastLastLastLastLength\e\
    [0m = notesLastLastLastLastLastLastLastLastLastLast.map(_.toString.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotesLastLastLastLastLastLastLastLastLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mnotesLastLastLastLastLastLastLastLastLength\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpyi0198as.scala:28:48 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mnotesLastLastLastLastLastLastLast\e[0m =\
    \ notesLastLastLastLastLastLastLast.map(\e[36mx\e[0m => x.toString.last)\n\e[31m\e\
    [31m   |\e[0m                                                ^\e[0m\n\e[31m  \
    \ |\e[0m            Recursive \e[33mvalue\e[0m \e[35mnotesLastLastLastLastLastLastLast\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyi0198as.scala:30:58\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mnotesLastLastLastLastLastLastLastLastLength\e[0m ="
  stdout: ''
  timestamp: 1659799862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.nonEmpty)\n\
    \        val music_list_size = music_list.size\n        val music_list_size_half\
    \ = music_list_size / 2\n        val music_list_size_quarter = music_list_size\
    \ / 4\n        val music_list_size_whole = music_list_size.toLong\n        val\
    \ music_list_size_half_whole = music_list_size_half * music_list_size_whole\n\
    \        val music_list_size_quarter_whole = music_list_size_quarter * music_list_size_whole\n\
    \        val music_list_size_half_quarter_whole = music_list_size_half_quarter\
    \ * music_list_size_whole\n        val music_list_size_half_quarter_whole_whole\
    \ = music_list_size_half_quarter_whole * music_list_size_whole\n        val music_list_size_half_quarter_whole_whole_whole\
    \ = music_list_size_half_quarter_whole_whole * music_list_size_whole\n       \
    \ val music_list_size_half_quarter_whole_whole_whole_whole = music_list_size_half_quarter_whole_whole_whole\
    \ * music_list_size_whole\n        val music_list_size_half_quarter_whole_whole_whole_whole_whole\
    \ = music_list_size_half_quarter_whole_whole_whole_whole * music_list_size_whole\n\
    \        val music_list_size_half_quarter_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_half_quarter_whole_whole_whole_whole_whole * music_list_size_whole\n\
    \        val music_list_size_half_quarter_whole_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_half_quarter_whole_whole_whole_whole_whole_whole * music_list_size_whole\n\
    \        val music_list_size_half_quarter_whole_whole_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_half_quarter_whole_whole_whole_whole_whole_whole_whole * music_list_size_whole\n\
    \        val music_list_size_half_quarter_whole_whole_whole_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_half_quarter_whole_whole_whole_whole_whole_whole_whole_whole\n\
    \        val music_list_size_half_quarter_whole_whole_whole_who\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpznewqpv1.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpznewqpv1.scala:21:49\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_half_quarter_whole\e[0m = music_list_size_half_quarter * music_list_size_whole\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: music_list_size_half_quarter\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpznewqpv1.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase()).filter(_.length\
    \ == 1).map(_.toInt)\n        val notes_length = notes.length\n        val notes_beats\
    \ = notes.map(n => n.toLong * notes_length)\n        val notes_beats_length =\
    \ notes_beats.length\n        val notes_beats_last_beat = notes_beats.map(n =>\
    \ n.toLong - notes_beats_length)\n        val notes_beats_last_beat_length = notes_beats_last_beat.length\n\
    \        val notes_beats_last_beat_last_beat = notes_beats_last_beat.map(n =>\
    \ n.toLong - notes_beats_last_beat_length)\n        val notes_beats_last_beat_last_beat_length\
    \ = notes_beats_last_beat_last_beat.length\n        val notes_beats_last_beat_last_beat_last_beat\
    \ = notes_beats_last_beat_last_beat.map(n => n.toLong - notes_beats_last_beat_last_beat_length)\n\
    \        val notes_beats_last_beat_last_beat_last_beat_length = notes_beats_last_beat_last_beat_last_beat.length\n\
    \        val notes_beats_last_beat_last_beat_last_beat_last_beat = notes_beats_last_beat_last_beat_last_beat.map(n\
    \ => n.toLong - notes_beats_last_beat_last_beat_last_beat_length)\n        val\
    \ notes_beats_last_beat_last_beat_last_beat_last_beat_length = notes_beats_last_beat_last_beat_last_beat_last_beat.length\n\
    \        val notes_beats_last_beat_last_beat_last_beat_last_beat_last_beat = notes_beats_last_beat_last_beat_last_beat_last_beat.map(n\
    \ => n.toLong - notes_beats_last_beat_last_beat_last_beat_last_beat_length)\n\
    \        val notes_beats_last_beat_last_beat_last_beat_last_beat_last_beat_length\
    \ = notes_beats_last_beat_last_beat_last_beat_last_beat_last_beat.map(n => n.toLong\
    \ - notes_beats_last_beat_last_beat_last_beat_last_beat_last_beat_length)\n  \
    \      val notes_beats_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_length\
    \ = notes_beats_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat.length\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpwabpfnkh.scala:29:11 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwabpfnkh.scala:27:165 --------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_last_beat_last_beat_last_beat_last_beat_last_beat_length\e\
    [0m = notes_beats_last_beat_last_beat_last_beat_last_beat_last_beat.map(\e[36mn\e\
    [0m => n.toLong - notes_beats_last_beat_last_beat_last_beat_last_beat_last_beat_length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                 ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mnotes_beats_last_beat_last_beat_last_beat_last_beat_last_beat_length\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpwabpfnkh.scala:27:234\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e\
    [33mval\e[0m \e[36mnotes_beats_last_beat_last_beat_last_beat_last_beat_last_beat_length\e\
    [0m = notes_beats_last_beat_last_beat_last_beat_last_beat_last_beat.map(\e[36mn\e\
    [0m => n.toLong - notes_beats_last_beat_last_beat_last_beat_last_beat_last_beat_length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \               No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                                          where:    B is a type variable\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwabpfnkh.scala:28:93 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_last_be"
  stdout: ''
  timestamp: 1659799862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).filter(_.length\
    \ != 0)\n        val notes = music_list.map(music_note => music_note.split(\"\
    |\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    o\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != 0).map(music_note => music_note.split(\"\
    .\").map(_.toUpperCase).filter(_.length != \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcoffhe9i.scala:15:1809 -------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnotes\e[0m = music_list.map(\e\
    [36mmusic_note\e[0m => music_note.split(\e[31m\"|\"\e[0m).map(_.toUpperCase).filter(_.length\
    \ != \e[31m0\e[0m).map(\e[36mmusic_note\e[0m => music_note.split(\e[31m\"o\"\e\
    [0m).map(_.toUpperCase).filter(_.length != \e[31m0\e[0m).map(\e[36mmusic_note\e\
    [0m => music_note.split(\e[31m\".\"\e[0m).map(_.toUpperCase).filter(_.length !=\
    \ \e[31m0\e[0m).map(\e[36mmusic_note\e[0m => music_note.split(\e[31m\".\"\e[0m).map(_.toUpperCase).filter(_.length\
    \ != \e[31m0\e[0m).map(\e[36mmusic_note\e[0m => music_note.split(\e[31m\".\"\e\
    [0m).map(_.toUpperCase).filter(_.length != \e[31m0\e[0m).map(\e[36mmusic_note\e\
    [0m => music_note.split(\e[31m\".\"\e[0m).map(_.toUpperCase).filter(_.length !=\
    \ \e[31m0\e[0m).map(\e[36mmusic_note\e[0m => music_note.split(\e[31m\".\"\e[0m).map(_.toUpperCase).filter(_.length\
    \ != \e[31m0\e[0m).map(\e[36mmusic_note\e[0m => music_note.split(\e[31m\".\"\e\
    [0m).map(_.toUpperCase).filter(_.length != \e[31m0\e[0m).map(\e[36mmusic_note\e\
    [0m => music_note.split(\e[31m\".\"\e[0m).map(_.toUpperCase).filter(_.length !=\
    \ \e[31m0\e[0m).map(\e[36mmusic_note\e[0m => music_note.split(\e[31m\".\"\e[0m).map(_.toUpperCase).filter(_.length\
    \ != \e[31m0\e[0m).map(\e[36mmusic_note\e[0m => music_note.split(\e[31m\".\"\e\
    [0m).map(_.toUpperCase).filter(_.length != \e[31m0\e[0m).map(\e[36mmusic_note\e\
    [0m => music_note.split(\e[31m\".\"\e[0m).map(_.toUpperCase).filter(_.length !=\
    \ \e[31m0\e[0m).map(\e[36mmusic_note\e[0m => music_note.split(\e[31m\".\"\e[0m).map(_.toUpperCase).filter(_.length\
    \ != \e[31m0\e[0m).map(\e[36mmusic_note\e[0m => music_note.split(\e[31m\".\"\e\
    [0m).map(_.toUpperCase).filter(_.length != \e[31m0\e[0m).map(\e[36mmusic_note\e\
    [0m => music_note.split(\e[31m\".\"\e[0m).map(_.toUpperCase).filter(_.length !=\
    \ \e[31m0\e[0m).map(\e[36mmusic_note\e[0m => music_note.split(\e[31m\".\"\e[0m).map(_.toUpperCase).filter(_.length\
    \ != \e[31m0\e[0m).map(\e[36mmusic_note\e[0m => music_note.split(\e[31m\".\"\e\
    [0m).map(_.toUpperCase).filter(_.length != \e[31m0\e[0m).map(\e[36mmusic_note\e\
    [0m => music_note.split(\e[31m\"."
  stdout: ''
  timestamp: 1659799864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.length / 4\n            beats.toLong\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmp5q58rd79.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmp5q58rd79.scala:19)\n\tat Problem$.main(tmp5q58rd79.scala:22)\n\
    \tat Problem.main(tmp5q58rd79.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(rest => {\n                val\
    \ beat = rest.charAt(0)\n                val rest = rest.substring(1)\n      \
    \          beat.toLong * 4\n            }).sum\n            note match {\n   \
    \             case 'o' => List(beats)\n                case 'o|' => List(beats)\n\
    \                case '.|' => List(beats)\n                case _ => List()\n\
    \            }\n        }).flatten\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdnlfkyvh.scala:24:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e[0m \e[31m'o\e[0m|' => List(beats)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0msymbol literal\
    \ 'o is no longer supported,\n\e[31m   |\e[0muse a string literal \"o\" or an\
    \ application Symbol(\"o\") instead,\n\e[31m   |\e[0mor enclose in braces '{o}\
    \ if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import\
    \ language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe idiom, but\
    \ this possibility might no longer be available in the future.\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpdnlfkyvh.scala:24:26 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e[0m \e[31m'o\e[0m|' => List(beats)\n\
    \e[31m\e[31m   |\e[0m                          ^^\e[0m\n\e[31m   |\e[0m      \
    \                    '{' expected, but '=>' found\n\e[31m\e[31m-- Error: /tmp/tmpdnlfkyvh.scala:25:21\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \         \e[33mcase\e[0m '.|' => List(beats)\n\e[31m\e[31m   |\e[0m         \
    \            ^\e[0m\n\e[31m   |\e[0m                     unclosed character literal\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdnlfkyvh.scala:28:8 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        }).flatten\n\e[31m\e[31m   |\e[0m        ^\e\
    [0m\n\e[31m   |\e[0m        '=>' expected, but '}' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpdnlfkyvh.scala:28:9 ----------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        }).flatten\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\
    \e[31m   |\e[0m         '}' expected, but ')' found\n\e[31m\e[31m-- Error: /tmp/tmpdnlfkyvh.scala:30:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m30 |\e[0m    \e\
    [33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e\
    [0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    end of statement\
    \ expected but 'def' found\n\e[31m\e[31m-- Error: /tmp/tmpdnlfkyvh.scala:21:14\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \     }).sum\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659799863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_int\
    \ = music_list_size.asInstanceOf[Int]\n        val music_list_size_long = music_list_size.asInstanceOf[Long]\n\
    \        val music_list_size_long_int = music_list_size_long.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_int = music_list_size_long_int.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_int = music_list_size_long_long_int.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_int = music_list_size_long_long_long_int.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long_int = music_list_size_long_long_long_long_int.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_int.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_int.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0bykkpha.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_long_long_long_int\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0bykkpha.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp0bykkpha.scala:24:69 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_int.asInstanceOf[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                   "
  stdout: ''
  timestamp: 1659799861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase())\n\
    \        val notes_count = notes.map(n => n.length).sum\n        val notes_beats\
    \ = notes.map(n => n.length.toLong).sum\n        val notes_beats_count = notes_beats.toLong\n\
    \        val notes_beats_count_count = notes_beats_count.toLong\n        val notes_beats_count_count_count\
    \ = notes_beats_count_count.toLong\n        val notes_beats_count_count_count_count\
    \ = notes_beats_count_count_count.toLong\n        val notes_beats_count_count_count_count_count\
    \ = notes_beats_count_count_count_count.toLong\n        val notes_beats_count_count_count_count_count_count\
    \ = notes_beats_count_count_count_count_count.toLong\n        val notes_beats_count_count_count_count_count_count_count\
    \ = notes_beats_count_count_count_count_count_count_count.toLong\n        val\
    \ notes_beats_count_count_count_count_count_count_count_count = notes_beats_count_count_count_count_count_count_count_count.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp68pztpu8.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_count_count_count_count_count_count_count_count_count_count_count\e\
    [0m = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_count_count_count_count_count_count_count_count_count_count_count_count\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_beats_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp68pztpu8.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count\e\
    [0m = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp68pztpu8.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_count_count_count_count_count_coun"
  stdout: ''
  timestamp: 1659799862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1)\n\
    \            val beats = rest.split(\"|\").map(x => x.toLong).sum\n          \
    \  beats.toLong\n        }).toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpacgk8aum.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmpacgk8aum.scala:19)\n\tat Problem$.main(tmpacgk8aum.scala:22)\n\
    \tat Problem.main(tmpacgk8aum.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(_.toLong).sum\n\
    \            beats.toLong\n        }).filter(_ > 0).sortBy(_).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpq1bhfvff.scala:19:32 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        }).filter(_ > \e[31m0\e[0m).sortBy(_).reverse\n\
    \e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m \
    \  Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$3 of expanded function:\n\e[31m   |\e[0m   _$3 =>\
    \ \n\e[31m   |\e[0m     music_string.split(\e[32m\" \"\e[0m).map(\n\e[31m   |\e\
    [0m       music_string => \n\e[31m   |\e[0m         {\n\e[31m   |\e[0m       \
    \    \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(0, 1)\n\e[31m   |\e\
    [0m           \e[33mval\e[0m \e[36mrest\e[0m = music_string.substring(1, music_string.length)\n\
    \e[31m   |\e[0m           \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\e[32m\"\
    |\"\e[0m).map(_$1 => _$1.toLong).sum\n\e[31m   |\e[0m           beats.toLong\n\
    \e[31m   |\e[0m         }\n\e[31m   |\e[0m     ).filter(_$2 => _$2 > 0).sortBy(_$3).reverse.\n\
    \e[31m\e[31m-- Error: /tmp/tmpq1bhfvff.scala:19:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        }).filter(_ > \e[31m0\e[0m).sortBy(_).reverse\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mDeprecatedDoubleOrdering\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mclass\e[0m \e[35mArrayOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659799861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_length = notes.length\n        val notes_beats = notes.map(_.length.toLong)\n\
    \        val notes_beats_length = notes_beats.length\n        val notes_beats_sum\
    \ = notes_beats.sum\n        val notes_beats_average = notes_beats_sum / notes_beats_length\n\
    \        val notes_beats_average_length = notes_beats_average.length\n       \
    \ val notes_beats_average_sum = notes_beats_average.sum\n        val notes_beats_average_average_length\
    \ = notes_beats_average_average.length\n        val notes_beats_average_average_sum\
    \ = notes_beats_average_average.sum\n        val notes_beats_average_average_average_length\
    \ = notes_beats_average_average_average.length\n        val notes_beats_average_average_average_sum\
    \ = notes_beats_average_average_average.sum\n        val notes_beats_average_average_average_average_length\
    \ = notes_beats_average_average_average_average.length\n        val notes_beats_average_average_average_average_sum\
    \ = notes_beats_average_average_average_average.sum\n        val notes_beats_average_average_average_average_average_length\
    \ = notes_beats_average_average_average_average_average.length\n        val notes_beats_average_average_average_average_sum\
    \ = notes_beats_average_average_average_average_average.sum\n        val notes_beats_average_average_average_average_average_length\
    \ = notes_beats_average_average_average_average_average_average.length\n     \
    \   val notes_beats_average_average_average_average_sum = notes_beats_average_average_average_average_average_average.sum\n\
    \        val notes_beats_average_average_average_average_average_length = notes_beats_average_average_average_average_average_average.length\n\
    \        val notes_beats_average_average_average_average_average_sum = notes_beats_average_average_average_average_average_average_average.sum\n\
    \        val notes_beats_average_average_average_average_average_average_length\
    \ = notes_beats_average_average_average_average_average_average_average.length\n\
    \        val notes_beats_average_average_average_average_average_average_sum =\
    \ notes_beats_average_average_average_average_average_average_average_average.sum\n\
    \        val notes_beats_average_average_average_average_average_average_average_length\
    \ = notes_beats_average_average_average_average_average_average_average_average.length\n\
    \        val notes_beats_average_average_average_average_average_average_average_sum\
    \ = notes_beats_average_average_average_average_average_average_average_average_average.sum\n\
    \        val notes_beats_average_average_average_average_average_average_average_length\
    \ = notes_beats_average_average_average_average_average_average_average_average_average.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6700s8bl.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_average_average_average_average_sum\e\
    [0m = notes_beats_average_average_average_average_average.sum\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_average_average_average_average_sum is already\
    \ defined as \e[33mvalue\e[0m \e[35mnotes_beats_average_average_average_average_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6700s8bl.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_average_average_average_average_average_length\e\
    [0m = notes_beats_average_average_average_average_average_average.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_average_average_average_average_average_length\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_beats_average_average_average_average_average_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6700s8bl.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_average_average_average_average_sum\e\
    [0m = notes_beats_average_average_average_average_average_average.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_average_average_average_average_sum is already\
    \ defined as \e[33mvalue\e[0m \e[35mnotes_beats_average_average_average_average_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of topl"
  stdout: ''
  timestamp: 1659799863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_length = notes.length\n        val notes_beats = notes.map(_.length.toInt)\n\
    \        val notes_beats_length = notes_beats.sum\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n        val\
    \ notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length.toInt\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_beplncv.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_beplncv.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_beplncv.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_beplncv.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_beplncv.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val notes = music_string.split(\"|\")\n            val notes_length\
    \ = notes.length\n            val notes_beats = notes.map(note => {\n        \
    \        val noteLength = note.length\n                val noteBeats = note.split(\"\
    o\").map(note => {\n                    val noteLength = note.length\n       \
    \             val noteBeats = note.split(\"|\").map(note => {\n              \
    \          val noteLength = note.length\n                        val noteBeats\
    \ = note.split(\"o\").map(note => {\n                            val noteLength\
    \ = note.length\n                            val noteBeats = note.split(\"|\"\
    ).map(note => {\n                                val noteLength = note.length\n\
    \                                val noteBeats = note.split(\"o\").map(note =>\
    \ {\n                                    val noteLength = note.length\n      \
    \                              val noteBeats = note.split(\"|\").map(note => {\n\
    \                                        val noteLength = note.length\n      \
    \                                  val noteBeats = note.split(\"o\").map(note\
    \ => {\n                                            val noteLength = note.length\n\
    \                                            val noteBeats = note.split(\"|\"\
    ).map(note => {\n                                                val noteLength\
    \ = note.length\n                                                val noteBeats\
    \ = note.split(\"o\").map(note => {\n                                        \
    \            val noteLength = note.length\n                                  \
    \                  val noteBeats = note.split(\"|\").map(note => {\n         \
    \                                               val noteLength = note.length\n\
    \                                                        val noteBeats = note.split(\"\
    o\").map(note => {\n                                                         \
    \   val noteLength = note.length\n                                           \
    \                 val noteBeats = note.split(\"|\").map(note => {\n          \
    \                                                      val noteLength = note.length\n\
    \                                                                val noteBeats\
    \ = note.split(\"o\").map(note => {\n                                        \
    \                            val noteLength = note.length\n                  \
    \                                                  val noteBeats = note.split(\"\
    |\").map(note => {\n                                                         \
    \               val noteLength = note.length\n                               \
    \                                         val noteBeats = note.split(\"o\").map(note\
    \ => {\n                                                                     \
    \       val noteLength = note.length\n                                       \
    \                                     val noteBeats = note.split(\"|\").map(note\
    \ => {\n                                                                     \
    \           val noteLength = note.length\n                                   \
    \                                             val noteBeats = note.split(\"o\"\
    ).map(note => {\n                                                            \
    \                        val noteLength = note.length\n                      \
    \                                                              val noteBeats =\
    \ note.split(\"|\").map(note => {\n                                          \
    \                                              val noteLength = note.length\n\
    \                                                                            \
    \            val noteBeats = note.split(\"o\").map(note => {\n               \
    \                                                                            \
    \ val noteLength = note.length\n                                             \
    \                                               val noteBeats = note.split(\"\
    |\").map(note => {\n                                                         \
    \                                       val noteLength = note.length\n       \
    \                                                                            \
    \             val noteBeat\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg14ytic3.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg14ytic3.scala:61:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m61 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpg14ytic3.scala:70:0 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \   val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                beat.asInstanceOf[Int] * rest.asInstanceOf[Int]\n           \
    \ }).sum\n            note.asInstanceOf[Int] * beats.asInstanceOf[Int]\n     \
    \   }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpld5pohb3.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Int\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e\
    [0m = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.asInstanceOf[\e\
    [35mInt\e[0m] * rest.asInstanceOf[\e[35mInt\e[0m]\n\e[31m20 |\e[0m           \
    \ }).sum\n\e[31m21 |\e[0m            note.asInstanceOf[\e[35mInt\e[0m] * beats.asInstanceOf[\e\
    [35mInt\e[0m]\n\e[31m22 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase()).filter(_.length()\
    \ > 0)\n        val notes_count = notes.map(n => n.length).sum\n        val beats_count\
    \ = notes.map(n => n.length / 4).sum\n        val notes_beats_count = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_2 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_3 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_4 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_5 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_6 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_7 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_8 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_9 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_10 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_11 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_12 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_13 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_14 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_15 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_16 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_17 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_18 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_19 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_20 = notes.map(n\
    \ => (n.length / 4).toLong).sum\n        val notes_beats_count_21 = notes.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg5ff7v8r.scala:37:45 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_21\e[0m\
    \ = notes.map(\n\e[31m\e[31m   |\e[0m                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpg5ff7v8r.scala:38:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m    No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m    where:    B is a type variable\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpg5ff7v8r.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length>0)\n\
    \        val notes = music_list.map(music_note => music_note.charAt(0).toInt)\n\
    \        val notes_count = music_list.map(music_note => music_note.charAt(0).toInt).distinct\n\
    \        val beats = music_list.map(music_note => music_note.charAt(1).toInt)\n\
    \        val beats_count = music_list.map(music_note => music_note.charAt(1).toInt).distinct\n\
    \        val notes_beats = notes.zip(beats)\n        val notes_beats_count = notes_beats.map(music_note\
    \ => music_note._1 + music_note._2)\n        val notes_beats_count_distinct =\
    \ notes_beats_count.distinct\n        val notes_beats_count_distinct_count = notes_beats_count_distinct.size\n\
    \        val notes_beats_count_distinct_count_distinct = notes_beats_count_distinct_count.distinct\n\
    \        val notes_beats_count_distinct_count_distinct_count = notes_beats_count_distinct_count_distinct.size\n\
    \        val notes_beats_count_distinct_count_distinct_count_distinct = notes_beats_count_distinct_count_distinct_count.distinct\n\
    \        val notes_beats_count_distinct_count_distinct_count_distinct_count =\
    \ notes_beats_count_distinct_count_distinct_count_distinct.size\n        val notes_beats_count_distinct_count_distinct_count_distinct_count_distinct\
    \ = notes_beats_count_distinct_count_distinct_count_distinct_count.distinct\n\
    \        val notes_beats_count_distinct_count_distinct_count_distinct_count_distinct\
    \ = notes_beats_count_distinct_count_distinct_count_distinct_count_distinct.size\n\
    \        val notes_beats_count_distinct_count_distinct_count_distinct_count_distinct_count\
    \ = notes_beats_count_distinct_count_distinct_count_distinct_count_distinct_count.distinct\n\
    \        val notes_beats_count_distinct_count_distinct_count_distinct_count_distinct_count_distinct\
    \ = notes_beats_count_distinct_count_distinct_count_distinct_count_distinct_count_distinct_count.distinct\n\
    \        val notes_beats_count_distinct_count_distinct_count_distinct_count_distinct_count_distinct_count\
    \ = notes_beats_count_distinct_count_distinct_count_distinct_count_distinct_count_distinct.distinct\n\
    \        val notes_beats_count_distinct_count_distinct_count_distinct_count_distinct_count_distinct_count\
    \ = notes_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptu9gx_7m.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_distinct_count_distinct_count_distinct_count_distinct\e\
    [0m = notes_beats_count_distinct_count_distinct_count_distinct_count_distinct.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_count_distinct_count_distinct_count_distinct_count_distinct\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_beats_count_distinct_count_distinct_count_distinct_count_distinct\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptu9gx_7m.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_distinct_count_distinct_count_distinct_count_distinct_count_distinct_count\e\
    [0m = notes_\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_count_distinct_count_distinct_count_distinct_count_distinct_count_distinct_count\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_beats_count_distinct_count_distinct_count_distinct_count_distinct_count_distinct_count\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmptu9gx_7m.scala:23:89 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_distinct_count_distinct\e\
    [0m = notes_beats_count_distinct_count.distinct\n\e[31m\e[31m   |\e[0m       \
    \                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value distinct is not a\
    \ member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp"
  stdout: ''
  timestamp: 1659799865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest match {\n                case \"o\" => 4\n     \
    \           case \"o|\" => 2\n                case \".|\" => 1\n             \
    \   case _ => 0\n            }\n            beats * note.toLong\n        }).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbpccz9hp.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.charAt(\e[31m0\e[0m)\n\
    \e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = music_string.substring(\e\
    [31m1\e[0m).trim\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m =\
    \ rest \e[33mmatch\e[0m {\n\e[31m18 |\e[0m                \e[33mcase\e[0m \e[31m\"\
    o\"\e[0m => \e[31m4\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m \e[31m\"\
    o|\"\e[0m => \e[31m2\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m\"\
    .|\"\e[0m => \e[31m1\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m _ =>\
    \ \e[31m0\e[0m\n\e[31m22 |\e[0m            }\n\e[31m23 |\e[0m            beats\
    \ * note.toLong\n\e[31m24 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(rest =>\
    \ rest.split(\"o\").length.toLong)\n            beats.sum\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpq9xamj1l.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmpq9xamj1l.scala:19)\n\tat Problem$.main(tmpq9xamj1l.scala:22)\n\
    \tat Problem.main(tmpq9xamj1l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799852
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val notes = music_string.split(\"|\")\n            val beats = notes.map(note\
    \ => {\n                val notes = note.split(\"o\")\n                notes.map(note\
    \ => {\n                    note.split(\"|\").map(note => {\n                \
    \        note.split(\".\").map(note => {\n                            note.map(note\
    \ => {\n                                note.toLong\n                        \
    \    }).sum\n                        }).sum\n                    }).sum\n    \
    \            }).sum\n            }).sum\n            beats.toLong\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8qhao_29.scala:32)\n\tat Problem.main(tmp8qhao_29.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest = music_string.substring(1).split(\".\").map(music_string => {\n\
    \                        val rest = music_string.charAt(0)\n                 \
    \       val rest = music_string.substring(1).split(\"|\").map(music_string =>\
    \ {\n                            val rest = music_string.charAt(0)\n         \
    \                   val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                val rest = music_string.charAt(0)\n  \
    \                              val rest = music_string.substring(1).split(\".\"\
    ).map(music_string => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.charAt(0)\n                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                            val rest\
    \ = music_string.charAt(0)\n                                            val rest\
    \ = music_string.substring(1).split(\".\").map(music_string => {\n           \
    \                                     val rest = music_string.charAt(0)\n    \
    \                                            val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \   val rest = music_string.charAt(0)\n                                      \
    \              val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                                 \
    \           val rest = music_string.charAt(0)\n                              \
    \                              val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \            val rest = music_string.charAt(0)\n                             \
    \                                   val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.charAt(0)\n                      \
    \                                              val rest = music_string.substring(1).split(\"\
    .\").map(music_string => {\n                                                 \
    \                       val rest = music_string.charAt(0)\n                  \
    \                                                      val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                           val rest = music_string.charAt(0)\n              \
    \                                                              val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                               val rest = music_string.charAt(0)\n          \
    \                                                                      val rest\
    \ = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk8zbrfrh.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpk8zbrfrh.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk8zbrfrh.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1, music_string.length).toInt\n            val beats_count\
    \ = beats.toLong\n            val note_count = note.toLong\n            beats_count\
    \ * note_count\n        }).toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpwmefp3g1.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmpwmefp3g1.scala:20)\n\tat Problem$.main(tmpwmefp3g1.scala:23)\n\
    \tat Problem.main(tmpwmefp3g1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"o\").map(music_string => {\n\
    \                val note = music_string.trim\n                val beats = note.split(\"\
    |\").map(music_string => {\n                    val beat = music_string.trim\n\
    \                    beat.split(\"\\\\|\").map(music_string => {\n           \
    \             val beat = music_string.trim\n                        beat.split(\"\
    \\\\|\").map(music_string => {\n                            val beat = music_string.trim\n\
    \                            beat.split(\"\\\\|\").map(music_string => {\n   \
    \                             val beat = music_string.trim\n                 \
    \               beat.split(\"\\\\|\").map(music_string => {\n                \
    \                    val beat = music_string.trim\n                          \
    \          beat.split(\"\\\\|\").map(music_string => {\n                     \
    \                   val beat = music_string.trim\n                           \
    \             beat.split(\"\\\\|\").map(music_string => {\n                  \
    \                          val beat = music_string.trim\n                    \
    \                        beat.split(\"\\\\|\").map(music_string => {\n       \
    \                                         val beat = music_string.trim\n     \
    \                                           beat.split(\"\\\\|\").map(music_string\
    \ => {\n                                                    val beat = music_string.trim\n\
    \                                                    beat.split(\"\\\\|\").map(music_string\
    \ => {\n                                                        val beat = music_string.trim\n\
    \                                                        beat.split(\"\\\\|\"\
    ).map(music_string => {\n                                                    \
    \        val beat = music_string.trim\n                                      \
    \                      beat.split(\"\\\\|\").map(music_string => {\n         \
    \                                                       val beat = music_string.trim\n\
    \                                                                beat.split(\"\
    \\\\|\").map(music_string => {\n                                             \
    \                       val beat = music_string.trim\n                       \
    \                                             beat.split(\"\\\\|\").map(music_string\
    \ => {\n                                                                     \
    \   val beat = music_string.trim\n                                           \
    \                             beat.split(\"\\\\|\").map(music_string => {\n  \
    \                                                                          val\
    \ beat = music_string.trim\n                                                 \
    \                           beat.split(\"\\\\|\").map(music_string => {\n    \
    \                                                                            val\
    \ beat = music_string.trim\n                                                 \
    \                               beat.split(\"\\\\|\").map(music_string => {\n\
    \                                                                            \
    \        val beat = music_string.trim\n                                      \
    \                                              beat.split(\"\\\\|\").map(music_string\
    \ => {\n                                                                     \
    \                   val beat = music_string.trim\n                           \
    \                                                             beat.split(\"\\\\\
    |\").map(music_string => {\n                                                 \
    \                                           val beat = music_string.trim\n   \
    \                                                                            \
    \             beat.split(\"\\\\|\").map(music_string => {\n                  \
    \                                                                            \
    \  val beat = music_string.trim\n                                            \
    \                                                    beat.split(\"\\\\|\").map(music_string\
    \ => {\n                                                                     \
    \                               \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmet5yhty.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpmet5yhty.scala:69:0 ----------------------------\e[0m\e[0m\n\e[31m69\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_int\
    \ = music_list_size.toInt\n        val music_list_size_long = music_list_size_int.toLong\n\
    \        val music_list_size_long2 = music_list_size_long * music_list_size_long\n\
    \        val music_list_size_long3 = music_list_size_long2 * music_list_size_long\n\
    \        val music_list_size_long4 = music_list_size_long3 * music_list_size_long\n\
    \        val music_list_size_long5 = music_list_size_long4 * music_list_size_long\n\
    \        val music_list_size_long6 = music_list_size_long5 * music_list_size_long\n\
    \        val music_list_size_long7 = music_list_size_long6 * music_list_size_long\n\
    \        val music_list_size_long8 = music_list_size_long7 * music_list_size_long\n\
    \        val music_list_size_long9 = music_list_size_long8 * music_list_size_long\n\
    \        val music_list_size_long10 = music_list_size_long9 * music_list_size_long\n\
    \        val music_list_size_long11 = music_list_size_long10 * music_list_size_long\n\
    \        val music_list_size_long12 = music_list_size_long11 * music_list_size_long\n\
    \        val music_list_size_long13 = music_list_size_long12 * music_list_size_long\n\
    \        val music_list_size_long14 = music_list_size_long13 * music_list_size_long\n\
    \        val music_list_size_long15 = music_list_size_long14 * music_list_size_long\n\
    \        val music_list_size_long16 = music_list_size_long15 * music_list_size_long\n\
    \        val music_list_size_long17 = music_list_size_long16 * music_list_size_long\n\
    \        val music_list_size_long18 = music_list_size_long17 * music_list_size_long\n\
    \        val music_list_size_long19 = music_list_size_long18 * music_list_size_long\n\
    \        val music_list_size_long20 = music_list_size_long19 * music_list_size_long\n\
    \        val music_list_size_long21 = music_list_size_long20 * music_list_size_long\n\
    \        val music_list_size_long22 = music_list_size_long21 * music_list_size_long\n\
    \        val music_list_size_long23 = music_list_size_long\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ndha2zb.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length>0)\n\
    \        val notes = music_list.filter(_.startsWith(\"o|\")).map(_.split(\"|\"\
    )(0))\n        val rests = music_list.filter(_.startsWith(\"o\")).map(_.split(\"\
    o\")(0))\n        val notes_beats = notes.map(n => n.length.toLong)\n        val\
    \ rests_beats = rests.map(n => n.length.toLong)\n        val notes_rests = notes.map(n\
    \ => n.length.toLong + rests_beats.filter(_.startsWith(n)).length.toLong)\n  \
    \      val rests_rests = rests.map(n => n.length.toLong + notes_beats.filter(_.startsWith(n)).length.toLong)\n\
    \        val notes_rests_rests = notes.map(n => n.length.toLong + rests_beats.filter(_.startsWith(n)).length.toLong\
    \ + notes_beats.filter(_.startsWith(n)).length.toLong)\n        val rests_rests_rests\
    \ = rests.map(n => n.length.toLong + notes_beats.filter(_.startsWith(n)).length.toLong\
    \ + rests_beats.filter(_.startsWith(n)).length.toLong + notes_beats.filter(_.startsWith(n)).length.toLong)\n\
    \        val notes_rests_rests_rests = notes.map(n => n.length.toLong + rests_beats.filter(_.startsWith(n)).length.toLong\
    \ + notes_beats.filter(_.startsWith(n)).length.toLong + rests_beats.filter(_.startsWith(n)).length.toLong\
    \ + notes_beats.filter(_.startsWith(n)).length.toLong)\n        val rests_rests_rests_rests\
    \ = rests.map(n => n.length.toLong + notes_beats.filter(_.startsWith(n)).length.toLong\
    \ + rests_beats.filter(_.startsWith(n)).length.toLong + notes_beats.filter(_.startsWith(n)).length.toLong\
    \ + rests_beats.filter(_.startsWith(n)).length.toLong)\n        val notes_rests_rests_rests_rests\
    \ = notes.map(n => n.length.toLong + rests_beats.filter(_.startsWith(n)).length.toLong\
    \ + notes_beats.filter(_.startsWith(n)).length.toLong + rests_beats.filter(_.startsWith(n)).length.toLong\
    \ + notes_beats.filter(_.startsWith(n)).length.toLong + rests_beats.filter(_.startsWith(n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe9vama6_.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe9vama6_.scala:19:80\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_rests\e[0m = notes.map(\e[36mn\e[0m => n.length.toLong + rests_beats.filter(_.startsWith(n)).length.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            value startsWith is not a member of Long\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpe9vama6_.scala:20:80 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mrests_rests\e[0m = rests.map(\e[36mn\e\
    [0m => n.length.toLong + notes_beats.filter(_.startsWith(n)).length.toLong)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value startsWith is not a member of Long\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpe9vama6_.scala:21:86 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_rests_rests\e[0m = notes.map(\e\
    [36mn\e[0m => n.length.toLong + rests_beats.filter(_.startsWith(n)).length.toLong\
    \ + notes_beats.filter(_.startsWith(n)).length.toLong)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ startsWith is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe9vama6_.scala:21:138\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_rests_rests\e[0m = notes.map(\e[36mn\e[0m => n.length.toLong + rests_beats.filter(_.startsWith(n)).length.toLong\
    \ + notes_beats.filter(_.startsWith(n)).length.toLong)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                                "
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"\\\\o\").map(music_string =>\
    \ {\n                val note = music_string.trim\n                val beats =\
    \ note.split(\"\\\\.\").map(music_string => {\n                    val beat =\
    \ music_string.trim\n                    beat.split(\"\\\\|\").map(music_string\
    \ => {\n                        val beats = music_string.trim\n              \
    \          beats.toLong\n                    })\n                })\n        \
    \        note.trim\n            })\n            notes.toList\n        }).flatten\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj1dvw8j8.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m  \
    \      ^\e[0m\n\e[31m   |\e[0m        Found:    Array[String]\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnotes\e\
    [0m = music_string.split(\e[31m\"\\\\o\"\e[0m).map(\e[36mmusic_string\e[0m =>\
    \ {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e[0m = music_string.trim\n\
    \e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeats\e[0m = note.split(\e\
    [31m\"\\\\.\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m18 |\e[0m        \
    \            \e[33mval\e[0m \e[36mbeat\e[0m = music_string.trim\n\e[31m19 |\e\
    [0m                    beat.split(\e[31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m20 |\e[0m                        \e[33mval\e[0m \e[36mbeats\e\
    [0m = music_string.trim\n\e[31m21 |\e[0m                        beats.toLong\n\
    \e[31m22 |\e[0m                    })\n\e[31m23 |\e[0m                })\n\e[31m24\
    \ |\e[0m                note.trim\n\e[31m25 |\e[0m            })\n\e[31m26 |\e\
    [0m            notes.toList\n\e[31m27 |\e[0m        }).flatten\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"\\\\ \").map(music_string =>\
    \ {\n                val note = music_string.charAt(0).toLowerCase\n         \
    \       val beats = music_string.substring(1).toLong\n                note\n \
    \           }).toList\n            notes.map(note => {\n                note match\
    \ {\n                    case \"o\" => 4l.toLong\n                    case \"\
    o|\" => 2l.toLong\n                    case \".|\" => 1l.toLong\n            \
    \        case _ => 0l.toLong\n                }\n            }).sum\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptku2m97h.scala:16:50 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e[0m = music_string.charAt(\e\
    [31m0\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmptku2m97h.scala:19:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            }).toList\n\e[31m\e[31m   |\e[0m        \
    \      ^\e[0m\n\e[31m   |\e[0m              No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m              where:    B is a type variable\n\e[31m\e\
    [31m-- Error: /tmp/tmptku2m97h.scala:28:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m          ^\e\
    [0m\n\e[31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m          where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659799874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).filter(x\
    \ => x != \"O\" && x != \".\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size %\
    \ 4\n        val music_list_size_whole_half = music_list_size_whole / 2\n    \
    \    val music_list_size_whole_quarter = music_list_size_whole / 4\n        val\
    \ music_list_size_whole_whole = music_list_size_whole % 4\n        val music_list_size_whole_whole_half\
    \ = music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole % 4\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole % 4\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole % 4\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole_whole % 4\n        val music_list_size_whole_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpc2tp3ooc.scala:34:118 --------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole_whole_whole_half\e\
    [0m = music_list_size_whole_whole_whole_whole_whole / \n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc2tp3ooc.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \   val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                beat.asInstanceOf[Long] * rest.asInstanceOf[Long]\n         \
    \   }).sum\n            note.asInstanceOf[Long] * beats.asInstanceOf[Long]\n \
    \       }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpatwcxufa.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.asInstanceOf[\e\
    [35mLong\e[0m] * rest.asInstanceOf[\e[35mLong\e[0m]\n\e[31m20 |\e[0m         \
    \   }).sum\n\e[31m21 |\e[0m            note.asInstanceOf[\e[35mLong\e[0m] * beats.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m22 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val notes = music_string.split(\"|\").map(music_string => {\n   \
    \             val note = music_string.split(\"o\").head\n                val beats\
    \ = music_string.split(\"o|\").head\n                val rest = music_string.split(\"\
    .|\").head\n                val rest = music_string.split(\"o|\").head\n     \
    \           val rest = music_string.split(\"o|\").head\n                val rest\
    \ = music_string.split(\"o|\").head\n                val rest = music_string.split(\"\
    o|\").head\n                val rest = music_string.split(\"o|\").head\n     \
    \           val rest = music_string.split(\"o|\").head\n                val rest\
    \ = music_string.split(\"o|\").head\n                val rest = music_string.split(\"\
    o|\").head\n                val rest = music_string.split(\"o|\").head\n     \
    \           val rest = music_string.split(\"o|\").head\n                val rest\
    \ = music_string.split(\"o|\").head\n                val rest = music_string.split(\"\
    o|\").head\n                val rest = music_string.split(\"o|\").head\n     \
    \           val rest = music_string.split(\"o|\").head\n                val rest\
    \ = music_string.split(\"o|\").head\n                val rest = music_string.split(\"\
    o|\").head\n                val rest = music_string.split(\"o|\").head\n     \
    \           val rest = music_string.split(\"o|\").head\n                val rest\
    \ = music_string.split(\"o|\").head\n                val rest = music_string.split(\"\
    o|\").head\n                val rest = music_string.split(\"o|\").head\n     \
    \           val rest = music_string.split(\"o|\").head\n                val rest\
    \ = music_string.split(\"o|\").head\n                val rest = music_string.split(\"\
    o|\").head\n                val rest = music_string.split(\"o|\").head\n     \
    \           val rest = music_string.split(\"o|\").head\n                val rest\
    \ = music_string.split(\"o|\").head\n                val rest = music_string.split(\"\
    o|\").head\n                val rest = music_string.split(\"o|\").head\n     \
    \           val rest = music_string.split(\"o|\").head\n                val rest\
    \ = music_string.split(\"o|\").head\n                val rest = music_string.split(\"\
    o|\").head\n                val rest = music_string.split(\"o|\").head\n     \
    \           val rest = music_string.split(\"o|\").head\n                val rest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8zagyrdz.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8zagyrdz.scala:55:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m55 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp8zagyrdz.scala:64:0 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8zagyrdz.scala:19:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m \e[36mrest\e[0m = music_string.split(\e[31m\"o|\"\e[0m).head\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mrest is already defined as \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8zagyrdz.scala:20:20 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                \e[33mval\e[0m \e[36mrest\e[0m = music_string.split(\e\
    [31m\"o|\"\e[0m).head\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrest is already defined as \e[33mvalue\e[0m \e[35mrest\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8zagyrdz.scala:21:20 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                \e[33mval\e[0m \e[36mrest\e[0m = music_string.split(\e\
    [31m\"o|\"\e[0m).head\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrest is already defined as \e[33mvalue\e[0m \e[35mrest\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] N"
  stdout: ''
  timestamp: 1659799871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val music_notes = music_string.split(\"\\\\ \").map(music_note\
    \ => {\n                val music_note_length = music_note.split(\"-\").map(music_note_length\
    \ => {\n                    val music_note_length = music_note_length.trim()\n\
    \                    val music_note_length = music_note_length.toInt\n       \
    \             music_note_length\n                }).filter(music_note_length =>\
    \ music_note_length > 0)\n                val music_note_length = music_notes.last\n\
    \                val music_note = music_notes.head\n                music_note\n\
    \            }).filter(music_note => music_note != \".\")\n            val music_note\
    \ = music_notes.last\n            val music_note_length = music_note.split(\"\
    -\").map(music_note_length => {\n                val music_note_length = music_note_length.trim()\n\
    \                val music_note_length = music_note_length.toInt\n           \
    \     music_note_length\n            }).filter(music_note_length => music_note_length\
    \ > 0)\n            val music_note_length = music_note_length.last\n         \
    \   val music_notes = music_note.split(\"\\\\ \").map(music_note => {\n      \
    \          val music_note_length = music_note.split(\"-\").map(music_note_length\
    \ => {\n                    val music_note_length = music_note_length.trim()\n\
    \                    val music_note_length = music_note_length.toInt\n       \
    \             music_note_length\n                }).filter(music_note_length =>\
    \ music_note_length > 0)\n                val music_note_length = music_notes.last\n\
    \                val music_note = music_notes.head\n                music_note\n\
    \            }).filter(music_note => music_note != \".\")\n            val music_note\
    \ = music_notes.last\n            val music_note_length = music_note.split(\"\
    -\").map(music_note_length => {\n                val music_note_length = music_note_length.trim()\n\
    \                val music_note_length = music_note_length.toInt\n           \
    \     music_note_length\n            }).filter(music_note_length => music_note_length\
    \ > 0)\n            val music_note_length = music_note_length.last\n         \
    \   val music_notes = music_note.split(\"\\\\ \").map(music_note => {\n      \
    \          val music_note_length = music_note.split(\"-\").map(music_note_length\
    \ => {\n                    val music_note_length = music_note_length.trim()\n\
    \                    val music_note_length = music_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1t564mjn.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp1t564mjn.scala:63:0 ----------------------------\e[0m\e[0m\n\e[31m63\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- Error: /tmp/tmp1t564mjn.scala:24:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            }).filter(music_note => music_note != \e\
    [31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m  \
    \            No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m   \
    \           where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659799873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(_.toLong)\n            beats.sum\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpo04ly_ko.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmpo04ly_ko.scala:18)\n\tat Problem$.main(tmpo04ly_ko.scala:21)\n\
    \tat Problem.main(tmpo04ly_ko.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_length = notes.length\n        val notes_beats = notes.map(_.length.toLong)\n\
    \        val notes_beats_length = notes_beats.sum\n        val notes_beats_length_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length_length_length =\
    \ notes_beats_length_length.toLong\n        val notes_beats_length_length_length_length\
    \ = notes_beats_length_length_length.toLong\n        val notes_beats_length_length_length_length_length\
    \ = notes_beats_length_length_length_length.toLong\n        val notes_beats_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length.toLong\n        val\
    \ notes_beats_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length.toLong\n\
    \        val notes_beats_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length_length_length.toLong\n\
    \        val notes_beats_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length_length_length_length.toLong\n\
    \        val notes_beats_length_length_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length_length_length_length_length.toLong\n\
    \        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length_length_length_length_length_length.toLong\n\
    \        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length_length_length_length_length_length_length.toLong\n\
    \        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length.toLong\n\
    \        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length.toLong\n\
    \        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpla7xrl7s.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpla7xrl7s.scala:22:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_beats_length_length_length_length_length_length\e[0m = notes_beats_length_length_length_length_length_length.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnotes_beats_length_length_length_length_length_length\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpla7xrl7s.scala:23:75\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_beats_length_length_length_length_length_length_length\e[0m = notes_beats_length_length_length_length_length_length_length.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnotes_beats_length_length_length_length_length_length_length\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpla7xrl7s.scala:24:82\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_beats_length_length_length_length_length_length_length_length\e\
    [0m = notes_beats_length_length_length_length_length_length_length_length.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mnotes_beats_length_length_length_length_length_length_length_length\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpla7xrl7s.scala:25:89\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        "
  stdout: ''
  timestamp: 1659799873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(_.toInt).sum\n            beats *\
    \ note.toLong\n        }).sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp591pmnj4.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(_.toInt).sum\n\
    \e[31m17 |\e[0m            beats * note.toLong\n\e[31m18 |\e[0m        }).sum\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_count = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).toArray\n        val notes_array = notes_array.map(n\
    \ => n % 12).toArray\n        val notes_array = notes_array.map(n => n % 12).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).toArray\n        val notes_array = notes_array.map(n\
    \ => n % 12).toArray\n        val notes_array = notes_array.map(n => n % 12).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).toArray\n        val notes_array = notes_array.map(n\
    \ => n % 12).toArray\n        val notes_array = notes_array.map(n => n % 12).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).toArray\n        val notes_array = notes_array.map(n\
    \ => n % 12).toArray\n        val notes_array = notes_array.map(n => n % 12).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).toArray\n        val notes_array = notes_array.map(n\
    \ => n % 12).toArray\n        val notes_array = notes_array.map(n => n % 12).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).toArray\n        val notes_array = notes_array.map(n\
    \ => n % 12).toArray\n        val notes_array = notes_array.map(n => n % 12).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).toArray\n        val notes_array = notes_array.map(n\
    \ => n % 12).toArray\n        val notes_array = notes_array.map(n => n % 12).toArray\n\
    \        val notes_array = notes_array.map(n => n % 12).toArray\n        val notes_array\
    \ = notes_array.map(n => n % 12).to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdsb3yr9i.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mn\e[0m => n % \e[31m12\e[0m).toArray\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdsb3yr9i.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mn\e[0m => n % \e[31m12\e[0m).toArray\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdsb3yr9i.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mn\e[0m => n % \e[31m12\e[0m).toArray\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdsb3yr9i.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mn\e[0m => n % \e[31m12\e[0m).toArray\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdsb3yr9i.scala:21:"
  stdout: ''
  timestamp: 1659799875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val notes = music_string.split(\"|\")\n            val beats = notes.map(note\
    \ => {\n                val note = note.trim\n                note match {\n \
    \                   case \"o\" => 4\n                    case \"o|\" => 2\n  \
    \                  case \".|\" => 1\n                    case _ => 0\n       \
    \         }\n            }).sum\n            beats.toLong\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsx6ap4e9.scala:17:27 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mnote\e[0m = note.trim\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35mnote\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1).split(\"\
    |\")\n            val restLength = rest.length\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength / 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            val restLength = restLength.toLong\n\
    \            val restLength = restLength * 4\n            \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzgcfmygz.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpzgcfmygz.scala:81:0 ----------------------------\e[0m\e[0m\n\e[31m81\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzgcfmygz.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mrestLength\e[0m = restLength.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mrestLength is already defined as \e[33mvalue\e[0m \e[35mrestLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzgcfmygz.scala:19:16 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m            \e[33mval\e[0m \e[36mrestLength\e[0m = restLength / \e\
    [31m4\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrestLength is already defined as \e[33mvalue\e[0m \e[35mrestLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzgcfmygz.scala:20:16 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m            \e[33mval\e[0m \e[36mrestLength\e[0m = restLength.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mrestLength is already defined as \e[33mvalue\e[0m \e[35mrestLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzgcfmygz.scala:21:16 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m            \e[33mval\e[0m \e[36mrestLength\e[0m = restLength * \e\
    [31m4\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659799873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"o\").map(music_string => {\n\
    \                val note = music_string.trim\n                val beats = note.length\
    \ / 4\n                beats.toLong\n            })\n            notes.sum\n \
    \       }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplmz4pxu5.scala:24)\n\tat Problem.main(tmplmz4pxu5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(x =>\
    \ x.toInt)\n        val music_length = music_list.length\n        val music_beats\
    \ = music_list.map(x => x.toLong).sum\n        val music_last_beats = music_list.map(x\
    \ => x.toLong).takeRight(music_length).sum\n        val music_last_beats_count\
    \ = music_list.takeRight(music_length).map(x => x.toLong).sum\n        val music_last_beats_count_2\
    \ = music_list.takeRight(music_length).map(x => x.toLong).takeRight(music_length).sum\n\
    \        val music_last_beats_count_3 = music_list.takeRight(music_length).map(x\
    \ => x.toLong).takeRight(music_length).takeRight(music_length).sum\n        val\
    \ music_last_beats_count_4 = music_list.takeRight(music_length).map(x => x.toLong).takeRight(music_length).takeRight(music_length).takeRight(music_length).sum\n\
    \        val music_last_beats_count_5 = music_list.takeRight(music_length).map(x\
    \ => x.toLong).takeRight(music_length).takeRight(music_length).takeRight(music_length).takeRight(music_length).sum\n\
    \        val music_last_beats_count_6 = music_list.takeRight(music_length).map(x\
    \ => x.toLong).takeRight(music_length).takeRight(music_length).takeRight(music_length).takeRight(music_length).takeRight(music_length).sum\n\
    \        val music_last_beats_count_7 = music_list.takeRight(music_length).map(x\
    \ => x.toLong).takeRight(music_length).takeRight(music_length).takeRight(music_length).takeRight(music_length).takeRight(music_length).takeRight(music_length).sum\n\
    \        val music_last_beats_count_8 = music_list.takeRight(music_length).map(x\
    \ => x.toLong).takeRight(music_length).takeRight(music_length).takeRight(music_length).takeRight(music_length).takeRight(music_length).takeRight(music_length).takeRight(music_length).sum\n\
    \        val music_last_beats_count_9 = music_list.takeRight(music_length).map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5wbofe87.scala:26:78 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmusic_last_beats_count_9\e\
    [0m = music_list.takeRight(music_length).map(\n\e[31m\e[31m   |\e[0m         \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp5wbofe87.scala:27:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m    No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m    where:    B is a type variable\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5wbofe87.scala:27:5 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_length = notes.length\n        val notes_length_in_beats = notes_length\
    \ / 4\n        val notes_length_in_beats_without_last = notes_length_in_beats\
    \ - 1\n        val notes_length_in_beats_without_last_in_beats = notes_length_in_beats_without_last\
    \ / 4\n        val notes_length_in_beats_without_last_in_beats_without_last =\
    \ notes_length_in_beats_without_last_in_beats - 1\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats\
    \ = notes_length_in_beats_without_last_in_beats_without_last / 4\n        val\
    \ notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats - 1\n  \
    \      val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ / 4\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ - 1\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ / 4\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ - 1\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ - 1\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmxe68od.scala:26:159 -----------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnotes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\e\
    [0m = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmxe68od.scala:27:181\
    \ -----------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\e\
    [0m = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcmxe68od.scala:28:5\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m    "
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \")\n     \
    \   val music_list_length = music_list.size\n        val music_list_beats = music_list.map(music_string\
    \ => music_string.split(\"|\").length.toLong)\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_count = music_list_beats.count\n\
    \        val music_list_beats_average = music_list_beats_sum / music_list_beats_count\n\
    \        val music_list_beats_average_rounded = music_list_beats_average.toInt\n\
    \        val music_list_beats_average_rounded_rounded = math.round(music_list_beats_average_rounded)\n\
    \        val music_list_beats_average_rounded_rounded_rounded = math.round(music_list_beats_average_rounded_rounded)\n\
    \        val music_list_beats_average_rounded_rounded_rounded_rounded = math.round(music_list_beats_average_rounded_rounded_rounded)\n\
    \        val music_list_beats_average_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(music_list_beats_average_rounded_rounded_rounded_rounded)\n   \
    \     val music_list_beats_average_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(music_list_beats_average_rounded_rounded_rounded_rounded_rounded)\n\
    \        val music_list_beats_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(music_list_beats_average_rounded_rounded_rounded_rounded_rounded_rounded)\n\
    \        val music_list_beats_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(music_list_beats_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n\
    \        val music_list_beats_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(music_list_beats_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n\
    \        val music_list_beats_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(music_list_beats_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n\
    \        val music_list_beats_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7l5ec07s.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp7l5ec07s.scala:19:60\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e\
    [0m \e[36mmusic_list_beats_average\e[0m = music_list_beats_sum / music_list_beats_count\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m/\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m\
    \   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch\
    \ arguments ((music_list_beats_count : (Long => Boolean) => Int))\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7l5ec07s.scala:29:138 -----------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\e\
    [0m = math.round(music_list_beats_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: music_list_beats_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7l5ec07s.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when "
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"o\").map(music_string => {\n\
    \                val note = music_string.trim\n                val beats = note.split(\"\
    \\\\.\").map(music_string => {\n                    val beat = music_string.trim\n\
    \                    beat.split(\"\\\\|\").map(music_string => {\n           \
    \             val beats = music_string.trim\n                        beats.toLong\n\
    \                    })\n                })\n                note.trim\n     \
    \       })\n            notes.toList\n        }).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgor3g33q.scala:27:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o\"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e\
    [0m = music_string.trim\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeats\e\
    [0m = note.split(\e[31m\"\\\\.\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m18\
    \ |\e[0m                    \e[33mval\e[0m \e[36mbeat\e[0m = music_string.trim\n\
    \e[31m19 |\e[0m                    beat.split(\e[31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m20 |\e[0m                        \e[33mval\e[0m \e[36mbeats\e\
    [0m = music_string.trim\n\e[31m21 |\e[0m                        beats.toLong\n\
    \e[31m22 |\e[0m                    })\n\e[31m23 |\e[0m                })\n\e[31m24\
    \ |\e[0m                note.trim\n\e[31m25 |\e[0m            })\n\e[31m26 |\e\
    [0m            notes.toList\n\e[31m27 |\e[0m        }).toList\n\e[31m\e[31m  \
    \ |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[List[String]]\n\e\
    [31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_count = notes.length\n        val notes_beats = notes.map(x => x.toInt)\n\
    \        val notes_beats_count = notes_beats.map(x => x.toLong)\n        val notes_beats_count_sum\
    \ = notes_beats_count.foldLeft(0l) { (acc, x) => acc + x }\n        val notes_beats_count_count_sum\
    \ = notes_beats_count_sum.toLong\n        val notes_beats_count_count_count_sum\
    \ = notes_beats_count_count_sum.toLong\n        val notes_beats_count_count_count_count_sum\
    \ = notes_beats_count_count_count_sum.toLong\n        val notes_beats_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_sum.toLong\n        val notes_beats_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_sum.toLong\n        val notes_beats_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_sum.toLong\n        val notes_beats_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_count_sum.toLong\n \
    \       val notes_beats_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \        val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_count_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjab_63n1.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_count_count_count_count_count_count_count_count_count_count_sum\e\
    [0m = notes_beats_count_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_beats_count_count_count_count_count_count_count_count_count_count_count_sum\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpjab_63n1.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum\e\
    [0m = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpjab_63n1.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_count_count_count_count_count_count_count_count_count_coun"
  stdout: ''
  timestamp: 1659799877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length\
    \ == 1).map(x => x.toInt).toList\n        val music_list_size = music_list.size\n\
    \        val music_list_beats = music_list.map(x => x.toLong).sum\n        val\
    \ music_list_beats_size = music_list_beats.toLong\n        val music_list_beats_size_minus_1\
    \ = music_list_beats_size - 1\n        val music_list_beats_size_minus_2 = music_list_beats_size\
    \ - 2\n        val music_list_beats_size_minus_3 = music_list_beats_size - 3\n\
    \        val music_list_beats_size_minus_4 = music_list_beats_size - 4\n     \
    \   val music_list_beats_size_minus_5 = music_list_beats_size - 5\n        val\
    \ music_list_beats_size_minus_6 = music_list_beats_size - 6\n        val music_list_beats_size_minus_7\
    \ = music_list_beats_size - 7\n        val music_list_beats_size_minus_8 = music_list_beats_size\
    \ - 8\n        val music_list_beats_size_minus_9 = music_list_beats_size - 9\n\
    \        val music_list_beats_size_minus_10 = music_list_beats_size - 10\n   \
    \     val music_list_beats_size_minus_11 = music_list_beats_size - 11\n      \
    \  val music_list_beats_size_minus_12 = music_list_beats_size - 12\n        val\
    \ music_list_beats_size_minus_13 = music_list_beats_size - 13\n        val music_list_beats_size_minus_14\
    \ = music_list_beats_size - 14\n        val music_list_beats_size_minus_15 = music_list_beats_size\
    \ - 15\n        val music_list_beats_size_minus_16 = music_list_beats_size - 16\n\
    \        val music_list_beats_size_minus_17 = music_list_beats_size - 17\n   \
    \     val music_list_beats_size_minus_18 = music_list_beats_size - 18\n      \
    \  val music_list_beats_size_minus_19 = music_list_beats_size - 19\n        val\
    \ music_list_beats_size_minus_20 = music_list_beats_size - 20\n        val music_list_beats_size_minus_21\
    \ = music_list_beats_size - 21\n        val music_list_beats_size_minus_22 = music_list_beats_size\
    \ - 22\n        val music_list_beats_size_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfdw902i4.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfdw902i4.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"\\\\ \").map(music_string =>\
    \ {\n                val note = music_string.split(\"\\\\ \").map(music_string\
    \ => {\n                    music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n                        music_string.split(\"\\\\ \").map(music_string =>\
    \ {\n                            music_string.split(\"\\\\ \").map(music_string\
    \ => {\n                                music_string.split(\"\\\\ \").map(music_string\
    \ => {\n                                    music_string.split(\"\\\\ \").map(music_string\
    \ => {\n                                        music_string.split(\"\\\\ \").map(music_string\
    \ => {\n                                            music_string.split(\"\\\\\
    \ \").map(music_string => {\n                                                music_string.split(\"\
    \\\\ \").map(music_string => {\n                                             \
    \       music_string.split(\"\\\\ \").map(music_string => {\n                \
    \                                        music_string.split(\"\\\\ \").map(music_string\
    \ => {\n                                                            music_string.split(\"\
    \\\\ \").map(music_string => {\n                                             \
    \                   music_string.split(\"\\\\ \").map(music_string => {\n    \
    \                                                                music_string.split(\"\
    \\\\ \").map(music_string => {\n                                             \
    \                           music_string.split(\"\\\\ \").map(music_string =>\
    \ {\n                                                                        \
    \    music_string.split(\"\\\\ \").map(music_string => {\n                   \
    \                                                             music_string.split(\"\
    \\\\ \").map(music_string => {\n                                             \
    \                                       music_string.split(\"\\\\ \").map(music_string\
    \ => {\n                                                                     \
    \                   music_string.split(\"\\\\ \").map(music_string => {\n    \
    \                                                                            \
    \            music_string.split(\"\\\\ \").map(music_string => {\n           \
    \                                                                            \
    \         music_string.split(\"\\\\ \").map(music_string => {\n              \
    \                                                                            \
    \          music_string.split(\"\\\\ \").map(music_string => {\n             \
    \                                                                            \
    \               music_string.split(\"\\\\ \").map(music_string => {\n        \
    \                                                                            \
    \                        music_string.split(\"\\\\ \").map(music_string => {\n\
    \                                                                            \
    \                                    music_string.split(\"\\\\ \").map(music_string\
    \ => {\n                                                                     \
    \                                               music_string.split(\"\\\\ \").map(music_string\
    \ => {\n                                                                     \
    \                                                   music_string.split(\"\\\\\
    \ \").map(music_string => {\n                                                \
    \                                                                            music_string.split(\"\
    \\\\ \").map(music_string => {\n                                             \
    \                                                                            \
    \       music_string.split(\"\\\\ \").map(music_string => {\n                \
    \                                                                            \
    \                                        music_string.split(\"\\\\ \").map(music_string\
    \ => {\n                                                                     \
    \                                                                   music_string.split(\"\
    \\\\ \").map(music_string => {\n                                             \
    \                                                                            \
    \                   music_string.split(\"\\\\ \").map(music_string => {\n    \
    \                                                                            \
    \                                                                music_string.split(\"\
    \\\\\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcq170wmk.scala:48:163 ----------------------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                                                    \
    \                                                                            \
    \                music_string.split(\"\\\\\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0m                                                 unclosed\
    \ string literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq170wmk.scala:50:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m50 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \                           ')' expected, but '=' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpcq170wmk.scala:59:0 ----------------------------\e[0m\e\
    [0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmpcq170wmk.scala:50:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         too many arguments for \e[33mconstructor\e[0m \e\
    [35mmain\e[0m in \e[33mclass\e[0m \e[35mmain\e[0m: (): main\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpcq170wmk.scala:56:5 ------------------------------------------\e[0m\e\
    [0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m     where:\
    \    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpcq170wmk.scala:58:1 ------------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m No ClassTag\
    \ available for Array[B]\n\e[31m   |\e[0m\n\e[31m   |\e[0m where:    B is a type\
    \ variable\n6 errors found\n"
  stdout: ''
  timestamp: 1659799883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"o\").map(music_string => {\n\
    \                val note = music_string.trim\n                val beats = note.split(\"\
    |\").map(music_string => {\n                    val beat = music_string.trim\n\
    \                    val beats = beat.split(\".\").map(music_string => {\n   \
    \                     val beat = music_string.trim\n                        val\
    \ beats = beat.split(\"o\").map(music_string => {\n                          \
    \  val beat = music_string.trim\n                            val beats = beat.split(\"\
    |\").map(music_string => {\n                                val beat = music_string.trim\n\
    \                                val beats = beat.split(\".\").map(music_string\
    \ => {\n                                    val beat = music_string.trim\n   \
    \                                 val beats = beat.split(\"o\").map(music_string\
    \ => {\n                                        val beat = music_string.trim\n\
    \                                        val beats = beat.split(\"|\").map(music_string\
    \ => {\n                                            val beat = music_string.trim\n\
    \                                            val beats = beat.split(\".\").map(music_string\
    \ => {\n                                                val beat = music_string.trim\n\
    \                                                val beats = beat.split(\"o\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.trim\n                                                 \
    \   val beats = beat.split(\"|\").map(music_string => {\n                    \
    \                                    val beat = music_string.trim\n          \
    \                                              val beats = beat.split(\".\").map(music_string\
    \ => {\n                                                            val beat =\
    \ music_string.trim\n                                                        \
    \    val beats = beat.split(\"o\").map(music_string => {\n                   \
    \                                             val beat = music_string.trim\n \
    \                                                               val beats = beat.split(\"\
    |\").map(music_string => {\n                                                 \
    \                   val beat = music_string.trim\n                           \
    \                                         val beats = beat.split(\".\").map(music_string\
    \ => {\n                                                                     \
    \   val beat = music_string.trim\n                                           \
    \                             val beats = beat.split(\"o\").map(music_string =>\
    \ {\n                                                                        \
    \    val beat = music_string.trim\n                                          \
    \                                  val beats = beat.split(\"|\").map(music_string\
    \ => {\n                                                                     \
    \           val beat = music_string.trim\n                                   \
    \                                             val beats = beat.split(\".\").map(music_string\
    \ => {\n                                                                     \
    \               val beat = music_string.trim\n                               \
    \                                                     val beats = beat.split(\"\
    o\").map(music_string => {\n                                                 \
    \                                       val beat = music_string.trim\n       \
    \                                                                            \
    \     val beats = beat.split(\"|\").map(music_string => {\n                  \
    \                                                                          val\
    \ beat = music_string.trim\n                                                 \
    \                                           val beat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy_wf69zn.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy_wf69zn.scala:57:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m57 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpy_wf69zn.scala:66:0 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(rest => {\n                val\
    \ beat = rest.charAt(0)\n                val rest = rest.substring(1).trim\n \
    \               val rest = rest.toLong\n                beat.toLong * rest\n \
    \           }).sum\n            note.toLong * beats\n        }).sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3v9mdnqt.scala:20:20 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mrest\e[0m = rest.toLong\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mrest is already defined as \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmp3v9mdnqt.scala:22:14\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     }).sum\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m     \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \        where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmp3v9mdnqt.scala:24:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ }).sum\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a\
    \ type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659799883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \")\n     \
    \   val music_list_size = music_list.size\n        val music_list_length = music_list_size\
    \ / 4\n        val music_list_remain = music_list_size % 4\n        val music_list_last_beat\
    \ = music_list_length - music_list_remain\n        val music_list_last_beats =\
    \ music_list_last_beat * 4\n        val music_list_last_beats_int = music_list_last_beats.toInt\n\
    \        val music_list_last_beats_long = music_list_last_beats_int.toLong\n \
    \       val music_list_last_beats_longs = music_list_last_beats_long.toList\n\
    \        val music_list_last_beats_longs_size = music_list_last_beats_longs.size\n\
    \        val music_list_last_beats_longs_length = music_list_last_beats_longs_size\
    \ / 4\n        val music_list_last_beats_longs_remain = music_list_last_beats_longs_size\
    \ % 4\n        val music_list_last_beats_longs_last_beat = music_list_last_beats_longs_length\
    \ - music_list_last_beats_longs_remain\n        val music_list_last_beats_longs_last_beats\
    \ = music_list_last_beats_longs_last_beat * 4\n        val music_list_last_beats_longs_last_beats_int\
    \ = music_list_last_beats_longs_last_beats.toInt\n        val music_list_last_beats_longs_last_beats_long\
    \ = music_list_last_beats_longs_last_beats_int.toLong\n        val music_list_last_beats_longs_last_beats_longs\
    \ = music_list_last_beats_longs_last_beats_long.toList\n        val music_list_last_beats_longs_last_beats_longs_size\
    \ = music_list_last_beats_longs_last_beats_longs.size\n        val music_list_last_beats_longs_last_beats_longs_length\
    \ = music_list_last_beats_longs_last_beats_longs_size / 4\n        val music_list_last_beats_longs_last_beats_longs_remain\
    \ = music_list_last_beats_longs_last_beats_longs_size % 4\n        val music_list_last_beats_longs_last_beats_longs_last_beat\
    \ = music_list_last_beats_longs_last_beats_longs_length - music_list_last_beats_longs_last_beats_longs_remain\n\
    \        val music_list_last_beats_longs_last_beats_longs_last_beats = musi\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkciwt2zd.scala:22:69 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_last_beats_longs\e\
    [0m = music_list_last_beats_long.toList\n\e[31m\e[31m   |\e[0m               \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue toList is not a member of Long - did you mean music_list_last_beats_long.toInt?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkciwt2zd.scala:35:70 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_last_beats_longs_last_beats_longs_last_beats\e\
    [0m = musi\n\e[31m\e[31m   |\e[0m                                            \
    \                          ^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Not found: musi\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkciwt2zd.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length\
    \ == 1).map(x => x.toInt).toList\n        val beats = music_list.map(x => if (x\
    \ == 0) 4 else 2)\n        val notes = music_list.map(x => if (x == 0) \"o\" else\
    \ if (x == 1) \"o|\" else \"|\")\n        val notes_count = music_list.map(x =>\
    \ if (x == 0) 4 else 2)\n        val notes_count_sum = notes_count.sum\n     \
    \   val notes_count_sum = notes_count_sum.toLong\n        val notes_count_sum\
    \ = notes_count_sum.toInt\n        val notes_count_sum = notes_count_sum.toLong\n\
    \        val notes_count_sum = notes_count_sum.toInt\n        val notes_count_sum\
    \ = notes_count_sum.toLong\n        val notes_count_sum = notes_count_sum.toInt\n\
    \        val notes_count_sum = notes_count_sum.toLong\n        val notes_count_sum\
    \ = notes_count_sum.toInt\n        val notes_count_sum = notes_count_sum.toLong\n\
    \        val notes_count_sum = notes_count_sum.toInt\n        val notes_count_sum\
    \ = notes_count_sum.toLong\n        val notes_count_sum = notes_count_sum.toInt\n\
    \        val notes_count_sum = notes_count_sum.toLong\n        val notes_count_sum\
    \ = notes_count_sum.toInt\n        val notes_count_sum = notes_count_sum.toLong\n\
    \        val notes_count_sum = notes_count_sum.toInt\n        val notes_count_sum\
    \ = notes_count_sum.toLong\n        val notes_count_sum = notes_count_sum.toInt\n\
    \        val notes_count_sum = notes_count_sum.toLong\n        val notes_count_sum\
    \ = notes_count_sum.toInt\n        val notes_count_sum = notes_count_sum.toLong\n\
    \        val notes_count_sum = notes_count_sum.toInt\n        val notes_count_sum\
    \ = notes_count_sum.toLong\n        val notes_count_sum = notes_count_sum.toInt\n\
    \        val notes_count_sum = notes_count_sum.toLong\n        val notes_count_sum\
    \ = notes_count_sum.toInt\n        val notes_count_sum = notes_count_sum.toLong\n\
    \        val notes_count_sum = notes_count_sum.toInt\n        val notes_count_sum\
    \ = notes_count_sum.toLong\n        val notes_count_sum = notes_count_sum.toInt\n\
    \        val notes_count_sum = notes_count_sum.toLong\n        val notes_count_sum\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgzyvvmqy.scala:50:29 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_sum\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgzyvvmqy.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_sum\e[0m = notes_count_sum.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnotes_count_sum is already defined as \e[33mvalue\e[0m \e[35mnotes_count_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgzyvvmqy.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_sum\e[0m = notes_count_sum.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnotes_count_sum is already defined as \e[33mvalue\e[0m \e[35mnotes_count_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgzyvvmqy.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_sum\e[0m = notes_count_sum.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnotes_count_sum is already defined as \e[33mvalue\e[0m \e[35mnotes_count_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgzyvvmqy.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_sum\e[0m = notes_count_sum.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m "
  stdout: ''
  timestamp: 1659799885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1, music_string.length).toInt\n            val rest =\
    \ music_string.substring(music_string.length)\n            val rest = rest.replace(\"\
    .\", \"\")\n            val rest = rest.replace(\"|\", \"\")\n            val\
    \ rest = rest.replace(\"o\", \"\")\n            val rest = rest.replace(\"o|\"\
    , \"\")\n            val rest = rest.replace(\"|o\", \"\")\n            val rest\
    \ = rest.replace(\"|o|\", \"\")\n            val rest = rest.replace(\"o|o\",\
    \ \"\")\n            val rest = rest.replace(\"o|o|\", \"\")\n            val\
    \ rest = rest.replace(\"o|o|o\", \"\")\n            val rest = rest.replace(\"\
    o|o|o|\", \"\")\n            val rest = rest.replace(\"o|o|o|o\", \"\")\n    \
    \        val rest = rest.replace(\"o|o|o|o|\", \"\")\n            val rest = rest.replace(\"\
    o|o|o|o|o\", \"\")\n            val rest = rest.replace(\"o|o|o|o|o|\", \"\")\n\
    \            val rest = rest.replace(\"o|o|o|o|o|o\", \"\")\n            val rest\
    \ = rest.replace(\"o|o|o|o|o|o|\", \"\")\n            val rest = rest.replace(\"\
    o|o|o|o|o|o|o\", \"\")\n            val rest = rest.replace(\"o|o|o|o|o|o|o|\"\
    , \"\")\n            val rest = rest.replace(\"o|o|o|o|o|o|o|o\", \"\")\n    \
    \        val rest = rest.replace(\"o|o|o|o|o|o|o|o\", \"\")\n            val rest\
    \ = rest.replace(\"o|o|o|o|o|o|o|o|\", \"\")\n            val rest = rest.replace(\"\
    o|o|o|o|o|o|o|o|o\", \"\")\n            val rest = rest.replace(\"o|o|o|o|o|o|o|o|o|\"\
    , \"\")\n            val rest = rest.replace(\"o|o|o|o|o|o|o|o|o|o\", \"\")\n\
    \            val rest = rest.replace(\"o|o|o|o|o|o|o|o|o|o|\", \"\")\n       \
    \     val rest = rest.replace(\"o|o|o|o|o|o|o|o|o|o|\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1nrb7vx6.scala:43:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = rest.replace(\"\
    o|o|o|o|o|o|o|o|o|o|\n\e[31m\e[31m   |\e[0m                                  \
    \  ^\e[0m\n\e[31m   |\e[0m                                    unclosed string\
    \ literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1nrb7vx6.scala:45:34 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  ')'\
    \ expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1nrb7vx6.scala:54:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m54 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1nrb7vx6.scala:18:16 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = rest.replace(\e[31m\"\
    .\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrest is already defined as \e[33mvalue\e[0m \e[35mrest\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1nrb7vx6.scala:19:16 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = rest.replace(\e[31m\"|\"\e\
    [0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrest is already defined as \e[33mvalue\e[0m \e[35mrest\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1nrb7vx6.scala:20:16 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = rest.replace(\e[31m\"o\"\e\
    [0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrest is already defined as \e[33mvalue\e[0m \e[35mrest\e[0"
  stdout: ''
  timestamp: 1659799884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"\\\\o\").map(music_string =>\
    \ {\n                val note = music_string.split(\"\\\\.\").map(music_string\
    \ => {\n                    val beats = music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                        val beat = music_string.split(\"\\\\o\").map(music_string\
    \ => {\n                            val beats = music_string.split(\"\\\\.\").map(music_string\
    \ => {\n                                val beat = music_string.split(\"\\\\o\"\
    ).map(music_string => {\n                                    val beats = music_string.split(\"\
    \\\\.\").map(music_string => {\n                                        val beat\
    \ = music_string.split(\"\\\\o\").map(music_string => {\n                    \
    \                        val beats = music_string.split(\"\\\\.\").map(music_string\
    \ => {\n                                                val beat = music_string.split(\"\
    \\\\o\").map(music_string => {\n                                             \
    \       val beats = music_string.split(\"\\\\.\").map(music_string => {\n    \
    \                                                    val beat = music_string.split(\"\
    \\\\o\").map(music_string => {\n                                             \
    \               val beats = music_string.split(\"\\\\.\").map(music_string =>\
    \ {\n                                                                val beat\
    \ = music_string.split(\"\\\\o\").map(music_string => {\n                    \
    \                                                val beats = music_string.split(\"\
    \\\\.\").map(music_string => {\n                                             \
    \                           val beat = music_string.split(\"\\\\o\").map(music_string\
    \ => {\n                                                                     \
    \       val beats = music_string.split(\"\\\\.\").map(music_string => {\n    \
    \                                                                            val\
    \ beat = music_string.split(\"\\\\o\").map(music_string => {\n               \
    \                                                                     val beats\
    \ = music_string.split(\"\\\\.\").map(music_string => {\n                    \
    \                                                                    val beat\
    \ = music_string.split(\"\\\\o\").map(music_string => {\n                    \
    \                                                                        val beats\
    \ = music_string.split(\"\\\\.\").map(music_string => {\n                    \
    \                                                                            val\
    \ beat = music_string.split(\"\\\\o\").map(music_string => {\n               \
    \                                                                            \
    \         val beats = music_string.split(\"\\\\.\").map(music_string => {\n  \
    \                                                                            \
    \                          val beat = music_string.split(\"\\\\o\").map(music_string\
    \ => {\n                                                                     \
    \                                       val beats = music_string.split(\"\\\\\
    .\").map(music_string => {\n                                                 \
    \                                                               val beat = music_string.split(\"\
    \\\\o\").map(music_string => {\n                                             \
    \                                                                       val beats\
    \ = music_string.split(\"\\\\.\").map(music_string => {\n                    \
    \                                                                            \
    \                        val beat = music_string.split(\"\\\\o\").map(music_string\
    \ => {\n                                                                     \
    \                                                       val beats = music_string.split(\"\
    \\\\.\").map(music_string => {\n                                             \
    \                                                                            \
    \                       val \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpyval5s13.scala:44:147 --------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                                                    \
    \                                                                            \
    \                \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                                    pattern expected\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyval5s13.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpyval5s13.scala:55:0 ----------------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase)\n\
    \        val music_list_size = music_list.size\n        val music_list_size_half\
    \ = music_list_size / 2\n        val music_list_size_quarter = music_list_size\
    \ / 4\n        val music_list_size_whole = music_list_size % 4\n        val music_list_size_whole_half\
    \ = music_list_size_whole / 2\n        val music_list_size_whole_quarter = music_list_size_whole\
    \ / 4\n        val music_list_size_whole_whole = music_list_size_whole % 4\n \
    \       val music_list_size_whole_whole_half = music_list_size_whole_whole / 2\n\
    \        val music_list_size_whole_whole_quarter = music_list_size_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole = music_list_size_whole_whole\
    \ % 4\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ % 4\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole\
    \ % 4\n        val music_list_size_whole_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole\
    \ % 4\n        val music_list_size_whole_whole_whole_whole_whole_whole_half =\
    \ music_list_size_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_whole_who\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsvmcydm1.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsvmcydm1.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1)\n\
    \            val beats = rest.split(\"|\").map(rest => {\n                val\
    \ beat = rest.substring(0, 1)\n                val rest2 = rest.substring(1)\n\
    \                val rest3 = rest.substring(1)\n                val rest4 = rest.substring(1)\n\
    \                val rest5 = rest.substring(1)\n                val rest6 = rest.substring(1)\n\
    \                val rest7 = rest.substring(1)\n                val rest8 = rest.substring(1)\n\
    \                val rest9 = rest.substring(1)\n                val rest10 = rest.substring(1)\n\
    \                val rest11 = rest.substring(1)\n                val rest12 =\
    \ rest.substring(1)\n                val rest13 = rest.substring(1)\n        \
    \        val rest14 = rest.substring(1)\n                val rest15 = rest.substring(1)\n\
    \                val rest16 = rest.substring(1)\n                val rest17 =\
    \ rest.substring(1)\n                val rest18 = rest.substring(1)\n        \
    \        val rest19 = rest.substring(1)\n                val rest20 = rest.substring(1)\n\
    \                val rest21 = rest.substring(1)\n                val rest22 =\
    \ rest.substring(1)\n                val rest23 = rest.substring(1)\n        \
    \        val rest24 = rest.substring(1)\n                val rest25 = rest.substring(1)\n\
    \                val rest26 = rest.substring(1)\n                val rest27 =\
    \ rest.substring(1)\n                val rest28 = rest.substring(1)\n        \
    \        val rest29 = rest.substring(1)\n                val rest30 = rest.substring(1)\n\
    \                val rest31 = rest.substring(1)\n                val rest32 =\
    \ rest.substring(1)\n                val rest33 = rest.substring(1)\n        \
    \        val rest34 = rest.substring(1)\n                val rest35 = rest.substring(1)\n\
    \                val rest36 = rest.substring(1)\n                val rest37 =\
    \ rest.substring(1)\n                val rest38 = rest.substring(1)\n        \
    \        val rest39 = rest.substring(1)\n                val rest40 = rest.substring(1)\n\
    \                val rest41 = rest.substring(1)\n                val rest42 =\
    \ rest.substring(1)\n                val rest43 = rest.substring(1)\n        \
    \        val rest44 = rest.substring(1)\n                val rest45 = rest.substring(1)\n\
    \                val rest46 = rest.substring(1)\n                val rest47 =\
    \ rest.substring(1)\n                val rest48 = rest.substring(1)\n        \
    \        val rest49 = rest.substring(1)\n                val rest50 = rest.substring(1)\n\
    \                val rest51 = rest.substring(1)\n                val rest52 =\
    \ rest.substring(1)\n                val rest53 = rest.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7wj3cknk.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp7wj3cknk.scala:72:4 ----------------------------\e[0m\e[0m\n\e[31m72\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7wj3cknk.scala:81:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m81 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"\\\\o\").map(music_string =>\
    \ {\n                val note = music_string.trim\n                val beats =\
    \ note.split(\"\\\\.\").map(music_string => {\n                    val beat =\
    \ music_string.trim\n                    beat.split(\"o\").map(music_string =>\
    \ {\n                        val beat = music_string.trim\n                  \
    \      beat.split(\"|\").map(music_string => {\n                            val\
    \ beat = music_string.trim\n                            beat.split(\"o\").map(music_string\
    \ => {\n                                val beat = music_string.trim\n       \
    \                         beat.split(\"|\").map(music_string => {\n          \
    \                          val beat = music_string.trim\n                    \
    \                beat.split(\"o\").map(music_string => {\n                   \
    \                     val beat = music_string.trim\n                         \
    \               beat.split(\"|\").map(music_string => {\n                    \
    \                        val beat = music_string.trim\n                      \
    \                      beat.split(\"o\").map(music_string => {\n             \
    \                                   val beat = music_string.trim\n           \
    \                                     beat.split(\"|\").map(music_string => {\n\
    \                                                    val beat = music_string.trim\n\
    \                                                    beat.split(\"o\").map(music_string\
    \ => {\n                                                        val beat = music_string.trim\n\
    \                                                        beat.split(\"|\").map(music_string\
    \ => {\n                                                            val beat =\
    \ music_string.trim\n                                                        \
    \    beat.split(\"o\").map(music_string => {\n                               \
    \                                 val beat = music_string.trim\n             \
    \                                                   beat.split(\"|\").map(music_string\
    \ => {\n                                                                    val\
    \ beat = music_string.trim\n                                                 \
    \                   beat.split(\"o\").map(music_string => {\n                \
    \                                                        val beat = music_string.trim\n\
    \                                                                        beat.split(\"\
    |\").map(music_string => {\n                                                 \
    \                           val beat = music_string.trim\n                   \
    \                                                         beat.split(\"o\").map(music_string\
    \ => {\n                                                                     \
    \           val beat = music_string.trim\n                                   \
    \                                             beat.split(\"|\").map(music_string\
    \ => {\n                                                                     \
    \               val beat = music_string.trim\n                               \
    \                                                     beat.split(\"o\").map(music_string\
    \ => {\n                                                                     \
    \                   val beat = music_string.trim\n                           \
    \                                                             beat.split(\"|\"\
    ).map(music_string => {\n                                                    \
    \                                        val beat = music_string.trim\n      \
    \                                                                            \
    \          beat.split(\"o\").map(music_string => {\n                         \
    \                                                                       val beat\
    \ = music_string.trim\n                                                      \
    \                                          beat.split(\"|\").map(music_string\
    \ => {\n                                                                     \
    \                               val beat = music_string.trim\n               \
    \                                                                            \
    \         beat.split(\"o\").map(music_string \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx0xcmuxe.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx0xcmuxe.scala:61:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m61 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpx0xcmuxe.scala:70:0 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx0xcmuxe.scala:59:120\
    \ -------------------\e[0m\e[0m\n\e[31m59 |\e[0m                             \
    \                                                                       beat.split(\e\
    [31m\"o\"\e[0m).map(music_string \n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                    Found:    (music_string : String)\n\e[31m   |\e[0m      \
    \                                 Required: String => Any\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpx0xcmuxe.scala:67:5 ------------------------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     No ClassTag available for Array[B]\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \    where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpx0xcmuxe.scala:69:1\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m69 |\e[0m}\n\e[31m\e\
    [31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m No ClassTag available for Array[Array[B]]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m where:    B is a type variable\n6 errors found\n"
  stdout: ''
  timestamp: 1659799888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_length = music_list.length\n        val music_list_length\
    \ = music_list_length.toInt\n        val music_list_length = music_list_length.toLong\n\
    \        val music_list_length = music_list_length.toInt\n        val music_list_length\
    \ = music_list_length.toLong\n        val music_list_length = music_list_length.toInt\n\
    \        val music_list_length = music_list_length.toLong\n        val music_list_length\
    \ = music_list_length.toInt\n        val music_list_length = music_list_length.toLong\n\
    \        val music_list_length = music_list_length.toInt\n        val music_list_length\
    \ = music_list_length.toLong\n        val music_list_length = music_list_length.toInt\n\
    \        val music_list_length = music_list_length.toLong\n        val music_list_length\
    \ = music_list_length.toInt\n        val music_list_length = music_list_length.toLong\n\
    \        val music_list_length = music_list_length.toInt\n        val music_list_length\
    \ = music_list_length.toLong\n        val music_list_length = music_list_length.toInt\n\
    \        val music_list_length = music_list_length.toLong\n        val music_list_length\
    \ = music_list_length.toInt\n        val music_list_length = music_list_length.toLong\n\
    \        val music_list_length = music_list_length.toInt\n        val music_list_length\
    \ = music_list_length.toLong\n        val music_list_length = music_list_length.toInt\n\
    \        val music_list_length = music_list_length.toLong\n        val music_list_length\
    \ = music_list_length.toInt\n        val music_list_length = music_list_length.toLong\n\
    \        val music_list_length = music_list_length.toInt\n        val music_list_length\
    \ = music_list_length.toLong\n        val music_list_length = music_list_length.toInt\n\
    \        val music_list_length = music_list_length.toLong\n        val music_list_length\
    \ = music_list_length.toInt\n        val music_list_length = music_list_length.toLong\n\
    \        val music_list_length = music_list_length.toInt\n        val music_list_length\
    \ = music_list_length.toLong\n        val music_list_length = music_list_length.toInt\n\
    \        val music_list_length = music_list_length.toLong\n        val music_list_length\
    \ = music_list_length.toInt\n        val music_list_length = musi\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1t_q3l3v.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_length\e[0m =\
    \ music_list_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_length is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_list_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1t_q3l3v.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_length\e[0m =\
    \ music_list_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_length is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_list_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1t_q3l3v.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_length\e[0m =\
    \ music_list_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_length is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_list_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1t_q3l3v.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_length\e[0m =\
    \ music_list_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_length is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_list_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1t_q3l3v.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659799885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase)\n\
    \        val music_list_length = music_list.length\n        val music_list_with_beats\
    \ = music_list.map(music_string => {\n            val music_string_with_beats\
    \ = music_string.split(\"|\")\n            val music_string_with_beats_length\
    \ = music_string_with_beats.length\n            val music_string_with_beats_last_beat\
    \ = music_string_with_beats(music_string_with_beats_length - 1)\n            val\
    \ music_string_with_beats_last_beat_length = music_string_with_beats_last_beat.length\n\
    \            val music_string_with_beats_last_beat_last_beat = music_string_with_beats_last_beat(music_string_with_beats_last_beat_length\
    \ - 1)\n            val music_string_with_beats_last_beat_last_beat_length = music_string_with_beats_last_beat_last_beat.length\n\
    \            val music_string_with_beats_last_beat_last_beat_last_beat = music_string_with_beats_last_beat_last_beat(music_string_with_beats_last_beat_last_beat_length\
    \ - 1)\n            val music_string_with_beats_last_beat_last_beat_last_beat_length\
    \ = music_string_with_beats_last_beat_last_beat_last_beat.length\n           \
    \ val music_string_with_beats_last_beat_last_beat_last_beat_last_beat = music_string_with_beats_last_beat_last_beat_last_beat(music_string_with_beats_last_beat_last_beat_last_beat_length\
    \ - 1)\n            val music_string_with_beats_last_beat_last_beat_last_beat_last_beat_length\
    \ = music_string_with_beats_last_beat_last_beat_last_beat_last_beat.length\n \
    \           val music_string_with_beats_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = music_string_with_beats_last_beat_last_beat_last_beat_last_beat(music_string_with_beats_last_beat_last_beat_last_beat_last_beat_length\
    \ - 1)\n            val music_string_with_beats_last_beat_last_beat_last_beat_last_beat_last_beat_length\
    \ = music_string_with_beats_last_beat_last_beat_last_beat_last_beat_last_beat.length\n\
    \            val music_string_with_beats_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = music_string_with_beats_last_beat_last_beat_last_beat_last_beat_last_be\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf030fe8k.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpf030fe8k.scala:40:0 ----------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf030fe8k.scala:22:113 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mmusic_string_with_beats_last_beat_last_beat_length\e\
    [0m = music_string_with_beats_last_beat_last_beat.length\n\e[31m\e[31m   |\e[0m\
    \                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpf030fe8k.scala:23:72\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36mmusic_string_with_beats_last_beat_last_beat_last_beat\e[0m = music_string_with_beats_last_beat_last_beat(music_string_with_beats_last_beat_last_beat_length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m\e[33mvalue\e[0m \e[35mmusic_string_with_beats_last_beat_last_beat\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpf030fe8k.scala:29:102 -----------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m            \e[33mval\e[0m \e[36mmusic_string_with_beats_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat\e\
    [0m = music_string_with_beats_last_beat_last_beat_last_beat_last_beat_last_be\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(x\
    \ => x != \"O\" && x != \"|\")\n        val music_list = music_list.map(x => if\
    \ (x == \"O\") 4L else 2L).filter(x => x != 0L)\n        val music_list = music_list.map(x\
    \ => if (x == \"|\") 1L else 0L)\n        val music_list = music_list.map(x =>\
    \ if (x == 0) 4L else 2L)\n        val music_list = music_list.map(x => if (x\
    \ == 0) 2L else 1L)\n        val music_list = music_list.map(x => if (x == 0)\
    \ 1L else 0L)\n        val music_list = music_list.map(x => if (x == 0) 1L else\
    \ 0L)\n        val music_list = music_list.map(x => if (x == 0) 1L else 0L)\n\
    \        val music_list = music_list.map(x => if (x == 0) 1L else 0L)\n      \
    \  val music_list = music_list.map(x => if (x == 0) 1L else 0L)\n        val music_list\
    \ = music_list.map(x => if (x == 0) 1L else 0L)\n        val music_list = music_list.map(x\
    \ => if (x == 0) 1L else 0L)\n        val music_list = music_list.map(x => if\
    \ (x == 0) 1L else 0L)\n        val music_list = music_list.map(x => if (x ==\
    \ 0) 1L else 0L)\n        val music_list = music_list.map(x => if (x == 0) 1L\
    \ else 0L)\n        val music_list = music_list.map(x => if (x == 0) 1L else 0L)\n\
    \        val music_list = music_list.map(x => if (x == 0) 1L else 0L)\n      \
    \  val music_list = music_list.map(x => if (x == 0) 1L else 0L)\n        val music_list\
    \ = music_list.map(x => if (x == 0) 1L else 0L)\n        val music_list = music_list.map(x\
    \ => if (x == 0) 1L else 0L)\n        val music_list = music_list.map(x => if\
    \ (x == 0) 1L else 0L)\n        val music_list = music_list.map(x => if (x ==\
    \ 0) 1L else 0L)\n        val music_list = music_list.map(x => if (x == 0) 1L\
    \ else 0L)\n        val music_list = music_list.map(x => if (x == 0) 1L else 0L)\n\
    \        val music_list = music_list.map(x => if (\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwjvu0jzi.scala:38:49 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e[0m = music_list.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (\n\e[31m\e[31m   |\e[0m                         \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \          expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwjvu0jzi.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e[0m = music_list.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m\"O\"\e[0m) \e[31m4L\e[0m \e[33melse\e\
    [0m \e[31m2L\e[0m).filter(\e[36mx\e[0m => x != \e[31m0L\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list is already defined as \e[33mvalue\e[0m \e[35mmusic_list\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwjvu0jzi.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e[0m = music_list.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m\"|\"\e[0m) \e[31m1L\e[0m \e[33melse\e\
    [0m \e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list is already defined as \e[33mvalue\e[0m \e[35mmusic_list\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwjvu0jzi.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e[0m = music_list.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m4L\e[0m \e[33melse\e[0m\
    \ \e[31m2L\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list is already defined as \e[33mvalue\e[0m \e[35mmusic_list\e\
    [0m\n\e[31m   |\e[0m\n\e"
  stdout: ''
  timestamp: 1659799887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest = music_string.substring(1).split(\"|\").map(music_string => {\n\
    \                        val rest = music_string.charAt(0)\n                 \
    \       val rest = music_string.substring(1).split(\"o\").map(music_string =>\
    \ {\n                            val rest = music_string.charAt(0)\n         \
    \                   val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                val rest = music_string.charAt(0)\n  \
    \                              val rest = music_string.substring(1).split(\"o\"\
    ).map(music_string => {\n                                    val rest = music_string.charAt(0)\n\
    \                                    val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest =\
    \ music_string.charAt(0)\n                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                            val rest\
    \ = music_string.charAt(0)\n                                            val rest\
    \ = music_string.substring(1).split(\"|\").map(music_string => {\n           \
    \                                     val rest = music_string.charAt(0)\n    \
    \                                            val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \   val rest = music_string.charAt(0)\n                                      \
    \              val rest = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                                        val rest = music_string.charAt(0)\n\
    \                                                        val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \           val rest = music_string.charAt(0)\n                              \
    \                              val rest = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \            val rest = music_string.charAt(0)\n                             \
    \                                   val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.charAt(0)\n                      \
    \                                              val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                       val rest = music_string.charAt(0)\n                  \
    \                                                      val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                           val rest = music_string.charAt(0)\n              \
    \                                                              val rest = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \                               val rest = music_string.charAt(0)\n          \
    \                                                                      val rest\
    \ = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxrpvsauw.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpxrpvsauw.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxrpvsauw.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1)\n\
    \            val beats = rest.split(\"|\").map(music_string => {\n           \
    \     val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                beat.toLong\n            }).sum\n            note.toLong * beats\n\
    \        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3o37mlmd.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m\
    \ = music_string.substring(\e[31m1\e[0m)\n\e[31m17 |\e[0m            \e[33mval\e\
    [0m \e[36mbeats\e[0m = rest.split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e[0m\
    \ => {\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m20 |\e[0m                beat.toLong\n\
    \e[31m21 |\e[0m            }).sum\n\e[31m22 |\e[0m            note.toLong * beats\n\
    \e[31m23 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_half\
    \ = music_list_size / 2\n        val music_list_size_quater = music_list_size\
    \ / 4\n        val music_list_size_whole = music_list_size.toLong\n        val\
    \ music_list_size_last_four = music_list_size_whole - music_list_size_half\n \
    \       val music_list_size_last_two = music_list_size_half - music_list_size_quater\n\
    \        val music_list_size_last_one = music_list_size_quater - music_list_size_whole\n\
    \        val music_list_size_last_four_last_two = music_list_size_last_four -\
    \ music_list_size_last_two\n        val music_list_size_last_four_last_one = music_list_size_last_four\
    \ - music_list_size_last_one\n        val music_list_size_last_two_last_one =\
    \ music_list_size_last_two - music_list_size_last_one\n        val music_list_size_last_one_last_four\
    \ = music_list_size_last_one - music_list_size_last_four\n        val music_list_size_last_one_last_two\
    \ = music_list_size_last_one - music_list_size_last_two\n        val music_list_size_last_one_last_one\
    \ = music_list_size_last_one - music_list_size_last_one\n        val music_list_size_last_four_last_one_last_two\
    \ = music_list_size_last_four_last_one - music_list_size_last_two_last_one\n \
    \       val music_list_size_last_four_last_one_last_one = music_list_size_last_four_last_one\
    \ - music_list_size_last_one_last_four\n        val music_list_size_last_two_last_one_last_one\
    \ = music_list_size_last_two_last_one - music_list_size_last_one_last_two\n  \
    \      val music_list_size_last_one_last_four_last_one_last_two = music_list_size_last_one_last_four\
    \ - music_list_size_last_four_last_one_last_two\n        val music_list_size_last_one_last_two_last_one_last_one\
    \ = music_list_size_last_one_last_two - music_list_size_last_two_last_one_last_one\n\
    \        val music_list_size_last_one_last_one_last_four_last_one_last_two = music_list_size_last_one_last_four\
    \ - music_list_size_last_four_last_one_last_two\n        val music_list_size_last_one_last_one_last_two_last_one_last_one\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpib930o2g.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpib930o2g.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val music_note = music_string.substring(0, 1)\n            val music_length\
    \ = music_string.substring(1).length\n            val music_beats = music_length\
    \ / 4\n            val music_rest = music_length % 4\n            val music_notes\
    \ = music_note.toCharArray.map(music_note => {\n                val music_note_length\
    \ = music_note.toString.length\n                val music_note_beats = music_note_length\
    \ / 4\n                val music_note_rest = music_note_length % 4\n         \
    \       val music_note_notes = music_note.toString.toCharArray.map(music_note_note\
    \ => {\n                    val music_note_note_length = music_note_note.toString.length\n\
    \                    val music_note_note_beats = music_note_note_length / 4\n\
    \                    val music_note_note_rest = music_note_note_length % 4\n \
    \                   val music_note_note_notes = music_note_note.toString.toCharArray.map(music_note_note_note\
    \ => {\n                        val music_note_note_note_length = music_note_note_note.toString.length\n\
    \                        val music_note_note_note_beats = music_note_note_note_length\
    \ / 4\n                        val music_note_note_note_rest = music_note_note_note_length\
    \ % 4\n                        val music_note_note_note_notes = music_note_note_note.toString.toCharArray.map(music_note_note_note_note\
    \ => {\n                            val music_note_note_note_note_length = music_note_note_note_note.toString.length\n\
    \                            val music_note_note_note_beats = music_note_note_note_note_length\
    \ / 4\n                            val music_note_note_note_note_rest = music_note_note_note_note_length\
    \ % 4\n                            val music_note_note_note_note_notes = music_note_note_note_note.toString.toCharArray.map(music_note_note_note_note_note\
    \ => {\n                                val music_note_note_note_note_note_length\
    \ = music_note_note_note_note_note.toString.length\n                         \
    \       val music_note_note_note_note_beats = music_note_note_note_note_note_length\
    \ / 4\n                                val music_note_note_note_note_note_rest\
    \ = music_note_note_note_note_note_length % 4\n                              \
    \  val music_note_note_note_note_notes = music_note_note_note_note_note.toString.toCharArray.map(music_note_note_note_note_note_note\
    \ => {\n                                    val music_note_note_note_note_note_note_length\
    \ = music_note_note_note_note_note_note.toString.length\n                    \
    \                val music_note_note_note_note_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1sl0ab8f.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1sl0ab8f.scala:43:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m43 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp1sl0ab8f.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val music_note = music_string.substring(0, 1)\n            val music_rest\
    \ = music_string.substring(1, 2)\n            val music_rest2 = music_string.substring(2,\
    \ 3)\n            val music_rest3 = music_string.substring(3, 4)\n           \
    \ val music_rest4 = music_string.substring(4, 5)\n            val music_rest5\
    \ = music_string.substring(5, 6)\n            val music_rest6 = music_string.substring(6,\
    \ 7)\n            val music_rest7 = music_string.substring(7, 8)\n           \
    \ val music_rest8 = music_string.substring(8, 9)\n            val music_rest9\
    \ = music_string.substring(9, 10)\n            val music_rest10 = music_string.substring(10,\
    \ 11)\n            val music_rest11 = music_string.substring(11, 12)\n       \
    \     val music_rest12 = music_string.substring(12, 13)\n            val music_rest13\
    \ = music_string.substring(13, 14)\n            val music_rest14 = music_string.substring(14,\
    \ 15)\n            val music_rest15 = music_string.substring(15, 16)\n       \
    \     val music_rest16 = music_string.substring(16, 17)\n            val music_rest17\
    \ = music_string.substring(17, 18)\n            val music_rest18 = music_string.substring(18,\
    \ 19)\n            val music_rest19 = music_string.substring(19, 20)\n       \
    \     val music_rest20 = music_string.substring(20, 21)\n            val music_rest21\
    \ = music_string.substring(21, 22)\n            val music_rest22 = music_string.substring(22,\
    \ 23)\n            val music_rest23 = music_string.substring(23, 24)\n       \
    \     val music_rest24 = music_string.substring(24, 25)\n            val music_rest25\
    \ = music_string.substring(25, 26)\n            val music_rest26 = music_string.substring(26,\
    \ 27)\n            val music_rest27 = music_string.substring(27, 28)\n       \
    \     val music_rest28 = music_string.substring(28, 29)\n            val music_rest29\
    \ = music_string.substring(29, 30)\n            val music_rest30 = music_string.substring(30,\
    \ 31)\n            val music_rest31 = music_string.substring(31, 32)\n       \
    \     val music_rest32 = music_string.substring(32, 33)\n            val music_rest33\
    \ = music_string.substring(33, 34)\n            val music_rest34 = music_string.substring(34,\
    \ 35)\n            val music_rest35 = music_string.substring(35, 36)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu1ur9yk1.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpu1ur9yk1.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length\
    \ != 0).map(music_char => {\n            val music_char_list = music_char.split(\"\
    |\")\n            val music_note = music_char_list(0)\n            val music_length\
    \ = music_char_list.length\n            val music_last_beat = music_char_list.last\n\
    \            val music_last_beat_list = music_last_beat.toString.toList.map(_.toLong)\n\
    \            val music_last_beat_list = music_last_beat_list.take(music_length).toList\n\
    \            val music_last_beat_list = music_last_beat_list.map(_ + music_last_beat_list.last)\n\
    \            music_last_beat_list\n        }).toList\n        music_list.map(music_note\
    \ => music_note.sum)\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk1_51wgj.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mmusic_last_beat_list\e\
    [0m = music_last_beat_list.take(music_length).toList\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_last_beat_list is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_last_beat_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk1_51wgj.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mmusic_last_beat_list\e\
    [0m = music_last_beat_list.map(_ + music_last_beat_list.last)\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_last_beat_list is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_last_beat_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(rest =>\
    \ {\n                val beat = rest.substring(0, 1)\n                val rest\
    \ = rest.substring(1, rest.length)\n                beat.toLong\n            })\n\
    \            note.toLong :: beats\n        }).reduceLeft(_ ++ _)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_894m5v5.scala:19:27 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mrest\e[0m = rest.substring(\e\
    [31m1\e[0m, rest.length)\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Recursive \e[33mvalue\e[0m \e[35mrest\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp_894m5v5.scala:21:14\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \     })\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m         \
    \     No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          \
    \    where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmp_894m5v5.scala:23:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ }).reduceLeft(_ ++ _)\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m\
    \          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m     \
    \     where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659799888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"\\\\ \").map(music_string =>\
    \ {\n                val note = music_string.charAt(0)\n                val beats\
    \ = music_string.substring(1).toInt\n                note -> beats\n         \
    \   }).toMap\n            val note = notes.keys.toList.head\n            val beats\
    \ = notes.get(note)\n            note -> beats\n        }).toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphveyf0ol.scala:23:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"\\\\ \"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e\
    [0m = music_string.charAt(\e[31m0\e[0m)\n\e[31m17 |\e[0m                \e[33mval\e\
    [0m \e[36mbeats\e[0m = music_string.substring(\e[31m1\e[0m).toInt\n\e[31m18 |\e\
    [0m                note -> beats\n\e[31m19 |\e[0m            }).toMap\n\e[31m20\
    \ |\e[0m            \e[33mval\e[0m \e[36mnote\e[0m = notes.keys.toList.head\n\e\
    [31m21 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = notes.get(note)\n\e\
    [31m22 |\e[0m            note -> beats\n\e[31m23 |\e[0m        }).toList\n\e[31m\e\
    [31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[(Char, Option[Int])]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                val beat = music_string.substring(0, 1)\n            \
    \    val rest = music_string.substring(1, music_string.length)\n             \
    \   beat.toLong\n            }).toList\n            note.toLong :: beats\n   \
    \     }).flatten.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmp0v0vau3w.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmp0v0vau3w.scala:23)\n\tat Problem$.main(tmp0v0vau3w.scala:26)\n\
    \tat Problem.main(tmp0v0vau3w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_count = notes.length\n        val notes_array = notes.map(_.toInt)\n\
    \        val notes_array_sorted = notes_array.sortBy(_)\n        val notes_array_reversed\
    \ = notes_array_sorted.reverse\n        val notes_array_sorted = notes_array_reversed.sortBy(_)\n\
    \        val notes_array_sorted = notes_array_sorted.reverse\n        val notes_array_sorted\
    \ = notes_array_sorted.filter(_ != 0)\n        val notes_array_sorted = notes_array_sorted.filter(_\
    \ != 1)\n        val notes_array_sorted = notes_array_sorted.filter(_ != 2)\n\
    \        val notes_array_sorted = notes_array_sorted.filter(_ != 3)\n        val\
    \ notes_array_sorted = notes_array_sorted.filter(_ != 4)\n        val notes_array_sorted\
    \ = notes_array_sorted.filter(_ != 5)\n        val notes_array_sorted = notes_array_sorted.filter(_\
    \ != 6)\n        val notes_array_sorted = notes_array_sorted.filter(_ != 7)\n\
    \        val notes_array_sorted = notes_array_sorted.filter(_ != 8)\n        val\
    \ notes_array_sorted = notes_array_sorted.filter(_ != 9)\n        val notes_array_sorted\
    \ = notes_array_sorted.filter(_ != 10)\n        val notes_array_sorted = notes_array_sorted.filter(_\
    \ != 11)\n        val notes_array_sorted = notes_array_sorted.filter(_ != 12)\n\
    \        val notes_array_sorted = notes_array_sorted.filter(_ != 13)\n       \
    \ val notes_array_sorted = notes_array_sorted.filter(_ != 14)\n        val notes_array_sorted\
    \ = notes_array_sorted.filter(_ != 15)\n        val notes_array_sorted = notes_array_sorted.filter(_\
    \ != 16)\n        val notes_array_sorted = notes_array_sorted.filter(_ != 17)\n\
    \        val notes_array_sorted = notes_array_sorted.filter(_ != 18)\n       \
    \ val notes_array_sorted = notes_array_sorted.filter(_ != 19)\n        val notes_array_sorted\
    \ = notes_array_sorted.filter(_ != 20)\n        val notes_array_sorted = notes_array_sorted.filter(_\
    \ != 21)\n        val notes_array_sorted = notes_array_sorted.filter(_ != 22)\n\
    \        val notes_array_sorted = notes_array_sorted.filter(_ != 23)\n       \
    \ val notes_array_sorted = notes_\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzo_rojcl.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_array_sorted\e[0m\
    \ = notes_array_reversed.sortBy(_)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array_sorted is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_array_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzo_rojcl.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array_sorted\e[0m\
    \ = notes_array_sorted.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array_sorted is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_array_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzo_rojcl.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_array_sorted\e[0m\
    \ = notes_array_sorted.filter(_ != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnotes_array_sorted is already defined as \e[33mvalue\e[0m \e[35mnotes_array_sorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzo_rojcl.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnotes_array_sorted\e[0m = notes_array_sorted.filter(_\
    \ != \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array_sorted is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_array_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzo_r"
  stdout: ''
  timestamp: 1659799892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val rest2 = rest.substring(0, 1)\n       \
    \     val rest3 = rest.substring(1, rest.length)\n            val rest4 = rest.substring(1,\
    \ rest.length)\n            val rest5 = rest.substring(1, rest.length)\n     \
    \       val rest6 = rest.substring(1, rest.length)\n            val rest7 = rest.substring(1,\
    \ rest.length)\n            val rest8 = rest.substring(1, rest.length)\n     \
    \       val rest9 = rest.substring(1, rest.length)\n            val rest10 = rest.substring(1,\
    \ rest.length)\n            val rest11 = rest.substring(1, rest.length)\n    \
    \        val rest12 = rest.substring(1, rest.length)\n            val rest13 =\
    \ rest.substring(1, rest.length)\n            val rest14 = rest.substring(1, rest.length)\n\
    \            val rest15 = rest.substring(1, rest.length)\n            val rest16\
    \ = rest.substring(1, rest.length)\n            val rest17 = rest.substring(1,\
    \ rest.length)\n            val rest18 = rest.substring(1, rest.length)\n    \
    \        val rest19 = rest.substring(1, rest.length)\n            val rest20 =\
    \ rest.substring(1, rest.length)\n            val rest21 = rest.substring(1, rest.length)\n\
    \            val rest22 = rest.substring(1, rest.length)\n            val rest23\
    \ = rest.substring(1, rest.length)\n            val rest24 = rest.substring(1,\
    \ rest.length)\n            val rest25 = rest.substring(1, rest.length)\n    \
    \        val rest26 = rest.substring(1, rest.length)\n            val rest27 =\
    \ rest.substring(1, rest.length)\n            val rest28 = rest.substring(1, rest.length)\n\
    \            val rest29 = rest.substring(1, rest.length)\n            val rest30\
    \ = rest.substring(1, rest.length)\n            val rest31 = rest.substring(1,\
    \ rest.length)\n            val rest32 = rest.substring(1, rest.length)\n    \
    \        val rest33 = rest.substring(1, rest.length)\n            val rest34 =\
    \ rest.substring(1, rest.length)\n            val rest35 = rest.substring(1, rest.length)\n\
    \            val rest36 = rest.substring(1, rest.length)\n            val rest37\
    \ = rest.substring(1, rest.length)\n            val rest38 = rest.substring(1,\
    \ rest.length)\n            val rest39 = rest.substring(1, rest.length)\n    \
    \        val rest40 = rest.substring(1, rest.length)\n            val rest41 =\
    \ rest.substring(1, rest.length)\n            val rest4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_hzqyfnq.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_hzqyfnq.scala:59:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m59 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp_hzqyfnq.scala:68:0 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_length = notes.length\n        val notes_length_in_beats = notes_length\
    \ / 4\n        val notes_length_in_beats_without_last = notes_length_in_beats\
    \ - 1\n        val notes_length_in_beats_without_last_in_beats = notes_length_in_beats_without_last\
    \ / 4\n        val notes_length_in_beats_without_last_in_beats_without_last =\
    \ notes_length_in_beats_without_last_in_beats - 1\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats\
    \ = notes_length_in_beats_without_last_in_beats_without_last / 4\n        val\
    \ notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats - 1\n  \
    \      val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ / 4\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ - 1\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ / 4\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ - 1\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ - 1\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmxe68od.scala:26:159 -----------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnotes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\e\
    [0m = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmxe68od.scala:27:181\
    \ -----------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\e\
    [0m = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcmxe68od.scala:28:5\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m    "
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val music_notes = music_string.split(\"\\\\ \").map(music_note\
    \ => {\n                val note = music_note.charAt(0).toLowerCase\n        \
    \        val beats = music_note.substring(1).toInt\n                note match\
    \ {\n                    case \"o\" => 4l.toLong\n                    case \"\
    o|\" => 2l.toLong\n                    case \".|\" => 1l.toLong\n            \
    \        case _ => 0l.toLong\n                }\n            }).toList\n     \
    \       music_notes.foldLeft(0l.toLong) { (sum, note) => sum + note }\n      \
    \  }).filter(music_note => music_note != 0l.toLong).map(music_note => music_note.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4s0v70g3.scala:16:48 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e[0m = music_note.charAt(\e\
    [31m0\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value toLowerCase is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659799893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \   val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                    val rest = music_string.substring(0,\
    \ 1)\n                    val rest = music_string.substring(1).split(\".\").map(music_string\
    \ => {\n                        val rest = music_string.substring(0, 1)\n    \
    \                    val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                            val rest = music_string.substring(0, 1)\n\
    \                            val rest = music_string.substring(1).split(\"o\"\
    ).map(music_string => {\n                                val rest = music_string.substring(0,\
    \ 1)\n                                val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                    val rest = music_string.substring(0,\
    \ 1)\n                                    val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                        val rest =\
    \ music_string.substring(0, 1)\n                                        val rest\
    \ = music_string.substring(1).split(\"o\").map(music_string => {\n           \
    \                                 val rest = music_string.substring(0, 1)\n  \
    \                                          val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                val\
    \ rest = music_string.substring(0, 1)\n                                      \
    \          val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                    val rest = music_string.substring(0,\
    \ 1)\n                                                    val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \       val rest = music_string.substring(0, 1)\n                            \
    \                            val rest = music_string.substring(1).split(\"o\"\
    ).map(music_string => {\n                                                    \
    \        val rest = music_string.substring(0, 1)\n                           \
    \                                 val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \               val rest = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val rest = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                       val rest = music_string.substring(0, 1)\n            \
    \                                                            val rest = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                           val rest = music_string.substring(0, 1)\n        \
    \                                                                    val rest\
    \ = music_string.substring(1).split(\"o\").map(music_string => {\n           \
    \                                                                     val rest\
    \ = music_string.substring(0, 1)\n                                           \
    \                                     val rest = musi\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplsyiijok.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmplsyiijok.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplsyiijok.scala:50:84 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest\e[0m = musi\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrest is already defined as\
    \ \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"\\\\ \").map(music_string =>\
    \ {\n                val note = music_string.charAt(0).toLowerCase\n         \
    \       val beats = music_string.substring(1).toInt\n                note.toLong\
    \ * beats\n            }).toList\n            notes.sum\n        }).toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1knoh_ih.scala:16:50 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e[0m = music_string.charAt(\e\
    [31m0\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmp1knoh_ih.scala:19:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            }).toList\n\e[31m\e[31m   |\e[0m        \
    \      ^\e[0m\n\e[31m   |\e[0m              No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m              where:    B is a type variable\n\e[31m\e\
    [31m-- Error: /tmp/tmp1knoh_ih.scala:21:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m          ^\e\
    [0m\n\e[31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m          where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659799896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase)\n\
    \        val notes = music_list.filter(x => x != \"O\" && x != \"|\")\n      \
    \  val notes_count = notes.map(x => if (x == \"O\") 4 else if (x == \"|\") 2 else\
    \ 1)\n        val notes_count_list = notes_count.toList\n        val notes_count_list_sorted\
    \ = notes_count_list.sortBy(x => x)\n        val notes_count_list_sorted_reversed\
    \ = notes_count_list_sorted.reverse\n        val notes_count_list_sorted_reversed_count\
    \ = notes_count_list_sorted_reversed.map(x => x.toLong)\n        val notes_count_list_sorted_reversed_count_sum\
    \ = notes_count_list_sorted_reversed_count.sum\n        val notes_count_list_sorted_reversed_count_count_sum\
    \ = notes_count_list_sorted_reversed_count_sum.toLong\n        val notes_count_list_sorted_reversed_count_count_count_sum\
    \ = notes_count_list_sorted_reversed_count_count_sum.toLong\n        val notes_count_list_sorted_reversed_count_count_count_sum\
    \ = (notes_count_list_sorted_reversed_count_count_sum - notes_count_list_sorted_reversed_count_sum).toLong\n\
    \        val notes_count_list_sorted_reversed_count_count_count_count_sum = (notes_count_list_sorted_reversed_count_count_count_sum\
    \ - notes_count_list_sorted_reversed_count_count_sum).toLong\n        val notes_count_list_sorted_reversed_count_count_count_count_count_sum\
    \ = (notes_count_list_sorted_reversed_count_count_count_count_sum - notes_count_list_sorted_reversed_count_count_count_sum).toLong\n\
    \        val notes_count_list_sorted_reversed_count_count_count_count_count_sum\
    \ = (notes_count_list_sorted_reversed_count_count_count_count_sum - notes_count_list_sorted_reversed_count_count_count_count_sum).toLong\n\
    \        val notes_count_list_sorted_reversed_count_count_count_count_count_count_sum\
    \ = (notes_count_list_sorted_reversed_count_count_count_count_count_sum - notes_count_list_sorted_reversed_count_count_count_count_sum).toLong\n\
    \        val notes_count_list_sorted_reversed_count_count_count_count_count_count_count_sum\
    \ = (notes_count_list_sorted_reversed_count_count_count_count_count_count_sum\
    \ - notes_count_list_sorted_reversed_count_count_count_count_count_sum).toLong\n\
    \        val notes_count_list_sorted_reversed_count_count_count_count_count_count_count_sum\
    \ = (notes_count_list_sorted_reversed_count_count_count_count_count_count_sum\
    \ - notes_count_list_sorted_reversed_count_count_count_count_count_count_sum).toLong\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppida7k7a.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_list_sorted_reversed_count_count_count_sum\e\
    [0m = (notes_count_list_sorted_reversed_count_count_sum - notes_count_list_sorted_reversed_count_sum).toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_count_list_sorted_reversed_count_count_count_sum is\
    \ already defined as \e[33mvalue\e[0m \e[35mnotes_count_list_sorted_reversed_count_count_count_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppida7k7a.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_list_sorted_reversed_count_count_count_count_count_sum\e\
    [0m = (notes_count_list_sorted_reversed_count_count_count_count_sum - notes_count_list_sorted_reversed_count_count_count_count_sum).toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_count_list_sorted_reversed_count_count_count_count_count_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_count_list_sorted_reversed_count_count_count_count_count_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppida7k7a.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_list_sorted_reversed_count_count_count_count_count_count_count_sum\e\
    [0m = (notes_count_list_sorted_reversed_count_count_count_count_count_count_sum\
    \ - notes_count_list_sorted_reversed_count_count_count_count_count_count_sum).t"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(rest =>\
    \ {\n                val beat = rest.substring(0, 1)\n                val rest\
    \ = rest.substring(1, rest.length)\n                val rest = rest.toLong\n \
    \               beat.toLong * rest\n            }).sum\n            note.toLong\
    \ * beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpczsb2cxh.scala:20:20 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mrest\e[0m = rest.toLong\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mrest is already defined as \e[33mvalue\e[0m \e[35mrest\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpczsb2cxh.scala:22:14\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     }).sum\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m     \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \        where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpczsb2cxh.scala:24:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ }).sum\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a\
    \ type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val music_note = music_string.substring(0, 1)\n            val music_rest\
    \ = music_string.substring(1)\n            val music_note_length = music_rest.split(\"\
    |\").map(music_rest => {\n                val music_rest_length = music_rest.split(\"\
    o\").map(music_rest => {\n                    val music_rest_note = music_rest.substring(0,\
    \ 1)\n                    val music_rest_rest = music_rest.substring(1)\n    \
    \                val music_rest_note_length = music_rest_rest.split(\"|\").map(music_rest_rest\
    \ => {\n                        val music_rest_rest_length = music_rest_rest.split(\"\
    o\").map(music_rest_rest => {\n                            val music_rest_rest_note\
    \ = music_rest_rest.substring(0, 1)\n                            val music_rest_rest_rest\
    \ = music_rest_rest.substring(1)\n                            val music_rest_rest_note_length\
    \ = music_rest_rest_rest.split(\"|\").map(music_rest_rest_rest => {\n        \
    \                        val music_rest_rest_rest_length = music_rest_rest_rest.split(\"\
    o\").map(music_rest_rest_rest => {\n                                    val music_rest_rest_rest_note\
    \ = music_rest_rest_rest.substring(0, 1)\n                                   \
    \ val music_rest_rest_rest_rest = music_rest_rest_rest.substring(1)\n        \
    \                            val music_rest_rest_rest_note_length = music_rest_rest_rest_rest.split(\"\
    |\").map(music_rest_rest_rest_rest => {\n                                    \
    \    val music_rest_rest_rest_rest_length = music_rest_rest_rest_rest.split(\"\
    o\").map(music_rest_rest_rest_rest => {\n                                    \
    \        val music_rest_rest_rest_rest_note = music_rest_rest_rest_rest.substring(0,\
    \ 1)\n                                            val music_rest_rest_rest_rest_rest\
    \ = music_rest_rest_rest_rest.substring(1)\n                                 \
    \           val music_rest_rest_rest_rest_note_length = music_rest_rest_rest_rest_note.split(\"\
    |\").map(music_rest_rest_rest_rest_rest => {\n                               \
    \                 val music_rest_rest_rest_rest_rest_note_length = music_rest_rest_rest_rest_note.split(\"\
    o\").map(music_rest_rest_rest_rest_rest_note => {\n                          \
    \                          val music_rest_rest_rest_rest_rest_note_length = music_rest_rest_rest_rest_note_length.split(\"\
    |\").map(music_rest_rest_rest_rest_rest_note_length => {\n                   \
    \                                     val music_rest_rest_rest_rest_rest_note_length\
    \ = music_rest_rest_rest_rest_note_length.split(\"o\").map(music_rest_rest_rest_rest_rest_note_length\
    \ => {\n                                                            val music_rest_rest_rest_rest_rest_note_length\
    \ = music_rest_rest_rest_rest_note_length.split(\"|\").map(music_rest_rest_rest_rest_rest_note_length\
    \ => {\n                                                                \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1hg9swvm.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp1hg9swvm.scala:49:0 ----------------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1hg9swvm.scala:35:101 --------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                                                    \e\
    [33mval\e[0m \e[36mmusic_rest_rest_rest_rest_rest_note_length\e[0m = music_rest_rest_rest_rest_note_length.split(\e\
    [31m\"|\"\e[0m).map(\e[36mmusic_rest_rest_rest_rest_rest_note_length\e[0m => {\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                             ^\e[0m\n\e[31m   |\e[0m        Recursive\
    \ \e[33mvalue\e[0m \e[35mmusic_rest_rest_rest_rest_note_length\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(music_string\
    \ => music_string.charAt(0).toInt)\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size /\
    \ 4\n        val music_list_size_whole_half = music_list_size_whole / 2\n    \
    \    val music_list_size_whole_quarter = music_list_size_whole / 4\n        val\
    \ music_list_size_whole_whole = music_list_size_whole / 8\n        val music_list_size_whole_whole_half\
    \ = music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 64\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcseynnq.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole_half\e\
    [0m = music_list_size_whole_whole_whole_whole / \e[31m16\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_half is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_half\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgcseynnq.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole_quarter\e\
    [0m = music_list_size_whole_whole_whole_whole / \e[31m32\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_quarter is already\
    \ defined as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_quarter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgcseynnq.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole_whole\e\
    [0m = music_list_size_whole_whole_whole_whole / \e[31m64\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_whole is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_whole\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgcseynnq.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33"
  stdout: ''
  timestamp: 1659799896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \   val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                beat.toLong * 4\n            }).sum\n            note.toLong\
    \ * beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpktwxjw9b.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.toLong\
    \ * \e[31m4\e[0m\n\e[31m20 |\e[0m            }).sum\n\e[31m21 |\e[0m         \
    \   note.toLong * beats\n\e[31m22 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"\\\\ \").map(music_string =>\
    \ {\n                val note = music_string.charAt(0).toLowerCase\n         \
    \       val beats = music_string.substring(1).toLong\n                beats\n\
    \            })\n            notes.foldLeft(0l.toLong)((acc, note) => acc + note)\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj3c0pyte.scala:16:50 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e[0m = music_string.charAt(\e\
    [31m0\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value toLowerCase is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659799897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(x =>\
    \ x.toUpperCase()).filter(x => x != \"O\" && x != \".\")\n        val note_count\
    \ = music_list.size\n        val note_list = music_list.map(x => x.toInt)\n  \
    \      val note_counts = note_list.groupBy(x => x).map(x => (x._1, x._2.size)).toMap\n\
    \        val note_counts_sorted = note_counts.sortBy(x => x._2).reverse\n    \
    \    val note_counts_sorted_keys = note_counts_sorted.keys\n        val note_counts_sorted_values\
    \ = note_counts_sorted.values\n        val note_counts_sorted_keys_sorted = note_counts_sorted_keys.sortBy(x\
    \ => x)\n        val note_counts_sorted_keys_sorted_values = note_counts_sorted_keys_sorted.map(x\
    \ => note_counts_sorted_values.indexOf(x))\n        val note_counts_sorted_keys_sorted_values_sorted\
    \ = note_counts_sorted_keys_sorted_values.sortBy(x => x)\n        val note_counts_sorted_keys_sorted_values_sorted_values\
    \ = note_counts_sorted_keys_sorted_values_sorted.map(x => note_counts_sorted_values.indexOf(x))\n\
    \        val note_counts_sorted_keys_sorted_values_sorted_values_sorted = note_counts_sorted_keys_sorted_values_sorted_values.sortBy(x\
    \ => x)\n        val note_counts_sorted_keys_sorted_values_sorted_values_sorted_values\
    \ = note_counts_sorted_keys_sorted_values_sorted_values.map(x => note_counts_sorted_values.indexOf(x))\n\
    \        val note_counts_sorted_keys_sorted_values_sorted_values_sorted_values_sorted\
    \ = note_counts_sorted_keys_sorted_values_sorted_values_sorted_values.sortBy(x\
    \ => x)\n        val note_counts_sorted_keys_sorted_values_sorted_values_sorted_values_sorted_values\
    \ = note_counts_sorted_keys_sorted_values_sorted_values_sorted_values.map(x =>\
    \ note_counts_sorted_values.indexOf(x))\n        val note_counts_sorted_keys_sorted_values_sorted_values_sorted_values_sorted_values_sorted\
    \ = note_counts_sorted_keys_sorted_values_sorted_values_sorted_values_sorted.map(x\
    \ => note_counts_sorted_values.indexOf(x))\n        val note_counts_sorted_keys_sorted_values_sorted_values_sorted_values_sorted_values_sorted_values\
    \ = note_counts_sorted_keys_sorted_values_sorted_values_sorted_values_sorted_values.map(x\
    \ => note_counts_sorted_values.indexOf(x))\n        val note_counts_sorted_keys_sorted_values_sorted_values_sorted_values_sorted_values_sorted_values_sorted\
    \ = note_counts_sorted_keys_sorted_values_sorted_values_sorted_values_sorted_values_sorted_values.map(x\
    \ => note_counts_sorted_values.indexOf(x))\n        val note_counts_sorted_keys_sorted_values_sorted_values_sorted_values_sorted_values_sorted_values_sorted_values_sorted\
    \ = note_counts_sorted_keys_\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpurss4j1n.scala:18:45 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnote_counts_sorted\e[0m\
    \ = note_counts.sortBy(\e[36mx\e[0m => x._2).reverse\n\e[31m\e[31m   |\e[0m  \
    \                               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                      value sortBy is not a member of Map[Int, Int]\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpurss4j1n.scala:32:129 -----------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnote_counts_sorted_keys_sorted_values_sorted_values_sorted_values_sorted_values_sorted_values_sorted_values_sorted\e\
    [0m = note_counts_sorted_keys_\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    Not found: note_counts_sorted_keys_\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpurss4j1n.scala:33:5 ---------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \")\n     \
    \   val music_length = music_list.length\n        val music_beats = music_list.map(music_string\
    \ => music_string.split(\"|\").length.toLong)\n        val music_beats_sum = music_beats.sum\n\
    \        val music_beats_count = music_beats.length\n        val music_beats_count_sum\
    \ = music_beats_count.sum\n        val music_beats_count_count_sum = music_beats_count_sum.sum\n\
    \        val music_beats_count_count_count_sum = music_beats_count_count_sum.sum\n\
    \        val music_beats_count_count_count_count_sum = music_beats_count_count_count_sum.sum\n\
    \        val music_beats_count_count_count_count_count_sum = music_beats_count_count_count_count_sum.sum\n\
    \        val music_beats_count_count_count_count_count_count_sum = music_beats_count_count_count_count_count_sum.sum\n\
    \        val music_beats_count_count_count_count_count_count_count_sum = music_beats_count_count_count_count_count_count_sum.sum\n\
    \        val music_beats_count_count_count_count_count_count_count_count_sum =\
    \ music_beats_count_count_count_count_count_count_count_count_sum.sum\n      \
    \  val music_beats_count_count_count_count_count_count_count_count_count_sum =\
    \ music_beats_count_count_count_count_count_count_count_count_count_count_sum.sum\n\
    \        val music_beats_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = music_beats_count_count_count_count_count_count_count_count_count_count_count_sum.sum\n\
    \        val music_beats_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = music_beats_count_count_count_count_count_count_count_count_count_count_count_sum.sum\n\
    \        val music_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = music_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_sum.sum\n\
    \        val music_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = music_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum.sum\n\
    \        val music_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = music_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_sum.sum\n\
    \        val music_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = music_beat\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp73qmgydf.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmusic_beats_count_count_count_count_count_count_count_count_count_count_count_sum\e\
    [0m = music_beats_count_count_count_count_count_count_count_count_count_count_count_sum.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_beats_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_beats_count_count_count_count_count_count_count_count_count_count_count_sum\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp73qmgydf.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmusic_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum\e\
    [0m = music_beat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp73qmgydf.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_beats_count_sum\e\
    [0m = music_beats_count.sum\n\e[31m\e[31m   |\e[0m                           \
    \         ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \            value sum i"
  stdout: ''
  timestamp: 1659799898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                val beat = music_string.substring(0, 1)\n            \
    \    val rest = music_string.substring(1, music_string.length)\n             \
    \   beat.toLong\n            }).sum\n            note.toLong * beats\n       \
    \ }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy134s9o2.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m\
    \ = music_string.substring(\e[31m1\e[0m, music_string.length)\n\e[31m17 |\e[0m\
    \            \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\e[31m\"|\"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mbeat\e\
    [0m = music_string.substring(\e[31m0\e[0m, \e[31m1\e[0m)\n\e[31m19 |\e[0m    \
    \            \e[33mval\e[0m \e[36mrest\e[0m = music_string.substring(\e[31m1\e\
    [0m, music_string.length)\n\e[31m20 |\e[0m                beat.toLong\n\e[31m21\
    \ |\e[0m            }).sum\n\e[31m22 |\e[0m            note.toLong * beats\n\e\
    [31m23 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_notes = music_string.split(\"\\\\|\")\n\
    \        val music_notes_length = music_notes.length\n        val music_notes_beats\
    \ = music_notes.map(music_note => music_note.length.toLong)\n        val music_notes_beats_length\
    \ = music_notes_beats.length\n        val music_notes_beats_sum = music_notes_beats.sum\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum.length\n   \
    \     val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = music_notes_beats_sum_length.toLong\n\
    \        val music_notes_beats_sum_length = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpay6n6vjx.scala:39:42 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_sum_length\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpay6n6vjx.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_beats_sum_length\e[0m = music_notes_beats_sum_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_sum_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_notes_beats_sum_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpay6n6vjx.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_sum_length\e\
    [0m = music_notes_beats_sum_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_sum_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_notes_beats_sum_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpay6n6vjx.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_sum_length\e\
    [0m = music_notes_beats_sum_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_sum_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_notes_beats_sum_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel de"
  stdout: ''
  timestamp: 1659799900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \")\n     \
    \   val music_list_size = music_list.size\n        val music_list_beats = music_list_size\
    \ / 4\n        val music_list_beats_size = music_list_beats * 4\n        val music_list_beats_size\
    \ = music_list_beats_size.toInt\n        val music_list_beats_size = music_list_beats_size\
    \ * 4\n        val music_list_beats_size = music_list_beats_size.toInt\n     \
    \   val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size\
    \ = music_list_beats_size.toInt\n        val music_list_beats_size = music_list_beats_size\
    \ * 4\n        val music_list_beats_size = music_list_beats_size.toInt\n     \
    \   val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size\
    \ = music_list_beats_size.toInt\n        val music_list_beats_size = music_list_beats_size\
    \ * 4\n        val music_list_beats_size = music_list_beats_size.toInt\n     \
    \   val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size\
    \ = music_list_beats_size.toInt\n        val music_list_beats_size = music_list_beats_size\
    \ * 4\n        val music_list_beats_size = music_list_beats_size.toInt\n     \
    \   val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size\
    \ = music_list_beats_size.toInt\n        val music_list_beats_size = music_list_beats_size\
    \ * 4\n        val music_list_beats_size = music_list_beats_size.toInt\n     \
    \   val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size\
    \ = music_list_beats_size.toInt\n        val music_list_beats_size = music_list_beats_size\
    \ * 4\n        val music_list_beats_size = music_list_beats_size.toInt\n     \
    \   val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size\
    \ = music_list_beats_size.toInt\n        val music_list_beats_size = music_list_beats_size\
    \ * 4\n        val music_list_beats_size = music_list_beats_size.toInt\n     \
    \   val music_list_beats_size = music_list_beats_size * 4\n        \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcbkdmo7.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_size\e\
    [0m = music_list_beats_size.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_size is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcbkdmo7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_size\e\
    [0m = music_list_beats_size * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_size is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcbkdmo7.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_size\e\
    [0m = music_list_beats_size.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_size is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcbkdmo7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_size\e\
    [0m = music_list_beats_size * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_size is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: "
  stdout: ''
  timestamp: 1659799899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \   val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                beat.asInstanceOf[String].toLong * 4\n            }).sum\n  \
    \          note.asInstanceOf[String].toLong * beats\n        }).sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqt2er3tq.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.asInstanceOf[\e\
    [35mString\e[0m].toLong * \e[31m4\e[0m\n\e[31m20 |\e[0m            }).sum\n\e\
    [31m21 |\e[0m            note.asInstanceOf[\e[35mString\e[0m].toLong * beats\n\
    \e[31m22 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length>1).map(_.toInt).toList\n\
    \        val beats = music_list.foldLeft(List[Long]())((acc, note) => {\n    \
    \        val note_index = music_list.indexOf(note)\n            val last_beat\
    \ = music_list.takeRight(note_index).foldLeft(0l){(acc, note) =>\n           \
    \     acc + (if (note.equals(\".\") || note.equals(\"|\")) 1 else 0)\n       \
    \     }\n            acc :+ last_beat\n        })\n        beats.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxxjuveqf.scala:26)\n\tat Problem.main(tmpxxjuveqf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799902
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase()).filter(_.length\
    \ == 1).map(x => x.toInt)\n        val notes_length = notes.length\n        val\
    \ notes_beats = notes.map(x => x/notes_length).sum\n        val notes_rest = notes.map(x\
    \ => x - notes_beats*notes_length).sum\n        val notes_rests = notes_rest.map(x\
    \ => x/notes_length).sum\n        val notes_rests_length = notes_rests.length\n\
    \        val notes_rests_beats = notes_rests.map(x => x/notes_rests_length).sum\n\
    \        val notes_rests_rest = notes_rests.map(x => x - notes_rests_beats*notes_rests_length).sum\n\
    \        val notes_rests_rests = notes_rests_rest.map(x => x/notes_rests_length).sum\n\
    \        val notes_rests_rests_length = notes_rests_rests.length\n        val\
    \ notes_rests_rests_beats = notes_rests_rests.map(x => x/notes_rests_rests_length).sum\n\
    \        val notes_rests_rests_rest = notes_rests_rests.map(x => x - notes_rests_rests_beats*notes_rests_rests_length).sum\n\
    \        val notes_rests_rests_rests = notes_rests_rests_rest.map(x => x/notes_rests_rests_length).sum\n\
    \        val notes_rests_rests_rests_length = notes_rests_rests_rests.length\n\
    \        val notes_rests_rests_rests_beats = notes_rests_rests_rests.map(x =>\
    \ x/notes_rests_rests_rests_length).sum\n        val notes_rests_rests_rests_rest\
    \ = notes_rests_rests_rests.map(x => x - notes_rests_rests_rests_beats*notes_rests_rests_rests_length).sum\n\
    \        val notes_rests_rests_rests_rests = notes_rests_rests_rests_rest.map(x\
    \ => x/notes_rests_rests_rests_length).sum\n        val notes_rests_rests_rests_rests_length\
    \ = notes_rests_rests_rests_rests.length\n        val notes_rests_rests_rests_rests_beats\
    \ = notes_rests_rests_rests_rests.map(x => x/notes_rests_rests_rests_rests_length).sum\n\
    \        val notes_rests_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptknpdxxe.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptknpdxxe.scala:18:37\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_rests\e[0m = notes_rest.map(\e[36mx\e[0m => x/notes_length).sum\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value map is not a member of Int\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptknpdxxe.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n\
    \        val music_notes = music_list.filter(_ != \"O\")\n        val music_notes_length\
    \ = music_notes.length\n        val music_notes_beats = music_notes.map(music_notes_length.toLong)\n\
    \        val music_notes_beats_sum = music_notes_beats.sum\n        val music_notes_beats_count\
    \ = music_notes_beats.length\n        val music_notes_beats_count_sum = music_notes_beats_count.sum\n\
    \        val music_notes_beats_count_count_sum = music_notes_beats_count_sum.toLong\n\
    \        val music_notes_beats_count_count_count_sum = music_notes_beats_count_count_sum.toLong\n\
    \        val music_notes_beats_count_count_count_count_sum = music_notes_beats_count_count_count_sum.toLong\n\
    \        val music_notes_beats_count_count_count_count_count_sum = music_notes_beats_count_count_count_count_sum.toLong\n\
    \        val music_notes_beats_count_count_count_count_count_count_sum = music_notes_beats_count_count_count_count_count_sum.toLong\n\
    \        val music_notes_beats_count_count_count_count_count_count_count_sum =\
    \ music_notes_beats_count_count_count_count_count_count_sum.toLong\n        val\
    \ music_notes_beats_count_count_count_count_count_count_count_count_count_sum\
    \ = music_notes_beats_count_count_count_count_count_count_count_count_sum.toLong\n\
    \        val music_notes_beats_count_count_count_count_count_count_count_count_count_sum\
    \ = music_notes_beats_count_count_count_count_count_count_count_count_sum.toLong\n\
    \        val music_notes_beats_count_count_count_count_count_count_count_count_count_count_sum\
    \ = music_notes_beats_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \        val music_notes_beats_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = music_notes_beats_count_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \        val music_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = music_notes_beats_count_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \        val music_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = music_notes_beats_count_count_count_count_count_count_count_count_count_count_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3ovcgqrt.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_count_count_count_count_count_count_count_count_count_sum\e\
    [0m = music_notes_beats_count_count_count_count_count_count_count_count_sum.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_count_count_count_count_count_count_count_count_count_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_notes_beats_count_count_count_count_count_count_count_count_count_sum\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp3ovcgqrt.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum\e\
    [0m = music_notes_beats_count_count_count_count_count_count_count_count_count_count_\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3ovcgqrt.scala:17:67 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats\e[0m =\
    \ music_notes.map(music_notes_length.toLong)\n\e[31m\e[31m   |\e[0m          \
    \                                      ^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).filter(_.length\
    \ == 1).map(x => x.toInt).toList\n        val notes = music_list.filter(_ % 2\
    \ == 0).map(x => x/4)\n        val rests = music_list.filter(_ % 2 == 1).map(x\
    \ => x/2)\n        val notes_rests = notes ++ rests\n        val notes_rests_count\
    \ = notes_rests.map(x => music_list.count(_ == x))\n        val notes_rests_count_sum\
    \ = notes_rests_count.sum\n        val notes_rests_count_average = notes_rests_count_sum\
    \ / notes_rests_count.length\n        val notes_rests_count_average = notes_rests_count_average.toLong\n\
    \        val notes_rests_count_average = notes_rests_count_average.toInt\n   \
    \     val notes_rests_count_average = notes_rests_count_average.toInt\n      \
    \  val notes_rests_count_average = notes_rests_count_average.toInt\n        val\
    \ notes_rests_count_average = notes_rests_count_average.toInt\n        val notes_rests_count_average\
    \ = notes_rests_count_average.toInt\n        val notes_rests_count_average = notes_rests_count_average.toInt\n\
    \        val notes_rests_count_average = notes_rests_count_average.toInt\n   \
    \     val notes_rests_count_average = notes_rests_count_average.toInt\n      \
    \  val notes_rests_count_average = notes_rests_count_average.toInt\n        val\
    \ notes_rests_count_average = notes_rests_count_average.toInt\n        val notes_rests_count_average\
    \ = notes_rests_count_average.toInt\n        val notes_rests_count_average = notes_rests_count_average.toInt\n\
    \        val notes_rests_count_average = notes_rests_count_average.toInt\n   \
    \     val notes_rests_count_average = notes_rests_count_average.toInt\n      \
    \  val notes_rests_count_average = notes_rests_count_average.toInt\n        val\
    \ notes_rests_count_average = notes_rests_count_average.toInt\n        val notes_rests_count_average\
    \ = notes_rests_count_average.toInt\n        val notes_rests_count_average = notes_rests_count_average.toInt\n\
    \        val notes_rests_count_average = notes_rests_count_average.toInt\n   \
    \     val notes_rests_count_average = notes_rests_count_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppxtenmey.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_rests_count_average\e\
    [0m = notes_rests_count_average.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_rests_count_average is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_rests_count_average\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppxtenmey.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnotes_rests_count_average\e\
    [0m = notes_rests_count_average.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_rests_count_average is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_rests_count_average\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppxtenmey.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnotes_rests_count_average\e\
    [0m = notes_rests_count_average.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_rests_count_average is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_rests_count_average\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppxtenmey.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnotes_rests_count_average\e\
    [0m = notes_rests_count_average.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_rests_count_average is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_rests_count_average\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all"
  stdout: ''
  timestamp: 1659799899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).filter(_.length\
    \ == 1).map(music_char => {\n            val music_char = music_char.toChar\n\
    \            val music_char_index = music_string.indexOf(music_char)\n       \
    \     val music_char_length = music_string.length - music_char_index\n       \
    \     val music_char_beats = music_char_length / 4\n            val music_char_beats_remainder\
    \ = music_char_length % 4\n            val music_char_beats_remainder_multiplier\
    \ = if (music_char_beats_remainder == 0) 1 else 2\n            val music_char_beats_remainder_multiplier_multiplier\
    \ = if (music_char_beats_remainder == 0) 1 else 4\n            val music_char_beats_multiplier\
    \ = music_char_beats_remainder_multiplier * music_char_beats_remainder_multiplier_multiplier\n\
    \            val music_char_beats_multiplier_multiplier = music_char_beats_remainder_multiplier\
    \ * music_char_beats_remainder_multiplier_multiplier\n            val music_char_beats_multiplier_multiplier_multiplier\
    \ = music_char_beats_remainder_multiplier * music_char_beats_remainder_multiplier_multiplier_multiplier\n\
    \            val music_char_beats_multiplier_multiplier_multiplier_multiplier\
    \ = music_char_beats_remainder_multiplier * music_char_beats_remainder_multiplier_multiplier_multiplier_multiplier\n\
    \            val music_char_beats_multiplier_multiplier_multiplier_multiplier_multiplier\
    \ = music_char_beats_remainder_multiplier * music_char_beats_remainder_multiplier_multiplier_multiplier_multiplier_multiplier\n\
    \            val music_char_beats_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier\
    \ = music_char_beats_remainder_multiplier * music_char_beats_remainder_multiplier_multiplier_multiplier_multiplier_multiplier\n\
    \            val music_char_beats_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier\
    \ = music_char_beats_remainder_multiplier * music_char_beats_remainder_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier\n\
    \            val music_char_beats_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier\
    \ = music_char_beats_remainder_multiplier * music_char_beats_remainder_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier\n\
    \            val music_char_beats_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier\
    \ = music_char_beats_remainder_multiplier * music_char_beats_remainder_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwk75m2ju.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpwk75m2ju.scala:41:0 ----------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwk75m2ju.scala:24:108 -----------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mmusic_char_beats_multiplier_multiplier_multiplier\e\
    [0m = music_char_beats_remainder_multiplier * music_char_beats_remainder_multiplier_multiplier_multiplier\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m  Not found: music_char_beats_remainder_multiplier_multiplier_multiplier\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwk75m2ju.scala:25:119\
    \ -----------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmusic_char_beats_multiplier_multiplier_multiplier_multiplier\e[0m = music_char_beats_remainder_multiplier\
    \ * music_char_beats_remainder_multiplier_multiplier_multiplier_multiplier\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: music_char_beats_remainder_multiplier_multiplier_multiplier_multiplier\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwk75m2ju.scala:26:130\
    \ -----------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmusic_char_beats_multiplier_multiplier_multiplier_multiplier_multiplier\e\
    [0m = m"
  stdout: ''
  timestamp: 1659799901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_str\
    \ = music_list_size.toString\n        val music_list_size_int = music_list_size_str.asInstanceOf[Int]\n\
    \        val music_list_size_long = music_list_size_int.toLong\n        val music_list_size_long2\
    \ = music_list_size_long * 2\n        val music_list_size_long3 = music_list_size_long2\
    \ * 2\n        val music_list_size_long4 = music_list_size_long3 * 2\n       \
    \ val music_list_size_long5 = music_list_size_long4 * 2\n        val music_list_size_long6\
    \ = music_list_size_long5 * 2\n        val music_list_size_long7 = music_list_size_long6\
    \ * 2\n        val music_list_size_long8 = music_list_size_long7 * 2\n       \
    \ val music_list_size_long9 = music_list_size_long8 * 2\n        val music_list_size_long10\
    \ = music_list_size_long9 * 2\n        val music_list_size_long11 = music_list_size_long10\
    \ * 2\n        val music_list_size_long12 = music_list_size_long11 * 2\n     \
    \   val music_list_size_long13 = music_list_size_long12 * 2\n        val music_list_size_long14\
    \ = music_list_size_long13 * 2\n        val music_list_size_long15 = music_list_size_long14\
    \ * 2\n        val music_list_size_long16 = music_list_size_long15 * 2\n     \
    \   val music_list_size_long17 = music_list_size_long16 * 2\n        val music_list_size_long18\
    \ = music_list_size_long17 * 2\n        val music_list_size_long19 = music_list_size_long18\
    \ * 2\n        val music_list_size_long20 = music_list_size_long19 * 2\n     \
    \   val music_list_size_long21 = music_list_size_long20 * 2\n        val music_list_size_long22\
    \ = music_list_size_long21 * 2\n        val music_list_size_long23 = music_list_size_long22\
    \ * 2\n        val music_list_size_long24 = music_list_size_long23 * 2\n     \
    \   val music_list_size_long25 = music_list_size_long24 * 2\n        val music_list_size_long26\
    \ = music_list_size_long25 * 2\n        val music_list_size_long27\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnponddmm.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnponddmm.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(_.toInt)\n            beats.sum\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8k6g4vj.scala:18:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m            \e\
    [33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e[31m1\e\
    [0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m1\e[0m).split(\e[31m\"|\"\e[0m).map(_.toInt)\n\e[31m17 |\e[0m            beats.sum\n\
    \e[31m18 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m       \
    \ Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_int\
    \ = music_list_size.toInt\n        val music_list_size_long = music_list_size_int.toLong\n\
    \        val music_list_size_long_int = music_list_size_long.toInt\n        val\
    \ music_list_size_long_long = music_list_size_long_int.toLong\n        val music_list_size_long_long_int\
    \ = music_list_size_long_long.toInt\n        val music_list_size_long_long_long\
    \ = music_list_size_long_long_int.toLong\n        val music_list_size_long_long_long_int\
    \ = music_list_size_long_long_long.toInt\n        val music_list_size_long_long_long_long\
    \ = music_list_size_long_long_long_int.toLong\n        val music_list_size_long_long_long_long_int\
    \ = music_list_size_long_long_long_long.toInt\n        val music_list_size_long_long_long_long_long\
    \ = music_list_size_long_long_long_long_int.toLong\n        val music_list_size_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long.toInt\n        val music_list_size_long_long_long_long_long_long\
    \ = music_list_size_long_long_long_long_long_int.toLong\n        val music_list_size_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long.toInt\n        val music_list_size_long_long_long_long_long_long\
    \ = music_list_size_long_long_long_long_long_long_int.toLong\n        val music_list_size_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long.toInt\n        val music_list_size_long_long_long_long_long_long_long\
    \ = music_list_size_long_long_long_long_long_long_long_int.toLong\n        val\
    \ music_list_size_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long.toInt\n\
    \        val music_list_size_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_long.toInt\n\
    \        val music_list_size_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_int.toLong\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_long_int.toLong\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_int = music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_wut1ulb.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long\e\
    [0m = music_list_size_long_long_long_long_long_long_int.toLong\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_long_long_long_long_long_long\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_wut1ulb.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long.toInt\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_int is already\
    \ defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_long_long_long_long_long_int\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_wut1ulb.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_int is\
    \ already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_long_long_long_long_long_long_int\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-"
  stdout: ''
  timestamp: 1659799903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_length = notes.length\n        val notes_length_in_beats = notes_length\
    \ / 4\n        val notes_length_in_beats_without_last = notes_length_in_beats\
    \ - 1\n        val notes_length_in_beats_without_last_in_beats = notes_length_in_beats_without_last\
    \ / 4\n        val notes_length_in_beats_without_last_in_beats_without_last =\
    \ notes_length_in_beats_without_last_in_beats - 1\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats\
    \ = notes_length_in_beats_without_last_in_beats_without_last / 4\n        val\
    \ notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats - 1\n  \
    \      val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ / 4\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ - 1\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ / 4\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ - 1\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ - 1\n        val notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\
    \ = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmxe68od.scala:26:159 -----------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnotes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\e\
    [0m = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmxe68od.scala:27:181\
    \ -----------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last\e\
    [0m = notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: notes_length_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_beats_without_last_in_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcmxe68od.scala:28:5\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m    "
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length>0).map(music_char\
    \ => {\n            val music_char = music_char.toLowerCase // convert char to\
    \ lower case\n            val music_note = music_char match {\n              \
    \  case \"o\" => 1\n                case \"o|\" => 2\n                case \"\
    .|\" => 4\n                case _ => 0\n            }\n            music_note\n\
    \        }).toList\n        val music_beats = music_list.map(music_note => {\n\
    \            val music_beat = music_note / 4\n            music_beat\n       \
    \ }).distinct\n        val music_beats_count = music_beats.map(music_beat => {\n\
    \            music_beat * 4\n        }).distinct\n        val music_beats_count_list\
    \ = music_beats_count.toList\n        music_beats_count_list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph01xesyc.scala:15:29 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mmusic_char\e[0m = music_char.toLowerCase\
    \ \e[34m// convert char to lower case\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                 ^\e[0m\n\e[31m   |\e[0m                             Recursive\
    \ \e[33mvalue\e[0m \e[35mmusic_char\e[0m needs type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmph01xesyc.scala:32:8 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        music_beats_count_list\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (music_beats_count_list\
    \ : List[Int])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.nonEmpty).toList\n\
    \        val notes = music_list.map(music_note => {\n            val note = music_note.split(\"\
    |\").map(_.toUpperCase()).filter(_.nonEmpty).getOrElse(\"o\")\n            val\
    \ beats = music_note.split(\"o\").map(_.toUpperCase()).filter(_.nonEmpty).getOrElse(\"\
    4\").toLong\n            beats * note.length\n        }).toList\n        notes.sortBy(-_)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd26utuny.scala:16:85 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mnote\e[0m = music_note.split(\e\
    [31m\"|\"\e[0m).map(_.toUpperCase()).filter(_.nonEmpty).getOrElse(\e[31m\"o\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value getOrElse is not a member of\
    \ Array[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd26utuny.scala:17:86\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36mbeats\e[0m = music_note.split(\e[31m\"o\"\e[0m).map(_.toUpperCase()).filter(_.nonEmpty).getOrElse(\e\
    [31m\"4\"\e[0m).toLong\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value getOrElse is not a member of\
    \ Array[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd26utuny.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        notes.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0mvalue unary_-\
    \ is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import concurrent.duration.pairIntToDuration\n\e[31m   |\e[0m\n\e[31m\e[31m--\
    \ Error: /tmp/tmpd26utuny.scala:20:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        notes.sortBy(-_)\n\e[31m\e[31m   |\e[0m     \
    \                   ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e\
    [33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e\
    [33mobject\e[0m \e[35mBigInt\e[0m in \e[33mob"
  stdout: ''
  timestamp: 1659799906
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val music_notes = music_string.split(\"|\").map(music_note => {\n\
    \                val music_notes = music_note.split(\"o\").map(music_note => {\n\
    \                    val music_notes = music_note.split(\".\").map(music_note\
    \ => {\n                        val music_notes = music_note.split(\"|\").map(music_note\
    \ => {\n                            val music_notes = music_note.split(\"o\").map(music_note\
    \ => {\n                                val music_notes = music_note.split(\"\
    .\").map(music_note => {\n                                    val music_notes\
    \ = music_note.split(\"|\").map(music_note => {\n                            \
    \            val music_notes = music_note.split(\"o\").map(music_note => {\n \
    \                                           val music_notes = music_note.split(\"\
    .\").map(music_note => {\n                                                val\
    \ music_notes = music_note.split(\"|\").map(music_note => {\n                \
    \                                    val music_notes = music_note.split(\"o\"\
    ).map(music_note => {\n                                                      \
    \  val music_notes = music_note.split(\".\").map(music_note => {\n           \
    \                                                 val music_notes = music_note.split(\"\
    |\").map(music_note => {\n                                                   \
    \             val music_notes = music_note.split(\"o\").map(music_note => {\n\
    \                                                                    val music_notes\
    \ = music_note.split(\".\").map(music_note => {\n                            \
    \                                            val music_notes = music_note.split(\"\
    |\").map(music_note => {\n                                                   \
    \                         val music_notes = music_note.split(\"o\").map(music_note\
    \ => {\n                                                                     \
    \           val music_notes = music_note.split(\".\").map(music_note => {\n  \
    \                                                                            \
    \      val music_notes = music_note.split(\"|\").map(music_note => {\n       \
    \                                                                            \
    \     val music_notes = music_note.split(\"o\").map(music_note => {\n        \
    \                                                                            \
    \        val music_notes = music_note.split(\".\").map(music_note => {\n     \
    \                                                                            \
    \               val music_notes = music_note.split(\"|\").map(music_note => {\n\
    \                                                                            \
    \                        val music_notes = music_note.split(\"o\").map(music_note\
    \ => {\n                                                                     \
    \                                   val music_notes = music_note.split(\".\").map(music_note\
    \ => {\n                                                                     \
    \                                       val music_notes = music_note.split(\"\
    |\").map(music_note => {\n                                                   \
    \                                                             val music_notes\
    \ = music_note.split(\"o\").\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp97gah7wa.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp97gah7wa.scala:42:4 ----------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp97gah7wa.scala:51:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(rest =>\
    \ {\n                val beat = rest.substring(0, 1)\n                val rest\
    \ = rest.substring(1, rest.length)\n                val rest2 = rest.split(\"\
    |\").map(rest => {\n                    val rest3 = rest.substring(0, 1)\n   \
    \                 val rest4 = rest.substring(1, rest.length)\n               \
    \     val rest5 = rest.split(\"|\").map(rest => {\n                        val\
    \ rest6 = rest.substring(0, 1)\n                        val rest7 = rest.substring(1,\
    \ rest.length)\n                        val rest8 = rest.split(\"|\").map(rest\
    \ => {\n                            val rest9 = rest.substring(0, 1)\n       \
    \                     val rest10 = rest.substring(1, rest.length)\n          \
    \                  val rest11 = rest.split(\"|\").map(rest => {\n            \
    \                    val rest12 = rest.substring(0, 1)\n                     \
    \           val rest13 = rest.substring(1, rest.length)\n                    \
    \            val rest14 = rest.split(\"|\").map(rest => {\n                  \
    \                  val rest15 = rest.substring(0, 1)\n                       \
    \             val rest16 = rest.substring(1, rest.length)\n                  \
    \                  val rest17 = rest.split(\"|\").map(rest => {\n            \
    \                            val rest18 = rest.substring(0, 1)\n             \
    \                           val rest19 = rest.substring(1, rest.length)\n    \
    \                                    val rest20 = rest.split(\"|\").map(rest =>\
    \ {\n                                            val rest21 = rest.substring(0,\
    \ 1)\n                                            val rest22 = rest.substring(1,\
    \ rest.length)\n                                            val rest23 = rest.split(\"\
    |\").map(rest => {\n                                                val rest24\
    \ = rest.substring(0, 1)\n                                                val\
    \ rest25 = rest.substring(1, rest.length)\n                                  \
    \              val rest26 = rest.split(\"|\").map(rest => {\n                \
    \                                    val rest27 = rest.substring(0, 1)\n     \
    \                                               val rest28 = rest.substring(1,\
    \ rest.length)\n                                                    val rest29\
    \ = rest.split(\"|\").map(rest => {\n                                        \
    \                val rest30 = rest.substring(0, 1)\n                         \
    \                               val rest31 = rest.substring(1, rest.length)\n\
    \                                                        val rest32 = rest.split(\"\
    |\").map(rest => {\n                                                         \
    \   val rest33 = rest.substring(0, 1)\n                                      \
    \                      val rest34 = rest.substring(1, rest.length)\n         \
    \                                                   val rest35 = rest.split(\"\
    |\").map(rest => {\n                                                         \
    \       val rest36 = rest.substring(0, 1)\n                                  \
    \                              val rest37 = rest.substring(1, rest.length)\n \
    \                                                               val rest38 = rest.split(\"\
    |\").map(rest => {\n                                                         \
    \           val rest39 = rest.substring(0, 1)\n                              \
    \                                      val rest40 = rest.substring(1, rest.length)\n\
    \                                                                    val rest41\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi54eegf1.scala:59:80 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mrest41\e[0m = \n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpi54eegf1.scala:61:4 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi54eegf1.scala:70:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799902
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val notes = music_string.split(\"|\")\n            val notes_length\
    \ = notes.length\n            val notes_beats = notes.map(note => {\n        \
    \        val noteLength = note.length\n                val noteBeats = note.split(\"\
    o\").length\n                noteBeats * noteLength\n            }).toList\n \
    \           notes_beats.sum\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp74g24znn.scala:23:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m            \e\
    [33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"|\"\e[0m)\n\e[31m16\
    \ |\e[0m            \e[33mval\e[0m \e[36mnotes_length\e[0m = notes.length\n\e\
    [31m17 |\e[0m            \e[33mval\e[0m \e[36mnotes_beats\e[0m = notes.map(\e\
    [36mnote\e[0m => {\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mnoteLength\e\
    [0m = note.length\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mnoteBeats\e\
    [0m = note.split(\e[31m\"o\"\e[0m).length\n\e[31m20 |\e[0m                noteBeats\
    \ * noteLength\n\e[31m21 |\e[0m            }).toList\n\e[31m22 |\e[0m        \
    \    notes_beats.sum\n\e[31m23 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e\
    [31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \")\n     \
    \   val music_list_size = music_list.size\n        val music_list_size_long =\
    \ music_list_size.asInstanceOf[Int]\n        val music_list_size_long2 = music_list_size_long\
    \ * music_list_size_long\n        val music_list_size_long3 = music_list_size_long2\
    \ * music_list_size_long\n        val music_list_size_long4 = music_list_size_long3\
    \ * music_list_size_long\n        val music_list_size_long5 = music_list_size_long4\
    \ * music_list_size_long\n        val music_list_size_long6 = music_list_size_long5\
    \ * music_list_size_long\n        val music_list_size_long7 = music_list_size_long6\
    \ * music_list_size_long\n        val music_list_size_long8 = music_list_size_long7\
    \ * music_list_size_long\n        val music_list_size_long9 = music_list_size_long8\
    \ * music_list_size_long\n        val music_list_size_long10 = music_list_size_long9\
    \ * music_list_size_long\n        val music_list_size_long11 = music_list_size_long10\
    \ * music_list_size_long\n        val music_list_size_long12 = music_list_size_long11\
    \ * music_list_size_long\n        val music_list_size_long13 = music_list_size_long12\
    \ * music_list_size_long\n        val music_list_size_long14 = music_list_size_long13\
    \ * music_list_size_long\n        val music_list_size_long15 = music_list_size_long14\
    \ * music_list_size_long\n        val music_list_size_long16 = music_list_size_long15\
    \ * music_list_size_long\n        val music_list_size_long17 = music_list_size_long16\
    \ * music_list_size_long\n        val music_list_size_long18 = music_list_size_long17\
    \ * music_list_size_long\n        val music_list_size_long19 = music_list_size_long18\
    \ * music_list_size_long\n        val music_list_size_long20 = music_list_size_long19\
    \ * music_list_size_long\n        val music_list_size_long21 = music_list_size_long20\
    \ * music_list_size_long\n        val music_list_size_long22 = music_list_size_long21\
    \ * music_list_size_long\n        val music_list_size_long23 = music_list_size_long22\
    \ * music_list_size_long\n        val music_list_size_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgnive5cp.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgnive5cp.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1, music_string.length).trim\n            val beats_array\
    \ = beats.split(\"|\").map(_.toLong)\n            val note_array = note.toString.toCharArray.map(_.toInt)\n\
    \            val note_length = note_array.length\n            val beats_length\
    \ = beats_array.length\n            val note_to_beats = beats_array.zip(note_array).map(x\
    \ => x._1 - x._2)\n            val note_to_beats_length = note_to_beats.length\n\
    \            val note_to_beats_array = note_to_beats.map(x => x.toLong)\n    \
    \        val note_to_beats_array_length = note_to_beats_array.length\n       \
    \     val note_to_beats_array_to_beats = note_to_beats_array.zip(beats_array).map(x\
    \ => x._1 - x._2)\n            val note_to_beats_array_to_beats_length = note_to_beats_array_to_beats.length\n\
    \            val note_to_beats_array_to_beats_array = note_to_beats_array_to_beats.map(x\
    \ => x.toLong)\n            val note_to_beats_array_to_beats_array_length = note_to_beats_array_to_beats_array.length\n\
    \            val note_to_beats_array_to_beats_array_to_beats = note_to_beats_array_to_beats_array.zip(beats_array).map(x\
    \ => x._1 - x._2)\n            val note_to_beats_array_to_beats_array_to_beats_length\
    \ = note_to_beats_array_to_beats_array_to_beats.length\n            val note_to_beats_array_to_beats_array_to_beats_array\
    \ = note_to_beats_array_to_beats_array_to_beats.map(x => x.toLong)\n         \
    \   val note_to_beats_array_to_beats_array_to_beats_array_length = note_to_beats_array_to_beats_array_to_beats_array.length\n\
    \            val note_to_beats_array_to_beats_array_to_beats_array_to_beats =\
    \ note_to_beats_array_to_beats_array_to_beats_array.zip(beats_array).map(x =>\
    \ x._1 - x._2)\n            val note_to_beats_array_to_beats_array_to_beats_array_to_beats_length\
    \ = note_to_beats_array_to_beats_array_to_beats_array_to_beats.length\n      \
    \      val note_to_beats_array_to_beats_array_to_beats_array_to_beats_array =\
    \ note_to_beats_array_to_beats_array_to_beats_array_to_beats.map(x => x.to\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp31mwz0yl.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp31mwz0yl.scala:37:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m37 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp31mwz0yl.scala:46:0 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmp31mwz0yl.scala:35:153\
    \ -----------------------\e[0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnote_to_beats_array_to_beats_array_to_beats_array_to_beats_array\e[0m\
    \ = note_to_beats_array_to_beats_array_to_beats_array_to_beats.map(\e[36mx\e[0m\
    \ => x.to\n\e[31m\e[31m   |\e[0m                                             \
    \                                                                            \
    \                              ^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mto\e[0m in \e[33mtrait\e\
    [0m \e[35mIntegralProxy\e[0m with types\n\e[31m   |\e[0m (end: Long, step: Long):\
    \ scala.collection.immutable.NumericRange.Inclusive[Long]\n\e[31m   |\e[0m (end:\
    \ Long): scala.collection.immutable.NumericRange.Inclusive[Long]\n\e[31m   |\e\
    [0mboth match expected type B\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_length = music_list.length\n        val music_list_with_beats\
    \ = music_list.map(music_string => {\n            val music_string_with_beats\
    \ = music_string.split(\"\\\\o\")\n            val music_string_with_beats_length\
    \ = music_string_with_beats.length\n            val music_string_with_beats_with_beats\
    \ = music_string_with_beats.map(music_string_with_beats => {\n               \
    \ val music_string_with_beats_with_beats_length = music_string_with_beats_with_beats.length\n\
    \                val music_string_with_beats_with_beats_with_beats = music_string_with_beats_with_beats.split(\"\
    \\\\.\\\\|\")\n                val music_string_with_beats_with_beats_with_beats_length\
    \ = music_string_with_beats_with_beats_with_beats.length\n                val\
    \ music_string_with_beats_with_beats_with_beats_with_beats = music_string_with_beats_with_beats_with_beats.map(music_string_with_beats_with_beats\
    \ => {\n                    val music_string_with_beats_with_beats_with_beats_with_beats_length\
    \ = music_string_with_beats_with_beats_with_beats_with_beats.length\n        \
    \            val music_string_with_beats_with_beats_with_beats_with_beats_with_beats\
    \ = music_string_with_beats_with_beats_with_beats_with_beats.split(\"\\\\.\\\\\
    |\")\n                    val music_string_with_beats_with_beats_with_beats_with_beats_with_beats_length\
    \ = music_string_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats.length\n\
    \                    val music_string_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats\
    \ = music_string_with_beats_with_beats_with_beats_with_beats_with_beats.map(music_string_with_beats_with_beats_with_beats\
    \ => {\n                        val music_string_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats_length\
    \ = music_string_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats.length\n\
    \                        val music_string_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats\
    \ = music_string_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats.split(\"\
    \\\\.\\\\|\")\n                        val music_string_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats_length\
    \ = music_string_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats.length\n\
    \                        val music_string_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats\
    \ = music_string_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats_with_beats.map(music_string_with_beats_with_beats_with_beat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq5mqmhwj.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq5mqmhwj.scala:33:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m33 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpq5mqmhwj.scala:42:0 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq5mqmhwj.scala:20:64\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_with_beats_with_beats_length\e[0m = music_string_with_beats_with_beats.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^\e[0m\n\e[31m   |\e[0m           Recursive \e[33mvalue\e[0m \e[35mmusic_string_with_beats_with_beats\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq5mqmhwj.scala:21:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_with_beats_with_beats_with_beats\e[0m = music_string_with_beats_with_beats.split(\e\
    [31m\"\\\\.\\\\|\"\e[0m)\n\e[31m\e[31m   |\e[0m                              \
    \                                      ^\e[0m\n\e[31m   |\e[0m           Recursive\
    \ \e[33mvalue\e[0m \e[35mmusic_string_with_beats_with_beats\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq5mqmhwj.scala:41:1\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1659799909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(_.toLong).sum\n\
    \            beats * note.length\n        }).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpopftxmfi.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m\
    \ = music_string.substring(\e[31m1\e[0m, music_string.length)\n\e[31m17 |\e[0m\
    \            \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\e[31m\"|\"\e[0m).map(_.toLong).sum\n\
    \e[31m18 |\e[0m            beats * note.length\n\e[31m19 |\e[0m        }).sum\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"\\\\o\").map(music_string =>\
    \ {\n                val note = music_string.split(\"\\\\.\").map(music_string\
    \ => {\n                    val beats = music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                        music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                            music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                    music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                        music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                            music_string.split(\"\\\\\
    |\").map(music_string => {\n                                                music_string.split(\"\
    \\\\|\").map(music_string => {\n                                             \
    \       music_string.split(\"\\\\|\").map(music_string => {\n                \
    \                                        music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                                            music_string.split(\"\
    \\\\|\").map(music_string => {\n                                             \
    \                   music_string.split(\"\\\\|\").map(music_string => {\n    \
    \                                                                music_string.split(\"\
    \\\\|\").map(music_string => {\n                                             \
    \                           music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n                                                                        \
    \    music_string.split(\"\\\\|\").map(music_string => {\n                   \
    \                                                             music_string.split(\"\
    \\\\|\").map(music_string => {\n                                             \
    \                                       music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                                                     \
    \                   music_string.split(\"\\\\|\").map(music_string => {\n    \
    \                                                                            \
    \            music_string.split(\"\\\\|\").map(music_string => {\n           \
    \                                                                            \
    \         music_string.split(\"\\\\|\").map(music_string => {\n              \
    \                                                                            \
    \          music_string.split(\"\\\\|\").map(music_string => {\n             \
    \                                                                            \
    \               music_string.split(\"\\\\|\").map(music_string => {\n        \
    \                                                                            \
    \                        music_string.split(\"\\\\|\").map(music_string => {\n\
    \                                                                            \
    \                                    music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                                                     \
    \                                               music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                                                     \
    \                                                   music_string.split(\"\\\\\
    |\").map(music_string => {\n                                                 \
    \                                                                           music_string.split(\"\
    \\\\|\").map(music_string => {\n                                             \
    \                                                                            \
    \       music_string.split(\"\\\\|\").map(music_string => {\n                \
    \                                                                            \
    \                                        music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                                                     \
    \                                                                   music_string.split(\"\
    \\\\|\").map(music_string => {\n                                             \
    \                                                                            \
    \                   music_string.split(\"\\\\|\").map(music_string => {\n    \
    \                                                                            \
    \                                                                music_string.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphxg4yk1q.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmphxg4yk1q.scala:50:4 ----------------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphxg4yk1q.scala:59:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmphxg4yk1q.scala:56:5\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m     where:    B is a type variable\n\e[31m\e\
    [31m-- Error: /tmp/tmphxg4yk1q.scala:58:1 ------------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m No ClassTag\
    \ available for Array[B]\n\e[31m   |\e[0m\n\e[31m   |\e[0m where:    B is a type\
    \ variable\n5 errors found\n"
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(_.toLong)\n            beats.sum\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpo04ly_ko.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmpo04ly_ko.scala:18)\n\tat Problem$.main(tmpo04ly_ko.scala:21)\n\
    \tat Problem.main(tmpo04ly_ko.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_int\
    \ = music_list_size.asInstanceOf[Int]\n        val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_int = music_list_size_long.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_int = music_list_size_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_int = music_list_size_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_int = music_list_size_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_int = music_list_size_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp72jjajdr.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_long_long_int\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_long_long_long_long_long_long_long_long_int\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp72jjajdr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_long_long_int\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_long_long_long_long_long_long_long_long_int\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp72jjajdr.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_long\
    \ = music_list_size.asInstanceOf[Long]\n        val music_list_size_long2 = music_list_size_long.toInt\n\
    \        val music_list_size_long3 = music_list_size_long2.toInt\n        val\
    \ music_list_size_long4 = music_list_size_long3.toInt\n        val music_list_size_long5\
    \ = music_list_size_long4.toInt\n        val music_list_size_long6 = music_list_size_long5.toInt\n\
    \        val music_list_size_long7 = music_list_size_long6.toInt\n        val\
    \ music_list_size_long8 = music_list_size_long7.toInt\n        val music_list_size_long9\
    \ = music_list_size_long8.toInt\n        val music_list_size_long10 = music_list_size_long9.toInt\n\
    \        val music_list_size_long11 = music_list_size_long10.toInt\n        val\
    \ music_list_size_long12 = music_list_size_long11.toInt\n        val music_list_size_long13\
    \ = music_list_size_long12.toInt\n        val music_list_size_long14 = music_list_size_long13.toInt\n\
    \        val music_list_size_long15 = music_list_size_long14.toInt\n        val\
    \ music_list_size_long16 = music_list_size_long15.toInt\n        val music_list_size_long17\
    \ = music_list_size_long16.toInt\n        val music_list_size_long18 = music_list_size_long17.toInt\n\
    \        val music_list_size_long19 = music_list_size_long18.toInt\n        val\
    \ music_list_size_long20 = music_list_size_long19.toInt\n        val music_list_size_long21\
    \ = music_list_size_long20.toInt\n        val music_list_size_long22 = music_list_size_long21.toInt\n\
    \        val music_list_size_long23 = music_list_size_long22.toInt\n        val\
    \ music_list_size_long24 = music_list_size_long23.toInt\n        val music_list_size_long25\
    \ = music_list_size_long24.toInt\n        val music_list_size_long26 = music_list_size_long25.toInt\n\
    \        val music_list_size_long27 = music_list_size_long26.toInt\n        val\
    \ music_list_size_long28 = music_list_size_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfengk8yv.scala:43:37 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long28\e\
    [0m = music_list_size_\n\e[31m\e[31m   |\e[0m                                \
    \     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \    Not found: music_list_size_\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfengk8yv.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_long\
    \ = music_list_size.map(_.toLong)\n        val music_list_size_long_sorted = music_list_size_long.sort\n\
    \        val music_list_size_long_sorted_reversed = music_list_size_long_sorted.reverse\n\
    \        val music_list_size_long_sorted_reversed_size = music_list_size_long_sorted_reversed.size\n\
    \        val music_list_size_long_sorted_reversed_size_long = music_list_size_long_sorted_reversed_size.map(_.toLong)\n\
    \        val music_list_size_long_sorted_reversed_size_long_sorted = music_list_size_long_sorted_reversed_size_long.sort\n\
    \        val music_list_size_long_sorted_reversed_size_long_sorted_reversed =\
    \ music_list_size_long_sorted_reversed_size_long_sorted.reverse\n        val music_list_size_long_sorted_reversed_size_long_sorted_reversed_size\
    \ = music_list_size_long_sorted_reversed_size_long_sorted_reversed.size\n    \
    \    val music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long\
    \ = music_list_size_long_sorted_reversed_size_long_sorted_reversed_size.map(_.toLong)\n\
    \        val music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted\
    \ = music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long.sort\n\
    \        val music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed\
    \ = music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted.reverse\n\
    \        val music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed_size\
    \ = music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed_size.map(_.toLong)\n\
    \        val music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed_size_long\
    \ = music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed_size_long.sort\n\
    \        val music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted\
    \ = music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed_size_long.sort\n\
    \        val music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed\
    \ = music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed_size_long_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6lj52dah.scala:16:51 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long\e[0m\
    \ = music_list_size.map(_.toLong)\n\e[31m\e[31m   |\e[0m                     \
    \              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \              value map is not a member of Int\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp6lj52dah.scala:27:108 --------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed_size\e\
    [0m = music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed_size.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                    ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed_size\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp6lj52dah.scala:28:113 --------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed_size_long\e\
    [0m = music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed_size_long.sort\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_list_size_long_sorted_reversed_size_long_sorted_reversed_size_long_sorted_reversed_size_long\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6lj52dah.scala:30:129 -----------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m        \e[33mval\e[0m \e[36mmusic_list_size_long_sorted_reversed_size_long_sor"
  stdout: ''
  timestamp: 1659799911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \   val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                val beats = rest.split(\"o\").map(music_string => {\n       \
    \             val beat = music_string.substring(0, 1)\n                    val\
    \ rest = music_string.substring(1)\n                    val beats = rest.split(\"\
    |\").map(music_string => {\n                        val beat = music_string.substring(0,\
    \ 1)\n                        val rest = music_string.substring(1)\n         \
    \               val beats = rest.split(\"o\").map(music_string => {\n        \
    \                    val beat = music_string.substring(0, 1)\n               \
    \             val rest = music_string.substring(1)\n                         \
    \   val beats = rest.split(\"|\").map(music_string => {\n                    \
    \            val beat = music_string.substring(0, 1)\n                       \
    \         val rest = music_string.substring(1)\n                             \
    \   val beats = rest.split(\"o\").map(music_string => {\n                    \
    \                val beat = music_string.substring(0, 1)\n                   \
    \                 val rest = music_string.substring(1)\n                     \
    \               val beats = rest.split(\"|\").map(music_string => {\n        \
    \                                val beat = music_string.substring(0, 1)\n   \
    \                                     val rest = music_string.substring(1)\n \
    \                                       val beats = rest.split(\"o\").map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1)\n\
    \                                            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                                                val beat = music_string.substring(0,\
    \ 1)\n                                                val rest = music_string.substring(1)\n\
    \                                                val beats = rest.split(\"o\"\
    ).map(music_string => {\n                                                    val\
    \ beat = music_string.substring(0, 1)\n                                      \
    \              val rest = music_string.substring(1)\n                        \
    \                            val beats = rest.split(\"|\").map(music_string =>\
    \ {\n                                                        val beat = music_string.substring(0,\
    \ 1)\n                                                        val rest = music_string.substring(1)\n\
    \                                                        val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \           val beat = music_string.substring(0, 1)\n                        \
    \                                    val rest = music_string.substring(1)\n  \
    \                                                          val beats = rest.split(\"\
    |\").map(music_string => {\n                                                 \
    \               val beat = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1)\n\
    \                                                                val beats = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \                   val beat = music_string.substring(0, 1)\n                \
    \                                                    val rest = music_string.substring(1)\n\
    \                                                                    val beats\
    \ = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpu3kz_3fi.scala:58:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\"\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                    unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpu3kz_3fi.scala:60:4 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu3kz_3fi.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1, music_string.length)\n            val beats_as_string\
    \ = beats.toInt\n            val beats_as_long = beats_as_string.toLong\n    \
    \        val note_to_beats = Map(\n                \"o\" -> 4L,\n            \
    \    \"o|\" -> 2L,\n                \".|\" -> 1L\n            )\n            val\
    \ beats_to_note = Map(\n                4L -> \"o\",\n                2L -> \"\
    o|\",\n                1L -> \".|\"\n            )\n            note_to_beats(note)\
    \ match {\n                case None => throw new Exception(\"Invalid music string\"\
    )\n                case Some(beats) => beats_to_note(beats)\n            }\n \
    \       }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppq2yvvfb.scala:30:21\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                \e[33mcase\e\
    [0m None => \e[33mthrow\e[0m \e[33mnew\e[0m Exception(\e[31m\"Invalid music string\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0m \
    \                    Found:    None.type\n\e[31m   |\e[0m                    \
    \ Required: Long\n\e[31m   |\e[0m                     pattern type is incompatible\
    \ with expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppq2yvvfb.scala:31:50\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                \e[33mcase\e\
    [0m Some(beats) => beats_to_note(beats)\n\e[31m\e[31m   |\e[0m               \
    \                                   ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                   Found:    (beats : Any)\n\e[31m   |\e[0m \
    \                                                Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\").map(_.toInt)\n\
    \        val notes_length = notes.length\n        val beats = notes_length.toLong\
    \ / 4\n        val notes_last_beats = notes.takeRight(notes_length).map(_.toLong)\n\
    \        val notes_last_beats_length = notes_last_beats.length\n        val notes_last_beats_last_beats\
    \ = notes_last_beats.takeRight(notes_last_beats_length).map(_.toLong)\n      \
    \  val notes_last_beats_last_beats_length = notes_last_beats_last_beats.length\n\
    \        val notes_last_beats_last_beats_last_beats = notes_last_beats_last_beats.takeRight(notes_last_beats_last_beats_length).map(_.toLong)\n\
    \        val notes_last_beats_last_beats_last_beats_length = notes_last_beats_last_beats_last_beats.length\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats = notes_last_beats_last_beats_last_beats.takeRight(notes_last_beats_last_beats_last_beats_length).map(_.toLong)\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_length = notes_last_beats_last_beats_last_beats_last_beats.length\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_last_beats = notes_last_beats_last_beats_last_beats_last_beats.takeRight(notes_last_beats_last_beats_last_beats_last_beats_length).map(_.toLong)\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_length\
    \ = notes_last_beats_last_beats_last_beats_last_beats_last_beats.length\n    \
    \    val notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats\
    \ = notes_last_beats_last_beats_last_beats_last_beats_last_beats.takeRight(notes_last_beats_last_beats_last_beats_last_beats_last_beats_length).map(_.toLong)\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_length\
    \ = notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_length.length\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats\
    \ = notes_last_beats_last_beat\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp67c2fmau.scala:28:93 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_length\e\
    [0m = notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_length.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_length\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp67c2fmau.scala:29:97 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        \e[33mval\e[0m \e[36mnotes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats\e\
    [0m = notes_last_beats_last_beat\n\e[31m\e[31m   |\e[0m                      \
    \                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: notes_last_beats_last_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp67c2fmau.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_count = notes.length\n        val notes_beats = notes.map(x => x.split(\"\
    o|\")).map(x => x.length)\n        val notes_beats_count = notes_beats.sum\n \
    \       val notes_beats_count_to_beats = notes_beats_count / notes_count\n   \
    \     val notes_beats_count_to_beats_count = notes_beats_count_to_beats.toInt\n\
    \        val notes_beats_count_to_beats_count_to_beats = notes_beats_count_to_beats_count\
    \ / notes_beats_count\n        val notes_beats_count_to_beats_count_to_beats_count\
    \ = notes_beats_count_to_beats_count_to_beats.toInt\n        val notes_beats_count_to_beats_count_to_beats_count_to_beats\
    \ = notes_beats_count_to_beats_count_to_beats_count_to_beats.toInt\n        val\
    \ notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats = notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats.toInt\n\
    \        val notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats\
    \ = notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats.toInt\n\
    \        val notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats\
    \ = notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats.toInt\n\
    \        val notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats\
    \ = notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats.toInt\n\
    \        val notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpll8m3tj5.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpll8m3tj5.scala:22:71\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_beats_count_to_beats_count_to_beats_count_to_beats\e[0m = notes_beats_count_to_beats_count_to_beats_count_to_beats.toInt\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnotes_beats_count_to_beats_count_to_beats_count_to_beats\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpll8m3tj5.scala:23:86\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats\e\
    [0m = notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats.toInt\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mnotes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpll8m3tj5.scala:24:101\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats\e\
    [0m = notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats.toInt\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beat"
  stdout: ''
  timestamp: 1659799912
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(_.toInt)\n            beats.map(beat\
    \ => if (note == \"o\") 4L else beat.toLong)\n        }).flatten.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpfsp1spvd.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmpfsp1spvd.scala:18)\n\tat Problem$.main(tmpfsp1spvd.scala:21)\n\
    \tat Problem.main(tmpfsp1spvd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(_.toInt).sum\n            beats.toLong\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpfhgecs5p.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmpfhgecs5p.scala:18)\n\tat Problem$.main(tmpfhgecs5p.scala:21)\n\
    \tat Problem.main(tmpfhgecs5p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val music_note = music_string.substring(0, 1)\n            val music_rest\
    \ = music_string.substring(1, 2)\n            val music_rest2 = music_rest.substring(0,\
    \ 1)\n            val music_rest3 = music_rest.substring(1, 2)\n            val\
    \ music_rest4 = music_rest.substring(1, 3)\n            val music_rest5 = music_rest.substring(1,\
    \ 4)\n            val music_rest6 = music_rest.substring(1, 5)\n            val\
    \ music_rest7 = music_rest.substring(1, 6)\n            val music_rest8 = music_rest.substring(1,\
    \ 7)\n            val music_rest9 = music_rest.substring(1, 8)\n            val\
    \ music_rest10 = music_rest.substring(1, 9)\n            val music_rest11 = music_rest.substring(1,\
    \ 10)\n            val music_rest12 = music_rest.substring(1, 11)\n          \
    \  val music_rest13 = music_rest.substring(1, 12)\n            val music_rest14\
    \ = music_rest.substring(1, 13)\n            val music_rest15 = music_rest.substring(1,\
    \ 14)\n            val music_rest16 = music_rest.substring(1, 15)\n          \
    \  val music_rest17 = music_rest.substring(1, 16)\n            val music_rest18\
    \ = music_rest.substring(1, 17)\n            val music_rest19 = music_rest.substring(1,\
    \ 18)\n            val music_rest20 = music_rest.substring(1, 19)\n          \
    \  val music_rest21 = music_rest.substring(1, 20)\n            val music_rest22\
    \ = music_rest.substring(1, 21)\n            val music_rest23 = music_rest.substring(1,\
    \ 22)\n            val music_rest24 = music_rest.substring(1, 23)\n          \
    \  val music_rest25 = music_rest.substring(1, 24)\n            val music_rest26\
    \ = music_rest.substring(1, 25)\n            val music_rest27 = music_rest.substring(1,\
    \ 26)\n            val music_rest28 = music_rest.substring(1, 27)\n          \
    \  val music_rest29 = music_rest.substring(1, 28)\n            val music_rest30\
    \ = music_rest.substring(1, 29)\n            val music_rest31 = music_rest.substring(1,\
    \ 30)\n            val music_rest32 = music_rest.substring(1, 31)\n          \
    \  val music_rest33 = music_rest.substring(1, 32)\n            val music_rest34\
    \ = music_rest.substring(1, 33)\n            val music_rest35 = music_rest.substring(1,\
    \ 34)\n            val musi\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbsa06yrf.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbsa06yrf.scala:53:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m53 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpbsa06yrf.scala:62:0 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(_.toInt)\n            beats.map(beat\
    \ => if (note == \"o\") 4l else 2l).sum\n        }).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpnbhh4jqe.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmpnbhh4jqe.scala:18)\n\tat Problem$.main(tmpnbhh4jqe.scala:21)\n\
    \tat Problem.main(tmpnbhh4jqe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(rest => {\n                val\
    \ beat = rest.charAt(0)\n                val rest = rest.substring(1).trim\n \
    \               val rest = rest.replace(\".\", \"\")\n                val rest\
    \ = rest.replace(\"o\", \"\")\n                val rest = rest.replace(\"|\",\
    \ \"\")\n                val rest = rest.replace(\",\", \"\")\n              \
    \  val rest = rest.replace(\":\", \"\")\n                val rest = rest.replace(\"\
    ;\", \"\")\n                val rest = rest.replace(\"?\", \"\")\n           \
    \     val rest = rest.replace(\"!\", \"\")\n                val rest = rest.replace(\"\
    (\", \"\")\n                val rest = rest.replace(\")\", \"\")\n           \
    \     val rest = rest.replace(\"[\", \"\")\n                val rest = rest.replace(\"\
    ]\", \"\")\n                val rest = rest.replace(\"{\", \"\")\n           \
    \     val rest = rest.replace(\"}\", \"\")\n                val rest = rest.replace(\"\
    [\", \"\")\n                val rest = rest.replace(\"]\", \"\")\n           \
    \     val rest = rest.replace(\"{\", \"\")\n                val rest = rest.replace(\"\
    }\", \"\")\n                val rest = rest.replace(\"(\", \"\")\n           \
    \     val rest = rest.replace(\")\", \"\")\n                val rest = rest.replace(\"\
    ,\", \"\")\n                val rest = rest.replace(\":\", \"\")\n           \
    \     val rest = rest.replace(\";\", \"\")\n                val rest = rest.replace(\"\
    ?\", \"\")\n                val rest = rest.replace(\"!\", \"\")\n           \
    \     val rest = rest.replace(\"(\", \"\")\n                val rest = rest.replace(\"\
    )\", \"\")\n                val rest = rest.replace(\"[\", \"\")\n           \
    \     val rest = rest.replace(\"]\", \"\")\n                val rest = rest.replace(\"\
    {\", \"\")\n                val rest = rest.replace(\"}\", \"\")\n           \
    \     val rest = rest.replace(\"(\", \"\")\n                val rest = rest.replace(\"\
    )\", \"\")\n                val rest = rest.replace(\",\", \"\")\n           \
    \     val rest = rest.replace(\":\", \"\")\n                val rest = rest.replace(\"\
    ;\", \"\")\n                val rest = rest.replace(\"?\", \"\")\n           \
    \     val rest = rest.replace(\"!\", \"\")\n                val rest = rest.replace(\"\
    (\", \"\")\n                val rest = rest.replace(\")\", \"\")\n           \
    \     val rest = rest.replace(\"[\", \"\")\n                val rest = rest.replace(\"\
    ]\", \"\")\n                val rest = rest.replace(\"{\", \"\")\n           \
    \     val rest = rest.replace(\"}\", \"\")\n                val rest = rest.replace(\"\
    (\", \"\")\n                val rest = rest.replace(\")\", \"\")\n           \
    \     val rest = rest.replace(\",\", \"\")\n                val rest = rest.replace(\"\
    :\", \"\")\n                val rest = rest.replace(\";\", \"\")\n           \
    \     val \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmptnojp2dp.scala:69:19 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m                \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m\
    \                   ^\e[0m\n\e[31m   |\e[0m                   pattern expected\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptnojp2dp.scala:71:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m71 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmptnojp2dp.scala:80:0 ----------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_int\
    \ = music_list_size.toInt\n        val music_list_size_long = music_list_size_int.toLong\n\
    \        val music_list_size_long2 = music_list_size_long * music_list_size_long\n\
    \        val music_list_size_long3 = music_list_size_long2 * music_list_size_long2\n\
    \        val music_list_size_long4 = music_list_size_long3 * music_list_size_long3\n\
    \        val music_list_size_long5 = music_list_size_long4 * music_list_size_long4\n\
    \        val music_list_size_long6 = music_list_size_long5 * music_list_size_long5\n\
    \        val music_list_size_long7 = music_list_size_long6 * music_list_size_long6\n\
    \        val music_list_size_long8 = music_list_size_long7 * music_list_size_long7\n\
    \        val music_list_size_long9 = music_list_size_long8 * music_list_size_long8\n\
    \        val music_list_size_long10 = music_list_size_long9 * music_list_size_long9\n\
    \        val music_list_size_long11 = music_list_size_long10 * music_list_size_long10\n\
    \        val music_list_size_long12 = music_list_size_long11 * music_list_size_long11\n\
    \        val music_list_size_long13 = music_list_size_long12 * music_list_size_long12\n\
    \        val music_list_size_long14 = music_list_size_long13 * music_list_size_long13\n\
    \        val music_list_size_long15 = music_list_size_long14 * music_list_size_long14\n\
    \        val music_list_size_long16 = music_list_size_long15 * music_list_size_long15\n\
    \        val music_list_size_long17 = music_list_size_long16 * music_list_size_long16\n\
    \        val music_list_size_long18 = music_list_size_long17 * music_list_size_long17\n\
    \        val music_list_size_long19 = music_list_size_long18 * music_list_size_long18\n\
    \        val music_list_size_long20 = music_list_size_long19 * music_list_size_long19\n\
    \        val music_list_size_long21 = music_list_size_long20 * music_list_size_long20\n\
    \        val music_list_size_long22 = music_list_size_long21 * musi\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_rzvo06x.scala:38:62 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long22\e\
    [0m = music_list_size_long21 * musi\n\e[31m\e[31m   |\e[0m                   \
    \                                           ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                                  Not found: musi\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_rzvo06x.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_long\
    \ = music_list_size.map(_.toLong)\n        val music_list_size_long_sorted = music_list_size_long.sort\n\
    \        val music_list_size_long_sorted_size = music_list_size_long_sorted.size\n\
    \        val music_list_size_long_sorted_size_long = music_list_size_long_sorted_size.map(_.toLong)\n\
    \        val music_list_size_long_sorted_size_long_sorted = music_list_size_long_sorted_size_long.sort\n\
    \        val music_list_size_long_sorted_size_long_sorted_size = music_list_size_long_sorted_size_long_sorted.size\n\
    \        val music_list_size_long_sorted_size_long_sorted_size_long = music_list_size_long_sorted_size_long_sorted_size_long.map(_.toLong)\n\
    \        val music_list_size_long_sorted_size_long_sorted_size_long_sorted = music_list_size_long_sorted_size_long_sorted_size_long_sorted.sort\n\
    \        val music_list_size_long_sorted_size_long_sorted_size_long_sorted_size\
    \ = music_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long.map(_.toLong)\n\
    \        val music_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted\
    \ = music_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted.sort\n\
    \        val music_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size\
    \ = music_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long.map(_.toLong)\n\
    \        val music_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted\
    \ = music_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted.sort\n\
    \        val music_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long\
    \ = music_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted.map(_.toLong)\n\
    \        val music_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted\
    \ = music_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted.sort\n\
    \        val music_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long\
    \ = music_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpotr24569.scala:16:51 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long\e[0m\
    \ = music_list_size.map(_.toLong)\n\e[31m\e[31m   |\e[0m                     \
    \              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \              value map is not a member of Int\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpotr24569.scala:22:69 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_sorted_size_long_sorted_size_long\e\
    [0m = music_list_size_long_sorted_size_long_sorted_size_long.map(_.toLong)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \           ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmusic_list_size_long_sorted_size_long_sorted_size_long\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpotr24569.scala:23:76\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_long_sorted_size_long_sorted_size_long_sorted\e[0m = music_list_size_long_sorted_size_long_sorted_size_long_sorted.sort\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmusic_list_size_long_sorted_size_long_sorted_size_long_sorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotr24569.scala:24:81\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_long_sorted_size_long_sorted_size_long_sorted_size\e[0m =\
    \ music_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: music_list_size_long_sorted_size_long_sorted_size_long_s"
  stdout: ''
  timestamp: 1659799914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ 2)\n            val beats = rest.split(\"|\").map(_.toLong).sum\n          \
    \  beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm5qah70c.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m\
    \ = music_string.substring(\e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m17 |\e[0m      \
    \      \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\e[31m\"|\"\e[0m).map(_.toLong).sum\n\
    \e[31m18 |\e[0m            beats\n\e[31m19 |\e[0m        }).sum\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val notes = music_string.split(\"|\").map(music_string => {\n   \
    \             val note = music_string.split(\"o\").map(music_string => {\n   \
    \                 val beats = music_string.split(\"|\").map(music_string => {\n\
    \                        val beat = music_string.split(\".\").map(music_string\
    \ => {\n                            music_string.toLong\n                    \
    \    }).last\n                        beat\n                    }).last\n    \
    \                beats\n                }).last\n                note\n      \
    \      }).last\n            notes\n        }).last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj435pty7.scala:28:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m            \e\
    [33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e[0m = music_string.split(\e\
    [31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m17 |\e[0m            \
    \        \e[33mval\e[0m \e[36mbeats\e[0m = music_string.split(\e[31m\"|\"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m18 |\e[0m                        \e[33mval\e\
    [0m \e[36mbeat\e[0m = music_string.split(\e[31m\".\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m19 |\e[0m                            music_string.toLong\n\e[31m20\
    \ |\e[0m                        }).last\n\e[31m21 |\e[0m                     \
    \   beat\n\e[31m22 |\e[0m                    }).last\n\e[31m23 |\e[0m        \
    \            beats\n\e[31m24 |\e[0m                }).last\n\e[31m25 |\e[0m  \
    \              note\n\e[31m26 |\e[0m            }).last\n\e[31m27 |\e[0m     \
    \       notes\n\e[31m28 |\e[0m        }).last\n\e[31m\e[31m   |\e[0m        ^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required: \e\
    [1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_length = notes.length\n        val notes_beats = notes.map(_.length)\n\
    \        val notes_beats_length = notes_beats.sum\n        val notes_beats_length_length\
    \ = notes_beats_length.toString.length\n        val notes_beats_length_length_length\
    \ = notes_beats_length_length.toString.length\n        val notes_beats_length_length_length_length\
    \ = notes_beats_length_length_length.toString.length\n        val notes_beats_length_length_length_length_length\
    \ = notes_beats_length_length_length_length.toString.length\n        val notes_beats_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length.toString.length\n        val\
    \ notes_beats_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length.toString.length\n\
    \        val notes_beats_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length_length.toString.length\n\
    \        val notes_beats_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length_length_length.toString.length\n\
    \        val notes_beats_length_length_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length_length_length_length.toString.length\n\
    \        val notes_beats_length_length_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length_length_length_length.toString.length\n\
    \        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length_length_length_length_length.toString.length\n\
    \        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length_length_length_length_length_length_length.toString.length\n\
    \        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length.toString.length\n\
    \        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxffy9sa5.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxffy9sa5.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_beats_length_length_length_length_length_length_length_length_length_length_length\e\
    [0m = notes_beats_length_length_length_length_length_length_length_length_length.toString.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length_length_length_length_length_length_length_length_length_length_length\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  notes_beats_length_length_length_length_length_length_length_length_length_length_length\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxffy9sa5.scala:28:110 -----------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length_length_length_length_length_length_length_length_length_length_length_length\e\
    [0m = notes_beats_length_length_length_length_length_length_length_length_length_length.toString.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: notes_beats_length_length_length_length_length_length_length_length_length_length\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxffy9sa5.scala:30:145\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_beats_length_length_length_length_length_l"
  stdout: ''
  timestamp: 1659799917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(rest =>\
    \ rest.split(\"o\").map(rest => rest.split(\".\").map(rest => rest.toLong).sum))\n\
    \            beats.map(beat => beat(0) + beat(1) + beat(2) + beat(3) + beat(4)).sum\n\
    \        }).filter(beat => beat > 0).map(beat => beat.toLong)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfdjan3pp.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[Long]\n\e[31m\
    \   |\e[0m        Required: \e[1m\e[32mList\e[0m[Long]\n\e[31m15 |\e[0m      \
    \      \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e\
    [31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = music_string.substring(\e\
    [31m1\e[0m, music_string.length)\n\e[31m17 |\e[0m            \e[33mval\e[0m \e\
    [36mbeats\e[0m = rest.split(\e[31m\"|\"\e[0m).map(\e[36mrest\e[0m => rest.split(\e\
    [31m\"o\"\e[0m).map(\e[36mrest\e[0m => rest.split(\e[31m\".\"\e[0m).map(\e[36mrest\e\
    [0m => rest.toLong).sum))\n\e[31m18 |\e[0m            beats.map(\e[36mbeat\e[0m\
    \ => beat(\e[31m0\e[0m) + beat(\e[31m1\e[0m) + beat(\e[31m2\e[0m) + beat(\e[31m3\e\
    [0m) + beat(\e[31m4\e[0m)).sum\n\e[31m19 |\e[0m        }).filter(\e[36mbeat\e\
    [0m => beat > \e[31m0\e[0m).map(\e[36mbeat\e[0m => beat.toLong)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(_.toLong)\n            beats.sum\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpo04ly_ko.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmpo04ly_ko.scala:18)\n\tat Problem$.main(tmpo04ly_ko.scala:21)\n\
    \tat Problem.main(tmpo04ly_ko.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase()).filter(_.length\
    \ == 1).map(_.toInt)\n        val notesCount = notes.toList.length\n        val\
    \ notesLast = notes.last\n        val notesLastCount = notesLast.toList.length\n\
    \        val notesLastLast = notesLast.last\n        val notesLastLastCount =\
    \ notesLastLast.toList.length\n        val notesLastLastLast = notesLastLast.last\n\
    \        val notesLastLastLastCount = notesLastLastLast.toList.length\n      \
    \  val notesLastLastLastLast = notesLastLastLast.last\n        val notesLastLastLastLastCount\
    \ = notesLastLastLastLast.toList.length\n        val notesLastLastLastLastLast\
    \ = notesLastLastLastLast.last\n        val notesLastLastLastLastLastCount = notesLastLastLastLastLast.toList.length\n\
    \        val notesLastLastLastLastLastLast = notesLastLastLastLastLast.last\n\
    \        val notesLastLastLastLastLastLastCount = notesLastLastLastLastLastLast.toList.length\n\
    \        val notesLastLastLastLastLastLastLast = notesLastLastLastLastLastLast.last\n\
    \        val notesLastLastLastLastLastLastLastCount = notesLastLastLastLastLastLastLast.toList.length\n\
    \        val notesLastLastLastLastLastLastLastLast = notesLastLastLastLastLastLastLastLast.last\n\
    \        val notesLastLastLastLastLastLastLastCount = notesLastLastLastLastLastLastLastLast.toList.length\n\
    \        val notesLastLastLastLastLastLastLastLast = notesLastLastLastLastLastLastLastLastLast.last\n\
    \        val notesLastLastLastLastLastLastLastLastCount = notesLastLastLastLastLastLastLastLastLast.toList.length\n\
    \        val notesLastLastLastLastLastLastLastLastLast = notesLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val notesLastLastLastLastLastLastLastLastLastCount = notesLastLastLastLastLastLastLastLastLastLastLastCount.toList.length\n\
    \        val notesLastLastLastLastLastLastLastLastLastLast = notesLastLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val notesLastLastLastLastLastLastLastLastLastLastCount = notesLastLastLastLastLast\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1w6mepap.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnotesLastLastLastLastLastLastLastCount\e\
    [0m = notesLastLastLastLastLastLastLastLast.toList.length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotesLastLastLastLastLastLastLastCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mnotesLastLastLastLastLastLastLastCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1w6mepap.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnotesLastLastLastLastLastLastLastLast\e[0m\
    \ = notesLastLastLastLastLastLastLastLastLast.last\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotesLastLastLastLastLastLastLastLast is already defined as\
    \ \e[33mvalue\e[0m \e[35mnotesLastLastLastLastLastLastLastLast\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1w6mepap.scala:17:39\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mnotesLastCount\e[0m = notesLast.toList.length\n\e[31m\e[31m   |\e[0m     \
    \                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value toList\
    \ is not a member of Int - did you mean notesLast.toInt?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1w6mepap.scala:18:38 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotesLastLast\e[0m = notesLast.last\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            value last is not a member of Int\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp1w6mepap.scala:30:52 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnotesLastLastLastLastLastLastLastLast\e\
    [0"
  stdout: ''
  timestamp: 1659799919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).filter(x\
    \ => x != \"O\" && x != \"|\" && x != \".\").map(x => x.toInt).toList\n      \
    \  val music_beats = music_list.map(x => x.toLong).sum\n        val music_notes\
    \ = music_list.count(x => x == \"O\" || x == \"|\" || x == \".\")\n        val\
    \ music_notes_beats = music_notes * music_beats\n        val music_notes_beats_sum\
    \ = music_notes_beats.toLong\n        val music_notes_beats_sum_divided = music_notes_beats_sum\
    \ / music_notes\n        val music_notes_beats_sum_divided_divided = music_notes_beats_sum_divided\
    \ / music_beats\n        val music_notes_beats_sum_divided_divided_divided = music_notes_beats_sum_divided_divided\
    \ / music_notes\n        val music_notes_beats_sum_divided_divided_divided_divided\
    \ = music_notes_beats_sum_divided_divided_divided / music_beats\n        val music_notes_beats_sum_divided_divided_divided_divided_divided\
    \ = music_notes_beats_sum_divided_divided_divided_divided / music_notes\n    \
    \    val music_notes_beats_sum_divided_divided_divided_divided_divided_divided\
    \ = music_notes_beats_sum_divided_divided_divided_divided_divided / music_beats\n\
    \        val music_notes_beats_sum_divided_divided_divided_divided_divided_divided\
    \ = music_notes_beats_sum_divided_divided_divided_divided_divided / music_notes\n\
    \        val music_notes_beats_sum_divided_divided_divided_divided_divided_divided_divided\
    \ = music_notes_beats_sum_divided_divided_divided_divided_divided_divided / music_beats\n\
    \        val music_notes_beats_sum_divided_divided_divided_divided_divided_divided_divided_divided\
    \ = music_notes_beats_sum_divided_divided_divided_divided_divided_divided_divided\
    \ / music_notes\n        val music_notes_beats_sum_divided_divided_divided_divided_divided_divided_divided_divided\
    \ = music_notes_beats_sum_divided_divided_divided_divided_divided_divided_divided\
    \ / \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpel3lxqwy.scala:28:179 --------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_beats_sum_divided_divided_divided_divided_divided_divided_divided_divided\e\
    [0m = music_notes_beats_sum_divided_divided_divided_divided_divided_divided_divided\
    \ / \n\e[31m\e[31m   |\e[0m                                                  \
    \                                                                            \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpel3lxqwy.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_beats_sum_divided_divided_divided_divided_divided_divided\e\
    [0m = music_notes_beats_sum_divided_divided_divided_divided_divided / music_notes\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_beats_sum_divided_divided_divided_divided_divided_divided\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_notes_beats_sum_divided_divided_divided_divided_divided_divided\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpel3lxqwy.scala:16:48\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmusic_notes\e[0m = music_list.count(\e[36mx\e[0m => x ==\
    \ \e[31m\"O\"\e[0m || x == \e[31m\"|\"\e[0m || x == \e[31m\".\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m         Values of types Int and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpel3lxqwy.scala:16:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes"
  stdout: ''
  timestamp: 1659799922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n\
    \        val music_list_size = music_list.size\n        val music_list_size_half\
    \ = music_list_size / 2\n        val music_list_size_quarter = music_list_size\
    \ / 4\n        val music_list_size_whole = music_list_size % 4\n        val music_list_size_whole_half\
    \ = music_list_size_whole / 2\n        val music_list_size_whole_quarter = music_list_size_whole\
    \ / 4\n        val music_list_size_whole_whole = music_list_size_whole % 4\n \
    \       val music_list_size_whole_whole_half = music_list_size_whole_whole / 2\n\
    \        val music_list_size_whole_whole_quarter = music_list_size_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole = music_list_size_whole_whole\
    \ % 4\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ % 4\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole\
    \ % 4\n        val music_list_size_whole_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole\
    \ % 4\n        val music_list_size_whole_whole_whole_whole_whole_whole_half =\
    \ music_list_size_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_whole_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt6_gc0mp.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpt6_gc0mp.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_half\
    \ = music_list_size / 2\n        val music_list_size_quarter = music_list_size\
    \ / 4\n        val music_list_size_whole = music_list_size.toLong\n        val\
    \ music_list_size_whole_half = music_list_size_whole / 2\n        val music_list_size_whole_quarter\
    \ = music_list_size_whole / 4\n        val music_list_size_whole_whole = music_list_size_whole\
    \ * 3\n        val music_list_size_whole_whole_half = music_list_size_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_quarter = music_list_size_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole = music_list_size_whole_whole\
    \ * 3\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ * 3\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole\
    \ * 3\n        val music_list_size_whole_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole_whole\
    \ * 3\n        val music_list_size_whole_whole_whole_whole_whole_whole_half =\
    \ music_list_size_whole_whole_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_who\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq4ru8asu.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpq4ru8asu.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_long\
    \ = music_list_size.map(_.toLong)\n        val music_list_size_long_reverse =\
    \ music_list_size_long.reverse\n        val music_list_size_long_reverse_sum =\
    \ music_list_size_long_reverse.sum\n        val music_list_size_long_reverse_sum_div2\
    \ = music_list_size_long_reverse_sum / 2\n        val music_list_size_long_reverse_sum_div4\
    \ = music_list_size_long_reverse_sum_div2 / 4\n        val music_list_size_long_reverse_sum_div8\
    \ = music_list_size_long_reverse_sum_div4 / 8\n        val music_list_size_long_reverse_sum_div16\
    \ = music_list_size_long_reverse_sum_div8 / 16\n        val music_list_size_long_reverse_sum_div32\
    \ = music_list_size_long_reverse_sum_div16 / 32\n        val music_list_size_long_reverse_sum_div64\
    \ = music_list_size_long_reverse_sum_div32 / 64\n        val music_list_size_long_reverse_sum_div128\
    \ = music_list_size_long_reverse_sum_div64 / 128\n        val music_list_size_long_reverse_sum_div256\
    \ = music_list_size_long_reverse_sum_div128 / 256\n        val music_list_size_long_reverse_sum_div512\
    \ = music_list_size_long_reverse_sum_div256 / 512\n        val music_list_size_long_reverse_sum_div1024\
    \ = music_list_size_long_reverse_sum_div512 / 1024\n        val music_list_size_long_reverse_sum_div2048\
    \ = music_list_size_long_reverse_sum_div1024 / 2048\n        val music_list_size_long_reverse_sum_div4096\
    \ = music_list_size_long_reverse_sum_div2048 / 4096\n        val music_list_size_long_reverse_sum_div8192\
    \ = music_list_size_long_reverse_sum_div4096 / 8192\n        val music_list_size_long_reverse_sum_div16384\
    \ = music_list_size_long_reverse_sum_div8192 / 16384\n        val music_list_size_long_reverse_sum_div32768\
    \ = music_list_size_long_reverse_sum_div16384 / 32768\n        val music_list_size_long_reverse_sum_div65536\
    \ = music_list_size_long_reverse_sum_div32768 / 65536\n        val music_list_size_long_reverse_sum_div131072\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpq1btidmd.scala:35:56 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_reverse_sum_div131072\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \        ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpq1btidmd.scala:16:51 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mmusic_list_size_long\e[0m = music_list_size.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq1btidmd.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \   val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                beat.toLong * rest.length\n            }).sum\n            note.toLong\
    \ * beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjadz4yn9.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.toLong\
    \ * rest.length\n\e[31m20 |\e[0m            }).sum\n\e[31m21 |\e[0m          \
    \  note.toLong * beats\n\e[31m22 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(music_string\
    \ => music_string.split(\"|\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\".\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => music_string.split(\"o\").map(music_string\
    \ => music_string.split(\"o\").map(music_string => musi\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplrrzxbg8.scala:15:4 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplrrzxbg8.scala:14:2049\
    \ ----------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmusic_list\e\
    [0m = music_string.split(\e[31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e\
    [0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\".\"\e[0m).map(\e\
    [36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e\
    [0m => music_string.split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e\
    [0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e[0m).map(\e\
    [36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e\
    [0m => music_string.split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e\
    [0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e[0m).map(\e\
    [36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e\
    [0m => music_string.split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e\
    [0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e[0m).map(\e\
    [36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e\
    [0m => music_string.split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e\
    [0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e[0m).map(\e\
    [36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e\
    [0m => music_string.split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e"
  stdout: ''
  timestamp: 1659799923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                val beat = music_string.charAt(0)\n\
    \                val rest = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                    val rest = music_string.charAt(0)\n              \
    \      val rest2 = music_string.substring(1).split(\"|\").map(music_string =>\
    \ {\n                        val rest2 = music_string.charAt(0)\n            \
    \            val rest3 = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                            val rest3 = music_string.charAt(0)\n     \
    \                       val rest4 = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                val rest4 = music_string.charAt(0)\n \
    \                               val rest5 = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                    val rest5 = music_string.charAt(0)\n\
    \                                    val rest6 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                        val rest6\
    \ = music_string.charAt(0)\n                                        val rest7\
    \ = music_string.substring(1).split(\"o\").map(music_string => {\n           \
    \                                 val rest7 = music_string.charAt(0)\n       \
    \                                     val rest8 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                val\
    \ rest8 = music_string.charAt(0)\n                                           \
    \     val rest9 = music_string.substring(1).split(\"o\").map(music_string => {\n\
    \                                                    val rest9 = music_string.charAt(0)\n\
    \                                                    val rest10 = music_string.substring(1).split(\"\
    |\").map(music_string => {\n                                                 \
    \       val rest10 = music_string.charAt(0)\n                                \
    \                        val rest11 = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                            val rest11\
    \ = music_string.charAt(0)\n                                                 \
    \           val rest12 = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                                                                val rest12\
    \ = music_string.charAt(0)\n                                                 \
    \               val rest13 = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                                                                    val\
    \ rest13 = music_string.charAt(0)\n                                          \
    \                          val rest14 = music_string.substring(1).split(\"|\"\
    ).map(music_string => {\n                                                    \
    \                    val rest14 = music_string.charAt(0)\n                   \
    \                                                     val rest15 = music_string.substring(1).split(\"\
    o\").map(music_string => {\n                                                 \
    \                           val rest15 = music_string.charAt(0)\n            \
    \                                                                val rest16 =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \                                                                   val rest16\
    \ = music_string.charAt(\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa0kwglvm.scala:49:113 --------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m                                                    \
    \                            \e[33mval\e[0m \e[36mrest16\e[0m = music_string.charAt(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa0kwglvm.scala:51:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m51 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpa0kwglvm.scala:60:0 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(_.toInt)\n            beats.map(beat\
    \ => if (note == \"o\") 4L else 2L).sum\n        }).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpwcrczdgb.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmpwcrczdgb.scala:18)\n\tat Problem$.main(tmpwcrczdgb.scala:21)\n\
    \tat Problem.main(tmpwcrczdgb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(x =>\
    \ x.toInt)\n        val music_list_size = music_list.size\n        val music_list_length\
    \ = music_list_size / 4\n        val music_list_remainder = music_list_size %\
    \ 4\n        val music_list_last = (music_list_size - music_list_remainder) /\
    \ 4\n        val music_list_last_remainder = music_list_size % 4\n        val\
    \ music_list_last_remainder_length = music_list_last_remainder / 4\n        val\
    \ music_list_last_remainder_remainder = music_list_last_remainder % 4\n      \
    \  val music_list_last_remainder_remainder_length = music_list_last_remainder_remainder\
    \ / 4\n        val music_list_last_remainder_remainder_remainder = music_list_last_remainder_remainder\
    \ % 4\n        val music_list_last_remainder_remainder_remainder_length = music_list_last_remainder_remainder_remainder\
    \ / 4\n        val music_list_last_remainder_remainder_remainder_remainder = music_list_last_remainder_remainder_remainder\
    \ % 4\n        val music_list_last_remainder_remainder_remainder_remainder_length\
    \ = music_list_last_remainder_remainder_remainder_remainder / 4\n        val music_list_last_remainder_remainder_remainder_remainder_remainder\
    \ = music_list_last_remainder_remainder_remainder_remainder % 4\n        val music_list_last_remainder_remainder_remainder_remainder_remainder_length\
    \ = music_list_last_remainder_remainder_remainder_remainder_remainder / 4\n  \
    \      val music_list_last_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = music_list_last_remainder_remainder_remainder_remainder_remainder % 4\n  \
    \      val music_list_last_remainder_remainder_remainder_remainder_remainder_remainder_length\
    \ = music_list_last_remainder_remainder_remainder_remainder_remainder_remainder\
    \ / 4\n        val music_list_last_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = music_list_last_remainder_remainder_remainder_remainder_remainder_remainder\
    \ % 4\n        val music_list_last_remainder_remainder_remainder_remainder_remainder_remainder_remainder_length\
    \ = music_list_last_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ / 4\n        val music_list_last_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = music_list_last_remainder_remainder_remainder_remainder_remainder_remainder_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdlyst07m.scala:33:110 -----------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_last_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\e\
    [0m = music_list_last_remainder_remainder_remainder_remainder_remainder_remainder_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: music_list_last_remainder_remainder_remainder_remainder_remainder_remainder_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdlyst07m.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_notes = music_string.split(\"\\\\|\")\n\
    \        val music_notes_length = music_notes.length\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toLong\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length.toLong\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toLong\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toLong\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length.toLong\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toLong\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toLong\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length.toLong\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toLong\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toLong\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length.toLong\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toLong\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toLong\n\
    \        val music_notes_length = music_notes_length.toInt\n        val music_notes_length\
    \ = music_notes_length.toLong\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length.toLong\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length.toLong\n\
    \        val music_notes_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwza1g0_h.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwza1g0_h.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_length\e[0m = music_notes_length.toInt\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmusic_notes_length is already defined as \e[33mvalue\e[0m \e[35mmusic_notes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwza1g0_h.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m = music_notes_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwza1g0_h.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwza1g0_h.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that ov"
  stdout: ''
  timestamp: 1659799921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \")\n     \
    \   val music_list_size = music_list.size\n        val music_list_size_2 = music_list_size\
    \ / 2\n        val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 /\
    \ 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_size_33 = musi\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv5rbcrv2.scala:47:33 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_33\e[0m\
    \ = musi\n\e[31m\e[31m   |\e[0m                                 ^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Not found: musi\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv5rbcrv2.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \")\n     \
    \   val music_list_size = music_list.size\n        val music_list_size_2 = music_list_size\
    \ / 2\n        val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4\
    \ = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 /\
    \ 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7\
    \ = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 /\
    \ 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10\
    \ = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10\
    \ / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16\
    \ = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16\
    \ / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19\
    \ = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19\
    \ / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22\
    \ = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22\
    \ / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28\
    \ = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28\
    \ / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31\
    \ = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31\
    \ / 2\n        val music_list_size_33 = musi\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv5rbcrv2.scala:47:33 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_33\e[0m\
    \ = musi\n\e[31m\e[31m   |\e[0m                                 ^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Not found: musi\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv5rbcrv2.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(_.toInt).sum\n            beats.toLong\n\
    \        }).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnd_70zrz.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[Long]\n\e[31m\
    \   |\e[0m        Required: \e[1m\e[32mList\e[0m[Long]\n\e[31m15 |\e[0m      \
    \      \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e\
    [31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m1\e[0m).split(\e[31m\"|\"\e[0m).map(_.toInt).sum\n\e[31m17 |\e[0m        \
    \    beats.toLong\n\e[31m18 |\e[0m        }).sorted\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length\
    \ != 0).map(music_note => {\n            val note = music_note.charAt(0)\n   \
    \         val beats = music_note.substring(1).split(\"|\").map(_.toInt).sum\n\
    \            beats\n        }).toList\n        music_list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9nhtwnxs.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        music_list\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (music_list\
    \ : List[Int])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(rest => rest.split(\"o\").length.toLong)\n\
    \            beats.sum\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpi82spo5s.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmpi82spo5s.scala:19)\n\tat Problem$.main(tmpi82spo5s.scala:22)\n\
    \tat Problem.main(tmpi82spo5s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(x\
    \ => x != \"O\" && x != \"|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_beats = music_list.map(music_list_size % 4).sum\n    \
    \    val music_list_beats_remainder = music_list_beats % 4\n        val music_list_beats_remainder_size\
    \ = music_list_beats_remainder / 4\n        val music_list_beats_remainder_remainder\
    \ = music_list_beats_remainder % 4\n        val music_list_beats_remainder_remainder_size\
    \ = music_list_beats_remainder_remainder / 4\n        val music_list_beats_remainder_remainder_remainder\
    \ = music_list_beats_remainder_remainder % 4\n        val music_list_beats_remainder_remainder_remainder_size\
    \ = music_list_beats_remainder_remainder_remainder / 4\n        val music_list_beats_remainder_remainder_remainder_remainder\
    \ = music_list_beats_remainder_remainder_remainder % 4\n        val music_list_beats_remainder_remainder_remainder_remainder_size\
    \ = music_list_beats_remainder_remainder_remainder_remainder / 4\n        val\
    \ music_list_beats_remainder_remainder_remainder_remainder_remainder = music_list_beats_remainder_remainder_remainder_remainder_remainder\
    \ % 4\n        val music_list_beats_remainder_remainder_remainder_remainder_remainder_size\
    \ = music_list_beats_remainder_remainder_remainder_remainder_remainder / 4\n \
    \       val music_list_beats_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = music_list_beats_remainder_remainder_remainder_remainder_remainder_remainder\
    \ % 4\n        val music_list_beats_remainder_remainder_remainder_remainder_remainder_remainder_size\
    \ = music_list_beats_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ / 4\n        val music_list_beats_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = music_list_beats_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ % 4\n        val music_list_beats_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size\
    \ = music_list_beats_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ / 4\n        val music_list_beats_remainder_remainder_remainder_remain\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp345eswx2.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp345eswx2.scala:16:46 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \        \e[33mval\e[0m \e[36mmusic_list_beats\e[0m = music_list.map(music_list_size\
    \ % \e[31m4\e[0m).sum\n\e[31m\e[31m   |\e[0m                                 \
    \             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                        Found:    Int\n\e[31m   |\e[0m                      \
    \                        Required: String => Any\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp345eswx2.scala:16:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats\e[0m =\
    \ music_list.map(music_list_size % \e[31m4\e[0m).sum\n\e[31m\e[31m   |\e[0m  \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp345eswx2.scala:25:81\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_beats_remainder_remainder_remainder_remainder_remainder\e[0m\
    \ = music_list_beats_remainder_remainder_remainder_remainder_remainder % \e[31m4\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_remainder_remainder_remainder_remainder_remainder\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp345eswx2.scala:27:91\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_beats_remainder_remainder_remainder_remainder_remainder_remainder\e\
    [0m = mu"
  stdout: ''
  timestamp: 1659799924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(x => x.toLong)\n\
    \            beats.map(x => if (x == 4) 4l else 2l)\n        }).flatten.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpd4r02dbl.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmpd4r02dbl.scala:19)\n\tat Problem$.main(tmpd4r02dbl.scala:22)\n\
    \tat Problem.main(tmpd4r02dbl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val music_note = music_string.substring(0, 1)\n            val beats\
    \ = music_string.substring(1).split(\"|\").map(music_string => {\n           \
    \     val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                beat.asInstanceOf[Int] * rest.asInstanceOf[Int]\n           \
    \ }).sum\n            music_note -> beats\n        }).toList.sortBy(music_note\
    \ => music_note._2).reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpanlojszl.scala:22:54\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m            \e\
    [33mval\e[0m \e[36mmusic_note\e[0m = music_string.substring(\e[31m0\e[0m, \e[31m1\e\
    [0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m17\
    \ |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.asInstanceOf[\e\
    [35mInt\e[0m] * rest.asInstanceOf[\e[35mInt\e[0m]\n\e[31m20 |\e[0m           \
    \ }).sum\n\e[31m21 |\e[0m            music_note -> beats\n\e[31m22 |\e[0m    \
    \    }).toList.sortBy(\e[36mmusic_note\e[0m => music_note._2).reverse\n\e[31m\e\
    [31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[(String, Int)]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_beats =\
    \ music_list.map(music_string => music_string.split(\"\\\\o\").length)\n     \
    \   val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_size\
    \ = music_list_beats.size\n        val music_list_beats_average = music_list_beats_sum\
    \ / music_list_beats_size\n        val music_list_beats_average_size = music_list_beats_average.size\n\
    \        val music_list_beats_average_average = music_list_beats_average.sum /\
    \ music_list_beats_average_size\n        val music_list_beats_average_average_size\
    \ = music_list_beats_average_average.size\n        val music_list_beats_average_average_average\
    \ = music_list_beats_average_average.sum / music_list_beats_average_average_size\n\
    \        val music_list_beats_average_average_average_size = music_list_beats_average_average_average.size\n\
    \        val music_list_beats_average_average_average_average = music_list_beats_average_average_average.sum\
    \ / music_list_beats_average_average_average_size\n        val music_list_beats_average_average_average_average_size\
    \ = music_list_beats_average_average_average_average.size\n        val music_list_beats_average_average_average_average_average\
    \ = music_list_beats_average_average_average_average_average.sum / music_list_beats_average_average_average_average_size\n\
    \        val music_list_beats_average_average_average_average_average = music_list_beats_average_average_average_average_average.sum\
    \ / music_list_beats_average_average_average_average_size\n        val music_list_beats_average_average_average_average_average_size\
    \ = music_list_beats_average_average_average_average_average.size\n        val\
    \ music_list_beats_average_average_average_average_average_average = music_list_beats_average_average_average_average_average.sum\
    \ / music_list_beats_average_average_average_average_size\n        val music_list_beats_average_average_average_average_average_average_size\
    \ = music_list_beats_average_average_average_average_average.size\n        val\
    \ music_list_beats_average_average_average_average_average_average_average = music_list_beats_average_average_average_average_average.sum\
    \ / music_list_beats_average_average_average_average_size\n        val music_list_beats_average_average_average_average_average_average_size\
    \ = music_list_beats_average_average_average_average_average.size\n        val\
    \ music_list_beats_average_average_average_average_average_average_average\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsw3zukbf.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsw3zukbf.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_beats_average_average_average_average_average\e[0m = music_list_beats_average_average_average_average_average.sum\
    \ / music_list_beats_average_average_average_average_size\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_average_average_average_average_average is\
    \ already defined as \e[33mvalue\e[0m \e[35mmusic_list_beats_average_average_average_average_average\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsw3zukbf.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_average_average_average_average_average_average_size\e\
    [0m = music_list_beats_average_average_average_average_average.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_average_average_average_average_average_average_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_beats_average_average_average_average_average_average_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpsw3zukbf.scala:20:69 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_average_size\e[0m\
    \ = music_list_beats_average.size\n\e[31m\e[31m   |\e[0m                     \
    \                       ^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_2 =\
    \ music_list_size / 2\n        val music_list_size_3 = music_list_size_2 / 2\n\
    \        val music_list_size_4 = music_list_size_3 / 2\n        val music_list_size_5\
    \ = music_list_size_4 / 2\n        val music_list_size_6 = music_list_size_5 /\
    \ 2\n        val music_list_size_7 = music_list_size_6 / 2\n        val music_list_size_8\
    \ = music_list_size_7 / 2\n        val music_list_size_9 = music_list_size_8 /\
    \ 2\n        val music_list_size_10 = music_list_size_9 / 2\n        val music_list_size_11\
    \ = music_list_size_10 / 2\n        val music_list_size_12 = music_list_size_11\
    \ / 2\n        val music_list_size_13 = music_list_size_12 / 2\n        val music_list_size_14\
    \ = music_list_size_13 / 2\n        val music_list_size_15 = music_list_size_14\
    \ / 2\n        val music_list_size_16 = music_list_size_15 / 2\n        val music_list_size_17\
    \ = music_list_size_16 / 2\n        val music_list_size_18 = music_list_size_17\
    \ / 2\n        val music_list_size_19 = music_list_size_18 / 2\n        val music_list_size_20\
    \ = music_list_size_19 / 2\n        val music_list_size_21 = music_list_size_20\
    \ / 2\n        val music_list_size_22 = music_list_size_21 / 2\n        val music_list_size_23\
    \ = music_list_size_22 / 2\n        val music_list_size_24 = music_list_size_23\
    \ / 2\n        val music_list_size_25 = music_list_size_24 / 2\n        val music_list_size_26\
    \ = music_list_size_25 / 2\n        val music_list_size_27 = music_list_size_26\
    \ / 2\n        val music_list_size_28 = music_list_size_27 / 2\n        val music_list_size_29\
    \ = music_list_size_28 / 2\n        val music_list_size_30 = music_list_size_29\
    \ / 2\n        val music_list_size_31 = music_list_size_30 / 2\n        val music_list_size_32\
    \ = music_list_size_31 / 2\n        val music_list_size_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwxdjovpx.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwxdjovpx.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_size = music_list.size\n        val music_list_size_str\
    \ = music_list_size.toString\n        val music_list_size_long = music_list_size_str.parseLong\n\
    \        val music_list_size_long2 = music_list_size_long.toLong\n        val\
    \ music_list_size_long3 = music_list_size_long2.toLong\n        val music_list_size_long4\
    \ = music_list_size_long3.toLong\n        val music_list_size_long5 = music_list_size_long4.toLong\n\
    \        val music_list_size_long6 = music_list_size_long5.toLong\n        val\
    \ music_list_size_long7 = music_list_size_long6.toLong\n        val music_list_size_long8\
    \ = music_list_size_long7.toLong\n        val music_list_size_long9 = music_list_size_long8.toLong\n\
    \        val music_list_size_long10 = music_list_size_long9.toLong\n        val\
    \ music_list_size_long11 = music_list_size_long10.toLong\n        val music_list_size_long12\
    \ = music_list_size_long11.toLong\n        val music_list_size_long13 = music_list_size_long12.toLong\n\
    \        val music_list_size_long14 = music_list_size_long13.toLong\n        val\
    \ music_list_size_long15 = music_list_size_long14.toLong\n        val music_list_size_long16\
    \ = music_list_size_long15.toLong\n        val music_list_size_long17 = music_list_size_long16.toLong\n\
    \        val music_list_size_long18 = music_list_size_long17.toLong\n        val\
    \ music_list_size_long19 = music_list_size_long18.toLong\n        val music_list_size_long20\
    \ = music_list_size_long19.toLong\n        val music_list_size_long21 = music_list_size_long20.toLong\n\
    \        val music_list_size_long22 = music_list_size_long21.toLong\n        val\
    \ music_list_size_long23 = music_list_size_long22.toLong\n        val music_list_size_long24\
    \ = music_list_size_long23.toLong\n        val music_list_size_long25 = music_list_size_long24.toLong\n\
    \        val music_list_size_long26 = music_list_size_long25.toLong\n        val\
    \ music_list_size_long27 = music_list_size_long26.toLong\n        val musi\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwfesn04u.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwfesn04u.scala:17:55\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_long\e[0m = music_list_size_str.parseLong\n\e[31m\e[31m  \
    \ |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value parseLong is not a member\
    \ of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwfesn04u.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"o\").map(music_string => {\n\
    \                val note = music_string.trim\n                val beats = note.split(\"\
    |\").map(music_string => {\n                    val beat = music_string.trim\n\
    \                    beat.split(\".\").map(music_string => {\n               \
    \         val beat = music_string.trim\n                        beat.split(\"\
    o\").map(music_string => {\n                            val beat = music_string.trim\n\
    \                            beat.split(\".\").map(music_string => {\n       \
    \                         val beat = music_string.trim\n                     \
    \           beat.split(\"o\").map(music_string => {\n                        \
    \            val beat = music_string.trim\n                                  \
    \  beat.split(\".\").map(music_string => {\n                                 \
    \       val beat = music_string.trim\n                                       \
    \ beat.split(\"o\").map(music_string => {\n                                  \
    \          val beat = music_string.trim\n                                    \
    \        beat.split(\".\").map(music_string => {\n                           \
    \                     val beat = music_string.trim\n                         \
    \                       beat.split(\"o\").map(music_string => {\n            \
    \                                        val beat = music_string.trim\n      \
    \                                              beat.split(\".\").map(music_string\
    \ => {\n                                                        val beat = music_string.trim\n\
    \                                                        beat.split(\"o\").map(music_string\
    \ => {\n                                                            val beat =\
    \ music_string.trim\n                                                        \
    \    beat.split(\".\").map(music_string => {\n                               \
    \                                 val beat = music_string.trim\n             \
    \                                                   beat.split(\"o\").map(music_string\
    \ => {\n                                                                    val\
    \ beat = music_string.trim\n                                                 \
    \                   beat.split(\".\").map(music_string => {\n                \
    \                                                        val beat = music_string.trim\n\
    \                                                                        beat.split(\"\
    o\").map(music_string => {\n                                                 \
    \                           val beat = music_string.trim\n                   \
    \                                                         beat.split(\".\").map(music_string\
    \ => {\n                                                                     \
    \           val beat = music_string.trim\n                                   \
    \                                             beat.split(\"o\").map(music_string\
    \ => {\n                                                                     \
    \               val beat = music_string.trim\n                               \
    \                                                     beat.split(\".\").map(music_string\
    \ => {\n                                                                     \
    \                   val beat = music_string.trim\n                           \
    \                                                             beat.split(\"o\"\
    ).map(music_string => {\n                                                    \
    \                                        val beat = music_string.trim\n      \
    \                                                                            \
    \          beat.split(\".\").map(music_string => {\n                         \
    \                                                                       val beat\
    \ = music_string.trim\n                                                      \
    \                                          beat.split(\"o\").map(music_string\
    \ => {\n                                                                     \
    \                               val beat = music_string.trim\n               \
    \                                                                            \
    \         beat.split(\".\").map(music_string => {\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzvekul4w.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpzvekul4w.scala:70:0 ----------------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_length = notes.length\n        val notes_beats = notes.map(_.length.toInt)\n\
    \        val notes_beats_length = notes_beats.sum\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx3d6h9ex.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx3d6h9ex.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx3d6h9ex.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx3d6h9ex.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx3d6h9ex.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m  "
  stdout: ''
  timestamp: 1659799925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string =>\
    \ {\n            val notes = music_string.split(\"\\\\ \").map(music_string =>\
    \ {\n                val note = music_string.charAt(0)\n                val beats\
    \ = music_string.substring(1).toInt\n                note.toLong * beats\n   \
    \         })\n            notes.sum\n        }).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.$anonfun$1(tmp9n1kljh1.scala:16)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmp9n1kljh1.scala:19)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmp9n1kljh1.scala:21)\n\tat Problem$.main(tmp9n1kljh1.scala:24)\n\
    \tat Problem.main(tmp9n1kljh1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val music_notes = music_string.split(\"|\").map(music_note => {\n\
    \                val note = music_note.charAt(0).toLowerCase\n               \
    \ val beats = music_note.substring(1).toInt\n                beats * note\n  \
    \          }).filter(music_note => music_note > 0)\n            music_notes.sum\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkn4cpek7.scala:16:48 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e[0m = music_note.charAt(\e\
    [31m0\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmpkn4cpek7.scala:19:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            }).filter(music_note => music_note > \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m             \
    \ No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m              where:\
    \    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpkn4cpek7.scala:21:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ }).toList\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No\
    \ ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          where: \
    \   B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659799926
