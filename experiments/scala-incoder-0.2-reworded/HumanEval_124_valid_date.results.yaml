language: scala
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val daysInMonth = monthArray.zip(dayArray).map(x\
    \ => x._2)\n        val daysInMonth2 = monthArray.zip(dayArray).map(x => x._2)\n\
    \        val daysInMonth3 = monthArray.zip(dayArray).map(x => x._2)\n        val\
    \ daysInMonth4 = monthArray.zip(dayArray).map(x => x._2)\n        val daysInMonth5\
    \ = monthArray.zip(dayArray).map(x => x._2)\n        val daysInMonth6 = monthArray.zip(dayArray).map(x\
    \ => x._2)\n        val daysInMonth7 = monthArray.zip(dayArray).map(x => x._2)\n\
    \        val daysInMonth8 = monthArray.zip(dayArray).map(x => x._2)\n        val\
    \ daysInMonth9 = monthArray.zip(dayArray).map(x => x._2)\n        val daysInMonth10\
    \ = monthArray.zip(dayArray).map(x => x._2)\n        val daysInMonth11 = monthArray.zip(dayArray).map(x\
    \ => x._2)\n        val daysInMonth12 = monthArray.zip(dayArray).map(x => x._2)\n\
    \        val daysInMonth = daysInMonth.filter(x => x > 0 && x < 31)\n        val\
    \ daysInMonth2 = daysInMonth2.filter(x => x > 0 && x < 30)\n        val daysInMonth3\
    \ = daysInMonth3.filter(x => x > 0 && x < 29)\n        val daysInMonth4 = daysInMonth4.filter(x\
    \ => x > 0 && x < 28)\n        val daysInMonth5 = daysInMonth5.filter(x => x >\
    \ 0 && x < 31)\n        val daysInMonth6 = daysInMonth6.filter(x => x > 0 && x\
    \ < 30)\n        val daysInMonth7 = daysInMonth7.filter(x => x > 0 && x < 31)\n\
    \        val daysInMonth8 = daysInMonth8.filter(x => x > 0 && x < 30)\n      \
    \  val daysInMonth9 = daysInMonth9.filter(x => x > 0 && x < 31)\n        val daysInMonth10\
    \ = daysInMonth10.filter(x => x > 0 && x < 30)\n        val daysInMonth11 = daysInMonth11.filter(x\
    \ => x > 0 && x < 31)\n        val daysInMonth12 = daysInMonth12.filter(x => x\
    \ > 0 && x < 30)\n        val daysInMonth = daysInMonth.filter(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpj065af6h.scala:53:45 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth.filter(\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj065af6h.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = daysInMonth.filter(\e[36mx\e[0m => x > \e[31m0\e[0m\
    \ && x < \e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj065af6h.scala:42:12 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth2\e[0m = daysInMonth2.filter(\e\
    [36mx\e[0m => x > \e[31m0\e[0m && x < \e[31m30\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdaysInMonth2 is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj065af6h.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth3\e[0m = daysInMonth3.filter(\e\
    [36mx\e[0m => x > \e[31m0\e[0m && x < \e[31m29\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdaysInMonth3 is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj065af6h.scala:44:12 ---"
  stdout: ''
  timestamp: 1659800508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        dateObj != null\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpta3sxr0_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = List(1, 3, 5, 7,\
    \ 8, 10, 12)\n        val daysArray = List(1, 30, 29)\n        val monthArray2\
    \ = List(1, 4, 6, 9, 11)\n        val daysArray2 = List(1, 29)\n        val monthArray3\
    \ = List(1, 12)\n        val daysArray3 = List(1)\n        val monthArray4 = List(1,\
    \ 0)\n        val daysArray4 = List(1)\n        val monthArray5 = List(1, 0)\n\
    \        val daysArray5 = List(1)\n        val monthArray6 = List(1, 0)\n    \
    \    val daysArray6 = List(1)\n        val monthArray7 = List(1, 0)\n        val\
    \ daysArray7 = List(1)\n        val monthArray8 = List(1, 0)\n        val daysArray8\
    \ = List(1)\n        val monthArray9 = List(1, 0)\n        val daysArray9 = List(1)\n\
    \        val monthArray10 = List(1, 0)\n        val daysArray10 = List(1)\n  \
    \      val monthArray11 = List(1, 0)\n        val daysArray11 = List(1)\n    \
    \    val monthArray12 = List(1, 0)\n        val daysArray12 = List(1)\n      \
    \  val monthArray13 = List(1, 0)\n        val daysArray13 = List(1)\n        val\
    \ monthArray14 = List(1, 0)\n        val daysArray14 = List(1)\n        val monthArray15\
    \ = List(1, 0)\n        val daysArray15 = List(1)\n        val monthArray16 =\
    \ List(1, 0)\n        val daysArray16 = List(1)\n        val monthArray17 = List(1,\
    \ 0)\n        val daysArray17 = List(1)\n        val monthArray18 = List(1, 0)\n\
    \        val daysArray18 = List(1)\n        val monthArray19 = List(1, 0)\n  \
    \      val daysArray19 = List(1)\n        val monthArray20 = List(1, 0)\n    \
    \    val daysArray20 = List(1)\n        val monthArray21 = List(1, 0)\n      \
    \  val daysArray21 = List(1)\n        val monthArray22 = List(1, 0)\n        val\
    \ daysArray22 = List(1)\n        val monthArray23 = List(1, 0)\n        val daysArray23\
    \ = List(1)\n        val monthArray24 = List(1, 0)\n        val daysArray24 =\
    \ List(1)\n        val monthArray25 = List(1, 0)\n        val daysArray25 = List(1)\n\
    \        val monthArray26 = List(1, 0)\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp3y5y_5bp.scala:77:11 ---------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3y5y_5bp.scala:78:5 ---------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        dateObject != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3z0u6f1m.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getTime\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_rn7e9l.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getTime\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_rn7e9l.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = List(\"01\", \"\
    03\", \"05\", \"07\", \"08\", \"10\", \"12\")\n        val daysArray = List(\"\
    01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"29\")\n        val yearArray\
    \ = List(\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\"\
    , \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2040\", \"2041\"\
    , \"2042\", \"2043\", \"2044\", \"2045\", \"2046\", \"2047\", \"2048\", \"2049\"\
    , \"2050\", \"2051\", \"2052\", \"2053\", \"2054\", \"2055\", \"2056\", \"2057\"\
    , \"2058\", \"2059\", \"2060\", \"2061\", \"2062\", \"2063\", \"2064\", \"2065\"\
    , \"2066\", \"2067\", \"2068\", \"2069\", \"2070\", \"2071\", \"2072\", \"2073\"\
    , \"2074\", \"2075\", \"2076\", \"2077\", \"2078\", \"2079\", \"2080\", \"2081\"\
    , \"2082\", \"2083\", \"2084\", \"2085\", \"2086\", \"2087\", \"2088\", \"2089\"\
    , \"2090\", \"2091\", \"2092\", \"2093\", \"2094\", \"2095\", \"2096\", \"2097\"\
    , \"2098\", \"2099\", \"2100\", \"2101\", \"2102\", \"2103\", \"2104\", \"2105\"\
    , \"2106\", \"2107\", \"2108\", \"2109\", \"2110\", \"2111\", \"2112\", \"2113\"\
    , \"2114\", \"2115\", \"2116\", \"2117\", \"2118\", \"2119\", \"2120\", \"2121\"\
    , \"2122\", \"2123\", \"2124\", \"2125\", \"2126\", \"2127\", \"2128\", \"2129\"\
    , \"2130\", \"2131\", \"2132\", \"2133\", \"2134\", \"2135\", \"2136\", \"2137\"\
    , \"2138\", \"2139\", \"2140\", \"2141\", \"2142\", \"2143\", \"2144\", \"2145\"\
    , \"2146\", \"2147\", \"2148\", \"2149\", \"2150\", \"2151\", \"2152\", \"2153\"\
    , \"2154\", \"2155\", \"2156\", \"2157\", \"2158\", \"2159\", \"2160\", \"2161\"\
    , \"2162\", \"2163\", \"2164\", \"2165\", \"2166\", \"2167\", \"2168\", \"2169\"\
    , \"2170\", \"2171\", \"2172\", \"2173\", \"2174\", \"2175\", \"2176\", \"2177\"\
    , \"2178\", \"2179\", \"2180\", \"2181\", \"2182\", \"2183\", \"2184\", \"\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2srylh_w.scala:28:1293 ---------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36myearArray\e[0m = List(\e\
    [31m\"2000\"\e[0m, \e[31m\"2001\"\e[0m, \e[31m\"2002\"\e[0m, \e[31m\"2003\"\e\
    [0m, \e[31m\"2004\"\e[0m, \e[31m\"2005\"\e[0m, \e[31m\"2006\"\e[0m, \e[31m\"2007\"\
    \e[0m, \e[31m\"2008\"\e[0m, \e[31m\"2009\"\e[0m, \e[31m\"2010\"\e[0m, \e[31m\"\
    2011\"\e[0m, \e[31m\"2012\"\e[0m, \e[31m\"2040\"\e[0m, \e[31m\"2041\"\e[0m, \e\
    [31m\"2042\"\e[0m, \e[31m\"2043\"\e[0m, \e[31m\"2044\"\e[0m, \e[31m\"2045\"\e\
    [0m, \e[31m\"2046\"\e[0m, \e[31m\"2047\"\e[0m, \e[31m\"2048\"\e[0m, \e[31m\"2049\"\
    \e[0m, \e[31m\"2050\"\e[0m, \e[31m\"2051\"\e[0m, \e[31m\"2052\"\e[0m, \e[31m\"\
    2053\"\e[0m, \e[31m\"2054\"\e[0m, \e[31m\"2055\"\e[0m, \e[31m\"2056\"\e[0m, \e\
    [31m\"2057\"\e[0m, \e[31m\"2058\"\e[0m, \e[31m\"2059\"\e[0m, \e[31m\"2060\"\e\
    [0m, \e[31m\"2061\"\e[0m, \e[31m\"2062\"\e[0m, \e[31m\"2063\"\e[0m, \e[31m\"2064\"\
    \e[0m, \e[31m\"2065\"\e[0m, \e[31m\"2066\"\e[0m, \e[31m\"2067\"\e[0m, \e[31m\"\
    2068\"\e[0m, \e[31m\"2069\"\e[0m, \e[31m\"2070\"\e[0m, \e[31m\"2071\"\e[0m, \e\
    [31m\"2072\"\e[0m, \e[31m\"2073\"\e[0m, \e[31m\"2074\"\e[0m, \e[31m\"2075\"\e\
    [0m, \e[31m\"2076\"\e[0m, \e[31m\"2077\"\e[0m, \e[31m\"2078\"\e[0m, \e[31m\"2079\"\
    \e[0m, \e[31m\"2080\"\e[0m, \e[31m\"2081\"\e[0m, \e[31m\"2082\"\e[0m, \e[31m\"\
    2083\"\e[0m, \e[31m\"2084\"\e[0m, \e[31m\"2085\"\e[0m, \e[31m\"2086\"\e[0m, \e\
    [31m\"2087\"\e[0m, \e[31m\"2088\"\e[0m, \e[31m\"2089\"\e[0m, \e[31m\"2090\"\e\
    [0m, \e[31m\"2091\"\e[0m, \e[31m\"2092\"\e[0m, \e[31m\"2093\"\e[0m, \e[31m\"2094\"\
    \e[0m, \e[31m\"2095\"\e[0m, \e[31m\"2096\"\e[0m, \e[31m\"2097\"\e[0m, \e[31m\"\
    2098\"\e[0m, \e[31m\"2099\"\e[0m, \e[31m\"2100\"\e[0m, \e[31m\"2101\"\e[0m, \e\
    [31m\"2102\"\e[0m, \e[31m\"2103\"\e[0m, \e[31m\"2104\"\e[0m, \e[31m\"2105\"\e\
    [0m, \e[31m\"2106\"\e[0m, \e[31m\"2107\"\e[0m, \e[31m\"2108\"\e[0m, \e[31m\"2109\"\
    \e[0m, \e[31m\"2110\"\e[0m, \e[31m\"2111\"\e[0m, \e[31m\"2112\"\e[0m, \e[31m\"\
    2113\"\e[0m, \e[31m\"2114\"\e[0m, \e[31m\"2115\"\e[0m, \e[31m\"2116\"\e[0m, \e\
    [31m\"2117\"\e[0m, \e[31m\"2118\"\e[0m, \e[31m\"2119\"\e[0m, \e[31m\"2120\"\e\
    [0m, \e[31m\"2121\"\e[0m, \e[31m\"2122\"\e[0m, \e[31m\"2123\"\e[0m, \e[31m\"2124\"\
    \e[0m, \e[31m\"2125\"\e[0m, \e[31m\"2126\"\e[0m, \e[31m\"2127\"\e[0m, \e[31m\"\
    2128\"\e[0m, \e[31m\"2129\"\e[0m, \e[31m\"2130\"\e[0m, \e[31m\"2131\"\e[0m, \e\
    [31m\"2132\"\e[0m, \e[31m\"2133\"\e[0m, \e[31m\"2134\"\e[0m, \e[31m\"2135\"\e\
    [0m, \e[31m\"2136\"\e[0m, \e[31m\"2137\"\e[0m, \e["
  stdout: ''
  timestamp: 1659800509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n   \
    \     val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12,\
    \ 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n \
    \       val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n\
    \        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(3\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0z75nhdm.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0z75nhdm.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = List(\e[31m31\e[0m, \e[31m28\e[0m, \e[31m31\e[0m, \e\
    [31m30\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m, \e[31m31\e[0m, \e[31m30\e\
    [0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0z75nhdm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = List(\e[31m12\e\
    [0m, \e[31m1\e[0m, \e[31m4\e[0m, \e[31m6\e[0m, \e[31m9\e[0m, \e[31m11\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0z75nhdm.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = List(\e[31m31\e[0m,\
    \ \e[31m28\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e\
    [31m31\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0z75nhdm.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28"
  stdout: ''
  timestamp: 1659800508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val monthArray = dateArray(0).toString.toInt\n        val dayArray = dateArray(1).toString.toInt\n\
    \        val year = dateArray(2).toString.toInt\n        val monthDays = monthArray*31+dayArray\n\
    \        val monthMaxDays = monthArray*30+dayArray\n        val monthMinDays =\
    \ monthArray*29+dayArray\n        monthArray.toInt > 0 && monthArray.toInt < 13\
    \ && monthDays > 0 && monthDays < 31 &&\n        monthMaxDays > 0 && monthMaxDays\
    \ < 30 && monthMinDays > 0 && monthMinDays < 29\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppqhup3qb.scala:33)\n\tat Problem.main(tmppqhup3qb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInYear\
    \ = Array(2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,\
    \ 2012)\n        val months = dateObj.getMonth\n        val days = dateObj.getDay\n\
    \        val years = dateObj.getYear\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val yearsInYear = Array(2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\
    \ 2008, 2009, 2010, 2011, 2012)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val months = dateObj.getMonth\n        val days = dateObj.getDay\n  \
    \      val years = dateObj.getYear\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val yearsInYear = Array(2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\
    \ 2008, 2009, 2010, 2011, 2012)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val months = dateObj.getMonth\n        val days = dateObj.getDay\n  \
    \      val years = dateObj.getYear\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val yearsInYear = Array(2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\
    \ 2008, 2009, 2010, 2011, 2012)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val months = dateObj.getMonth\n        val days = dateObj.getDay\n  \
    \      val years = dateObj.getYear\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val yearsInYear = Array(2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\
    \ 2008, 2009, 2010, 2011, 2012)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val months = dateObj.getMonth\n        val days = dateObj.getDay\n  \
    \      val years = dateObj.getYear\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuu6by7dj.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuu6by7dj.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthsInYear\e[0m = Array(\e[31m1\e[0m,\e[31m2\e[0m,\e[31m3\e[0m,\e[31m4\e\
    [0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e[0m,\e[31m8\e[0m,\e[31m9\e[0m,\e[31m10\e\
    [0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuu6by7dj.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36myearsInYear\e[0m = Array(\e[31m2000\e\
    [0m, \e[31m2001\e[0m, \e[31m2002\e[0m, \e[31m2003\e[0m, \e[31m2004\e[0m, \e[31m2005\e\
    [0m, \e[31m2006\e[0m, \e[31m2007\e[0m, \e[31m2008\e[0m, \e[31m2009\e[0m, \e[31m2010\e\
    [0m, \e[31m2011\e[0m, \e[31m2012\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0myearsInYear is already defined as \e[33mvalue\e[0m \e[35myearsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuu6by7dj.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Array(\e[31m31\e\
    [0m,\e[31m28\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definition"
  stdout: ''
  timestamp: 1659800508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthValid = monthArray.contains(month)\n        val dayValid = dayArray.contains(day)\n\
    \        val yearValid = yearArray.contains(year)\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphof4i18g.scala:36)\n\tat Problem.main(tmphof4i18g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        if(month < 1 || month > 12){\n    \
    \        return false\n        }\n        if(day < 1 || day > 31){\n         \
    \   return false\n        }\n        if(month == 2 && day > 29){\n           \
    \ return false\n        }\n        if(month == 2 && day < 1){\n            return\
    \ false\n        }\n        if(month == 2 && day > 30){\n            return false\n\
    \        }\n        if(month == 2 && day > 31){\n            return false\n  \
    \      }\n        if(month == 2 && day > 31){\n            return false\n    \
    \    }\n        if(month == 2 && day > 31){\n            return false\n      \
    \  }\n        if(month == 2 && day > 31){\n            return false\n        }\n\
    \        if(month == 2 && day > 31){\n            return false\n        }\n  \
    \      if(month == 2 && day > 31){\n            return false\n        }\n    \
    \    if(month == 2 && day > 31){\n            return false\n        }\n      \
    \  if(month == 2 && day > 31){\n            return false\n        }\n        if(month\
    \ == 2 && day > 31){\n            return false\n        }\n        if(month ==\
    \ 2 && day > 31){\n            return false\n        }\n        if(month == 2\
    \ && day > 31){\n            return false\n        }\n        if(month == 2 &&\
    \ day > 31){\n            return false\n        }\n        if(month == 2 && day\
    \ > 31){\n            return false\n        }\n        if(month == 2 && day >\
    \ 31){\n            return false\n        }\n        if(month == 2 && day > 31){\n\
    \            return false\n        }\n        if(month == 2 && day > 31){\n  \
    \          return false\n        }\n        if(month == 2 && day > 31){\n    \
    \        return false\n        }\n        if(month == 2 && day > 31){\n      \
    \      return false\n        }\n        if(month == 2 && day > 31){\n        \
    \    return false\n        }\n        if(month == 2 && day > 31){\n          \
    \  return false\n        }\n        if(month == 2 && day > 31){\n            return\
    \ false\n        }\n        if(month == 2 && day > 31){\n            return false\n\
    \        }\n        if(month == 2 && day > 31){\n            return false\n  \
    \      }\n        if(month == 2 && day > 31){\n            return false\n    \
    \    }\n        if(month == 2 && day > 31){\n            return false\n      \
    \  }\n        if(month == 2 && day > 31){\n            return false\n        }\n\
    \        if(month == 2 && day > 31){\n            return false\n        }\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp546saca3.scala:119:8\
    \ --------------------\e[0m\e[0m\n\e[31m119 |\e[0m        \e[33mif\e[0m(month\
    \ == \e[31m2\e[0m && day > \e[31m31\e[0m){\n\e[31m\e[31m    |\e[0m        ^\e\
    [0m\n\e[31m    |\e[0m        Found:    Unit\n\e[31m    |\e[0m        Required:\
    \ Boolean\n\e[31m    |\e[0m        Maybe you are missing an else part for the\
    \ conditional?\n\e[31m120 |\e[0m            \e[33mreturn\e[0m \e[31mfalse\e[0m\n\
    \e[31m121 |\e[0m        }\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800505
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(dateArray.length != 3){\n            return false\n        }\n   \
    \     if(monthArray.contains(month) == false){\n            return false\n   \
    \     }\n        if(dayArray.contains(day) == false){\n            return false\n\
    \        }\n        if(yearArray.contains(year) == false){\n            return\
    \ false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_6223yrc.scala:44)\n\tat Problem.main(tmp_6223yrc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaokqlqim.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = List(4,5,6,7,8,9,10,11,12)\n        val daysInMonthInLeapYear = List(31,29,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonth = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthLeapYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthYearLeapYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthYearLeapYearLeapYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthYearLeapYearLeapYearLeapYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthYearLeapYearLeapYearLeapYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthYearLeapYearLeapYearLeapYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthYearLeapYearLeapYearLeapYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthYearLeapYearLeapYearLeapYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthYearLeapYearLeapYearLeapYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthYearLeapYearLeapYearLeapYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthYearLeapYearLeapYearLeapYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthYearLeapYearLeapYearLeapYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthYearLeapYearLeapYearLeapYear = List(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthYearLeapYearLeapYearLeapYear\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp883o9t5h.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp883o9t5h.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonthInMonthYearLeapYearLeapYearLeapYear\e[0m = List(\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthInMonthYearLeapYearLeapYearLeapYear is already\
    \ defined as \e[33mvalue\e[0m \e[35mdaysInMonthInMonthYearLeapYearLeapYearLeapYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp883o9t5h.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthInMonthYearLeapYearLeapYearLeapYear\e\
    [0m = List(\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthInMonthYearLeapYearLeapYearLeapYear is already\
    \ defined as \e[33mvalue\e[0m \e[35mdaysInMonthInMonthYearLeapYearLeapYearLeapYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp883o9t5h.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthInMonthYearLeapYearLeapYearLeapYear\e\
    [0m = List(\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m)\n"
  stdout: ''
  timestamp: 1659800508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        dateArray != null &&\
    \ dateArray.length == 3 && dateArray(0) > 0 && dateArray(1) > 0 && dateArray(2)\
    \ > 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphkgqs75q.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppjvc0h_4.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val validMonth = month match {\n  \
    \          case 1 => true\n            case 3 => true\n            case 5 => true\n\
    \            case 7 => true\n            case 8 => true\n            case 10 =>\
    \ true\n            case 12 => true\n            case _ => false\n        }\n\
    \        val validDay = day match {\n            case 1 => true\n            case\
    \ 3 => true\n            case 5 => true\n            case 7 => true\n        \
    \    case 8 => true\n            case 10 => true\n            case 12 => true\n\
    \            case _ => false\n        }\n        val validYear = year match {\n\
    \            case _ => true\n            case _ => false\n        }\n        val\
    \ validDate = validMonth && validDay && validYear\n        validDate\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1q5d3u2e.scala:54)\n\tat Problem.main(tmp1q5d3u2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n    \
    \    val monthArray4 = Array(4,6,9,11)\n        val dayArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray4 = Array(2010,2011,2012)\n        val monthArray5 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2005,2006,2007,2008,2009,2010,2011,2012)\n        val monthArray6\
    \ = Array(4,6,9,11)\n        val dayArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray6 = Array(2010,2011,2012)\n        val monthArray7 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2007,2008,2009,2010,2011,2012)\n        val monthArray8 =\
    \ Array(4,6,9,11)\n        val dayArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray8 = Array(2010,2011,2012)\n        val monthArray9 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray9 = Array(2009,2010,2011,2012)\n        val monthArray10 = Array(4,6,9,11)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpozz7dorv.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear\
    \ = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear = List(4,5,6,9,11)\n\
    \        val daysInYear = Listn\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbnli8fff.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbnli8fff.scala:27:5 ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppjvc0h_4.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getYear\
    \ > 0 && dateParsed.getYear < 2020 && dateParsed.getMonth > 0 && dateParsed.getMonth\
    \ < 12 && dateParsed.getDay > 0 && dateParsed.getDay < 31\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpin1g3ccz.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaokqlqim.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysInMonth2 = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val daysInMonth3\
    \ = Array(31,29,31,30,31,30,31,30,31,30,31)\n        val daysInMonth4 = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth5 = Array(31,31,31,31,31,31,31,31,31,31,31)\n        val\
    \ daysInMonth6 = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth7\
    \ = Array(31,31,31,31,31,31,31,31,31,31,31)\n        val daysInMonth8 = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth9 = Array(31,31,31,31,31,31,31,31,31,31,31)\n        val\
    \ daysInMonth10 = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth11\
    \ = Array(31,31,31,31,31,31,31,31,31,31,31)\n        val daysInMonth12 = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth = daysInMonth.zip(daysInMonth2).zip(daysInMonth3).zip(daysInMonth4).zip(daysInMonth5).zip(daysInMonth6).zip(daysInMonth7).zip(daysInMonth8).zip(daysInMonth9).zip(daysInMonth10).zip(daysInMonth11).zip(daysInMonth12)\n\
    \        val daysInMonth = daysInMonth.map(x => x._1.toInt + x._2.toInt)\n   \
    \     val daysInMonth = daysInMonth.filter(x => x >= 1 && x <= 31)\n        val\
    \ daysInMonth = daysInMonth.filter(x => x >= 1 && x <= 30)\n        val daysInMonth\
    \ = daysInMonth.filter(x => x >= 1 && x <= 29)\n        val daysInMonth = daysInMonth.filter(x\
    \ => x >= 1 && x <= 12)\n        val daysInMonth = daysInMonth.filter(x => x >=\
    \ 1 && x <= 31)\n        val daysInMonth = daysInMonth.filter(x => x >= 1 && x\
    \ <= 30)\n        val daysInMonth = daysInMonth.filter(x => x >= 1 && x <= 29)\n\
    \        val daysInMonth = daysInMonth.filter(x => x >= 1 && x <= 12)\n      \
    \  val daysInMonth = daysInMonth.filter(x => x >= 1 && x <= 31)\n        val daysInMonth\
    \ = daysInMonth.filter(x => \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpesm4bdip.scala:48:49 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth.filter(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpesm4bdip.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth.zip(daysInMonth2).zip(daysInMonth3).zip(daysInMonth4).zip(daysInMonth5).zip(daysInMonth6).zip(daysInMonth7).zip(daysInMonth8).zip(daysInMonth9).zip(daysInMonth10).zip(daysInMonth11).zip(daysInMonth12)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpesm4bdip.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth.map(\e\
    [36mx\e[0m => x._1.toInt + x._2.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpesm4bdip.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth.filter(\e\
    [36mx\e[0m => x >= \e[31m1\e[0m && x <= \e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800509
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val months = List(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysNotValid = List(31,30,29)\n        val daysNotValidForMonths\
    \ = List(31,30,29)\n        val daysNotValidForYears = List(31,30,29,31)\n   \
    \     if(dateArray.length != 3){\n            return false\n        }\n      \
    \  if(months.contains(month) == false){\n            return false\n        }\n\
    \        if(daysNotValid.contains(day) == false){\n            return false\n\
    \        }\n        if(daysNotValidForMonths.contains(day) == false){\n      \
    \      return false\n        }\n        if(daysNotValidForYears.contains(day)\
    \ == false){\n            return false\n        }\n        if(month != 2 && month\
    \ != 4 && month != 6 && month != 9 && month != 11 && month != 12){\n         \
    \   return false\n        }\n        if(day < 1 || day > 31){\n            return\
    \ false\n        }\n        if(day < 1 || day > 30){\n            return false\n\
    \        }\n        if(day < 1 || day > 29){\n            return false\n     \
    \   }\n        if(year < 1 || year > 9999){\n            return false\n      \
    \  }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg9_68d3n.scala:63)\n\tat Problem.main(tmpg9_68d3n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        dateString.toString().length\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprlm9p5sj.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = List(1, 3, 5, 7, 8,\
    \ 10, 12)\n        val dayArray = List(1, 30, 29)\n        val yearArray = List(1,\
    \ 12)\n        val monthCount = (monthArray.count(_ == month) + monthArray.count(_\
    \ == month - 1) + monthArray.count(_ == month - 2) + monthArray.count(_ == month\
    \ - 3) + monthArray.count(_ == month - 4) + monthArray.count(_ == month - 5) +\
    \ monthArray.count(_ == month - 6) + monthArray.count(_ == month - 7) + monthArray.count(_\
    \ == month - 8) + monthArray.count(_ == month - 9) + monthArray.count(_ == month\
    \ - 10) + monthArray.count(_ == month - 11))\n        val dayCount = (dayArray.count(_\
    \ == day) + dayArray.count(_ == day - 1) + dayArray.count(_ == day - 2) + dayArray.count(_\
    \ == day - 3) + dayArray.count(_ == day - 4) + dayArray.count(_ == day - 5) +\
    \ dayArray.count(_ == day - 6) + dayArray.count(_ == day - 7) + dayArray.count(_\
    \ == day - 8) + dayArray.count(_ == day - 9) + dayArray.count(_ == day - 10) +\
    \ dayArray.count(_ == day - 11))\n        val yearCount = (yearArray.count(_ ==\
    \ year) + yearArray.count(_ == year - 1) + yearArray.count(_ == year - 2) + yearArray.count(_\
    \ == year - 3) + yearArray.count(_ == year - 4) + yearArray.count(_ == year -\
    \ 5) + yearArray.count(_ == year - 6) + yearArray.count(_ == year - 7) + yearArray.count(_\
    \ == year - 8) + yearArray.count(_ == year - 9) + yearArray.count(_ == year -\
    \ 10) + yearArray.count(_ == year - 11))\n        val monthCheck = monthCount\
    \ < 1 || monthCount > 12\n        val dayCheck = dayCount < 1 || dayCount > 30\n\
    \        val yearCheck = yearCount < 1 || yearCount > 12\n        val dateCheck\
    \ = monthCheck && dayCheck && yearCheck\n        dateCheck\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptd1e767q.scala:39)\n\tat Problem.main(tmptd1e767q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi9z6d69x.scala:61:21 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e[36mdateInt\e[0m = \n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpi9z6d69x.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateInt\e[0m = dateFormat.parse(date).getTime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdateInt is already defined as \e[33mvalue\e[0m \e[35mdateInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi9z6d69x.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mdateInt\e[0m = dateFormat.parse(date).getTime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdateInt is already defined as \e[33mvalue\e[0m \e[35mdateInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi9z6d69x.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mdateInt\e[0m = dateFormat.parse(date).getTime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdateInt is already defined as \e[33mvalue\e[0m \e[35mdateInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi9z6d69x.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mdateInt\e[0m = dateFormat.parse(date).getTime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdateInt is already defined as \e[33mvalue\e[0m \e[35mdateInt\e\
    [0m"
  stdout: ''
  timestamp: 1659800514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        dateObj != null\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpta3sxr0_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val daysArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n    \
    \    val monthArray4 = Array(4,6,9,11)\n        val daysArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray4 = Array(2010,2011,2012)\n        val monthArray5 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2005,2006,2007,2008,2009,2010,2011,2012)\n        val monthArray6\
    \ = Array(4,6,9,11)\n        val daysArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray6 = Array(2010,2011,2012)\n        val monthArray7 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2007,2008,2009,2010,2011,2012)\n        val monthArray8 =\
    \ Array(4,6,9,11)\n        val daysArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray8 = Array(2010,2011,2012)\n        val monthArray9 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray9 = Array(2009,2010,2011,2012)\n        val monthArray10 = Array(4,6,9,11)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplhjug8ro.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        val month = dateArray(0).toInt\n\
    \        val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if(month < 1 || month > 12)\n            return false\n        if(day\
    \ < 1 || day > 31)\n            return false\n        if(month == 2 && day > 30)\n\
    \            return false\n        if(month == 2 && day < 29)\n            return\
    \ false\n        if(month == 2 && day > 28)\n            return false\n      \
    \  if(month == 2 && day < 28)\n            return false\n        if(month == 2\
    \ && day > 27)\n            return false\n        if(month == 2 && day < 27)\n\
    \            return false\n        if(month == 2 && day > 26)\n            return\
    \ false\n        if(month == 2 && day < 26)\n            return false\n      \
    \  if(month == 2 && day > 25)\n            return false\n        if(month == 2\
    \ && day < 25)\n            return false\n        if(month == 2 && day > 24)\n\
    \            return false\n        if(month == 2 && day < 24)\n            return\
    \ false\n        if(month == 2 && day > 23)\n            return false\n      \
    \  if(month == 2 && day < 23)\n            return false\n        if(month == 2\
    \ && day > 22)\n            return false\n        if(month == 2 && day < 22)\n\
    \            return false\n        if(month == 2 && day > 21)\n            return\
    \ false\n        if(month == 2 && day < 21)\n            return false\n      \
    \  if(month == 2 && day > 20)\n            return false\n        if(month == 2\
    \ && day < 20)\n            return false\n        if(month == 2 && day > 19)\n\
    \            return false\n        if(month == 2 && day < 19)\n            return\
    \ false\n        if(month == 2 && day > 18)\n            return false\n      \
    \  if(month == 2 && day < 18)\n            return false\n        if(month == 2\
    \ && day > 17)\n            return false\n        if(month == 2 && day < 17)\n\
    \            return false\n        if(month == 2 && day > 16)\n            return\
    \ false\n        if(month == 2 && day < 16)\n            return false\n      \
    \  if(month == 2 && day > 15)\n            return false\n        if(month == 2\
    \ && day < 15)\n            return false\n        if(month == 2 && day > 14)\n\
    \            return false\n        if(month == 2 && day < 14)\n            return\
    \ false\n        if(month == 2 && day > 13)\n            return false\n      \
    \  if(month == 2 && day < 13)\n            return false\n        if(month == 2\
    \ && day > 12)\n            return false\n        if(month == 2 && day < 12)\n\
    \            return false\n        if(month == 2 && day > 11)\n            return\
    \ false\n        if(month == 2 && day < 11)\n            return false\n      \
    \  if(month == 2 && day > 10)\n            return false\n        if(month == 2\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3qajynzg.scala:111:4 ---------------------------\e\
    [0m\e[0m\n\e[31m111 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800512
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArrayLength = monthArray.length\n        val dayArrayLength\
    \ = dayArray.length\n        val yearArrayLength = yearArray.length\n        val\
    \ monthArrayIndex = monthArray.indexOf(month)\n        val dayArrayIndex = dayArray.indexOf(day)\n\
    \        val yearArrayIndex = yearArray.indexOf(year)\n        val monthArrayLength\
    \ = monthArray.length\n        val dayArrayLength = dayArray.length\n        val\
    \ yearArrayLength = yearArray.length\n        val monthArrayIndex = monthArray.indexOf(month)\n\
    \        val dayArrayIndex = dayArray.indexOf(day)\n        val yearArrayIndex\
    \ = yearArray.indexOf(year)\n        val monthArrayLength = monthArray.length\n\
    \        val dayArrayLength = dayArray.length\n        val yearArrayLength = yearArray.length\n\
    \        val monthArrayIndex = monthArray.indexOf(month)\n        val dayArrayIndex\
    \ = dayArray.indexOf(day)\n        val yearArrayIndex = yearArray.indexOf(year)\n\
    \        val monthArrayLength = monthArray.length\n        val dayArrayLength\
    \ = dayArray.length\n        val yearArrayLength = yearArray.length\n        val\
    \ monthArrayIndex = monthArray.indexOf(month)\n        val dayArrayIndex = dayArray.indexOf(day)\n\
    \        val yearArrayIndex = yearArray.indexOf(year)\n        val monthArrayLength\
    \ = monthArray.length\n        val dayArrayLength = dayArray.length\n        val\
    \ yearArrayLength = yearArray.length\n        val monthArrayIndex = monthArray.indexOf(month)\n\
    \        val dayArrayIndex = dayArray.indexOf(day)\n        val yearArrayIndex\
    \ = yearArray.indexOf(year)\n        val monthArrayLength = monthArray.length\n\
    \        val dayArrayLength = dayArray.length\n        val yearArrayLength = yearArray.length\n\
    \        val monthArrayIndex = monthArray.indexOf(month)\n        val dayArrayIndex\
    \ = dayArray.indexOf(day)\n        val yearArrayIndex = yearArray.indexOf(year)\n\
    \        val monthArrayLength = monthArray.length\n        val dayArrayLength\
    \ = dayArray.length\n        val yearArrayLength = yearArray.length\n        val\
    \ monthArrayIndex = monthArray.indexOf(month)\n        val dayArrayIndex = dayArray.indexOf(day)\n\
    \        val yearArrayIndex = yearArray.indexOf(year)\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkx_hgknh.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mmonthArrayLength\e[0m =\
    \ monthArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mmonthArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkx_hgknh.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mdayArrayLength\e[0m = dayArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdayArrayLength is already defined as \e[33mvalue\e[0m \e[35mdayArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkx_hgknh.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36myearArrayLength\e[0m = yearArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0myearArrayLength is already defined as \e[33mvalue\e[0m \e[35myearArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkx_hgknh.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mmonthArrayIndex\e[0m = monthArray.indexOf(month)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthArrayIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmonthArrayIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkx_hgknh.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mdayArrayIndex\e[0m = dayArray.indexOf(day)\n\
    \e[31m\e[31m   |\e[0m        ^^^^"
  stdout: ''
  timestamp: 1659800515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray\
    \ = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n        val\
    \ daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray = Array.fill(12)(0)\n\
    \        val yearArray = Array.fill(12)(0)\n        val daysInMonthArray = Array.fill(daysInMonth)(0)\n\
    \        val monthArray = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n\
    \        val daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray\
    \ = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n        val\
    \ daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray = Array.fill(12)(0)\n\
    \        val yearArray = Array.fill(12)(0)\n        val daysInMonthArray = Array.fill(daysInMonth)(0)\n\
    \        val monthArray = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n\
    \        val daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray\
    \ = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n        val\
    \ daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray = Array.fill(12)(0)\n\
    \        val yearArray = Array.fill(12)(0)\n        val daysInMonthArray = Array.fill(daysInMonth)(0)\n\
    \        val monthArray = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n\
    \        val daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray\
    \ = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n        val\
    \ daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray = Array.fill(12)(0)\n\
    \        val yearArray = Array.fill(12)(0)\n        val daysInMonthArray = Array.fill(daysInMonth)(0)\n\
    \        val monthArray = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n\
    \        val daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray\
    \ = Array.fill(12)(0)\n        val yearArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpry3btqmf.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpry3btqmf.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonthArray\e[0m = Array.fill(daysInMonth)(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdaysInMonthArray is already defined as \e[33mvalue\e[0m \e[35mdaysInMonthArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpry3btqmf.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmonthArray\e[0m = Array.fill(\e[31m12\e\
    [0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthArray is already defined as \e[33mvalue\e[0m \e[35mmonthArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpry3btqmf.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36myearArray\e[0m = Array.fill(\e[31m12\e\
    [0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0myearArray is already defined as \e[33mvalue\e[0m \e[35myearArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpry3btqmf.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthArray\e[0m = Array.fill(daysInMonth)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthArray is already defined as \e[33mvalue\e[0m \e\
    [35mdaysInMonthArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group"
  stdout: ''
  timestamp: 1659800517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getTime\
    \ > 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5982ok15.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateToCheck = dateFormat.parse(date)\n        val dateToCheck2\
    \ = dateFormat.parse(date)\n        val dateToCheck3 = dateFormat.parse(date)\n\
    \        val dateToCheck4 = dateFormat.parse(date)\n        val dateToCheck5 =\
    \ dateFormat.parse(date)\n        val dateToCheck6 = dateFormat.parse(date)\n\
    \        val dateToCheck7 = dateFormat.parse(date)\n        val dateToCheck8 =\
    \ dateFormat.parse(date)\n        val dateToCheck9 = dateFormat.parse(date)\n\
    \        val dateToCheck10 = dateFormat.parse(date)\n        val dateToCheck11\
    \ = dateFormat.parse(date)\n        val dateToCheck12 = dateFormat.parse(date)\n\
    \        val dateToCheck13 = dateFormat.parse(date)\n        val dateToCheck14\
    \ = dateFormat.parse(date)\n        val dateToCheck15 = dateFormat.parse(date)\n\
    \        val dateToCheck16 = dateFormat.parse(date)\n        val dateToCheck17\
    \ = dateFormat.parse(date)\n        val dateToCheck18 = dateFormat.parse(date)\n\
    \        val dateToCheck19 = dateFormat.parse(date)\n        val dateToCheck20\
    \ = dateFormat.parse(date)\n        val dateToCheck21 = dateFormat.parse(date)\n\
    \        val dateToCheck22 = dateFormat.parse(date)\n        val dateToCheck23\
    \ = dateFormat.parse(date)\n        val dateToCheck24 = dateFormat.parse(date)\n\
    \        val dateToCheck25 = dateFormat.parse(date)\n        val dateToCheck26\
    \ = dateFormat.parse(date)\n        val dateToCheck27 = dateFormat.parse(date)\n\
    \        val dateToCheck28 = dateFormat.parse(date)\n        val dateToCheck29\
    \ = dateFormat.parse(date)\n        val dateToCheck30 = dateFormat.parse(date)\n\
    \        val dateToCheck31 = dateFormat.parse(date)\n        val dateToCheck32\
    \ = dateFormat.parse(date)\n        val dateToCheck33 = dateFormat.parse(date)\n\
    \        val dateToCheck34 = dateFormat.parse(date)\n        val dateToCheck35\
    \ = dateFormat.parse(date)\n        val dateToCheck36 = dateFormat.parse(date)\n\
    \        val dateToCheck37 = dateFormat.parse(date)\n        val dateToCheck38\
    \ = dateFormat.parse(date)\n        val dateToCheck39 = dateFormat.parse(date)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps2yct_gt.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmps2yct_gt.scala:63:5 ---------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).getTime\n        val dateArray2\
    \ = dateFormat.parse(date).getTime\n        val dateArray3 = dateFormat.parse(date).getTime\n\
    \        val dateArray4 = dateFormat.parse(date).getTime\n        val dateArray5\
    \ = dateFormat.parse(date).getTime\n        val dateArray6 = dateFormat.parse(date).getTime\n\
    \        val dateArray7 = dateFormat.parse(date).getTime\n        val dateArray8\
    \ = dateFormat.parse(date).getTime\n        val dateArray9 = dateFormat.parse(date).getTime\n\
    \        val dateArray10 = dateFormat.parse(date).getTime\n        val dateArray11\
    \ = dateFormat.parse(date).getTime\n        val dateArray12 = dateFormat.parse(date).getTime\n\
    \        val dateArray13 = dateFormat.parse(date).getTime\n        val dateArray14\
    \ = dateFormat.parse(date).getTime\n        val dateArray15 = dateFormat.parse(date).getTime\n\
    \        val dateArray16 = dateFormat.parse(date).getTime\n        val dateArray17\
    \ = dateFormat.parse(date).getTime\n        val dateArray18 = dateFormat.parse(date).getTime\n\
    \        val dateArray19 = dateFormat.parse(date).getTime\n        val dateArray20\
    \ = dateFormat.parse(date).getTime\n        val dateArray21 = dateFormat.parse(date).getTime\n\
    \        val dateArray22 = dateFormat.parse(date).getTime\n        val dateArray23\
    \ = dateFormat.parse(date).getTime\n        val dateArray24 = dateFormat.parse(date).getTime\n\
    \        val dateArray25 = dateFormat.parse(date).getTime\n        val dateArray26\
    \ = dateFormat.parse(date).getTime\n        val dateArray27 = dateFormat.parse(date).getTime\n\
    \        val dateArray28 = dateFormat.parse(date).getTime\n        val dateArray29\
    \ = dateFormat.parse(date).getTime\n        val dateArray30 = dateFormat.parse(date).getTime\n\
    \        val dateArray31 = dateFormat.parse(date).getTime\n        val dateArray32\
    \ = dateFormat.parse(date).getTime\n        val dateArray33 = dateFormat.parse(date).getTime\n\
    \        val dateArray34 = dateFormat.parse(date).getTime\n        val dateArray35\
    \ = dateFormat.parse(date).getTime\n        val dateArray36 = dateFormat.parse(date).getTime\n\
    \        val dateArray\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldk4i69p.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldk4i69p.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpldk4i69p.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getTime\
    \ > System.currentTimeMillis()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_x5zn1yu.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n   \
    \     val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val monthsInLeapYear\
    \ = List(12, 4, 6, 9, 11)\n        val daysInMonth = daysInMonth(dateArray(0).toInt)\n\
    \        val monthsInYear = monthsInYear(dateArray(0).toInt)\n        val monthsInLeapYear\
    \ = monthsInLeapYear(dateArray(0).toInt)\n        val daysInMonth = daysInMonth(dateArray(1).toInt)\n\
    \        val monthsInYear = monthsInYear(dateArray(1).toInt)\n        val monthsInLeapYear\
    \ = monthsInLeapYear(dateArray(1).toInt)\n        val daysInMonth = daysInMonth(dateArray(2).toInt)\n\
    \        val monthsInYear = monthsInYear(dateArray(2).toInt)\n        val monthsInLeapYear\
    \ = monthsInLeapYear(dateArray(2).toInt)\n        val daysInMonth = daysInMonth(dateArray(3).toInt)\n\
    \        val monthsInYear = monthsInYear(dateArray(3).toInt)\n        val monthsInLeapYear\
    \ = monthsInLeapYear(dateArray(3).toInt)\n        val daysInMonth = daysInMonth(dateArray(4).toInt)\n\
    \        val monthsInYear = monthsInYear(dateArray(4).toInt)\n        val monthsInLeapYear\
    \ = monthsInLeapYear(dateArray(4).toInt)\n        val daysInMonth = daysInMonth(dateArray(5).toInt)\n\
    \        val monthsInYear = monthsInYear(dateArray(5).toInt)\n        val monthsInLeapYear\
    \ = monthsInLeapYear(dateArray(5).toInt)\n        val daysInMonth = daysInMonth(dateArray(6).toInt)\n\
    \        val monthsInYear = monthsInYear(dateArray(6).toInt)\n        val monthsInLeapYear\
    \ = monthsInLeapYear(dateArray(6).toInt)\n        val daysInMonth = daysInMonth(dateArray(7).toInt)\n\
    \        val monthsInYear = monthsInYear(dateArray(7).toInt)\n        val monthsInLeapYear\
    \ = monthsInLeapYear(dateArray(7).toInt)\n        val daysInMonth = daysInMonth(dateArray(8).toInt)\n\
    \        val monthsInYear = monthsInYear(dateArray(8).toInt)\n        val monthsInLeapYear\
    \ = monthsInLeapYear(dateArray(8).toInt)\n        val daysInMonth = daysInMonth(dateArray(9).toInt)\n\
    \        val month\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpph8i3vsg.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpph8i3vsg.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = daysInMonth(dateArray(\e[31m0\e[0m).toInt)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpph8i3vsg.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = monthsInYear(dateArray(\e\
    [31m0\e[0m).toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpph8i3vsg.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmonthsInLeapYear\e[0m = monthsInLeapYear(dateArray(\e\
    [31m0\e[0m).toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthsInLeapYear is already defined as \e[33mvalue\e[0m \e\
    [35mmonthsInLeapYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpph8i3vsg.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth(dateArray(\e\
    [31m1\e[0m).toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659800519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateInDays = dateParsed.getTime()\
    \ / 1000\n        val dateInMonths = dateInDays / 30\n        val dateInYears\
    \ = dateInDays / 365\n        dateInMonths > 0 && dateInMonths < 13 && dateInYears\
    \ > 0 && dateInYears < 31\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3siebgvc.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800513
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        val monthValid = monthIndex\
    \ >= 0 && monthIndex < 12\n        val dayValid = dayIndex >= 0 && dayIndex <\
    \ 31\n        val yearValid = yearIndex >= 0 && yearIndex < 12\n        val dateValid\
    \ = monthValid && dayValid && yearValid\n        dateValid\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp30o6yjou.scala:39)\n\tat Problem.main(tmp30o6yjou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val monthDays = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthDaysOfYear = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val monthDaysOfYearOfMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val monthDaysOfYearOfMonthOfYear = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val monthDaysOfYearOfMonthOfYearOfMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val monthDaysOfYearOfMonthOfYearOfMonthOfYear = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val monthDaysOfYearOfMonthOfYearOfMonthOfYearOfMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val monthDaysOfYearOfMonthOfYearOfMonthOfYearOfMonthOfYear = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val monthDaysOfYearOfMonthOfYearOfMonthOfYearOfMonthOfYear = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val monthDaysOfYearOfMonthOfYearOfMonthOfYearOfMonthOfYear = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val monthDaysOfYearOfMonthOfYearOfMonthOfYearOfMonthOfYearOfMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val monthDaysOfYearOfMonthOfYearOfMonthOfYearOf\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptvhuk58y.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptvhuk58y.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthDaysOfYearOfMonthOfYearOfMonthOfYearOfMonthOfYear\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthDaysOfYearOfMonthOfYearOfMonthOfYearOfMonthOfYear is\
    \ already defined as \e[33mvalue\e[0m \e[35mmonthDaysOfYearOfMonthOfYearOfMonthOfYearOfMonthOfYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptvhuk58y.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mmonthDaysOfYearOfMonthOfYearOfMonthOfYearOfMonthOfYear\e\
    [0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthDaysOfYearOfMonthOfYearOfMonthOfYearOfMonthOfYear is\
    \ already defined as \e[33mvalue\e[0m \e[35mmonthDaysOfYearOfMonthOfYearOfMonthOfYearOfMonthOfYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmptvhuk58y.scala:26:37 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a membe"
  stdout: ''
  timestamp: 1659800522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) match {\n            case null => false\n  \
    \          case _ => true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjmimn52.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppjvc0h_4.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        val dateInMillis =\
    \ dateObject.getTime\n        val dateInDays = dateInMillis / 1000\n        val\
    \ dateInMonths = dateInDays / 30\n        val dateInYears = dateInMonths / 12\n\
    \        val dateInMonth = dateInMonths % 12\n        val dateInDay = dateInDays\
    \ % 30\n        val dateInYear = dateInYears % 12\n        val dateInMonthDay\
    \ = dateInMonth % 30\n        val dateInMonthYear = dateInMonthDay % 12\n    \
    \    val dateInMonthYearDay = dateInMonthYear % 30\n        val dateInMonthYearDay\
    \ = dateInMonthYearDay % 12\n        val dateInMonthYearDay = dateInMonthYearDay\
    \ % 30\n        val dateInMonthYearDay = dateInMonthYearDay % 12\n        val\
    \ dateInMonthYearDay = dateInMonthYearDay % 30\n        val dateInMonthYearDay\
    \ = dateInMonthYearDay % 12\n        val dateInMonthYearDay = dateInMonthYearDay\
    \ % 30\n        val dateInMonthYearDay = dateInMonthYearDay % 12\n        val\
    \ dateInMonthYearDay = dateInMonthYearDay % 30\n        val dateInMonthYearDay\
    \ = dateInMonthYearDay % 12\n        val dateInMonthYearDay = dateInMonthYearDay\
    \ % 30\n        val dateInMonthYearDay = dateInMonthYearDay % 12\n        val\
    \ dateInMonthYearDay = dateInMonthYearDay % 30\n        val dateInMonthYearDay\
    \ = dateInMonthYearDay % 12\n        val dateInMonthYearDay = dateInMonthYearDay\
    \ % 30\n        val dateInMonthYearDay = dateInMonthYearDay % 12\n        val\
    \ dateInMonthYearDay = dateInMonthYearDay % 30\n        val dateInMonthYearDay\
    \ = dateInMonthYearDay % 12\n        val dateInMonthYearDay = dateInMonthYearDay\
    \ % 30\n        val dateInMonthYearDay = dateInMonthYearDay % 12\n        val\
    \ dateInMonthYearDay = dateInMonthYearDay % 30\n        val dateInMonthYearDay\
    \ = dateInMonthYearDay % 12\n        val dateInMonthYearDay = dateInMonthYearDay\
    \ % 30\n        val dateInMonthYear\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe4959nck.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe4959nck.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateInMonthYearDay\e[0m = dateInMonthYearDay % \e[31m12\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdateInMonthYearDay is already defined as \e[33mvalue\e[0m \e[35mdateInMonthYearDay\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe4959nck.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mdateInMonthYearDay\e[0m = dateInMonthYearDay\
    \ % \e[31m30\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateInMonthYearDay is already defined as \e[33mvalue\e[0m\
    \ \e[35mdateInMonthYearDay\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe4959nck.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mdateInMonthYearDay\e[0m\
    \ = dateInMonthYearDay % \e[31m12\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateInMonthYearDay is already defined as \e[33mvalue\e[0m\
    \ \e[35mdateInMonthYearDay\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe4959nck.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mdateInMonthYearDay\e[0m\
    \ = dateInMonthYearDay % \e[31m30\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateInMonthYearDay is already defined as \e[33mvalue\e[0m\
    \ \e[35mdateInMonthYearDay\e[0m\n\e[31m   |\e[0m\n\e"
  stdout: ''
  timestamp: 1659800518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val months = dateArray.getMonth\n\
    \        val days = dateArray.getDay\n        val year = dateArray.getYear\n \
    \       val validMonth = 1 to 12\n        val validDay = 1 to 31\n        val\
    \ validYear = 2000 to 2020\n        val validMonthAndDay = 1 to 29\n        val\
    \ validYearAndMonth = 2000 to 2020\n        val validMonthAndDayAndYear = 1 to\
    \ 29\n        val validMonthAndDayAndYearAndMonth = 1 to 29\n        val validMonthAndDayAndYearAndMonthAndDay\
    \ = 1 to 29\n        val validMonthAndDayAndYearAndMonthAndDayAndYear = 1 to 29\n\
    \        val validMonthAndDayAndYearAndMonthAndDayAndYearAndMonth = 1 to 29\n\
    \        val validMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDay = 1 to\
    \ 29\n        val validMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYear\
    \ = 1 to 29\n        val validMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonth\
    \ = 1 to 29\n        val validMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDay\
    \ = 1 to 29\n        val validMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYear\
    \ = 1 to 29\n        val validMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonth\
    \ = 1 to 29\n        val validMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDay\
    \ = 1 to 29\n        val validMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYear\
    \ = 1 to 29\n        val validMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonth\
    \ = 1 to 29\n        val validMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDay\
    \ = 1 to 29\n        val validMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDay\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpenr6aghi.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpenr6aghi.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpenr6aghi.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = List(\"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\")\n        val dayArray = List(\"01\"\
    , \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"14\", \"16\", \"18\", \"21\"\
    , \"23\", \"25\", \"27\", \"29\", \"31\")\n        val yearArray = List(\"2000\"\
    , \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\"\
    , \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\"\
    , \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\"\
    , \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\"\
    , \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"\
    , \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\", \"2047\", \"2048\"\
    , \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\", \"2055\", \"2056\"\
    , \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\", \"2063\", \"2064\"\
    , \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\", \"2071\", \"2072\"\
    , \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\", \"2079\", \"2080\"\
    , \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\", \"2087\", \"2088\"\
    , \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\", \"2095\", \"2096\"\
    , \"2097\", \"2098\", \"2099\", \"2100\", \"2101\", \"2102\", \"2103\", \"2104\"\
    , \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\", \"2111\", \"2112\"\
    , \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\", \"2119\", \"2120\"\
    , \"2121\", \"2122\", \"2123\", \"2124\", \"2125\", \"2126\", \"2127\", \"2128\"\
    , \"2129\", \"2130\", \"2131\", \"2132\", \"2133\", \"2134\", \"2135\", \"2136\"\
    , \"2137\", \"2138\", \"2139\", \"2140\", \"2141\", \"2142\", \"2143\", \"2144\"\
    , \"2145\", \"2146\", \"2147\", \"2148\", \"2149\", \"2150\", \"2151\", \"2152\"\
    , \"\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphezevzbl.scala:28:1253 ---------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36myearArray\e[0m = List(\e\
    [31m\"2000\"\e[0m, \e[31m\"2001\"\e[0m, \e[31m\"2002\"\e[0m, \e[31m\"2003\"\e\
    [0m, \e[31m\"2004\"\e[0m, \e[31m\"2005\"\e[0m, \e[31m\"2006\"\e[0m, \e[31m\"2007\"\
    \e[0m, \e[31m\"2008\"\e[0m, \e[31m\"2009\"\e[0m, \e[31m\"2010\"\e[0m, \e[31m\"\
    2011\"\e[0m, \e[31m\"2012\"\e[0m, \e[31m\"2013\"\e[0m, \e[31m\"2014\"\e[0m, \e\
    [31m\"2015\"\e[0m, \e[31m\"2016\"\e[0m, \e[31m\"2017\"\e[0m, \e[31m\"2018\"\e\
    [0m, \e[31m\"2019\"\e[0m, \e[31m\"2020\"\e[0m, \e[31m\"2021\"\e[0m, \e[31m\"2022\"\
    \e[0m, \e[31m\"2023\"\e[0m, \e[31m\"2024\"\e[0m, \e[31m\"2025\"\e[0m, \e[31m\"\
    2026\"\e[0m, \e[31m\"2027\"\e[0m, \e[31m\"2028\"\e[0m, \e[31m\"2029\"\e[0m, \e\
    [31m\"2030\"\e[0m, \e[31m\"2031\"\e[0m, \e[31m\"2032\"\e[0m, \e[31m\"2033\"\e\
    [0m, \e[31m\"2034\"\e[0m, \e[31m\"2035\"\e[0m, \e[31m\"2036\"\e[0m, \e[31m\"2037\"\
    \e[0m, \e[31m\"2038\"\e[0m, \e[31m\"2039\"\e[0m, \e[31m\"2040\"\e[0m, \e[31m\"\
    2041\"\e[0m, \e[31m\"2042\"\e[0m, \e[31m\"2043\"\e[0m, \e[31m\"2044\"\e[0m, \e\
    [31m\"2045\"\e[0m, \e[31m\"2046\"\e[0m, \e[31m\"2047\"\e[0m, \e[31m\"2048\"\e\
    [0m, \e[31m\"2049\"\e[0m, \e[31m\"2050\"\e[0m, \e[31m\"2051\"\e[0m, \e[31m\"2052\"\
    \e[0m, \e[31m\"2053\"\e[0m, \e[31m\"2054\"\e[0m, \e[31m\"2055\"\e[0m, \e[31m\"\
    2056\"\e[0m, \e[31m\"2057\"\e[0m, \e[31m\"2058\"\e[0m, \e[31m\"2059\"\e[0m, \e\
    [31m\"2060\"\e[0m, \e[31m\"2061\"\e[0m, \e[31m\"2062\"\e[0m, \e[31m\"2063\"\e\
    [0m, \e[31m\"2064\"\e[0m, \e[31m\"2065\"\e[0m, \e[31m\"2066\"\e[0m, \e[31m\"2067\"\
    \e[0m, \e[31m\"2068\"\e[0m, \e[31m\"2069\"\e[0m, \e[31m\"2070\"\e[0m, \e[31m\"\
    2071\"\e[0m, \e[31m\"2072\"\e[0m, \e[31m\"2073\"\e[0m, \e[31m\"2074\"\e[0m, \e\
    [31m\"2075\"\e[0m, \e[31m\"2076\"\e[0m, \e[31m\"2077\"\e[0m, \e[31m\"2078\"\e\
    [0m, \e[31m\"2079\"\e[0m, \e[31m\"2080\"\e[0m, \e[31m\"2081\"\e[0m, \e[31m\"2082\"\
    \e[0m, \e[31m\"2083\"\e[0m, \e[31m\"2084\"\e[0m, \e[31m\"2085\"\e[0m, \e[31m\"\
    2086\"\e[0m, \e[31m\"2087\"\e[0m, \e[31m\"2088\"\e[0m, \e[31m\"2089\"\e[0m, \e\
    [31m\"2090\"\e[0m, \e[31m\"2091\"\e[0m, \e[31m\"2092\"\e[0m, \e[31m\"2093\"\e\
    [0m, \e[31m\"2094\"\e[0m, \e[31m\"2095\"\e[0m, \e[31m\"2096\"\e[0m, \e[31m\"2097\"\
    \e[0m, \e[31m\"2098\"\e[0m, \e[31m\"2099\"\e[0m, \e[31m\"2100\"\e[0m, \e[31m\"\
    2101\"\e[0m, \e[31m\"2102\"\e[0m, \e[31m\"2103\"\e[0m, \e[31m\"2104\"\e[0m, \e\
    [31m\"2105\"\e[0m, \e[31m\"2106\"\e[0m, \e[31m\"2107\"\e[0m, \e[31m\"2108\"\e\
    [0m, \e[31m\"2109\"\e[0m, \e[31m\"2110\"\e[0m, \e["
  stdout: ''
  timestamp: 1659800520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val monthCheck = monthArray.contains(month)\n\
    \        val dayCheck = dayArray.contains(day)\n        val yearCheck = year >=\
    \ 1 && year <= 12\n        val dateCheck = monthCheck && dayCheck && yearCheck\n\
    \        dateCheck\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiump8t9j.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthDays = Map(1 -> 31, 3 ->\
    \ 31, 5 -> 31, 7 -> 31, 8 -> 31, 10 -> 31, 12 -> 31)\n        val monthDays30\
    \ = Map(4 -> 30, 6 -> 30, 9 -> 30)\n        val monthDays29 = Map(2 -> 29)\n \
    \       monthDays.get(months) match {\n            case Some(monthDays) => monthDays\
    \ <= days && days <= monthDays.get(months)\n            case None => false\n \
    \       }\n        monthDays30.get(months) match {\n            case Some(monthDays30)\
    \ => monthDays30 <= days && days <= monthDays30.get(months)\n            case\
    \ None => false\n        }\n        monthDays29.get(months) match {\n        \
    \    case Some(monthDays29) => monthDays29 <= days && days <= monthDays29.get(months)\n\
    \            case None => false\n        }\n        year >= 0 && year <= 9999\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7h7jzcj6.scala:30:75 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mcase\e[0m Some(monthDays) => monthDays\
    \ <= days && days <= monthDays.get(months)\n\e[31m\e[31m   |\e[0m            \
    \                                                     ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        value get is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7h7jzcj6.scala:34:81 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mcase\e[0m Some(monthDays30) => monthDays30\
    \ <= days && days <= monthDays30.get(months)\n\e[31m\e[31m   |\e[0m          \
    \                                                           ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value get is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7h7jzcj6.scala:38:81\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m            \e[33mcase\e\
    [0m Some(monthDays29) => monthDays29 <= days && days <= monthDays29.get(months)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \              value get is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659800521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray3 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2003,2004,2005)\n        val monthArray4 = Array(4,6,9,11)\n\
    \        val dayArray4 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray4 = Array(2010,2011,2012)\n        val monthArray5 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray5 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2005,2006,2007)\n        val monthArray6 = Array(4,6,9,11)\n\
    \        val dayArray6 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray6 = Array(2010,2011,2012)\n        val monthArray7 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray7 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2007,2008,2009)\n        val monthArray8 = Array(4,6,9,11)\n\
    \        val dayArray8 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray8 = Array(2010,2011,2012)\n        val monthArray9 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray9 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray9 = Array(2010,2011,2012)\n        val monthArray10 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray10 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray10 = Array(2010,\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7thqqc9i.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7thqqc9i.scala:56:5 ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = List(\"01\", \"\
    03\", \"05\", \"07\", \"08\", \"10\", \"12\")\n        val daysArray = List(\"\
    01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"29\")\n        val yearArray\
    \ = List(\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\"\
    , \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2040\", \"2041\"\
    , \"2042\", \"2043\", \"2044\", \"2045\", \"2046\", \"2047\", \"2048\", \"2049\"\
    , \"2050\", \"2051\", \"2052\", \"2053\", \"2054\", \"2055\", \"2056\", \"2057\"\
    , \"2058\", \"2059\", \"2060\", \"2061\", \"2062\", \"2063\", \"2064\", \"2065\"\
    , \"2066\", \"2067\", \"2068\", \"2069\", \"2070\", \"2071\", \"2072\", \"2073\"\
    , \"2074\", \"2075\", \"2076\", \"2077\", \"2078\", \"2079\", \"2080\", \"2081\"\
    , \"2082\", \"2083\", \"2084\", \"2085\", \"2086\", \"2087\", \"2088\", \"2089\"\
    , \"2090\", \"2091\", \"2092\", \"2093\", \"2094\", \"2095\", \"2096\", \"2097\"\
    , \"2098\", \"2099\", \"2100\", \"2101\", \"2102\", \"2103\", \"2104\", \"2105\"\
    , \"2106\", \"2107\", \"2108\", \"2109\", \"2110\", \"2111\", \"2112\", \"2113\"\
    , \"2114\", \"2115\", \"2116\", \"2117\", \"2118\", \"2119\", \"2120\", \"2121\"\
    , \"2122\", \"2123\", \"2124\", \"2125\", \"2126\", \"2127\", \"2128\", \"2129\"\
    , \"2130\", \"2131\", \"2132\", \"2133\", \"2134\", \"2135\", \"2136\", \"2137\"\
    , \"2138\", \"2139\", \"2140\", \"2141\", \"2142\", \"2143\", \"2144\", \"2145\"\
    , \"2146\", \"2147\", \"2148\", \"2149\", \"2150\", \"2151\", \"2152\", \"2153\"\
    , \"2154\", \"2155\", \"2156\", \"2157\", \"2158\", \"2159\", \"2160\", \"2161\"\
    , \"2162\", \"2163\", \"2164\", \"2165\", \"2166\", \"2167\", \"2168\", \"2169\"\
    , \"2170\", \"2171\", \"2172\", \"2173\", \"2174\", \"2175\", \"2176\", \"2177\"\
    , \"2178\", \"2179\", \"2180\", \"2181\", \"2182\", \"2183\", \"2184\", \"\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2srylh_w.scala:28:1293 ---------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36myearArray\e[0m = List(\e\
    [31m\"2000\"\e[0m, \e[31m\"2001\"\e[0m, \e[31m\"2002\"\e[0m, \e[31m\"2003\"\e\
    [0m, \e[31m\"2004\"\e[0m, \e[31m\"2005\"\e[0m, \e[31m\"2006\"\e[0m, \e[31m\"2007\"\
    \e[0m, \e[31m\"2008\"\e[0m, \e[31m\"2009\"\e[0m, \e[31m\"2010\"\e[0m, \e[31m\"\
    2011\"\e[0m, \e[31m\"2012\"\e[0m, \e[31m\"2040\"\e[0m, \e[31m\"2041\"\e[0m, \e\
    [31m\"2042\"\e[0m, \e[31m\"2043\"\e[0m, \e[31m\"2044\"\e[0m, \e[31m\"2045\"\e\
    [0m, \e[31m\"2046\"\e[0m, \e[31m\"2047\"\e[0m, \e[31m\"2048\"\e[0m, \e[31m\"2049\"\
    \e[0m, \e[31m\"2050\"\e[0m, \e[31m\"2051\"\e[0m, \e[31m\"2052\"\e[0m, \e[31m\"\
    2053\"\e[0m, \e[31m\"2054\"\e[0m, \e[31m\"2055\"\e[0m, \e[31m\"2056\"\e[0m, \e\
    [31m\"2057\"\e[0m, \e[31m\"2058\"\e[0m, \e[31m\"2059\"\e[0m, \e[31m\"2060\"\e\
    [0m, \e[31m\"2061\"\e[0m, \e[31m\"2062\"\e[0m, \e[31m\"2063\"\e[0m, \e[31m\"2064\"\
    \e[0m, \e[31m\"2065\"\e[0m, \e[31m\"2066\"\e[0m, \e[31m\"2067\"\e[0m, \e[31m\"\
    2068\"\e[0m, \e[31m\"2069\"\e[0m, \e[31m\"2070\"\e[0m, \e[31m\"2071\"\e[0m, \e\
    [31m\"2072\"\e[0m, \e[31m\"2073\"\e[0m, \e[31m\"2074\"\e[0m, \e[31m\"2075\"\e\
    [0m, \e[31m\"2076\"\e[0m, \e[31m\"2077\"\e[0m, \e[31m\"2078\"\e[0m, \e[31m\"2079\"\
    \e[0m, \e[31m\"2080\"\e[0m, \e[31m\"2081\"\e[0m, \e[31m\"2082\"\e[0m, \e[31m\"\
    2083\"\e[0m, \e[31m\"2084\"\e[0m, \e[31m\"2085\"\e[0m, \e[31m\"2086\"\e[0m, \e\
    [31m\"2087\"\e[0m, \e[31m\"2088\"\e[0m, \e[31m\"2089\"\e[0m, \e[31m\"2090\"\e\
    [0m, \e[31m\"2091\"\e[0m, \e[31m\"2092\"\e[0m, \e[31m\"2093\"\e[0m, \e[31m\"2094\"\
    \e[0m, \e[31m\"2095\"\e[0m, \e[31m\"2096\"\e[0m, \e[31m\"2097\"\e[0m, \e[31m\"\
    2098\"\e[0m, \e[31m\"2099\"\e[0m, \e[31m\"2100\"\e[0m, \e[31m\"2101\"\e[0m, \e\
    [31m\"2102\"\e[0m, \e[31m\"2103\"\e[0m, \e[31m\"2104\"\e[0m, \e[31m\"2105\"\e\
    [0m, \e[31m\"2106\"\e[0m, \e[31m\"2107\"\e[0m, \e[31m\"2108\"\e[0m, \e[31m\"2109\"\
    \e[0m, \e[31m\"2110\"\e[0m, \e[31m\"2111\"\e[0m, \e[31m\"2112\"\e[0m, \e[31m\"\
    2113\"\e[0m, \e[31m\"2114\"\e[0m, \e[31m\"2115\"\e[0m, \e[31m\"2116\"\e[0m, \e\
    [31m\"2117\"\e[0m, \e[31m\"2118\"\e[0m, \e[31m\"2119\"\e[0m, \e[31m\"2120\"\e\
    [0m, \e[31m\"2121\"\e[0m, \e[31m\"2122\"\e[0m, \e[31m\"2123\"\e[0m, \e[31m\"2124\"\
    \e[0m, \e[31m\"2125\"\e[0m, \e[31m\"2126\"\e[0m, \e[31m\"2127\"\e[0m, \e[31m\"\
    2128\"\e[0m, \e[31m\"2129\"\e[0m, \e[31m\"2130\"\e[0m, \e[31m\"2131\"\e[0m, \e\
    [31m\"2132\"\e[0m, \e[31m\"2133\"\e[0m, \e[31m\"2134\"\e[0m, \e[31m\"2135\"\e\
    [0m, \e[31m\"2136\"\e[0m, \e[31m\"2137\"\e[0m, \e["
  stdout: ''
  timestamp: 1659800509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).getTime\n        val dateArray2\
    \ = dateFormat.parse(date).getTime\n        val dateArray3 = dateFormat.parse(date).getTime\n\
    \        val dateArray4 = dateFormat.parse(date).getTime\n        val dateArray5\
    \ = dateFormat.parse(date).getTime\n        val dateArray6 = dateFormat.parse(date).getTime\n\
    \        val dateArray7 = dateFormat.parse(date).getTime\n        val dateArray8\
    \ = dateFormat.parse(date).getTime\n        val dateArray9 = dateFormat.parse(date).getTime\n\
    \        val dateArray10 = dateFormat.parse(date).getTime\n        val dateArray11\
    \ = dateFormat.parse(date).getTime\n        val dateArray12 = dateFormat.parse(date).getTime\n\
    \        val dateArray13 = dateFormat.parse(date).getTime\n        val dateArray14\
    \ = dateFormat.parse(date).getTime\n        val dateArray15 = dateFormat.parse(date).getTime\n\
    \        val dateArray16 = dateFormat.parse(date).getTime\n        val dateArray17\
    \ = dateFormat.parse(date).getTime\n        val dateArray18 = dateFormat.parse(date).getTime\n\
    \        val dateArray19 = dateFormat.parse(date).getTime\n        val dateArray20\
    \ = dateFormat.parse(date).getTime\n        val dateArray21 = dateFormat.parse(date).getTime\n\
    \        val dateArray22 = dateFormat.parse(date).getTime\n        val dateArray23\
    \ = dateFormat.parse(date).getTime\n        val dateArray24 = dateFormat.parse(date).getTime\n\
    \        val dateArray25 = dateFormat.parse(date).getTime\n        val dateArray26\
    \ = dateFormat.parse(date).getTime\n        val dateArray27 = dateFormat.parse(date).getTime\n\
    \        val dateArray28 = dateFormat.parse(date).getTime\n        val dateArray29\
    \ = dateFormat.parse(date).getTime\n        val dateArray30 = dateFormat.parse(date).getTime\n\
    \        val dateArray31 = dateFormat.parse(date).getTime\n        val dateArray32\
    \ = dateFormat.parse(date).getTime\n        val dateArray33 = dateFormat.parse(date).getTime\n\
    \        val dateArray34 = dateFormat.parse(date).getTime\n        val dateArray35\
    \ = dateFormat.parse(date).getTime\n        val dateArray36 = dateFormat.parse(date).getTime\n\
    \        val dateArray\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldk4i69p.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldk4i69p.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpldk4i69p.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val daysInMonth = monthArray.zip(dayArray).map(x\
    \ => x._2)\n        val daysInMonth2 = monthArray.zip(dayArray).map(x => x._2)\n\
    \        val daysInMonth3 = monthArray.zip(dayArray).map(x => x._2)\n        val\
    \ daysInMonth4 = monthArray.zip(dayArray).map(x => x._2)\n        val daysInMonth5\
    \ = monthArray.zip(dayArray).map(x => x._2)\n        val daysInMonth6 = monthArray.zip(dayArray).map(x\
    \ => x._2)\n        val daysInMonth7 = monthArray.zip(dayArray).map(x => x._2)\n\
    \        val daysInMonth8 = monthArray.zip(dayArray).map(x => x._2)\n        val\
    \ daysInMonth9 = monthArray.zip(dayArray).map(x => x._2)\n        val daysInMonth10\
    \ = monthArray.zip(dayArray).map(x => x._2)\n        val daysInMonth11 = monthArray.zip(dayArray).map(x\
    \ => x._2)\n        val daysInMonth12 = monthArray.zip(dayArray).map(x => x._2)\n\
    \        val daysInMonth13 = monthArray.zip(dayArray).map(x => x._2)\n       \
    \ val daysInMonth14 = monthArray.zip(dayArray).map(x => x._2)\n        val daysInMonth15\
    \ = monthArray.zip(dayArray).map(x => x._2)\n        val daysInMonth16 = monthArray.zip(dayArray).map(x\
    \ => x._2)\n        val daysInMonth17 = monthArray.zip(dayArray).map(x => x._2)\n\
    \        val daysInMonth18 = monthArray.zip(dayArray).map(x => x._2)\n       \
    \ val daysInMonth19 = monthArray.zip(dayArray).map(x => x._2)\n        val daysInMonth20\
    \ = monthArray.zip(dayArray).map(x => x._2)\n        val daysInMonth21 = monthArray.zip(dayArray).map(x\
    \ => x._2)\n        val daysInMonth22 = monthArray.zip(dayArray).map(x => x._2)\n\
    \        val daysInMonth23 = monthArray.zip(dayArray).map(x => x._2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpme3cctk5.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpme3cctk5.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        dateObject.isValid\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppv_vdcsr.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(date.length == 0){\n            return false\n        }\n        if(month\
    \ < 1 || month > 12){\n            return false\n        }\n        if(day < 1\
    \ || day > dayArray(month)){\n            return false\n        }\n        if(month\
    \ < 1 || month > 12){\n            return false\n        }\n        if(year <\
    \ 1 || year > yearArray(month)){\n            return false\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8550cs2y.scala:50)\n\tat Problem.main(tmp8550cs2y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).getTime\n        val dateArray2\
    \ = dateFormat.parse(date).getTime\n        val dateArray3 = dateFormat.parse(date).getTime\n\
    \        val dateArray4 = dateFormat.parse(date).getTime\n        val dateArray5\
    \ = dateFormat.parse(date).getTime\n        val dateArray6 = dateFormat.parse(date).getTime\n\
    \        val dateArray7 = dateFormat.parse(date).getTime\n        val dateArray8\
    \ = dateFormat.parse(date).getTime\n        val dateArray9 = dateFormat.parse(date).getTime\n\
    \        val dateArray10 = dateFormat.parse(date).getTime\n        val dateArray11\
    \ = dateFormat.parse(date).getTime\n        val dateArray12 = dateFormat.parse(date).getTime\n\
    \        val dateArray13 = dateFormat.parse(date).getTime\n        val dateArray14\
    \ = dateFormat.parse(date).getTime\n        val dateArray15 = dateFormat.parse(date).getTime\n\
    \        val dateArray16 = dateFormat.parse(date).getTime\n        val dateArray17\
    \ = dateFormat.parse(date).getTime\n        val dateArray18 = dateFormat.parse(date).getTime\n\
    \        val dateArray19 = dateFormat.parse(date).getTime\n        val dateArray20\
    \ = dateFormat.parse(date).getTime\n        val dateArray21 = dateFormat.parse(date).getTime\n\
    \        val dateArray22 = dateFormat.parse(date).getTime\n        val dateArray23\
    \ = dateFormat.parse(date).getTime\n        val dateArray24 = dateFormat.parse(date).getTime\n\
    \        val dateArray25 = dateFormat.parse(date).getTime\n        val dateArray26\
    \ = dateFormat.parse(date).getTime\n        val dateArray27 = dateFormat.parse(date).getTime\n\
    \        val dateArray28 = dateFormat.parse(date).getTime\n        val dateArray29\
    \ = dateFormat.parse(date).getTime\n        val dateArray30 = dateFormat.parse(date).getTime\n\
    \        val dateArray31 = dateFormat.parse(date).getTime\n        val dateArray32\
    \ = dateFormat.parse(date).getTime\n        val dateArray33 = dateFormat.parse(date).getTime\n\
    \        val dateArray34 = dateFormat.parse(date).getTime\n        val dateArray35\
    \ = dateFormat.parse(date).getTime\n        val dateArray36 = dateFormat.parse(date).getTime\n\
    \        val dateArray\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldk4i69p.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldk4i69p.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpldk4i69p.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(dateArray.length != 3){\n            return false\n        }\n   \
    \     if(monthArray.contains(month) == false){\n            return false\n   \
    \     }\n        if(dayArray.contains(day) == false){\n            return false\n\
    \        }\n        if(yearArray.contains(year) == false){\n            return\
    \ false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvw0e16vi.scala:44)\n\tat Problem.main(tmpvw0e16vi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        dateObj != null\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpta3sxr0_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val monthArray = dateArray(0).toString.split(\"-\")\n        val dayArray =\
    \ dateArray(1).toString.split(\"-\")\n        val month = monthArray(0).toInt\n\
    \        val day = dayArray(0).toInt\n        val year = dateArray(2).toInt\n\
    \        val monthValid = monthArray.forall(month => month >= 1 && month <= 12)\n\
    \        val dayValid = dayArray.forall(day => day >= 1 && day <= 31)\n      \
    \  val yearValid = year >= 1 && year <= 2020\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmgk3iqgm.scala:28:61\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmonthValid\e\
    [0m = monthArray.forall(\e[36mmonth\e[0m => month >= \e[31m1\e[0m && month <=\
    \ \e[31m12\e[0m)\n\e[31m\e[31m   |\e[0m                                      \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \                       Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m      \
    \                                               Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmgk3iqgm.scala:28:75 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmonthValid\e[0m = monthArray.forall(\e\
    [36mmonth\e[0m => month >= \e[31m1\e[0m && month <= \e[31m12\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \        ^^\e[0m\n\e[31m   |\e[0m                                            \
    \        Found:    (\e[31m12\e[0m : Int)\n\e[31m   |\e[0m                    \
    \                                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpmgk3iqgm.scala:29:53 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mdayValid\e[0m = dayArray.forall(\e\
    [36mday\e[0m => day >= \e[31m1\e[0m && day <= \e[31m31\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                     Found:    (\e[31m1\e[0m\
    \ : Int)\n\e[31m   |\e[0m                                                    \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmgk3iqgm.scala:29:65\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mdayValid\e\
    [0m = dayArray.forall(\e[36mday\e[0m => day >= \e[31m1\e[0m && day <= \e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                               "
  stdout: ''
  timestamp: 1659800527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCheck = monthArray.contains(month)\n        val dayCheck = dayArray.contains(day)\n\
    \        val yearCheck = yearArray.contains(year)\n        val monthCheck2 = monthArray.contains(month+1)\n\
    \        val dayCheck2 = dayArray.contains(day+1)\n        val yearCheck2 = yearArray.contains(year+1)\n\
    \        val monthCheck3 = monthArray.contains(month-1)\n        val dayCheck3\
    \ = dayArray.contains(day-1)\n        val yearCheck3 = yearArray.contains(year-1)\n\
    \        val monthCheck4 = monthArray.contains(month+2)\n        val dayCheck4\
    \ = dayArray.contains(day+2)\n        val yearCheck4 = yearArray.contains(year+2)\n\
    \        val monthCheck5 = monthArray.contains(month-2)\n        val dayCheck5\
    \ = dayArray.contains(day-2)\n        val yearCheck5 = yearArray.contains(year-2)\n\
    \        val monthCheck6 = monthArray.contains(month+3)\n        val dayCheck6\
    \ = dayArray.contains(day+3)\n        val yearCheck6 = yearArray.contains(year+3)\n\
    \        val monthCheck7 = monthArray.contains(month-3)\n        val dayCheck7\
    \ = dayArray.contains(day-3)\n        val yearCheck7 = yearArray.contains(year-3)\n\
    \        val monthCheck8 = monthArray.contains(month+4)\n        val dayCheck8\
    \ = dayArray.contains(day+4)\n        val yearCheck8 = yearArray.contains(year+4)\n\
    \        val monthCheck9 = monthArray.contains(month-4)\n        val dayCheck9\
    \ = dayArray.contains(day-4)\n        val yearCheck9 = yearArray.contains(year-4)\n\
    \        val monthCheck10 = monthArray.contains(month+5)\n        val dayCheck10\
    \ = dayArray.contains(day+5)\n        val yearCheck10 = yearArray.contains(year+5)\n\
    \        val monthCheck11 = monthArray.contains(month-5)\n        val dayCheck11\
    \ = dayArray.contains(day-5)\n        val yearCheck11 = yearArray.contains(year-5)\n\
    \        val monthCheck12 = monthArray.contains(month+6)\n        val dayCheck12\
    \ = dayArray.contains(day+\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnkwzrr38.scala:63:47 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \e[36mdayCheck12\e[0m = dayArray.contains(day+\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkwzrr38.scala:64:5\
    \ ---------------------\e[0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        if (dateArray.getYear < 1 || dateArray.getYear > 9999 || dateArray.getMonth\
    \ < 1 || dateArray.getMonth > 12 || dateArray.getDay < 1 || dateArray.getDay >\
    \ 31 || month < 1 || month > 12 || day < 1 || day > 29 || month == 2 && day >\
    \ 30)\n            return false\n        else\n            return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7z7xkgpr.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthValid = monthArray.contains(month)\n        val dayValid = dayArray.contains(day)\n\
    \        val yearValid = yearArray.contains(year)\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphof4i18g.scala:36)\n\tat Problem.main(tmphof4i18g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        if(year < 1 || year > 9999 || month < 1 || month > 12 || day < 1 || day\
    \ > 31) {\n            return false\n        }\n        if(month == 1 && day >\
    \ 31) {\n            return false\n        }\n        if(month == 3 && day > 30)\
    \ {\n            return false\n        }\n        if(month == 5 && day > 29) {\n\
    \            return false\n        }\n        if(month == 7 && day > 31) {\n \
    \           return false\n        }\n        if(month == 8 && day > 31) {\n  \
    \          return false\n        }\n        if(month == 10 && day > 30) {\n  \
    \          return false\n        }\n        if(month == 12 && day > 29) {\n  \
    \          return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl7z7n33n.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCheck = monthArray.contains(month)\n        val dayCheck = dayArray.contains(day)\n\
    \        val yearCheck = yearArray.contains(year)\n        val monthCheck2 = monthArray.contains(month+1)\n\
    \        val dayCheck2 = dayArray.contains(day+1)\n        val yearCheck2 = yearArray.contains(year+1)\n\
    \        val monthCheck3 = monthArray.contains(month-1)\n        val dayCheck3\
    \ = dayArray.contains(day-1)\n        val yearCheck3 = yearArray.contains(year-1)\n\
    \        val monthCheck4 = monthArray.contains(month+2)\n        val dayCheck4\
    \ = dayArray.contains(day+2)\n        val yearCheck4 = yearArray.contains(year+2)\n\
    \        val monthCheck5 = monthArray.contains(month-2)\n        val dayCheck5\
    \ = dayArray.contains(day-2)\n        val yearCheck5 = yearArray.contains(year-2)\n\
    \        val monthCheck6 = monthArray.contains(month+3)\n        val dayCheck6\
    \ = dayArray.contains(day+3)\n        val yearCheck6 = yearArray.contains(year+3)\n\
    \        val monthCheck7 = monthArray.contains(month-3)\n        val dayCheck7\
    \ = dayArray.contains(day-3)\n        val yearCheck7 = yearArray.contains(year-3)\n\
    \        val monthCheck8 = monthArray.contains(month+4)\n        val dayCheck8\
    \ = dayArray.contains(day+4)\n        val yearCheck8 = yearArray.contains(year+4)\n\
    \        val monthCheck9 = monthArray.contains(month-4)\n        val dayCheck9\
    \ = dayArray.contains(day-4)\n        val yearCheck9 = yearArray.contains(year-4)\n\
    \        val monthCheck10 = monthArray.contains(month+5)\n        val dayCheck10\
    \ = dayArray.contains(day+5)\n        val yearCheck10 = yearArray.contains(year+5)\n\
    \        val monthCheck11 = monthArray.contains(month-5)\n        val dayCheck11\
    \ = dayArray.contains(day-5)\n        val yearCheck11 = yearArray.contains(year-5)\n\
    \        val monthCheck12 = monthArray.contains(month+6)\n        val dayCheck12\
    \ = dayArray.contains(day+\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_fvns7dj.scala:63:47 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \e[36mdayCheck12\e[0m = dayArray.contains(day+\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_fvns7dj.scala:64:5\
    \ ---------------------\e[0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).getTime\n        val dateArray2\
    \ = dateFormat.parse(date).getTime\n        val dateArray3 = dateFormat.parse(date).getTime\n\
    \        val dateArray4 = dateFormat.parse(date).getTime\n        val dateArray5\
    \ = dateFormat.parse(date).getTime\n        val dateArray6 = dateFormat.parse(date).getTime\n\
    \        val dateArray7 = dateFormat.parse(date).getTime\n        val dateArray8\
    \ = dateFormat.parse(date).getTime\n        val dateArray9 = dateFormat.parse(date).getTime\n\
    \        val dateArray10 = dateFormat.parse(date).getTime\n        val dateArray11\
    \ = dateFormat.parse(date).getTime\n        val dateArray12 = dateFormat.parse(date).getTime\n\
    \        val dateArray13 = dateFormat.parse(date).getTime\n        val dateArray14\
    \ = dateFormat.parse(date).getTime\n        val dateArray15 = dateFormat.parse(date).getTime\n\
    \        val dateArray16 = dateFormat.parse(date).getTime\n        val dateArray17\
    \ = dateFormat.parse(date).getTime\n        val dateArray18 = dateFormat.parse(date).getTime\n\
    \        val dateArray19 = dateFormat.parse(date).getTime\n        val dateArray20\
    \ = dateFormat.parse(date).getTime\n        val dateArray21 = dateFormat.parse(date).getTime\n\
    \        val dateArray22 = dateFormat.parse(date).getTime\n        val dateArray23\
    \ = dateFormat.parse(date).getTime\n        val dateArray24 = dateFormat.parse(date).getTime\n\
    \        val dateArray25 = dateFormat.parse(date).getTime\n        val dateArray26\
    \ = dateFormat.parse(date).getTime\n        val dateArray27 = dateFormat.parse(date).getTime\n\
    \        val dateArray28 = dateFormat.parse(date).getTime\n        val dateArray29\
    \ = dateFormat.parse(date).getTime\n        val dateArray30 = dateFormat.parse(date).getTime\n\
    \        val dateArray31 = dateFormat.parse(date).getTime\n        val dateArray32\
    \ = dateFormat.parse(date).getTime\n        val dateArray33 = dateFormat.parse(date).getTime\n\
    \        val dateArray34 = dateFormat.parse(date).getTime\n        val dateArray35\
    \ = dateFormat.parse(date).getTime\n        val dateArray36 = dateFormat.parse(date).getTime\n\
    \        val dateArray\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldk4i69p.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldk4i69p.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpldk4i69p.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val validMonth = month >= 1 && month\
    \ <= 12\n        val validDay = day >= 1 && day <= 31\n        val validYear =\
    \ year >= 1 && year <= 9999\n        val validDate = validMonth && validDay &&\
    \ validYear\n        validDate\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmp0rq7t2up.scala:23)\n\
    \tat Problem$.main(tmp0rq7t2up.scala:39)\n\tat Problem.main(tmp0rq7t2up.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val daysInMonth = DateTimeFormat.forPattern(\"MM\").parse(\"12\").getDayOfMonth\n\
    \        val daysInYear = DateTimeFormat.forPattern(\"yyyy\").parse(\"2020\").getDayOfMonth\n\
    \        val daysInYearMonth = DateTimeFormat.forPattern(\"yyyyMM\").parse(\"\
    202003\").getDayOfMonth\n        val daysInYearMonthDay = DateTimeFormat.forPattern(\"\
    yyyyMMdd\").parse(\"20200304\").getDayOfMonth\n        val daysInYearMonthDays\
    \ = DateTimeFormat.forPattern(\"yyyyMMdd\").parse(\"202003040506\").getDayOfMonth\n\
    \        val daysInYearMonthDaysPlusOne = DateTimeFormat.forPattern(\"yyyyMMdd\"\
    ).parse(\"20200304050607\").getDayOfMonth\n        val daysInYearMonthDaysPlusTwo\
    \ = DateTimeFormat.forPattern(\"yyyyMMdd\").parse(\"2020030405060708\").getDayOfMonth\n\
    \        val daysInYearMonthDaysPlusThree = DateTimeFormat.forPattern(\"yyyyMMdd\"\
    ).parse(\"202003040506070809\").getDayOfMonth\n        val daysInYearMonthDaysPlusFour\
    \ = DateTimeFormat.forPattern(\"yyyyMMdd\").parse(\"2020030405060708090A\").getDayOfMonth\n\
    \        val daysInYearMonthDaysPlusFive = DateTimeFormat.forPattern(\"yyyyMMdd\"\
    ).parse(\"2020030405060708090AB\").getDayOfMonth\n        val daysInYearMonthDaysPlusSix\
    \ = DateTimeFormat.forPattern(\"yyyyMMdd\").parse(\"2020030405060708090ABC\").getDayOfMonth\n\
    \        val daysInYearMonthDaysPlusSeven = DateTimeFormat.forPattern(\"yyyyMMdd\"\
    ).parse(\"2020030405060708090ABCD\").getDayOfMonth\n        val daysInYearMonthDaysPlusEight\
    \ = DateTimeFormat.forPattern(\"yyyyMMdd\").parse(\"2020030405060708090ABCDE\"\
    ).getDayOfMonth\n        val daysInYearMonthDaysPlusNine = DateTimeFormat.forPattern(\"\
    yyyyMMdd\").parse(\"2020030405060708090\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpq9a8hkrm.scala:40:86 -----------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mdaysInYearMonthDaysPlusNine\e\
    [0m = DateTimeFormat.forPattern(\e[31m\"yyyyMMdd\"\e[0m).parse(\"2020030405060708090\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                          unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpq9a8hkrm.scala:42:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m42 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpq9a8hkrm.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpq9a8hkrm.scala:27:26 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = DateTimeFormat.forPattern(\e\
    [31m\"MM\"\e[0m).parse(\e[31m\"12\"\e[0m).getDayOfMonth\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \            Not found: DateTimeFormat\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpq9a8hkrm.scala:28:25 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdaysInYear\e[0m = DateTimeFormat.forPattern(\e\
    [31m\"yyyy\"\e[0m).parse(\e[31m\"2020\"\e[0m).getDayOfMonth\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: DateTimeFormat\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659800528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        val dateDays = dateFormat.parse(date).getDay\n\
    \        val dateMonths = dateFormat.parse(date).getMonth\n        val dateYears\
    \ = dateFormat.parse(date).getYear\n        dateString != null && dateDays > 1\
    \ && dateDays < 31 && dateMonths > 1 && dateMonths < 12 && dateYears > 1 && dateYears\
    \ < 40 && dateDays > 29 && dateMonths > 12\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi5n5mwjs.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val monthArray = dateArray(0).toString.toInt\n        val dayArray = dateArray(1).toString.toInt\n\
    \        val year = dateArray(2).toString.toInt\n        val month = monthArray\n\
    \        val day = dayArray\n        val monthLengthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayLengthArray = Array(31,28,31,30,31,30,31,30,31,30,31)\n      \
    \  val monthLengthArrayLength = monthLengthArray.length\n        val dayLengthArrayLength\
    \ = dayLengthArray.length\n        val monthLengthArrayLength = monthLengthArray.length\n\
    \        val dayLengthArrayLength = dayLengthArray.length\n        val monthLengthArrayLength\
    \ = monthLengthArray.length\n        val dayLengthArrayLength = dayLengthArray.length\n\
    \        val monthLengthArrayLength = monthLengthArray.length\n        val dayLengthArrayLength\
    \ = dayLengthArray.length\n        val monthLengthArrayLength = monthLengthArray.length\n\
    \        val dayLengthArrayLength = dayLengthArray.length\n        val monthLengthArrayLength\
    \ = monthLengthArray.length\n        val dayLengthArrayLength = dayLengthArray.length\n\
    \        val monthLengthArrayLength = monthLengthArray.length\n        val dayLengthArrayLength\
    \ = dayLengthArray.length\n        val monthLengthArrayLength = monthLengthArray.length\n\
    \        val dayLengthArrayLength = dayLengthArray.length\n        val monthLengthArrayLength\
    \ = monthLengthArray.length\n        val dayLengthArrayLength = dayLengthArray.length\n\
    \        val monthLengthArrayLength = monthLengthArray.length\n        val dayLengthArrayLength\
    \ = dayLengthArray.length\n        val monthLengthArrayLength = monthLengthArray.length\n\
    \        val dayLengthArrayLength = dayLengthArray.length\n        val monthLengthArrayLength\
    \ = monthLengthArray.length\n        val dayLengthArrayLength = dayLengthArray.length\n\
    \        val monthLengthArrayLength = monthLengthArray.length\n        val dayLengthArrayLength\
    \ = dayLengthArray.length\n        val monthLengthArrayLength = monthLengthArray.length\n\
    \        val dayLengthArrayLength = dayLengthArray.length\n        val monthLengthArrayLength\
    \ = monthLengthArray.length\n        val dayLengthArrayLength = dayLengthArray.length\n\
    \        val monthLengthArrayLength = monthLengthArray.length\n        val dayLengthArrayLength\
    \ = dayLengthArray.length\n        val monthLengthArrayLength = monthLengthArray.length\n\
    \        val dayLengthArrayLength = dayLengthArray.length\n        val monthLengthArrayLength\
    \ = monthLengthArray.length\n        val dayLengthArrayLength = dayLengthArray.length\n\
    \        val monthLengthArrayLength = monthLengthArray.length\n        val dayLengthArrayLength\
    \ = dayLengthArray\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9xra8mw3.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmonthLengthArrayLength\e\
    [0m = monthLengthArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthLengthArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mmonthLengthArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9xra8mw3.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mdayLengthArrayLength\e[0m\
    \ = dayLengthArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdayLengthArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mdayLengthArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9xra8mw3.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mmonthLengthArrayLength\e\
    [0m = monthLengthArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthLengthArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mmonthLengthArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9xra8mw3.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mdayLengthArrayLength\e[0m\
    \ = dayLengthArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdayLengthArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mdayLengthArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9xra8mw3.scala:36:12 ---------------------"
  stdout: ''
  timestamp: 1659800528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        dateObject != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3z0u6f1m.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        val months = dateArray(0).toInt\n\
    \        val days = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if(months < 1 || months > 12)\n            return false\n        if(days\
    \ < 1 || days > 31)\n            return false\n        if(months == 2 && days\
    \ > 30)\n            return false\n        if(months == 2 && days == 29)\n   \
    \         return false\n        if(months == 3 && days > 30)\n            return\
    \ false\n        if(months == 3 && days == 29)\n            return false\n   \
    \     if(months == 4 && days > 30)\n            return false\n        if(months\
    \ == 4 && days == 29)\n            return false\n        if(months == 5 && days\
    \ > 30)\n            return false\n        if(months == 5 && days == 29)\n   \
    \         return false\n        if(months == 6 && days > 30)\n            return\
    \ false\n        if(months == 6 && days == 29)\n            return false\n   \
    \     if(months == 7 && days > 30)\n            return false\n        if(months\
    \ == 7 && days == 29)\n            return false\n        if(months == 8 && days\
    \ > 30)\n            return false\n        if(months == 8 && days == 29)\n   \
    \         return false\n        if(months == 9 && days > 30)\n            return\
    \ false\n        if(months == 9 && days == 29)\n            return false\n   \
    \     if(months == 10 && days > 30)\n            return false\n        if(months\
    \ == 10 && days == 29)\n            return false\n        if(months == 11 && days\
    \ > 30)\n            return false\n        if(months == 11 && days == 29)\n  \
    \          return false\n        if(months == 12 && days > 30)\n            return\
    \ false\n        if(months == 12 && days == 29)\n            return true\n   \
    \     return false\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2a5cfqf9.scala:79)\n\tat Problem.main(tmp2a5cfqf9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString18 = dateFormat18.parse(date)\n        val\
    \ dateFormat\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5w779aey.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5w779aey.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5w779aey.scala:24:30\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat2\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5w779aey.scala:26:30\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat3\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5w779aey.scala:28:30\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat4\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5w779aey.sc"
  stdout: ''
  timestamp: 1659800529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val dateArrayLength\
    \ = dateArray.length\n        val dateArrayLength = dateArray.length\n       \
    \ val dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1je5p3xa.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1je5p3xa.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1je5p3xa.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1je5p3xa.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1je5p3xa.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val daysInMonth = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth30 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth29 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth28 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth27 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth26 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth25 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth24 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth23 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth22 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth21 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth20 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth19 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth18 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth17 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth16 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth15 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth14 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth13 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth12 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth11 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth10 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth9 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth8 = Calendar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd06lz_jj.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpd06lz_jj.scala:27:26 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpd06lz_jj.scala:28:28 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth30\e[0m = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpd06lz_jj.scala:29:28 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth29\e[0m = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpd06lz_jj.scala:30:28 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth28\e[0m = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m lo"
  stdout: ''
  timestamp: 1659800529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthValid = monthArray.contains(month)\n        val dayValid = dayArray.contains(day)\n\
    \        val yearValid = yearArray.contains(year)\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphof4i18g.scala:36)\n\tat Problem.main(tmphof4i18g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        val months = dateArray(0).toInt\n\
    \        val days = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if(months < 1 || months > 12)\n            return false\n        if(days\
    \ < 1 || days > 31)\n            return false\n        if(months == 2 && days\
    \ > 29)\n            return false\n        if(months == 4 && days > 30)\n    \
    \        return false\n        if(months == 6 && days > 31)\n            return\
    \ false\n        if(months == 9 && days > 30)\n            return false\n    \
    \    if(months == 11 && days > 31)\n            return false\n        if(months\
    \ == 12 && days > 30)\n            return false\n        if(months == 1 && days\
    \ > 28)\n            return false\n        if(months == 3 && days > 31)\n    \
    \        return false\n        if(months == 5 && days > 30)\n            return\
    \ false\n        if(months == 7 && days > 31)\n            return false\n    \
    \    if(months == 8 && days > 31)\n            return false\n        if(months\
    \ == 10 && days > 31)\n            return false\n        if(months == 12 && days\
    \ > 30)\n            return false\n        if(months == 2 && days > 29)\n    \
    \        return false\n        if(months == 4 && days > 30)\n            return\
    \ false\n        if(months == 6 && days > 31)\n            return false\n    \
    \    if(months == 9 && days > 30)\n            return false\n        if(months\
    \ == 11 && days > 31)\n            return false\n        if(months == 12 && days\
    \ > 30)\n            return false\n        if(months == 1 && days > 28)\n    \
    \        return false\n        if(months == 3 && days > 31)\n            return\
    \ false\n        if(months == 5 && days > 30)\n            return false\n    \
    \    if(months == 7 && days > 31)\n            return false\n        if(months\
    \ == 8 && days > 31)\n            return false\n        if(months == 10 && days\
    \ > 31)\n            return false\n        if(months == 12 && days > 30)\n   \
    \         return false\n        if(months == 2 && days > 29)\n            return\
    \ false\n        if(months == 4 && days > 30)\n            return false\n    \
    \    if(months == 6 && days > 31)\n            return false\n        if(months\
    \ == 9 && days > 30)\n            return false\n        if(months == 11 && days\
    \ > 31)\n            return false\n        if(months == 12 && days > 30)\n   \
    \         return false\n        if(months == 1 && days > 28)\n            return\
    \ false\n        if(months == 3 && days > 31)\n            return false\n    \
    \    if(months == 5 && days > 30)\n            return false\n        if(months\
    \ == 7 && days > \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfu81fufo.scala:102:32 --------------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m        \e[33mif\e[0m(months == \e[31m7\e[0m && days\
    \ > \n\e[31m\e[31m    |\e[0m                                ^\e[0m\n\e[31m   \
    \ |\e[0m                                expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).getTime\n        val dateArray2\
    \ = dateFormat.parse(date).getTime\n        val dateArray3 = dateFormat.parse(date).getTime\n\
    \        val dateArray4 = dateFormat.parse(date).getTime\n        val dateArray5\
    \ = dateFormat.parse(date).getTime\n        val dateArray6 = dateFormat.parse(date).getTime\n\
    \        val dateArray7 = dateFormat.parse(date).getTime\n        val dateArray8\
    \ = dateFormat.parse(date).getTime\n        val dateArray9 = dateFormat.parse(date).getTime\n\
    \        val dateArray10 = dateFormat.parse(date).getTime\n        val dateArray11\
    \ = dateFormat.parse(date).getTime\n        val dateArray12 = dateFormat.parse(date).getTime\n\
    \        val dateArray13 = dateFormat.parse(date).getTime\n        val dateArray14\
    \ = dateFormat.parse(date).getTime\n        val dateArray15 = dateFormat.parse(date).getTime\n\
    \        val dateArray16 = dateFormat.parse(date).getTime\n        val dateArray17\
    \ = dateFormat.parse(date).getTime\n        val dateArray18 = dateFormat.parse(date).getTime\n\
    \        val dateArray19 = dateFormat.parse(date).getTime\n        val dateArray20\
    \ = dateFormat.parse(date).getTime\n        val dateArray21 = dateFormat.parse(date).getTime\n\
    \        val dateArray22 = dateFormat.parse(date).getTime\n        val dateArray23\
    \ = dateFormat.parse(date).getTime\n        val dateArray24 = dateFormat.parse(date).getTime\n\
    \        val dateArray25 = dateFormat.parse(date).getTime\n        val dateArray26\
    \ = dateFormat.parse(date).getTime\n        val dateArray27 = dateFormat.parse(date).getTime\n\
    \        val dateArray28 = dateFormat.parse(date).getTime\n        val dateArray29\
    \ = dateFormat.parse(date).getTime\n        val dateArray30 = dateFormat.parse(date).getTime\n\
    \        val dateArray31 = dateFormat.parse(date).getTime\n        val dateArray32\
    \ = dateFormat.parse(date).getTime\n        val dateArray33 = dateFormat.parse(date).getTime\n\
    \        val dateArray34 = dateFormat.parse(date).getTime\n        val dateArray35\
    \ = dateFormat.parse(date).getTime\n        val dateArray36 = dateFormat.parse(date).getTime\n\
    \        val dateArray\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldk4i69p.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldk4i69p.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpldk4i69p.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        dateObject.isValid\
    \ && dateObject.getTime < System.currentTimeMillis && dateObject.getTime > -1000\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpam38njjb.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        val months = dateArray(0).toInt\n\
    \        val days = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if(months < 1 || months > 12)\n            return false\n        if(days\
    \ < 1 || days > 31)\n            return false\n        if(months == 2 && days\
    \ > 29)\n            return false\n        if(months == 4 && days > 30)\n    \
    \        return false\n        if(months == 6 && days > 31)\n            return\
    \ false\n        if(months == 9 && days > 30)\n            return false\n    \
    \    if(months == 11 && days > 31)\n            return false\n        if(months\
    \ == 12 && days > 30)\n            return false\n        if(months == 1 && days\
    \ > 31)\n            return false\n        if(months == 3 && days > 30)\n    \
    \        return false\n        if(months == 5 && days > 31)\n            return\
    \ false\n        if(months == 7 && days > 31)\n            return false\n    \
    \    if(months == 8 && days > 31)\n            return false\n        if(months\
    \ == 10 && days > 31)\n            return false\n        if(months == 12 && days\
    \ > 31)\n            return false\n        if(months == 2 && days > 30)\n    \
    \        return false\n        if(months == 4 && days > 30)\n            return\
    \ false\n        if(months == 6 && days > 30)\n            return false\n    \
    \    if(months == 9 && days > 30)\n            return false\n        if(months\
    \ == 11 && days > 30)\n            return false\n        if(months == 12 && days\
    \ > 30)\n            return false\n        if(months == 1 && days > 30)\n    \
    \        return false\n        if(months == 3 && days > 30)\n            return\
    \ false\n        if(months == 5 && days > 30)\n            return false\n    \
    \    if(months == 7 && days > 30)\n            return false\n        if(months\
    \ == 8 && days > 30)\n            return false\n        if(months == 10 && days\
    \ > 30)\n            return false\n        if(months == 12 && days > 30)\n   \
    \         return false\n        if(months == 2 && days > 29)\n            return\
    \ false\n        if(months == 4 && days > 29)\n            return false\n    \
    \    if(months == 6 && days > 29)\n            return false\n        if(months\
    \ == 9 && days > 29)\n            return false\n        if(months == 11 && days\
    \ > 29)\n            return false\n        if(months == 12 && days > 29)\n   \
    \         return false\n        if(months == 1 && days > 29)\n            return\
    \ false\n        if(months == 3 && days > 29)\n            return false\n    \
    \    if(months == 5 && days > 29)\n            return false\n        if(months\
    \ == 7 && days > 29)\n\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps4r83_1g.scala:104:4 ---------------------------\e\
    [0m\e[0m\n\e[31m104 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).asInstanceOf[Date]\n       \
    \ val year = dateArray.getYear\n        val month = dateArray.getMonth\n     \
    \   val day = dateArray.getDay\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray = Array(4,6,9,11)\n        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0mboue6z.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0mboue6z.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthArray\e[0m = Array(\e[31m4\e[0m,\e[31m6\e[0m,\e[31m9\e[0m,\e[31m11\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmonthArray is already defined as \e[33mvalue\e[0m \e[35mmonthArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0mboue6z.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mdayArray\e[0m = Array(\e[31m0\e[0m,\e\
    [31m31\e[0m,\e[31m30\e[0m,\e[31m29\e[0m,\e[31m28\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdayArray is already defined as \e[33mvalue\e[0m \e[35mdayArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0mboue6z.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmonthArray\e[0m = Array(\e[31m1\e[0m,\e\
    [31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e[0m,\e\
    [31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmonthArray is already defined as \e[33mvalue\e[0m \e[35mmonthArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0mboue6z.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mdayArray\e[0m = Array(\e[31m0\e[0m,\e\
    [31m31\e[0m,\e[31m30\e[0m,\e[31m29\e[0m,\e[31m28\e[0m,\e[31m31\e"
  stdout: ''
  timestamp: 1659800530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth29 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth29 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1rk86yas.scala:43:79 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmonthsInMonth30\e[0m = scala.util.Calendar.getInstance.getActualMaximum(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1rk86yas.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth30\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth30 is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth30\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1rk86yas.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mmonthsInMonth30\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthsInMonth30 is already defined as \e[33mvalue\e[0m \e\
    [35mmonthsInMonth30\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1rk86yas.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth31\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth31"
  stdout: ''
  timestamp: 1659800533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.format(date)\n        val dateArray = dateString.split(\"\
    -\")\n        val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val validMonths = Set(1,3,5,7,8,10,12)\n\
    \        val validDays = Set(1,3,5,7,8,10,12,29)\n        val validYear = Set(1,12)\n\
    \        val validDate = (months != 0) && (days != 0) && (year != 0)\n       \
    \ val validMonth = validMonths.contains(months)\n        val validDay = validDays.contains(days)\n\
    \        val validYear = validYear.contains(year)\n        val validDate = validDate\
    \ && (validMonth && validDay && validYear)\n        validDate\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgvztpqv6.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvalidYear\e[0m = validYear.contains(year)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalidYear is already defined as \e[33mvalue\e[0m \e[35mvalidYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgvztpqv6.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvalidDate\e[0m = validDate && (validMonth\
    \ && validDay && validYear)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidDate is already defined as \e[33mvalue\e[0m \e[35mvalidDate\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpgvztpqv6.scala:22:29 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e[0m \e\
    [35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                  Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        dateObj != null\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpta3sxr0_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateToValidate = dateFormat.parse(date)\n        val dateToValidateDays\
    \ = dateToValidate.getDay\n        val dateToValidateMonths = dateToValidate.getMonth\n\
    \        val dateToValidateYears = dateToValidate.getYear\n        val dateToValidateMonthDays\
    \ = dateToValidateDays + dateToValidateMonths\n        val dateToValidateMonthDaysLessThan1OrHigherThan31\
    \ = dateToValidateMonthDays < 1 || dateToValidateMonthDays > 31\n        val dateToValidateMonthDaysLessThan1OrHigherThan30\
    \ = dateToValidateMonthDays < 1 || dateToValidateMonthDays > 30\n        val dateToValidateMonthDaysLessThan1OrHigherThan29\
    \ = dateToValidateMonthDays < 1 || dateToValidateMonthDays > 29\n        val dateToValidateMonthLessThan1OrHigherThan12\
    \ = dateToValidateMonths < 1 || dateToValidateMonths > 12\n        dateToValidateYears\
    \ == 4 || dateToValidateYears == 6 || dateToValidateYears == 9 || dateToValidateYears\
    \ == 11 || dateToValidateYears == 12 && dateToValidateMonthDaysLessThan1OrHigherThan31\
    \ || dateToValidateYears == 4 || dateToValidateYears == 6 || dateToValidateYears\
    \ == 9 || dateToValidateYears == 11 || dateToValidateYears == 12 && dateToValidateMonthDaysLessThan1OrHigherThan30\
    \ || dateToValidateYears == 4 || dateToValidateYears == 6 || dateToValidateYears\
    \ == 9 || dateToValidateYears == 11 || dateToValidateYears == 12 && dateToValidateMonthDaysLessThan1OrHigherThan29\
    \ || dateToValidateYears == 4 || dateToValidateYears == 6 || dateToValidateYears\
    \ == 9 || dateToValidateYears == 11 || dateToValidateYears == 12 && dateToValidateMonthLessThan1OrHigherThan12\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd1_8ne_b.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppjvc0h_4.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCheck = monthArray.contains(month)\n        val dayCheck = dayArray.contains(day)\n\
    \        val yearCheck = yearArray.contains(year)\n        val dateCheck = monthCheck\
    \ && dayCheck && yearCheck\n        dateCheck\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy92i28qd.scala:36)\n\tat Problem.main(tmpy92i28qd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) match {\n            case null => false\n  \
    \          case _ => true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjmimn52.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.format(new java.util.Date(date))\n    \
    \    val dateArray = dateString.split(\"-\")\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,6,9,11)\n        val daysInMonthsInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n \
    \       val daysInMonthLeapYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthLeapYearLeapYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthLeapYearLeapYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthLeapYearLeapYearLeapYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthLeapYearLeapYearLeapYearLeapYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthLeapYearLeapYearLeapYearLeapYearLeapYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthLeapYearLeapYearLeapYearLeapYearLeapYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthLeapYearLeapYearLeapYearLeapYearLeapYearLeapYearLeapYear\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYearLeapYearLeapYearLeapYear\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYearLeapYearLeapYear\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYearLeapYearLeapYear\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYearLeapYearLeapYear\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYearLeapYear\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYearLeapYear\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYearLeapYear\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYearLeapYear\
    \ = Array(31,30,31,30,31,30,31,30,31,30,3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt2u40ete.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt2u40ete.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonthLeapYearLeapYearLeapYear\e[0m = Array(\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthLeapYearLeapYearLeapYear is already defined as\
    \ \e[33mvalue\e[0m \e[35mdaysInMonthLeapYearLeapYearLeapYear\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt2u40ete.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonthLeapYearLeapYearLeapYearLeapYearLeapYearLeapYear\e[0m = Array(\e\
    [31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthLeapYearLeapYearLeapYearLeapYearLeapYearLeapYear\
    \ is already defined as \e[33mvalue\e[0m \e[35mdaysInMonthLeapYearLeapYearLeapYearLeapYearLeapYearLeapYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt2u40ete.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthLeapYearLeapYearLeapYearLeapYearLeapYearLeapYearLeapYear\e\
    [0m = Array(\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        dateArray.getTime !=\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5kij9rjj.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthValid = monthArray.contains(month)\n        val dayValid = dayArray.contains(day)\n\
    \        val yearValid = yearArray.contains(year)\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphof4i18g.scala:36)\n\tat Problem.main(tmphof4i18g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = List(1, 3, 5, 7, 8,\
    \ 10, 12)\n        val dayArray = List(1, 30, 29)\n        val monthIndex = monthArray.indexOf(month)\n\
    \        val dayIndex = dayArray.indexOf(day)\n        val dateValid = monthIndex\
    \ != -1 && dayIndex != -1 && year != 0\n        dateValid\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfwpsv5u6.scala:34)\n\tat Problem.main(tmpfwpsv5u6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800538
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(date.isEmpty){\n            return false\n        }\n        if(monthArray.contains(month)\
    \ && dayArray.contains(day) && yearArray.contains(year)){\n            return\
    \ true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzzimr6w.scala:38)\n\tat Problem.main(tmptzzimr6w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val monthArray = Array.ofDim[Int](month)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val monthArray = Array.ofDim[Int](month)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4k7l30ki.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthArray\e[0m =\
    \ Array.ofDim[\e[35mInt\e[0m](daysInMonth)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthArray is already defined as \e[33mvalue\e[0m \e\
    [35mdaysInMonthArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4k7l30ki.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmonthArray\e[0m = Array.ofDim[\e\
    [35mInt\e[0m](month)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthArray is already defined as \e[33mvalue\e[0m \e[35mmonthArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4k7l30ki.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthArray\e[0m = Array.ofDim[\e\
    [35mInt\e[0m](daysInMonth)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthArray is already defined as \e[33mvalue\e[0m \e\
    [35mdaysInMonthArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4k7l30ki.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthArray\e[0m =\
    \ Array.ofDim[\e[35mInt\e[0m](daysInMonth)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthArray is already defined as \e[33mvalue\e[0m \e\
    [35mdaysInMonthArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4k7l30ki.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |"
  stdout: ''
  timestamp: 1659800539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val valid = month < 1 || month > 12\n        val validDay = day < 1 ||\
    \ day > daysInMonth\n        val validMonth = month < 1 || month > monthsInMonth\n\
    \        val validYear = year >= 1900 && year <= 2100\n        valid && validMonth\
    \ && validDay && validYear\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphxsbj5w_.scala:26:37 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphxsbj5w_.scala:27:39 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmonthsInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            value Calendar is not a member of util\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800538
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        val months = dateArray(0).toInt\n\
    \        val days = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if(months < 1 || months > 12)\n            return false\n        if(days\
    \ < 1 || days > 31)\n            return false\n        if(months == 2 && days\
    \ > 29)\n            return false\n        if(months == 2 && days == 29)\n   \
    \         return true\n        if(months == 3 && days > 30)\n            return\
    \ false\n        if(months == 3 && days == 30)\n            return true\n    \
    \    if(months == 4 && days > 31)\n            return false\n        if(months\
    \ == 4 && days == 31)\n            return true\n        if(months == 6 && days\
    \ > 30)\n            return false\n        if(months == 6 && days == 30)\n   \
    \         return true\n        if(months == 9 && days > 31)\n            return\
    \ false\n        if(months == 9 && days == 31)\n            return true\n    \
    \    if(months == 11 && days > 30)\n            return false\n        if(months\
    \ == 11 && days == 30)\n            return true\n        if(months == 12 && days\
    \ > 31)\n            return false\n        if(months == 12 && days == 31)\n  \
    \          return true\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpepo4e9we.scala:70)\n\tat Problem.main(tmpepo4e9we.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2020,2021,2022)\n        val monthArray4 = Array(4,6,9,11)\n\
    \        val dayArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray4 = Array(2024,2025,2026)\n        val monthArray5 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2028,2029,2030)\n        val monthArray6 = Array(4,6,9,11)\n\
    \        val dayArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray6 = Array(2032,2033,2034)\n        val monthArray7 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2036,2037,2038)\n        val monthArray8 = Array(4,6,9,11)\n\
    \        val dayArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray8 = Array(2040,2041,2042)\n        val monthArray9 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray9 = Array(2044,2045,2046)\n        val monthArray10 = Array(4,6,9,11)\n\
    \        val dayArray10 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray10 = \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1xfx0j8g.scala:55:25 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36myearArray10\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1xfx0j8g.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getTime\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_rn7e9l.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        val months = dateArray(0).toInt\n\
    \        val days = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if(months < 1 || months > 12)\n            return false\n        if(days\
    \ < 1 || days > 31)\n            return false\n        if(months == 2 && days\
    \ > 30)\n            return false\n        if(months == 3 && days > 29)\n    \
    \        return false\n        if(months == 4 && days > 28)\n            return\
    \ false\n        if(months == 5 && days > 27)\n            return false\n    \
    \    if(months == 6 && days > 26)\n            return false\n        if(months\
    \ == 7 && days > 25)\n            return false\n        if(months == 8 && days\
    \ > 24)\n            return false\n        if(months == 9 && days > 23)\n    \
    \        return false\n        if(months == 10 && days > 22)\n            return\
    \ false\n        if(months == 11 && days > 21)\n            return false\n   \
    \     if(months == 12 && days > 20)\n            return false\n        if(months\
    \ == 1 && days > 19)\n            return false\n        if(months == 2 && days\
    \ > 18)\n            return false\n        if(months == 3 && days > 17)\n    \
    \        return false\n        if(months == 4 && days > 16)\n            return\
    \ false\n        if(months == 5 && days > 15)\n            return false\n    \
    \    if(months == 6 && days > 14)\n            return false\n        if(months\
    \ == 7 && days > 13)\n            return false\n        if(months == 8 && days\
    \ > 12)\n            return false\n        if(months == 9 && days > 11)\n    \
    \        return false\n        if(months == 10 && days > 10)\n            return\
    \ false\n        if(months == 11 && days > 9)\n            return false\n    \
    \    if(months == 12 && days > 8)\n            return false\n        if(months\
    \ == 1 && days > 7)\n            return false\n        if(months == 2 && days\
    \ > 6)\n            return false\n        if(months == 3 && days > 5)\n      \
    \      return false\n        if(months == 4 && days > 4)\n            return false\n\
    \        if(months == 5 && days > 3)\n            return false\n        if(months\
    \ == 6 && days > 2)\n            return false\n        if(months == 7 && days\
    \ > 1)\n            return false\n        if(months == 8 && days > 0)\n      \
    \      return false\n        if(months == 9 && days > -1)\n            return\
    \ false\n        if(months == 10 && days > -2)\n            return false\n   \
    \     if(months == 11 && days > -3)\n            return false\n        if(months\
    \ == 12 && days > -4)\n            return false\n        if(months == 1 && days\
    \ > -5)\n            return false\n        if(months == 2 && days > \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcg013g65.scala:104:32 --------------------------\e\
    [0m\e[0m\n\e[31m104 |\e[0m        \e[33mif\e[0m(months == \e[31m2\e[0m && days\
    \ > \n\e[31m\e[31m    |\e[0m                                ^\e[0m\n\e[31m   \
    \ |\e[0m                                expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).getTime\n        val dateArray2\
    \ = dateFormat.parse(date).getTime\n        val dateArray3 = dateFormat.parse(date).getTime\n\
    \        val dateArray4 = dateFormat.parse(date).getTime\n        val dateArray5\
    \ = dateFormat.parse(date).getTime\n        val dateArray6 = dateFormat.parse(date).getTime\n\
    \        val dateArray7 = dateFormat.parse(date).getTime\n        val dateArray8\
    \ = dateFormat.parse(date).getTime\n        val dateArray9 = dateFormat.parse(date).getTime\n\
    \        val dateArray10 = dateFormat.parse(date).getTime\n        val dateArray11\
    \ = dateFormat.parse(date).getTime\n        val dateArray12 = dateFormat.parse(date).getTime\n\
    \        val dateArray13 = dateFormat.parse(date).getTime\n        val dateArray14\
    \ = dateFormat.parse(date).getTime\n        val dateArray15 = dateFormat.parse(date).getTime\n\
    \        val dateArray16 = dateFormat.parse(date).getTime\n        val dateArray17\
    \ = dateFormat.parse(date).getTime\n        val dateArray18 = dateFormat.parse(date).getTime\n\
    \        val dateArray19 = dateFormat.parse(date).getTime\n        val dateArray20\
    \ = dateFormat.parse(date).getTime\n        val dateArray21 = dateFormat.parse(date).getTime\n\
    \        val dateArray22 = dateFormat.parse(date).getTime\n        val dateArray23\
    \ = dateFormat.parse(date).getTime\n        val dateArray24 = dateFormat.parse(date).getTime\n\
    \        val dateArray25 = dateFormat.parse(date).getTime\n        val dateArray26\
    \ = dateFormat.parse(date).getTime\n        val dateArray27 = dateFormat.parse(date).getTime\n\
    \        val dateArray28 = dateFormat.parse(date).getTime\n        val dateArray29\
    \ = dateFormat.parse(date).getTime\n        val dateArray30 = dateFormat.parse(date).getTime\n\
    \        val dateArray31 = dateFormat.parse(date).getTime\n        val dateArray32\
    \ = dateFormat.parse(date).getTime\n        val dateArray33 = dateFormat.parse(date).getTime\n\
    \        val dateArray34 = dateFormat.parse(date).getTime\n        val dateArray35\
    \ = dateFormat.parse(date).getTime\n        val dateArray36 = dateFormat.parse(date).getTime\n\
    \        val dateArray\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldk4i69p.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldk4i69p.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpldk4i69p.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        if(month < 1 || month > 12){\n    \
    \        return false\n        }\n        if(day < 1 || day > 31){\n         \
    \   return false\n        }\n        if(month == 2 && day > 29){\n           \
    \ return false\n        }\n        if(month == 2 && day < 1){\n            return\
    \ false\n        }\n        if(month == 2 && day > 30){\n            return false\n\
    \        }\n        if(month == 2 && day > 31){\n            return false\n  \
    \      }\n        if(month == 2 && day > 31){\n            return false\n    \
    \    }\n        if(month == 2 && day > 31){\n            return false\n      \
    \  }\n        if(month == 2 && day > 31){\n            return false\n        }\n\
    \        if(month == 2 && day > 31){\n            return false\n        }\n  \
    \      if(month == 2 && day > 31){\n            return false\n        }\n    \
    \    if(month == 2 && day > 31){\n            return false\n        }\n      \
    \  if(month == 2 && day > 31){\n            return false\n        }\n        if(month\
    \ == 2 && day > 31){\n            return false\n        }\n        if(month ==\
    \ 2 && day > 31){\n            return false\n        }\n        if(month == 2\
    \ && day > 31){\n            return false\n        }\n        if(month == 2 &&\
    \ day > 31){\n            return false\n        }\n        if(month == 2 && day\
    \ > 31){\n            return false\n        }\n        if(month == 2 && day >\
    \ 31){\n            return false\n        }\n        if(month == 2 && day > 31){\n\
    \            return false\n        }\n        if(month == 2 && day > 31){\n  \
    \          return false\n        }\n        if(month == 2 && day > 31){\n    \
    \        return false\n        }\n        if(month == 2 && day > 31){\n      \
    \      return false\n        }\n        if(month == 2 && day > 31){\n        \
    \    return false\n        }\n        if(month == 2 && day > 31){\n          \
    \  return false\n        }\n        if(month == 2 && day > 31){\n            return\
    \ false\n        }\n        if(month == 2 && day > 31){\n            return false\n\
    \        }\n        if(month == 2 && day > 31){\n            return false\n  \
    \      }\n        if(month == 2 && day > 31){\n            return false\n    \
    \    }\n        if(month == 2 && day > 31){\n            return false\n      \
    \  }\n        if(month == 2 && day > 31){\n            return false\n        }\n\
    \        if(month == 2 && day > 31){\n            return false\n        }\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp546saca3.scala:119:8\
    \ --------------------\e[0m\e[0m\n\e[31m119 |\e[0m        \e[33mif\e[0m(month\
    \ == \e[31m2\e[0m && day > \e[31m31\e[0m){\n\e[31m\e[31m    |\e[0m        ^\e\
    [0m\n\e[31m    |\e[0m        Found:    Unit\n\e[31m    |\e[0m        Required:\
    \ Boolean\n\e[31m    |\e[0m        Maybe you are missing an else part for the\
    \ conditional?\n\e[31m120 |\e[0m            \e[33mreturn\e[0m \e[31mfalse\e[0m\n\
    \e[31m121 |\e[0m        }\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppjvc0h_4.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val monthArray = dateArray(0).toString.toInt\n        val dayArray = dateArray(1).toString.toInt\n\
    \        val year = dateArray(2).toString.toInt\n        val month = monthArray\n\
    \        val day = dayArray\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray\
    \ = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n        val\
    \ daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray = Array.fill(12)(0)\n\
    \        val yearArray = Array.fill(12)(0)\n        val daysInMonthArray = Array.fill(daysInMonth)(0)\n\
    \        val monthArray = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n\
    \        val daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray\
    \ = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n        val\
    \ daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray = Array.fill(12)(0)\n\
    \        val yearArray = Array.fill(12)(0)\n        val daysInMonthArray = Array.fill(daysInMonth)(0)\n\
    \        val monthArray = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n\
    \        val daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray\
    \ = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n        val\
    \ daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray = Array.fill(12)(0)\n\
    \        val yearArray = Array.fill(12)(0)\n        val daysInMonthArray = Array.fill(daysInMonth)(0)\n\
    \        val monthArray = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n\
    \        val daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray\
    \ = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n        val\
    \ daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray = Array.fill(12)(0)\n\
    \        val yearArray = Array.fill(12)(0)\n        val daysInMonthArray = Array.fill(daysInMonth)(0)\n\
    \        val monthArray = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n\
    \        val daysInMonthArray = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3099qkn2.scala:65:30 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthArray\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3099qkn2.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthArray\e[0m = Array.fill(\e[31m12\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmonthArray\
    \ is already defined as \e[33mvalue\e[0m \e[35mmonthArray\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3099qkn2.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonthArray\e[0m = Array.fill(daysInMonth)(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdaysInMonthArray is already defined as \e[33mvalue\e[0m \e[35mdaysInMonthArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3099qkn2.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mmonthArray\e[0m = Array.fill(\e[31m12\e\
    [0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthArray is already defined as \e[33mvalue\e[0m \e[35mmonthArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3099qkn2.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36myearArray\e[0m = Array.fill(\e[31m12\e\
    [0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659800540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        val month = dateArray(0).toInt\n\
    \        val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if(month < 1 || month > 12)\n            return false\n        if(day\
    \ < 1 || day > 31)\n            return false\n        if(month == 2 && day > 30)\n\
    \            return false\n        if(month == 2 && day < 29)\n            return\
    \ false\n        if(month == 2 && day > 28)\n            return false\n      \
    \  if(month == 2 && day < 28)\n            return false\n        if(month == 2\
    \ && day > 27)\n            return false\n        if(month == 2 && day < 27)\n\
    \            return false\n        if(month == 2 && day > 26)\n            return\
    \ false\n        if(month == 2 && day < 26)\n            return false\n      \
    \  if(month == 2 && day > 25)\n            return false\n        if(month == 2\
    \ && day < 25)\n            return false\n        if(month == 2 && day > 24)\n\
    \            return false\n        if(month == 2 && day < 24)\n            return\
    \ false\n        if(month == 2 && day > 23)\n            return false\n      \
    \  if(month == 2 && day < 23)\n            return false\n        if(month == 2\
    \ && day > 22)\n            return false\n        if(month == 2 && day < 22)\n\
    \            return false\n        if(month == 2 && day > 21)\n            return\
    \ false\n        if(month == 2 && day < 21)\n            return false\n      \
    \  if(month == 2 && day > 20)\n            return false\n        if(month == 2\
    \ && day < 20)\n            return false\n        if(month == 2 && day > 19)\n\
    \            return false\n        if(month == 2 && day < 19)\n            return\
    \ false\n        if(month == 2 && day > 18)\n            return false\n      \
    \  if(month == 2 && day < 18)\n            return false\n        if(month == 2\
    \ && day > 17)\n            return false\n        if(month == 2 && day < 17)\n\
    \            return false\n        if(month == 2 && day > 16)\n            return\
    \ false\n        if(month == 2 && day < 16)\n            return false\n      \
    \  if(month == 2 && day > 15)\n            return false\n        if(month == 2\
    \ && day < 15)\n            return false\n        if(month == 2 && day > 14)\n\
    \            return false\n        if(month == 2 && day < 14)\n            return\
    \ false\n        if(month == 2 && day > 13)\n            return false\n      \
    \  if(month == 2 && day < 13)\n            return false\n        if(month == 2\
    \ && day > 12)\n            return false\n        if(month == 2 && day < 12)\n\
    \            return false\n        if(month == 2 && day > 11)\n            return\
    \ false\n        if(month == 2 && day < 11)\n            return false\n      \
    \  if(month == 2 && day > 10)\n            return false\n        if(month == 2\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3qajynzg.scala:111:4 ---------------------------\e\
    [0m\e[0m\n\e[31m111 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800512
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3){\n            return false\n        }\n        val\
    \ months = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val days = List(31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthDays = months.zip(days)\n        val monthDaysArray = monthDays.toArray\n\
    \        if(dateArray(0) > 12 || dateArray(1) < 1 || dateArray(2) < 1 || dateArray(2)\
    \ > 12){\n            return false\n        }\n        if(months.contains(dateArray(0))){\n\
    \            if(monthDaysArray.contains(dateArray(0))){\n                if(dateArray(1)\
    \ < 1 || dateArray(1) > days(dateArray(0))){\n                    return false\n\
    \                }\n            }\n        }\n        if(months.contains(dateArray(1))){\n\
    \            if(monthDaysArray.contains(dateArray(1))){\n                if(dateArray(2)\
    \ < 1 || dateArray(2) > days(dateArray(1))){\n                    return false\n\
    \                }\n            }\n        }\n        if(months.contains(dateArray(2))){\n\
    \            if(monthDaysArray.contains(dateArray(2))){\n                if(dateArray(3)\
    \ < 1 || dateArray(3) > days(dateArray(2))){\n                    return false\n\
    \                }\n            }\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxv04txy0.scala:30:26\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mif\e[0m(dateArray(\e\
    [31m0\e[0m) > \e[31m12\e[0m || dateArray(\e[31m1\e[0m) < \e[31m1\e[0m || dateArray(\e\
    [31m2\e[0m) < \e[31m1\e[0m || dateArray(\e[31m2\e[0m) > \e[31m12\e[0m){\n\e[31m\e\
    [31m   |\e[0m                          ^^\e[0m\n\e[31m   |\e[0m              \
    \            Found:    (\e[31m12\e[0m : Int)\n\e[31m   |\e[0m                \
    \          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxv04txy0.scala:30:47 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mif\e[0m(dateArray(\e[31m0\e[0m) > \e[31m12\e[0m || dateArray(\e\
    [31m1\e[0m) < \e[31m1\e[0m || dateArray(\e[31m2\e[0m) < \e[31m1\e[0m || dateArray(\e\
    [31m2\e[0m) > \e[31m12\e[0m){\n\e[31m\e[31m   |\e[0m                         \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m             \
    \                                  Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpxv04txy0.scala:30:67 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mif\e[0m(dateArray(\e[31m0\e[0m) > \e[31m12\e\
    [0m || dateArray(\e[31m1\e[0m) < \e[31m1\e[0m || dateArray(\e[31m2\e[0m) < \e\
    [31m1\e[0m || dateArray(\e[31m2\e[0m) > \e[31m12\e[0m){\n\e[31m\e[31m   |\e[0m\
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                     Found:    (\e\
    [31m1\e[0m : Int)\n\e[31m   |\e[0m                                           \
    \          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxv04txy0.scala:30:87 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mif\e[0m(dateArray(\e[31m0\e[0m) > \e[31m12\e[0m || dateArray(\e\
    [31m1\e[0m) < \e[31m1\e[0m || dateArray(\e[31m2\e[0m) < \e[31m1\e[0m || "
  stdout: ''
  timestamp: 1659800541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val daysInMonth = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInMonth = scala.collection.mutable.ListBuffer(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val monthDays = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysOfYear = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysOfYearOfYear = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysOfYearOfYearOfYear = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysOfYearOfYearOfYearOfYear = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysOfYearOfYearOfYearOfYearOfYear = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysOfYearOfYearOfYearOfYearOfYearOfYear = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysOfYearOfYearOfYearOfYearOfYearOfYearOfYear = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysOfYearOfYearOfYearOfYearOfYearOfYearOfYear = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysOfYearOfYearOfYearOfYearOfYearOfYearOfYear = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysOfYearOfYearOfYearOfYearOfYearOfYearOfYearOfYear = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysOfYearOfYearOfYearOfYearOfYearOfYearOfYear\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5lhsyirj.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5lhsyirj.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthDaysOfYearOfYearOfYearOfYearOfYearOfYearOfYear\e[0m = scala.collection.mutable.ListBuffer(\e\
    [31m31\e[0m,\e[31m30\e[0m,\e[31m29\e[0m,\e[31m28\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthDaysOfYearOfYearOfYearOfYearOfYearOfYearOfYear is already\
    \ defined as \e[33mvalue\e[0m \e[35mmonthDaysOfYearOfYearOfYearOfYearOfYearOfYearOfYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5lhsyirj.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mmonthDaysOfYearOfYearOfYearOfYearOfYearOfYearOfYear\e\
    [0m = scala.collection.mutable.ListBuffer(\e[31m31\e[0m,\e[31m30\e[0m,\e[31m29\e\
    [0m,\e[31m28\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthDaysOfYearOfYearOfYearOfYearOfYearOfYearOfYear is already\
    \ defined as \e[33mvalue\e[0m \e[35mmonthDaysOfYearOfYearOfYearOfYearOfYearOfYearOfYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp5lhsyirj.scala:40:5 ---------------------\e[0m\e[0m\n\
    \e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |"
  stdout: ''
  timestamp: 1659800539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppjvc0h_4.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        val dateInDays = dateObject.getTime\n\
    \        val dateInDaysInYear = dateInDays / 1000\n        val dateInDaysInYearInMonth\
    \ = dateInDaysInYear / 86400\n        val dateInDaysInYearInMonthInDay = dateInDaysInYearInMonth\
    \ / 86400\n        val dateInDaysInYearInMonthInDayInYear = dateInDaysInYearInMonthInDay\
    \ / 365\n        val dateInDaysInYearInMonthInDayInYearInMonth = dateInDaysInYearInMonthInDayInYear\
    \ / 30\n        val dateInDaysInYearInMonthInDayInYearInMonthInDay = dateInDaysInYearInMonthInDayInYearInMonth\
    \ / 29\n        dateInDaysInYearInMonthInDayInYearInMonthInDay >= 1 && dateInDaysInYearInMonthInDayInYearInMonthInDay\
    \ <= 31\n        dateInDaysInYearInMonthInDayInYearInMonthInDay >= 1 && dateInDaysInYearInMonthInDayInYearInMonthInDay\
    \ <= 30\n        dateInDaysInYearInMonthInDayInYearInMonthInDay >= 1 && dateInDaysInYearInMonthInDayInYearInMonthInDay\
    \ <= 29\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9iuse8s1.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val monthArray = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val monthArray2 = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val daysInMonthArray2 = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray3\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray4 = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray5 = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray6\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray7 = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray8 = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray9\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray10 = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray11 = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray12\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray13 = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray14 = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray15\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray16 = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray17 = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray18\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray19 = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray20 = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray21\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray22 = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray23\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq0c59fog.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq0c59fog.scala:26:37\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mdaysInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpq0c59fog.scala:28:19 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ value Calendar is not a member of util\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpq0c59fog.scala:29:53 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        \e[33mval\e[0m \e[36mmonthArray\e[0m = Array.ofDim[\e[35mInt\e[0m](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value Calendar is not a\
    \ member of util\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq0c59fog.scala:30:54\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mmonthArray2\e[0m = Array.ofDim[\e[35mInt\e[0m](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value Calendar is not a\
    \ member of util\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq0c59fog.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n6 er"
  stdout: ''
  timestamp: 1659800540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val daysInMonth = DateTimeFormat.forPattern(\"MM\").parse(\"12\").getDayOfMonth\n\
    \        val daysInMonth30 = DateTimeFormat.forPattern(\"MM\").parse(\"30\").getDayOfMonth\n\
    \        val daysInMonth29 = DateTimeFormat.forPattern(\"MM\").parse(\"29\").getDayOfMonth\n\
    \        val daysInMonth31 = DateTimeFormat.forPattern(\"MM\").parse(\"31\").getDayOfMonth\n\
    \        val daysInMonth1 = DateTimeFormat.forPattern(\"MM\").parse(\"1\").getDayOfMonth\n\
    \        val daysInMonth4 = DateTimeFormat.forPattern(\"MM\").parse(\"4\").getDayOfMonth\n\
    \        val daysInMonth6 = DateTimeFormat.forPattern(\"MM\").parse(\"6\").getDayOfMonth\n\
    \        val daysInMonth9 = DateTimeFormat.forPattern(\"MM\").parse(\"9\").getDayOfMonth\n\
    \        val daysInMonth11 = DateTimeFormat.forPattern(\"MM\").parse(\"11\").getDayOfMonth\n\
    \        val daysInMonth12 = DateTimeFormat.forPattern(\"MM\").parse(\"12\").getDayOfMonth\n\
    \        val daysInMonth1 = DateTimeFormat.forPattern(\"MM\").parse(\"1\").getDayOfMonth\n\
    \        val daysInMonth2 = DateTimeFormat.forPattern(\"MM\").parse(\"2\").getDayOfMonth\n\
    \        val daysInMonth3 = DateTimeFormat.forPattern(\"MM\").parse(\"3\").getDayOfMonth\n\
    \        val daysInMonth5 = DateTimeFormat.forPattern(\"MM\").parse(\"5\").getDayOfMonth\n\
    \        val daysInMonth7 = DateTimeFormat.forPattern(\"MM\").parse(\"7\").getDayOfMonth\n\
    \        val daysInMonth8 = DateTimeFormat.forPattern(\"MM\").parse(\"8\").getDayOfMonth\n\
    \        val daysInMonth10 = DateTimeFormat.forPattern(\"MM\").parse(\"10\").getDayOfMonth\n\
    \        val daysInMonth12 = DateTimeFormat.forPattern(\"MM\").parse(\"12\").getDayOfMonth\n\
    \        val daysInMonth1 = DateTimeFormat.forPattern(\"MM\").parse(\"1\").getDayOfMonth\n\
    \        val daysInMonth2 = DateTimeFormat.forPattern(\"MM\").parse(\"2\").getDayOfMonth\n\
    \        val daysInMonth3 = DateTimeFormat.forPattern(\"MM\").parse(\"3\").getDayOfMonth\n\
    \        val daysInMonth5 = DateTimeFormat.forPattern(\"MM\").parse(\"5\").getDayOfMonth\n\
    \        val daysInMonth7 = DateTime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvv25qadf.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth1\e[0m = DateTimeFormat.forPattern(\e\
    [31m\"MM\"\e[0m).parse(\e[31m\"1\"\e[0m).getDayOfMonth\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth1 is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth1\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvv25qadf.scala:44:12 ---------------------------\e[0m\e[0m\n\e\
    [31m44 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth12\e[0m = DateTimeFormat.forPattern(\e\
    [31m\"MM\"\e[0m).parse(\e[31m\"12\"\e[0m).getDayOfMonth\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth12 is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth12\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvv25qadf.scala:45:12 ---------------------------\e[0m\e[0m\n\e\
    [31m45 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth1\e[0m = DateTimeFormat.forPattern(\e\
    [31m\"MM\"\e[0m).parse(\e[31m\"1\"\e[0m).getDayOfMonth\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth1 is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth1\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvv25qadf.scala:46:12 ---------------------------\e[0m\e[0m\n\e\
    [31m46 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth2\e[0m = DateTimeFormat.forPattern(\e\
    [31m\"MM\"\e[0m).parse(\e[31m\"2\"\e[0m).getDayOfMonth\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth2 is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth2\e"
  stdout: ''
  timestamp: 1659800540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n    \
    \    val monthArray4 = Array(4,6,9,11)\n        val dayArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray4 = Array(2010,2011,2012)\n        val monthArray5 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2005,2006,2007,2008,2009,2010,2011,2012)\n        val monthArray6\
    \ = Array(4,6,9,11)\n        val dayArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray6 = Array(2010,2011,2012)\n        val monthArray7 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2007,2008,2009,2010,2011,2012)\n        val monthArray8 =\
    \ Array(4,6,9,11)\n        val dayArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray8 = Array(2010,2011,2012)\n        val monthArray9 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray9 = Array(2009,2010,2011,2012)\n        val monthArray10 = Array(4,6,9,11)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpozz7dorv.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        val isMonthValid = monthIndex\
    \ >= 0\n        val isDayValid = dayIndex >= 0\n        val isYearValid = yearIndex\
    \ >= 0\n        val isDateValid = monthIndex != -1 && dayIndex != -1 && yearIndex\
    \ != -1\n        val isDateValid2 = monthIndex != -1 && dayIndex != -1 && yearIndex\
    \ != -1 && monthArray.length == dayArray.length && monthArray.length == yearArray.length\n\
    \        val isDateValid3 = monthIndex != -1 && dayIndex != -1 && yearIndex !=\
    \ -1 && monthArray.length == dayArray.length && monthArray.length == yearArray.length\
    \ && monthArray.length == dayArray.length\n        val isDateValid4 = monthIndex\
    \ != -1 && dayIndex != -1 && yearIndex != -1 && monthArray.length == dayArray.length\
    \ && monthArray.length == yearArray.length && monthArray.length == dayArray.length\
    \ && monthArray.length == yearArray.length && monthArray.length == dayArray.length\
    \ && monthArray.length == yearArray.length && monthArray.length == dayArray.length\
    \ && monthArray.length == yearArray.length && monthArray.length == dayArray.length\
    \ && monthArray.length == yearArray.length && monthArray.length == dayArray.length\
    \ && monthArray.length == yearArray.length && monthArray.length == dayArray.length\
    \ && monthArray.length == yearArray.length && monthArray.length == dayArray.length\
    \ && monthArray.length == yearArray.length && monthArray.length == dayArray.length\
    \ && monthArray.length == yearArray.length && monthArray.length == dayArray.length\
    \ && monthArray.length == yearArray.length && monthArray.length == dayArray.length\
    \ && monthArray.length == yearArray.length && monthArray.length == dayArray.length\
    \ && monthArray.length == yearArray.length && monthArray.length == dayArray.length\
    \ && monthArray.length == yearArray.length && monthArray.length == dayArray.length\
    \ && monthArray.length == yearArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpe7j7dirh.scala:38:1177 ---------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36misDateValid4\e[0m = monthIndex\
    \ != -\e[31m1\e[0m && dayIndex != -\e[31m1\e[0m && yearIndex != -\e[31m1\e[0m\
    \ && monthArray.length == dayArray.length && monthArray.length == yearArray.length\
    \ && monthArray.length == dayArray.length && monthArray.length == yearArray.length\
    \ && monthArray.length == dayArray.length && monthArray.length == yearArray.length\
    \ && monthArray.length == dayArray.length && monthArray.length == yearArray.length\
    \ && monthArray.length == dayArray.length && monthArray.length == yearArray.length\
    \ && monthArray.length == dayArray.length && monthArray.length == yearArray.length\
    \ && monthArray.length == dayArray.length && monthArray.length == yearArray.length\
    \ && monthArray.length == dayArray.length && monthArray.length == yearArray.length\
    \ && monthArray.length == dayArray.length && monthArray.length == yearArray.length\
    \ && monthArray.length == dayArray.length && monthArray.length == yearArray.length\
    \ && monthArray.length == dayArray.length && monthArray.length == yearArray.length\
    \ && monthArray.length == dayArray.length && monthArray.length == yearArray.length\
    \ && monthArray.length == dayArray.length && monthArray.length == yearArray.length\
    \ && monthArray.length == dayArray.length && monthArray.length == yearArray\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           "
  stdout: ''
  timestamp: 1659800540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppjvc0h_4.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        val dateFormat2 = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateObj4 = dateFormat4.parse(date)\n        val dateFormat5\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj5 = dateFormat5.parse(date)\n\
    \        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj6\
    \ = dateFormat6.parse(date)\n        val dateFormat7 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateObj7 = dateFormat7.parse(date)\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj8 = dateFormat8.parse(date)\n\
    \        val dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateObj10 = dateFormat10.parse(date)\n        val dateFormat11\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj11 = dateFormat11.parse(date)\n\
    \        val dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateObj12 = dateFormat12.parse(date)\n        val dateFormat13 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateObj13 = dateFormat13.parse(date)\n        val dateFormat14\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj14 = dateFormat14.parse(date)\n\
    \        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateObj15 = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateObj16 = dateFormat16.parse(date)\n        val dateFormat17\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj17 = dateFormat17.parse(date)\n\
    \        val dateFormat18 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateObj18 = dateFormat18.parse(date)\n        val date\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjyovplhr.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjyovplhr.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjyovplhr.scala:24:30\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat2\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjyovplhr.scala:26:30\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat3\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjyovplhr.scala:28:30\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat4\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjyovplhr.sc"
  stdout: ''
  timestamp: 1659800539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        val dateInDays = dateObject.getTime()\
    \ / 1000\n        val dateInDaysInYear = dateInDays / 86400\n        val dateInDaysInYearInMonth\
    \ = dateInDaysInYear / 30\n        val dateInDaysInYearInMonthInDay = dateInDaysInYearInMonth\
    \ / 30\n        val dateInDaysInYearInMonthInDayInYear = dateInDaysInYearInMonthInDay\
    \ / 365\n        val dateInDaysInYearInMonthInDayInYearInMonth = dateInDaysInYearInMonthInDayInYear\
    \ / 30\n        val dateInDaysInYearInMonthInDayInYearInMonthInDay = dateInDaysInYearInMonthInDayInYearInMonth\
    \ / 30\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYear = dateInDaysInYearInMonthInDayInYearInMonthInDay\
    \ / 365\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonth\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInYear / 30\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDay\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonth / 30\n       \
    \ val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYear =\
    \ dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDay / 365\n   \
    \     val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYearInMonth\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYear / 30\n\
    \        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYearInMonthInDay\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYearInMonth\
    \ / 30\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYear\
    \ = dateInDaysInYearInMonthIn\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphl4uso3b.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphl4uso3b.scala:37:103 -----------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mdateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYear\e\
    [0m = dateInDaysInYearInMonthIn\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \           Not found: dateInDaysInYearInMonthIn\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmphl4uso3b.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val monthArray = dateArray(0).toString.toInt\n        val dayArray = dateArray(1).toString.toInt\n\
    \        val year = dateArray(2).toString.toInt\n        val monthDays = monthArray*31+dayArray\n\
    \        val months = monthArray+12\n        val daysInMonth = months*31\n   \
    \     val daysInYear = year*365.25\n        val daysInLeapYear = year*365.2425\n\
    \        val daysInYearMonth = daysInYear*monthArray\n        val daysInLeapYearMonth\
    \ = daysInLeapYear*monthArray\n        val daysInMonthYear = daysInMonth*year\n\
    \        val daysInMonthLeapYear = daysInMonth*year\n        val daysInMonthYearMonth\
    \ = daysInMonthYear*monthArray\n        val daysInMonthLeapYearMonth = daysInMonthLeapYear*monthArray\n\
    \        val daysInMonthYearMonthLeapYear = daysInMonthYearMonth*monthArray\n\
    \        val daysInMonthLeapYearMonthLeapYear = daysInMonthLeapYearMonth*monthArray\n\
    \        val daysInMonthYearMonthLeapYearLeapYear = daysInMonthYearMonthLeapYear*monthArray\n\
    \        val daysInMonthLeapYearMonthLeapYear = daysInMonthLeapYearMonth*monthArray\n\
    \        val daysInMonthYearMonthLeapYearLeapYear = daysInMonthYearMonthLeapYear*monthArray\n\
    \        val daysInMonthLeapYearMonthLeapYear = daysInMonthLeapYearMonth*monthArray\n\
    \        val daysInMonthYearMonthLeapYearLeapYear = daysInMonthYearMonthLeapYear*monthArray\n\
    \        val daysInMonthLeapYearMonthLeapYear = daysInMonthLeapYearMonth*monthArray\n\
    \        val daysInMonthYearMonthLeapYearLeapYear = daysInMonthYearMonthLeapYear*monthArray\n\
    \        val daysInMonthLeapYearMonthLeapYear = daysInMonthLeapYearMonth*monthArray\n\
    \        val daysInMonthYearMonthLeapYearLeapYear = daysInMonthYearMonthLeapYear*monthArray\n\
    \        val daysInMonthLeapYearMonthLeapYear = daysInMonthLeapYearMonth*monthArray\n\
    \        val daysInMonthYearMonthLeapYearLeapYear = daysInMonthYearMonthLeapYear*monthArray\n\
    \        val daysInMonthLeapYearMonthLeapYear = daysInMonthLeapYearMonth*monthArray\n\
    \        val daysInMonthYearMonthLeapYearLeapYear = daysInMonthYearMonthLeapYear*monthArray\n\
    \        val daysInMonthLeapYearMonthLeapYear = daysInMonthLeapYearMonth*monthArray\n\
    \        val daysInMonthYearMonthLeapYearLeapYear = daysInMonthYearMonthLeapYear*monthArray\n\
    \        val daysInMonthLeapYearMonthLeapYear = daysInMonthLeapYearMonth*monthArray\n\
    \        val daysInMonthYearMonthLeapYearLeapYear = daysInMonthYearMonthLeapYear*monthArray\n\
    \        val daysInMonthLeapYearMonthLeapYear = daysInMonth\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd5vkje4m.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthLeapYearMonthLeapYear\e\
    [0m = daysInMonthLeapYearMonth*monthArray\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthLeapYearMonthLeapYear is already defined as \e\
    [33mvalue\e[0m \e[35mdaysInMonthLeapYearMonthLeapYear\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd5vkje4m.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonthYearMonthLeapYearLeapYear\e[0m = daysInMonthYearMonthLeapYear*monthArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthYearMonthLeapYearLeapYear is already defined as\
    \ \e[33mvalue\e[0m \e[35mdaysInMonthYearMonthLeapYearLeapYear\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd5vkje4m.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonthLeapYearMonthLeapYear\e[0m = daysInMonthLeapYearMonth*monthArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthLeapYearMonthLeapYear is already defined as \e\
    [33mvalue\e[0m \e[35mdaysInMonthLeapYearMonthLeapYear\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd5vkje4m.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonthYearMonthLeapYearLeapYear\e[0m = daysInMonthYearMonthLeapYear*monthArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1659800540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getTime\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_rn7e9l.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        val monthArray\
    \ = dateArray(0).toString.split(\"-\")\n        if(monthArray.length != 2)\n \
    \           return false\n        val dayArray = dateArray(1).toString.split(\"\
    -\")\n        if(dayArray.length != 2)\n            return false\n        if(monthArray(0).toInt\
    \ < 1 || monthArray(0).toInt > 12)\n            return false\n        if(monthArray(1).toInt\
    \ < 1 || monthArray(1).toInt > 12)\n            return false\n        if(dayArray(0).toInt\
    \ < 1 || dayArray(0).toInt > 31)\n            return false\n        if(dayArray(1).toInt\
    \ < 1 || dayArray(1).toInt > 30)\n            return false\n        if(dayArray(2).toInt\
    \ < 1 || dayArray(2).toInt > 29)\n            return false\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7a49_tsi.scala:44)\n\tat Problem.main(tmp7a49_tsi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        if(month < 1 || month > 12) false\n\
    \        else if(day < 1 || day > 31) false\n        else if(month == 2 && day\
    \ > 29) false\n        else if(month == 2 && day > 28) false\n        else true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmp7zpn7m0p.scala:23)\n\
    \tat Problem$.main(tmp7zpn7m0p.scala:39)\n\tat Problem.main(tmp7zpn7m0p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getTime\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_rn7e9l.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = Array(1, 3, 5, 7,\
    \ 8, 10, 12)\n        val daysArray = Array(31, 30, 29)\n        val monthArray2\
    \ = Array(4, 6, 9, 11)\n        val yearArray = Array(1, 4, 6, 8)\n        val\
    \ daysInMonth = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n      \
    \  val daysInMonth2 = Array(30, 29, 30)\n        val daysInMonth3 = Array(31,\
    \ 30)\n        val daysInMonth4 = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val daysInMonth5 = Array(31, 30)\n        val daysInMonth6\
    \ = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonth7\
    \ = Array(31, 30)\n        val daysInMonth8 = Array(31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31)\n        val daysInMonth9 = Array(31, 30)\n        val daysInMonth10\
    \ = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonth11\
    \ = Array(31, 30)\n        val daysInMonth12 = Array(31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31)\n        val daysInMonth13 = Array(31, 30)\n        val\
    \ daysInMonth14 = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n    \
    \    val daysInMonth15 = Array(31, 30)\n        val daysInMonth16 = Array(31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonth17 = Array(31,\
    \ 30)\n        val daysInMonth18 = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val daysInMonth19 = Array(31, 30)\n        val daysInMonth20\
    \ = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonth21\
    \ = Array(31, 30)\n        val daysInMonth22 = Array(31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31)\n        val daysInMonth23 = Array(31, 30)\n        val\
    \ daysInMonth24 = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n    \
    \    val daysInMonth25 = Array(31, 30)\n        val daysInMonth26 = Array(31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonth27 = Array(31,\
    \ 30)\n        val daysInMonth28 = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val daysInMonth29 = Array(31, 30)\n        val daysInMonth30\
    \ = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonth31\
    \ = Array(31, 30)\n        val daysInMonth32 = Array(31, 28, \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpof3ob77r.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpof3ob77r.scala:62:5 ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppjvc0h_4.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val monthArray = dateArray(0).toString.split(\"-\")\n        val dayArray =\
    \ dateArray(1).toString.split(\"-\")\n        val monthCount = monthArray.length\n\
    \        val dayCount = dayArray.length\n        val monthValid = monthArray.forall(x\
    \ => x != \"0\")\n        val dayValid = dayArray.forall(x => x != \"0\")\n  \
    \      val dateValid = monthArray.forall(x => x != \"0\") && dayArray.forall(x\
    \ => x != \"0\")\n        val dateValid2 = monthArray.forall(x => x != \"0\")\
    \ && dayArray.forall(x => x != \"0\") && monthArray.forall(x => x != \"0\") &&\
    \ dayArray.forall(x => x != \"0\")\n        val dateValid3 = monthArray.forall(x\
    \ => x != \"0\") && dayArray.forall(x => x != \"0\") && monthArray.forall(x =>\
    \ x != \"0\") && dayArray.forall(x => x != \"0\") && monthArray.forall(x => x\
    \ != \"0\")\n        val dateValid4 = monthArray.forall(x => x != \"0\") && dayArray.forall(x\
    \ => x != \"0\") && monthArray.forall(x => x != \"0\") && dayArray.forall(x =>\
    \ x != \"0\") && monthArray.forall(x => x != \"0\") && dayArray.forall(x => x\
    \ != \"0\")\n        val dateValid5 = monthArray.forall(x => x != \"0\") && dayArray.forall(x\
    \ => x != \"0\") && monthArray.forall(x => x != \"0\") && dayArray.forall(x =>\
    \ x != \"0\") && monthArray.forall(x => x != \"0\") && dayArray.forall(x => x\
    \ != \"0\") && monthArray.forall(x => x != \"0\")\n        val dateValid6 = monthArray.forall(x\
    \ => x != \"0\") && dayArray.forall(x => x != \"0\") && monthArray.forall(x =>\
    \ x != \"0\") && dayArray.forall(x => x != \"0\") && monthArray.forall(x => x\
    \ != \"0\") && dayArray.forall(x => x != \"0\") && monthArray.forall(x => x !=\
    \ \"0\") && dayArray.forall(x => x != \"0\")\n        val dateValid7 = monthArray.forall(x\
    \ => x != \"0\") && dayArray.forall(x => x != \"0\") && monthArray.forall(x =>\
    \ x != \"0\") && dayArray.forall(x => x != \"0\") && monthArray.forall(x => \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppywhwxrr.scala:35:187 --------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mdateValid7\e[0m = monthArray.forall(\e\
    [36mx\e[0m => x != \e[31m\"0\"\e[0m) && dayArray.forall(\e[36mx\e[0m => x != \e\
    [31m\"0\"\e[0m) && monthArray.forall(\e[36mx\e[0m => x != \e[31m\"0\"\e[0m) &&\
    \ dayArray.forall(\e[36mx\e[0m => x != \e[31m\"0\"\e[0m) && monthArray.forall(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \                                                                            \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppywhwxrr.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30)\n        val monthsInYear\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear = Array(4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30)\n      \
    \  val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph414vlnh.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph414vlnh.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = Array(\e[31m31\e[0m,\e[31m28\e[0m,\e[31m31\e[0m,\e\
    [31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph414vlnh.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = Array(\e[31m1\e\
    [0m,\e[31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e\
    [0m,\e[31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph414vlnh.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmonthsInLeapYear\e[0m = Array(\e[31m4\e\
    [0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e[0m,\e[31m8\e[0m,\e[31m9\e[0m,\e[31m10\e\
    [0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthsInLeapYear is already defined as \e[33mvalue\e[0m \e\
    [35mmonthsInLeapYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmph414vlnh.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0"
  stdout: ''
  timestamp: 1659800545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).getTime\n        val dateArray2\
    \ = dateFormat.parse(date).getTime\n        val dateArray3 = dateFormat.parse(date).getTime\n\
    \        val dateArray4 = dateFormat.parse(date).getTime\n        val dateArray5\
    \ = dateFormat.parse(date).getTime\n        val dateArray6 = dateFormat.parse(date).getTime\n\
    \        val dateArray7 = dateFormat.parse(date).getTime\n        val dateArray8\
    \ = dateFormat.parse(date).getTime\n        val dateArray9 = dateFormat.parse(date).getTime\n\
    \        val dateArray10 = dateFormat.parse(date).getTime\n        val dateArray11\
    \ = dateFormat.parse(date).getTime\n        val dateArray12 = dateFormat.parse(date).getTime\n\
    \        val dateArray13 = dateFormat.parse(date).getTime\n        val dateArray14\
    \ = dateFormat.parse(date).getTime\n        val dateArray15 = dateFormat.parse(date).getTime\n\
    \        val dateArray16 = dateFormat.parse(date).getTime\n        val dateArray17\
    \ = dateFormat.parse(date).getTime\n        val dateArray18 = dateFormat.parse(date).getTime\n\
    \        val dateArray19 = dateFormat.parse(date).getTime\n        val dateArray20\
    \ = dateFormat.parse(date).getTime\n        val dateArray21 = dateFormat.parse(date).getTime\n\
    \        val dateArray22 = dateFormat.parse(date).getTime\n        val dateArray23\
    \ = dateFormat.parse(date).getTime\n        val dateArray24 = dateFormat.parse(date).getTime\n\
    \        val dateArray25 = dateFormat.parse(date).getTime\n        val dateArray26\
    \ = dateFormat.parse(date).getTime\n        val dateArray27 = dateFormat.parse(date).getTime\n\
    \        val dateArray28 = dateFormat.parse(date).getTime\n        val dateArray29\
    \ = dateFormat.parse(date).getTime\n        val dateArray30 = dateFormat.parse(date).getTime\n\
    \        val dateArray31 = dateFormat.parse(date).getTime\n        val dateArray32\
    \ = dateFormat.parse(date).getTime\n        val dateArray33 = dateFormat.parse(date).getTime\n\
    \        val dateArray34 = dateFormat.parse(date).getTime\n        val dateArray35\
    \ = dateFormat.parse(date).getTime\n        val dateArray36 = dateFormat.parse(date).getTime\n\
    \        val dateArray\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldk4i69p.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldk4i69p.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpldk4i69p.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        dateObject != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3z0u6f1m.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = List(1, 3, 5, 7,\
    \ 8, 10, 12)\n        val daysArray = List(1, 30, 29)\n        val monthArray2\
    \ = List(2, 4, 6, 9, 11)\n        val daysArray2 = List(1, 31)\n        val monthArray3\
    \ = List(1, 3, 5)\n        val daysArray3 = List(1, 30)\n        val monthArray4\
    \ = List(1, 3, 5)\n        val daysArray4 = List(1, 29)\n        val monthArray5\
    \ = List(1, 3, 5)\n        val daysArray5 = List(1, 29)\n        val monthArray6\
    \ = List(1, 3, 5)\n        val daysArray6 = List(1, 29)\n        val monthArray7\
    \ = List(1, 3, 5)\n        val daysArray7 = List(1, 29)\n        val monthArray8\
    \ = List(1, 3, 5)\n        val daysArray8 = List(1, 29)\n        val monthArray9\
    \ = List(1, 3, 5)\n        val daysArray9 = List(1, 29)\n        val monthArray10\
    \ = List(1, 3, 5)\n        val daysArray10 = List(1, 29)\n        val monthArray11\
    \ = List(1, 3, 5)\n        val daysArray11 = List(1, 29)\n        val monthArray12\
    \ = List(1, 3, 5)\n        val daysArray12 = List(1, 29)\n        val monthArray13\
    \ = List(1, 3, 5)\n        val daysArray13 = List(1, 29)\n        val monthArray14\
    \ = List(1, 3, 5)\n        val daysArray14 = List(1, 29)\n        val monthArray15\
    \ = List(1, 3, 5)\n        val daysArray15 = List(1, 29)\n        val monthArray16\
    \ = List(1, 3, 5)\n        val daysArray16 = List(1, 29)\n        val monthArray17\
    \ = List(1, 3, 5)\n        val daysArray17 = List(1, 29)\n        val monthArray18\
    \ = List(1, 3, 5)\n        val daysArray18 = List(1, 29)\n        val monthArray19\
    \ = List(1, 3, 5)\n        val daysArray19 = List(1, 29)\n        val monthArray20\
    \ = List(1, 3, 5)\n        val daysArray20 = List(1, 29)\n        val monthArray21\
    \ = List(1, 3, 5)\n        val daysArray21 = List(1, 29)\n        val monthArray22\
    \ = List(1, 3, 5)\n        val daysArray22 = List(1, 29)\n        val monthArray23\
    \ = List(1, 3, 5)\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz7v71c6m.scala:71:5\
    \ ---------------------\e[0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        val dateObj2 = dateFormat.parse(date)\n\
    \        val dateObj3 = dateFormat.parse(date)\n        val dateObj4 = dateFormat.parse(date)\n\
    \        val dateObj5 = dateFormat.parse(date)\n        val dateObj6 = dateFormat.parse(date)\n\
    \        val dateObj7 = dateFormat.parse(date)\n        val dateObj8 = dateFormat.parse(date)\n\
    \        val dateObj9 = dateFormat.parse(date)\n        val dateObj10 = dateFormat.parse(date)\n\
    \        val dateObj11 = dateFormat.parse(date)\n        val dateObj12 = dateFormat.parse(date)\n\
    \        val dateObj13 = dateFormat.parse(date)\n        val dateObj14 = dateFormat.parse(date)\n\
    \        val dateObj15 = dateFormat.parse(date)\n        val dateObj16 = dateFormat.parse(date)\n\
    \        val dateObj17 = dateFormat.parse(date)\n        val dateObj18 = dateFormat.parse(date)\n\
    \        val dateObj19 = dateFormat.parse(date)\n        val dateObj20 = dateFormat.parse(date)\n\
    \        val dateObj21 = dateFormat.parse(date)\n        val dateObj22 = dateFormat.parse(date)\n\
    \        val dateObj23 = dateFormat.parse(date)\n        val dateObj24 = dateFormat.parse(date)\n\
    \        val dateObj25 = dateFormat.parse(date)\n        val dateObj26 = dateFormat.parse(date)\n\
    \        val dateObj27 = dateFormat.parse(date)\n        val dateObj28 = dateFormat.parse(date)\n\
    \        val dateObj29 = dateFormat.parse(date)\n        val dateObj30 = dateFormat.parse(date)\n\
    \        val dateObj31 = dateFormat.parse(date)\n        val dateObj32 = dateFormat.parse(date)\n\
    \        val dateObj33 = dateFormat.parse(date)\n        val dateObj34 = dateFormat.parse(date)\n\
    \        val dateObj35 = dateFormat.parse(date)\n        val dateObj36 = dateFormat.parse(date)\n\
    \        val dateObj37 = dateFormat.parse(date)\n        val dateObj38 = dateFormat.parse(date)\n\
    \        val dateObj39 = dateFormat.parse(date)\n        val dateObj40 = dateFormat.parse(date)\n\
    \        val dateObj41 = dateFormat.parse(date)\n        val dateObj42 = dateFormat.parse(date)\n\
    \        val dateObj\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc_ls_yfb.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc_ls_yfb.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc_ls_yfb.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInYear = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val year = dateArray(0)\n        val month = dateArray(1)\n        val\
    \ day = dateArray(2)\n        if(dateArray.length != 3){\n            return false\n\
    \        }\n        if(month < 1 || month > 12){\n            return false\n \
    \       }\n        if(day < 1 || day > daysInMonth){\n            return false\n\
    \        }\n        if(month == 1 && day > 29){\n            return false\n  \
    \      }\n        if(month == 2 && day > 28){\n            return false\n    \
    \    }\n        if(month == 2 && day > 29){\n            return false\n      \
    \  }\n        if(month == 2 && day > 30){\n            return false\n        }\n\
    \        if(month == 2 && day > 31){\n            return false\n        }\n  \
    \      if(month == 3 && day > 30){\n            return false\n        }\n    \
    \    if(month == 3 && day > 31){\n            return false\n        }\n      \
    \  if(month == 3 && day > 30){\n            return false\n        }\n        if(month\
    \ == 3 && day > 31){\n            return false\n        }\n        if(month ==\
    \ 4 && day > 30){\n            return false\n        }\n        if(month == 4\
    \ && day > 31){\n            return false\n        }\n        if(month == 4 &&\
    \ day > 30){\n            return false\n        }\n        if(month == 4 && day\
    \ > 31){\n            return false\n        }\n        if(month == 5 && day >\
    \ 30){\n            return false\n        }\n        if(month == 5 && day > 31){\n\
    \            return false\n        }\n        if(month == 5 && day > 30){\n  \
    \          return false\n        }\n        if(month == 5 && day > 31){\n    \
    \        return false\n        }\n        if(month == 6 && day > 30){\n      \
    \      return false\n        }\n        if(month == 6 && day > 31){\n        \
    \    return false\n        }\n        if(month == 6 && day > 30){\n          \
    \  return false\n        }\n        if(month == 6 && day > 31){\n            return\
    \ false\n        }\n        if(month == 7 && day > 30){\n            return false\n\
    \        }\n        if(month == 7 && day > 31){\n            return false\n  \
    \      }\n        if(month == 7 && day > 30){\n            return false\n    \
    \    }\n        if(month == 7 && day > 31){\n            return false\n      \
    \  }\n        if(month == 8 && day > 30){\n            return false\n        }\n\
    \        if(month == 8 && day > 31){\n            return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnupzhdbs.scala:138:0 ---------------------------\e\
    [0m\e[0m\n\e[31m138 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnupzhdbs.scala:23:37\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mdaysInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnupzhdbs.scala:24:38 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnupzhdbs.scala:31:19 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m(month < \e[31m1\e[0m || month >\
    \ \e[31m12\e[0m){\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e\
    [0m                   Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m        \
    \           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnupzhdbs.scala:31:32 --------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mif\e[0m(month < \e[31m1\e[0m || month > \e[31m12\e[0m){\n\
    \e[31m\e[31m   |\e[0m                                ^^\e[0m\n\e[31m   |\e[0m\
    \                                Found:    (\e[31m12\e[0m : Int)\n\e[31m   |\e\
    [0m                                Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnupzhdbs.scala:34:17 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mif\e[0m(day < \e[31m1\e[0m || day > daysInMonth){\n\
    \e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppjvc0h_4.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        val dateInMillis = dateObj.getTime\n\
    \        val currentTimeInMillis = System.currentTimeMillis()\n        val dateInSeconds\
    \ = dateInMillis / 1000\n        val currentTimeInSeconds = currentTimeInMillis\
    \ / 1000\n        val dateInDays = dateInSeconds / 86400\n        val currentTimeInDays\
    \ = currentTimeInSeconds / 86400\n        val dateInMonths = dateInDays / 30\n\
    \        val currentTimeInMonths = currentTimeInDays / 30\n        val dateInYears\
    \ = dateInMonths / 12\n        val currentTimeInYears = currentTimeInMonths /\
    \ 12\n        dateInYears == currentTimeInYears\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphoaoattc.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppjvc0h_4.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppjvc0h_4.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        val dateInDays = dateObject.getTime()\
    \ / 1000\n        val dateInDaysInYear = dateInDays / 86400\n        val dateInDaysInYearInMonth\
    \ = dateInDaysInYear / 30\n        val dateInDaysInYearInMonthInDay = dateInDaysInYearInMonth\
    \ / 30\n        val dateInDaysInYearInMonthInDayInYear = dateInDaysInYearInMonthInDay\
    \ / 365\n        dateInDaysInYearInMonthInDayInYear > 0 && dateInDaysInYearInMonthInDayInYear\
    \ > 0 && dateInDaysInYearInMonthInDayInYear > 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvoeui6wg.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        if(month > 12 || month < 1 || day >\
    \ 31 || day < 1 || year > 9999 || year < 1900) {\n            return false\n \
    \       }\n        if(month == 2 && day > 29 || month == 4 && day > 29 || month\
    \ == 6 && day > 29 || month == 9 && day > 29 || month == 11 && day > 29) {\n \
    \           return false\n        }\n        if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        \
    \    if(day > 31) {\n                return false\n            }\n        }\n\
    \        if(month == 4 || month == 6 || month == 9 || month == 11) {\n       \
    \     if(day > 30) {\n                return false\n            }\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmpdpdk9u6w.scala:23)\n\
    \tat Problem$.main(tmpdpdk9u6w.scala:51)\n\tat Problem.main(tmpdpdk9u6w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800550
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCheck = monthArray.contains(month)\n        val dayCheck = dayArray.contains(day)\n\
    \        val yearCheck = yearArray.contains(year)\n        val dateCheck = monthCheck\
    \ && dayCheck && yearCheck\n        dateCheck\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy92i28qd.scala:36)\n\tat Problem.main(tmpy92i28qd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = Array(1, 3, 5, 7,\
    \ 8, 10, 12)\n        val daysArray = Array(31, 30, 29)\n        val monthArray2\
    \ = Array(4, 6, 9, 11)\n        val daysArray2 = Array(30, 29, 28)\n        val\
    \ monthArray3 = Array(2, 4)\n        val daysArray3 = Array(31, 28, 31)\n    \
    \    val monthArray4 = Array(1, 3)\n        val daysArray4 = Array(30, 29)\n \
    \       val monthArray5 = Array(1, 3)\n        val daysArray5 = Array(30, 29)\n\
    \        val monthArray6 = Array(1, 3)\n        val daysArray6 = Array(30, 29)\n\
    \        val monthArray7 = Array(1, 3)\n        val daysArray7 = Array(30, 29)\n\
    \        val monthArray8 = Array(1, 3)\n        val daysArray8 = Array(30, 29)\n\
    \        val monthArray9 = Array(1, 3)\n        val daysArray9 = Array(30, 29)\n\
    \        val monthArray10 = Array(1, 3)\n        val daysArray10 = Array(30, 29)\n\
    \        val monthArray11 = Array(1, 3)\n        val daysArray11 = Array(30, 29)\n\
    \        val monthArray12 = Array(1, 3)\n        val daysArray12 = Array(30, 29)\n\
    \        val monthArray13 = Array(1, 3)\n        val daysArray13 = Array(30, 29)\n\
    \        val monthArray14 = Array(1, 3)\n        val daysArray14 = Array(30, 29)\n\
    \        val monthArray15 = Array(1, 3)\n        val daysArray15 = Array(30, 29)\n\
    \        val monthArray16 = Array(1, 3)\n        val daysArray16 = Array(30, 29)\n\
    \        val monthArray17 = Array(1, 3)\n        val daysArray17 = Array(30, 29)\n\
    \        val monthArray18 = Array(1, 3)\n        val daysArray18 = Array(30, 29)\n\
    \        val monthArray19 = Array(1, 3)\n        val daysArray19 = Array(30, 29)\n\
    \        val monthArray20 = Array(1, 3)\n        val daysArray20 = Array(30, 29)\n\
    \        val monthArray21 = Array(1, 3)\n        val daysArray21 = Array(30, 29)\n\
    \        val monthArray22 = Array(1, 3)\n        val daysArray22 = Array(30, 29)\n\
    \        val monthArray23 = Array(1, 3)\n        val daysArray23 = Array(30, 29)\n\
    \        val monthArray24 = \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpehxvmzlc.scala:72:26 ---------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m        \e[33mval\e[0m \e[36mmonthArray24\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpehxvmzlc.scala:73:5 ---------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).getTime\n        val dateArray2\
    \ = dateFormat.parse(date).getTime\n        val dateArray3 = dateFormat.parse(date).getTime\n\
    \        val dateArray4 = dateFormat.parse(date).getTime\n        val dateArray5\
    \ = dateFormat.parse(date).getTime\n        val dateArray6 = dateFormat.parse(date).getTime\n\
    \        val dateArray7 = dateFormat.parse(date).getTime\n        val dateArray8\
    \ = dateFormat.parse(date).getTime\n        val dateArray9 = dateFormat.parse(date).getTime\n\
    \        val dateArray10 = dateFormat.parse(date).getTime\n        val dateArray11\
    \ = dateFormat.parse(date).getTime\n        val dateArray12 = dateFormat.parse(date).getTime\n\
    \        val dateArray13 = dateFormat.parse(date).getTime\n        val dateArray14\
    \ = dateFormat.parse(date).getTime\n        val dateArray15 = dateFormat.parse(date).getTime\n\
    \        val dateArray16 = dateFormat.parse(date).getTime\n        val dateArray17\
    \ = dateFormat.parse(date).getTime\n        val dateArray18 = dateFormat.parse(date).getTime\n\
    \        val dateArray19 = dateFormat.parse(date).getTime\n        val dateArray20\
    \ = dateFormat.parse(date).getTime\n        val dateArray21 = dateFormat.parse(date).getTime\n\
    \        val dateArray22 = dateFormat.parse(date).getTime\n        val dateArray23\
    \ = dateFormat.parse(date).getTime\n        val dateArray24 = dateFormat.parse(date).getTime\n\
    \        val dateArray25 = dateFormat.parse(date).getTime\n        val dateArray26\
    \ = dateFormat.parse(date).getTime\n        val dateArray27 = dateFormat.parse(date).getTime\n\
    \        val dateArray28 = dateFormat.parse(date).getTime\n        val dateArray29\
    \ = dateFormat.parse(date).getTime\n        val dateArray30 = dateFormat.parse(date).getTime\n\
    \        val dateArray31 = dateFormat.parse(date).getTime\n        val dateArray32\
    \ = dateFormat.parse(date).getTime\n        val dateArray33 = dateFormat.parse(date).getTime\n\
    \        val dateArray34 = dateFormat.parse(date).getTime\n        val dateArray35\
    \ = dateFormat.parse(date).getTime\n        val dateArray36 = dateFormat.parse(date).getTime\n\
    \        val dateArray\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldk4i69p.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldk4i69p.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpldk4i69p.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val monthArray = dateArray(0).toString.toInt\n        val dayArray = dateArray(1).toString.toInt\n\
    \        val year = dateArray(2).toString.toInt\n        val monthDays = monthArray*31+dayArray\n\
    \        val months = monthArray*12\n        val daysNotValid = monthDays<1 ||\
    \ monthDays>31 || months<1 || months>12\n        val dateNotValid = year<1 ||\
    \ year>2020 || monthDays<1 || monthDays>30 || months<1 || months>12\n        val\
    \ dateValid = dateNotValid || daysNotValid\n        dateValid\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzsnib8ht.scala:35)\n\tat Problem.main(tmpzsnib8ht.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        dateObj.getTime != 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2gafhdm_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        val validMonth = monthIndex\
    \ >= 0 && monthIndex < 12\n        val validDay = dayIndex >= 0 && dayIndex <\
    \ 31\n        val validYear = yearIndex >= 0 && yearIndex < 12\n        val validDate\
    \ = validMonth && validDay && validYear\n        validDate\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9mx36bgo.scala:39)\n\tat Problem.main(tmp9mx36bgo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        dateString.toString().length\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprlm9p5sj.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        if(month < 1 || month > 12){\n    \
    \        return false\n        }\n        if(day < 1 || day > 31){\n         \
    \   return false\n        }\n        if(month == 2 && day > 29){\n           \
    \ return false\n        }\n        if(month == 2 && day < 1){\n            return\
    \ false\n        }\n        if(month == 2 && day > 30){\n            return false\n\
    \        }\n        if(month == 2 && day > 31){\n            return false\n  \
    \      }\n        if(month == 2 && day > 31){\n            return false\n    \
    \    }\n        if(month == 2 && day > 31){\n            return false\n      \
    \  }\n        if(month == 2 && day > 31){\n            return false\n        }\n\
    \        if(month == 2 && day > 31){\n            return false\n        }\n  \
    \      if(month == 2 && day > 31){\n            return false\n        }\n    \
    \    if(month == 2 && day > 31){\n            return false\n        }\n      \
    \  if(month == 2 && day > 31){\n            return false\n        }\n        if(month\
    \ == 2 && day > 31){\n            return false\n        }\n        if(month ==\
    \ 2 && day > 31){\n            return false\n        }\n        if(month == 2\
    \ && day > 31){\n            return false\n        }\n        if(month == 2 &&\
    \ day > 31){\n            return false\n        }\n        if(month == 2 && day\
    \ > 31){\n            return false\n        }\n        if(month == 2 && day >\
    \ 31){\n            return false\n        }\n        if(month == 2 && day > 31){\n\
    \            return false\n        }\n        if(month == 2 && day > 31){\n  \
    \          return false\n        }\n        if(month == 2 && day > 31){\n    \
    \        return false\n        }\n        if(month == 2 && day > 31){\n      \
    \      return false\n        }\n        if(month == 2 && day > 31){\n        \
    \    return false\n        }\n        if(month == 2 && day > 31){\n          \
    \  return false\n        }\n        if(month == 2 && day > 31){\n            return\
    \ false\n        }\n        if(month == 2 && day > 31){\n            return false\n\
    \        }\n        if(month == 2 && day > 31){\n            return false\n  \
    \      }\n        if(month == 2 && day > 31){\n            return false\n    \
    \    }\n        if(month == 2 && day > 31){\n            return false\n      \
    \  }\n        if(month == 2 && day > 31){\n            return false\n        }\n\
    \        if(month == 2 && day > 31){\n            return false\n        }\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp546saca3.scala:119:8\
    \ --------------------\e[0m\e[0m\n\e[31m119 |\e[0m        \e[33mif\e[0m(month\
    \ == \e[31m2\e[0m && day > \e[31m31\e[0m){\n\e[31m\e[31m    |\e[0m        ^\e\
    [0m\n\e[31m    |\e[0m        Found:    Unit\n\e[31m    |\e[0m        Required:\
    \ Boolean\n\e[31m    |\e[0m        Maybe you are missing an else part for the\
    \ conditional?\n\e[31m120 |\e[0m            \e[33mreturn\e[0m \e[31mfalse\e[0m\n\
    \e[31m121 |\e[0m        }\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3){\n            return false\n        }\n        val\
    \ month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n        val\
    \ year = dateArray(2).toInt\n        if(month < 1 || month > 12){\n          \
    \  return false\n        }\n        if(day < 1 || day > 31){\n            return\
    \ false\n        }\n        if(month == 2 && day > 29){\n            return false\n\
    \        }\n        if(month == 2 && day < 1){\n            return false\n   \
    \     }\n        if(month == 2 && day > 30){\n            return false\n     \
    \   }\n        if(month == 2 && day > 31){\n            return false\n       \
    \ }\n        if(month == 2 && day > 30){\n            return false\n        }\n\
    \        if(month == 2 && day > 31){\n            return false\n        }\n  \
    \      if(month == 2 && day > 31){\n            return false\n        }\n    \
    \    if(month == 2 && day > 31){\n            return false\n        }\n      \
    \  if(month == 2 && day > 31){\n            return false\n        }\n        if(month\
    \ == 2 && day > 31){\n            return false\n        }\n        if(month ==\
    \ 2 && day > 31){\n            return false\n        }\n        if(month == 2\
    \ && day > 31){\n            return false\n        }\n        if(month == 2 &&\
    \ day > 31){\n            return false\n        }\n        if(month == 2 && day\
    \ > 31){\n            return false\n        }\n        if(month == 2 && day >\
    \ 31){\n            return false\n        }\n        if(month == 2 && day > 31){\n\
    \            return false\n        }\n        if(month == 2 && day > 31){\n  \
    \          return false\n        }\n        if(month == 2 && day > 31){\n    \
    \        return false\n        }\n        if(month == 2 && day > 31){\n      \
    \      return false\n        }\n        if(month == 2 && day > 31){\n        \
    \    return false\n        }\n        if(month == 2 && day > 31){\n          \
    \  return false\n        }\n        if(month == 2 && day > 31){\n            return\
    \ false\n        }\n        if(month == 2 && day > 31){\n            return false\n\
    \        }\n        if(month == 2 && day > 31){\n            return false\n  \
    \      }\n        if(month == 2 && day > 31){\n            return false\n    \
    \    }\n        if(month == 2 && day > 31){\n            return false\n      \
    \  }\n        if(month == 2 && day > 31){\n            return false\n        }\n\
    \        if(month == 2 && day > 31){\n            return false\n        }\n  \
    \      if(month == 2 && day > 31){\n            return false\n        }\n    \
    \    if(month == 2 \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppytu9gc7.scala:123:4 ---------------------------\e\
    [0m\e[0m\n\e[31m123 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthDays = months * 30 + days\n\
    \        val monthYears = months * 12 + year\n        val monthYearsDays = monthYears\
    \ * 30 + days\n        val monthYearsDaysMonths = monthYearsDays * 12\n      \
    \  val monthYearsDaysMonthsMonthsMonths = monthYearsDaysMonths * 12\n        val\
    \ monthYearsDaysMonthsMonthsMonthsMonths = monthYearsDaysMonthsMonths * 12\n \
    \       val monthYearsDaysMonthsMonthsMonthsMonthsMonths = monthYearsDaysMonthsMonthsMonths\
    \ * 12\n        val monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonths = monthYearsDaysMonthsMonthsMonthsMonthsMonths\
    \ * 12\n        val monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonths =\
    \ monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonths * 12\n        val monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\
    \ = monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths * 12\n    \
    \    val monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\
    \ = monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\
    \ * 12\n        val monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\
    \ = monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\n\
    \        val monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\
    \ = monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6skwb10.scala:31:53 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmonthYearsDaysMonthsMonthsMonthsMonths\e\
    [0m = monthYearsDaysMonthsMonths * \e[31m12\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Not found: monthYearsDaysMonthsMonths\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6skwb10.scala:35:83\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e\
    [36mmonthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\e[0m\
    \ = monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths * \e[31m12\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6skwb10.scala:36:95\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mmonthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\e\
    [0m = monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\
    \ * \e[31m12\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6skwb10.scala:38:125\
    \ -----------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mmonthYearsDaysMonthsMonthsMonthsMonthsMonthsMont"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        dateArray.getTime <\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3pwyomie.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val daysInMonth = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth30 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth29 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth28 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth27 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth26 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth25 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth24 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth23 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth22 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth21 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth20 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth19 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth18 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth17 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth16 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth15 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth14 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth13 = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth12 = java.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj36qblo3.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpj36qblo3.scala:22:29 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e\
    [0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj36qblo3.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800550
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        if(month < 1 || month > 12) false\n\
    \        if(day < 1 || day > 31) false\n        if(day > 30) false\n        if(month\
    \ == 2) day > 29 else day > 28\n        if(year < 1000 || year > 3000) false\n\
    \        true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpftzg4x0d.scala:35)\n\tat Problem.main(tmpftzg4x0d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        dateArray.getTime <=\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw5_qa54l.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val daysInMonth = monthArray.zip(dayArray).map(x\
    \ => x(0))\n        val daysInMonth2 = monthArray.zip(dayArray).map(x => x(1))\n\
    \        val daysInMonth3 = monthArray.zip(dayArray).map(x => x(2))\n        val\
    \ daysInMonth4 = monthArray.zip(dayArray).map(x => x(3))\n        val daysInMonth5\
    \ = monthArray.zip(dayArray).map(x => x(4))\n        val daysInMonth6 = monthArray.zip(dayArray).map(x\
    \ => x(5))\n        val daysInMonth7 = monthArray.zip(dayArray).map(x => x(6))\n\
    \        val daysInMonth8 = monthArray.zip(dayArray).map(x => x(7))\n        val\
    \ daysInMonth9 = monthArray.zip(dayArray).map(x => x(8))\n        val daysInMonth10\
    \ = monthArray.zip(dayArray).map(x => x(9))\n        val daysInMonth11 = monthArray.zip(dayArray).map(x\
    \ => x(10))\n        val daysInMonth12 = monthArray.zip(dayArray).map(x => x(11))\n\
    \        val daysInMonth = daysInMonth.filter(x => x >= 1 && x <= 30)\n      \
    \  val daysInMonth2 = daysInMonth2.filter(x => x >= 1 && x <= 30)\n        val\
    \ daysInMonth3 = daysInMonth3.filter(x => x >= 1 && x <= 30)\n        val daysInMonth4\
    \ = daysInMonth4.filter(x => x >= 1 && x <= 30)\n        val daysInMonth5 = daysInMonth5.filter(x\
    \ => x >= 1 && x <= 30)\n        val daysInMonth6 = daysInMonth6.filter(x => x\
    \ >= 1 && x <= 30)\n        val daysInMonth7 = daysInMonth7.filter(x => x >= 1\
    \ && x <= 30)\n        val daysInMonth8 = daysInMonth8.filter(x => x >= 1 && x\
    \ <= 30)\n        val daysInMonth9 = daysInMonth9.filter(x => x >= 1 && x <= 30)\n\
    \        val daysInMonth10 = daysInMonth10.filter(x => x >= 1 && x <= 30)\n  \
    \      val daysInMonth11 = daysInMonth11.filter(x => x >= 1 && x <= 30)\n    \
    \    val daysInMonth12 = daysInMonth12.filter(x => x >= 1 && x <= 30)\n      \
    \  val daysInMonth = daysInMonth.filter(x => x >= 1 && x <= 29)\n        val daysInMonth2\
    \ = daysInMonth2.filter(\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8ztedc1o.scala:54:47 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth2\e[0m = daysInMonth2.filter(\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ztedc1o.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = daysInMonth.filter(\e[36mx\e[0m => x >= \e[31m1\e[0m\
    \ && x <= \e[31m30\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8ztedc1o.scala:42:12 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth2\e[0m = daysInMonth2.filter(\e\
    [36mx\e[0m => x >= \e[31m1\e[0m && x <= \e[31m30\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdaysInMonth2 is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8ztedc1o.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth3\e[0m = daysInMonth3.filter(\e\
    [36mx\e[0m => x >= \e[31m1\e[0m && x <= \e[31m30\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdaysInMonth3 is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8ztedc1o"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateToCheck = dateFormat.parse(date)\n        val dateToCheckYear\
    \ = dateToCheck.getYear\n        val dateToCheckMonth = dateToCheck.getMonth\n\
    \        val dateToCheckDay = dateToCheck.getDay\n        val dateToCheckYearDays\
    \ = dateToCheckYear * 365 + dateToCheckMonth * 30 + dateToCheckDay\n        val\
    \ dateToCheckMonthDays = dateToCheckMonth * 30 + dateToCheckDay\n        val dateToCheckYearMonthDays\
    \ = dateToCheckYear * 365 + dateToCheckMonthDays\n        val dateToCheckYearMonthDaysDays\
    \ = dateToCheckYear * 365 + dateToCheckMonthDays + dateToCheckDay\n        val\
    \ dateToCheckYearMonthDaysDaysDays = dateToCheckYear * 365 + dateToCheckMonthDays\
    \ + dateToCheckDay + 1\n        val dateToCheckYearMonthDaysDaysDaysDays = dateToCheckYear\
    \ * 365 + dateToCheckMonthDays + dateToCheckDay + 2\n        val dateToCheckYearMonthDaysDaysDaysDaysDays\
    \ = dateToCheckYear * 365 + dateToCheckMonthDays + dateToCheckDay + 3\n      \
    \  val dateToCheckYearMonthDaysDaysDaysDaysDaysDays = dateToCheckYear * 365 +\
    \ dateToCheckMonthDays + dateToCheckDay + 4\n        val dateToCheckYearMonthDaysDaysDaysDaysDaysDaysDays\
    \ = dateToCheckYear * 365 + dateToCheckMonthDays + dateToCheckDay + 5\n      \
    \  val dateToCheckYearMonthDaysDaysDaysDaysDaysDaysDaysDays = dateToCheckYear\
    \ * 365 + dateToCheckMonthDays + dateToCheckDay + 6\n        val dateToCheckYearMonthDaysDaysDaysDaysDaysDaysDaysDaysDays\
    \ = dateToCheckYear * 365 + dateToCheckMonthDays + dateToCheckDay + 7\n      \
    \  val dateToCheckYearMonthDaysDaysDaysDaysDaysDaysDaysDaysDaysDays = dateToCheckYear\
    \ * 365 + dateToCheckMonthDays + dateToCheckDay + 8\n        val dateToCheckYearMonthDaysDaysDaysDaysDaysDaysDaysDaysDaysDay\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_xvndzoe.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_xvndzoe.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_xvndzoe.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val dateFormat = \"MM-dd-yyyy\"\n \
    \       val dateFormat2 = \"MM-dd-yyyy\"\n        val dateFormat3 = \"MM-dd-yyyy\"\
    \n        val dateFormat4 = \"MM-dd-yyyy\"\n        val dateFormat5 = \"MM-dd-yyyy\"\
    \n        val dateFormat6 = \"MM-dd-yyyy\"\n        val dateFormat7 = \"MM-dd-yyyy\"\
    \n        val dateFormat8 = \"MM-dd-yyyy\"\n        val dateFormat9 = \"MM-dd-yyyy\"\
    \n        val dateFormat10 = \"MM-dd-yyyy\"\n        val dateFormat11 = \"MM-dd-yyyy\"\
    \n        val dateFormat12 = \"MM-dd-yyyy\"\n        val dateFormat13 = \"MM-dd-yyyy\"\
    \n        val dateFormat14 = \"MM-dd-yyyy\"\n        val dateFormat15 = \"MM-dd-yyyy\"\
    \n        val dateFormat16 = \"MM-dd-yyyy\"\n        val dateFormat17 = \"MM-dd-yyyy\"\
    \n        val dateFormat18 = \"MM-dd-yyyy\"\n        val dateFormat19 = \"MM-dd-yyyy\"\
    \n        val dateFormat20 = \"MM-dd-yyyy\"\n        val dateFormat21 = \"MM-dd-yyyy\"\
    \n        val dateFormat22 = \"MM-dd-yyyy\"\n        val dateFormat23 = \"MM-dd-yyyy\"\
    \n        val dateFormat24 = \"MM-dd-yyyy\"\n        val dateFormat25 = \"MM-dd-yyyy\"\
    \n        val dateFormat26 = \"MM-dd-yyyy\"\n        val dateFormat27 = \"MM-dd-yyyy\"\
    \n        val dateFormat28 = \"MM-dd-yyyy\"\n        val dateFormat29 = \"MM-dd-yyyy\"\
    \n        val dateFormat30 = \"MM-dd-yyyy\"\n        val dateFormat31 = \"MM-dd-yyyy\"\
    \n        val dateFormat32 = \"MM-dd-yyyy\"\n        val dateFormat33 = \"MM-dd-yyyy\"\
    \n        val dateFormat34 = \"MM-dd-yyyy\"\n        val dateFormat35 = \"MM-dd-yyyy\"\
    \n        val dateFormat36 = \"MM-dd-yyyy\"\n        val dateFormat37 = \"MM-dd-yyyy\"\
    \n        val dateFormat38 = \"MM-dd-yyyy\"\n        val dateFormat39 = \"MM-dd-yyyy\"\
    \n        val dateFormat40 = \"MM\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfecq04gq.scala:65:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mval\e[0m \e[36mdateFormat40\e[0m = \"MM\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpfecq04gq.scala:67:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m67 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfecq04gq.scala:66:5 ---------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfecq04gq.scala:67:4 -------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: MMdef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val dateArrayLength\
    \ = dateArray.length\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,28,31,30,31,30,31,31,30,31,30,31)\n       \
    \ val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArrayLength = monthArray.length\n        val dayArrayLength\
    \ = dayArray.length\n        val yearArrayLength = yearArray.length\n        if(dateArrayLength\
    \ == 0){\n            return false\n        }\n        if(dateArrayLength != 3){\n\
    \            return false\n        }\n        if(dateArray(0) > 12 || dateArray(0)\
    \ < 1){\n            return false\n        }\n        if(dateArray(1) > 12 ||\
    \ dateArray(1) < 1){\n            return false\n        }\n        if(dateArray(2)\
    \ > 31){\n            return false\n        }\n        if(dateArray(2) > 30){\n\
    \            return false\n        }\n        if(monthArrayLength != dateArray(0)){\n\
    \            return false\n        }\n        if(dayArrayLength != dateArray(1)){\n\
    \            return false\n        }\n        if(yearArrayLength != dateArray(2)){\n\
    \            return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe4cfc0v2.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).getTime\n        val dateArray2\
    \ = dateFormat.parse(date).getTime\n        val dateArray3 = dateFormat.parse(date).getTime\n\
    \        val dateArray4 = dateFormat.parse(date).getTime\n        val dateArray5\
    \ = dateFormat.parse(date).getTime\n        val dateArray6 = dateFormat.parse(date).getTime\n\
    \        val dateArray7 = dateFormat.parse(date).getTime\n        val dateArray8\
    \ = dateFormat.parse(date).getTime\n        val dateArray9 = dateFormat.parse(date).getTime\n\
    \        val dateArray10 = dateFormat.parse(date).getTime\n        val dateArray11\
    \ = dateFormat.parse(date).getTime\n        val dateArray12 = dateFormat.parse(date).getTime\n\
    \        val dateArray13 = dateFormat.parse(date).getTime\n        val dateArray14\
    \ = dateFormat.parse(date).getTime\n        val dateArray15 = dateFormat.parse(date).getTime\n\
    \        val dateArray16 = dateFormat.parse(date).getTime\n        val dateArray17\
    \ = dateFormat.parse(date).getTime\n        val dateArray18 = dateFormat.parse(date).getTime\n\
    \        val dateArray19 = dateFormat.parse(date).getTime\n        val dateArray20\
    \ = dateFormat.parse(date).getTime\n        val dateArray21 = dateFormat.parse(date).getTime\n\
    \        val dateArray22 = dateFormat.parse(date).getTime\n        val dateArray23\
    \ = dateFormat.parse(date).getTime\n        val dateArray24 = dateFormat.parse(date).getTime\n\
    \        val dateArray25 = dateFormat.parse(date).getTime\n        val dateArray26\
    \ = dateFormat.parse(date).getTime\n        val dateArray27 = dateFormat.parse(date).getTime\n\
    \        val dateArray28 = dateFormat.parse(date).getTime\n        val dateArray29\
    \ = dateFormat.parse(date).getTime\n        val dateArray30 = dateFormat.parse(date).getTime\n\
    \        val dateArray31 = dateFormat.parse(date).getTime\n        val dateArray32\
    \ = dateFormat.parse(date).getTime\n        val dateArray33 = dateFormat.parse(date).getTime\n\
    \        val dateArray34 = dateFormat.parse(date).getTime\n        val dateArray35\
    \ = dateFormat.parse(date).getTime\n        val dateArray36 = dateFormat.parse(date).getTime\n\
    \        val dateArray\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldk4i69p.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldk4i69p.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpldk4i69p.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        dateObj.getTime != 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2gafhdm_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getTime\
    \ > 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5982ok15.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val monthArray = dateArray(0).toString.split(\"-\")\n        val dayArray =\
    \ dateArray(1).toString.split(\"-\")\n        val month = monthArray(0).toInt\n\
    \        val day = dayArray(0).toInt\n        val year = dateArray(2).toInt\n\
    \        val monthDays = monthArray.length\n        val daysInMonth = dayArray.length\n\
    \        val daysInMonth30 = daysInMonth - 2\n        val daysInMonth31 = daysInMonth\
    \ - 3\n        val daysInMonth29 = daysInMonth - 4\n        val monthDays30 =\
    \ monthArray.length - 2\n        val monthDays31 = monthArray.length - 3\n   \
    \     val monthDays29 = monthArray.length - 4\n        val monthDays30And31 =\
    \ monthArray.length - 5\n        val monthDays30And29 = monthArray.length - 6\n\
    \        val monthDays31And29 = monthArray.length - 7\n        val monthDays30And31\
    \ = monthArray.length - 8\n        val monthDays30And29And31 = monthArray.length\
    \ - 9\n        val monthDays31And29And31 = monthArray.length - 10\n        val\
    \ monthDays30And29And31 = monthArray.length - 11\n        val monthDays31And29And31\
    \ = monthArray.length - 12\n        val monthDays30And29And31 = monthArray.length\
    \ - 13\n        val monthDays31And29And31 = monthArray.length - 14\n        val\
    \ monthDays30And29And31 = monthArray.length - 15\n        val monthDays31And29And31\
    \ = monthArray.length - 16\n        val monthDays30And29And31 = monthArray.length\
    \ - 17\n        val monthDays31And29And31 = monthArray.length - 18\n        val\
    \ monthDays30And29And31 = monthArray.length - 19\n        val monthDays31And29And31\
    \ = monthArray.length - 20\n        val monthDays30And29And31 = monthArray.length\
    \ - 21\n        val monthDays31And29And31 = monthArray.length - 22\n        val\
    \ monthDays30And29And31 = monthArray.length - 23\n        val monthDays31And29And31\
    \ = monthArray.length - 24\n        val monthDays30And29And31 = monthArray.length\
    \ - 25\n        val monthDays31And29And31 = monthArray.length - 26\n        val\
    \ monthDays30And29And31 = monthArray.length - 27\n        val monthDay\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjamajq49.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjamajq49.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthDays30And31\e[0m = monthArray.length - \e[31m8\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mmonthDays30And31 is already defined as \e[33mvalue\e[0m \e[35mmonthDays30And31\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjamajq49.scala:42:12 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m        \e[33mval\e[0m \e[36mmonthDays30And29And31\e[0m = monthArray.length\
    \ - \e[31m11\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthDays30And29And31 is already defined as \e[33mvalue\e\
    [0m \e[35mmonthDays30And29And31\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjamajq49.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmonthDays31And29And31\e\
    [0m = monthArray.length - \e[31m12\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthDays31And29And31 is already defined as \e[33mvalue\e\
    [0m \e[35mmonthDays31And29And31\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjamajq49.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mmonthDays30And29And31\e\
    [0m = monthArray.length - \e[31m13\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthDays30And29And31 is already defined as \e[33mvalue\e\
    [0m \e[35mmonthDays30And29And31\e["
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs3jhnng.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) match {\n            case null => false\n  \
    \          case _ => true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjmimn52.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = List(1, 3, 5, 7,\
    \ 8, 10, 12)\n        val daysArray = List(1, 30, 29)\n        val monthArray2\
    \ = List(2, 4, 6, 9, 11)\n        val daysArray2 = List(1, 31)\n        val monthArray3\
    \ = List(1, 3, 5)\n        val daysArray3 = List(1, 30)\n        val monthArray4\
    \ = List(1, 3, 5)\n        val daysArray4 = List(1, 29)\n        val monthArray5\
    \ = List(1, 3, 5)\n        val daysArray5 = List(1, 29)\n        val monthArray6\
    \ = List(1, 3, 5)\n        val daysArray6 = List(1, 29)\n        val monthArray7\
    \ = List(1, 3, 5)\n        val daysArray7 = List(1, 29)\n        val monthArray8\
    \ = List(1, 3, 5)\n        val daysArray8 = List(1, 29)\n        val monthArray9\
    \ = List(1, 3, 5)\n        val daysArray9 = List(1, 29)\n        val monthArray10\
    \ = List(1, 3, 5)\n        val daysArray10 = List(1, 29)\n        val monthArray11\
    \ = List(1, 3, 5)\n        val daysArray11 = List(1, 29)\n        val monthArray12\
    \ = List(1, 3, 5)\n        val daysArray12 = List(1, 29)\n        val monthArray13\
    \ = List(1, 3, 5)\n        val daysArray13 = List(1, 29)\n        val monthArray14\
    \ = List(1, 3, 5)\n        val daysArray14 = List(1, 29)\n        val monthArray15\
    \ = List(1, 3, 5)\n        val daysArray15 = List(1, 29)\n        val monthArray16\
    \ = List(1, 3, 5)\n        val daysArray16 = List(1, 29)\n        val monthArray17\
    \ = List(1, 3, 5)\n        val daysArray17 = List(1, 29)\n        val monthArray18\
    \ = List(1, 3, 5)\n        val daysArray18 = List(1, 29)\n        val monthArray19\
    \ = List(1, 3, 5)\n        val daysArray19 = List(1, 29)\n        val monthArray20\
    \ = List(1, 3, 5)\n        val daysArray20 = List(1, 29)\n        val monthArray21\
    \ = List(1, 3, 5)\n        val daysArray21 = List(1, 29)\n        val monthArray22\
    \ = List(1, 3, 5)\n        val daysArray22 = List(1, 29)\n        val monthArray23\
    \ = List(1, 3, 5)\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz7v71c6m.scala:71:5\
    \ ---------------------\e[0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        val dateInMillis =\
    \ dateObject.getTime\n        val dateInDays = dateInMillis / 1000L\n        val\
    \ dateInMonths = dateInDays / 30L\n        val dateInYears = dateInMonths / 12L\n\
    \        dateInYears > 0 && dateInMonths > 0 && dateInDays > 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl9sk8if3.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val daysArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2001,2003,2005,2007,2009,2011,2013)\n        val monthArray4\
    \ = Array(4,6,9,11)\n        val daysArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray4 = Array(2010,2011,2013)\n        val monthArray5 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2001,2003,2005,2007,2009,2011,2013)\n        val monthArray6\
    \ = Array(4,6,9,11)\n        val daysArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray6 = Array(2010,2011,2013)\n        val monthArray7 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2001,2003,2005,2007,2009,2011,2013)\n        val monthArray8\
    \ = Array(4,6,9,11)\n        val daysArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray8 = Array(2010,2011,2013)\n        val monthArray9 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray9 = Array(2001,2003,2005,2007,2009,2011,2013)\n        val monthArray10\
    \ = Array(4,6,9,11)\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5bxxq92p.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        if(month < 1 || month > 12){\n    \
    \        return false\n        }\n        if(day < 1 || day > 31){\n         \
    \   return false\n        }\n        if(month == 2 && day > 29){\n           \
    \ return false\n        }\n        if(month == 4 && day > 30){\n            return\
    \ false\n        }\n        if(month == 6 && day > 30){\n            return false\n\
    \        }\n        if(month == 9 && day > 30){\n            return false\n  \
    \      }\n        if(month == 11 && day > 30){\n            return false\n   \
    \     }\n        if(month == 1){\n            if(day > 31){\n                return\
    \ false\n            }\n        }\n        if(month == 3 && day > 31){\n     \
    \       return false\n        }\n        if(month == 5 && day > 31){\n       \
    \     return false\n        }\n        if(month == 7 && day > 31){\n         \
    \   return false\n        }\n        if(month == 8 && day > 31){\n           \
    \ return false\n        }\n        if(month == 10 && day > 31){\n            return\
    \ false\n        }\n        if(month == 12 && day > 31){\n            return false\n\
    \        }\n        if(month == 4){\n            if(day > 30){\n             \
    \   return false\n            }\n        }\n        if(month == 6 && day > 30){\n\
    \            return false\n        }\n        if(month == 9 && day > 30){\n  \
    \          return false\n        }\n        if(month == 11 && day > 30){\n   \
    \         return false\n        }\n        if(month == 2){\n            if(day\
    \ > 29){\n                return false\n            }\n        }\n        if(month\
    \ == 3 && day > 29){\n            return false\n        }\n        if(month ==\
    \ 5 && day > 29){\n            return false\n        }\n        if(month == 7\
    \ && day > 29){\n            return false\n        }\n        if(month == 8 &&\
    \ day > 29){\n            return false\n        }\n        if(month == 10 && day\
    \ > 29){\n            return false\n        }\n        if(month == 12 && day >\
    \ 29){\n            return false\n        }\n        if(month == 1){\n       \
    \     if(day > 31){\n                return false\n            }\n        }\n\
    \        if(month == 3 && day > 31){\n            return false\n        }\n  \
    \      if(month == 5 && day > 31){\n            return false\n        }\n    \
    \    if(month == 7 && day > 31){\n            return false\n        }\n      \
    \  if(month == 8 && day > 31){\n            return false\n        }\n        if(month\
    \ == 10 && day > 31){\n            return false\n        }\n        if(month ==\
    \ 12 && day > 31)\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv4eq00rd.scala:128:4 ---------------------------\e\
    [0m\e[0m\n\e[31m128 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns true if the date is valid otherwise false.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lbv21pb.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800507
