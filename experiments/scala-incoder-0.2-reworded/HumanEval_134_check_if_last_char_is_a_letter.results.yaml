language: scala
name: HumanEval_134_check_if_last_char_is_a_letter
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        var isLastCharNotALetter\
    \ = false\n        for(i <- 0 until txt.length){\n            if(txt(i) == lastChar){\n\
    \                lastChar = txt.last\n                isLastCharALetter = true\n\
    \                isLastCharNotALetter = false\n            }\n            else{\n\
    \                isLastCharALetter = false\n                isLastCharNotALetter\
    \ = true\n            }\n        }\n        return isLastCharALetter\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyeffp1cy.scala:35)\n\tat Problem.main(tmpyeffp1cy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isALetter = lastChar.matches(\"[a-zA-Z]+\")\n        !isALetter\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpftadxqks.scala:19)\n\tat Problem$.main(tmpftadxqks.scala:24)\n\
    \tat Problem.main(tmpftadxqks.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.isLetter\n        val isLastCharNotALetter\
    \ = lastChar.matches(\"\\\\W\")\n        isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz7isv5jd.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m\
    \ = lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                    value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"\\\\W\")\n        val isLastCharNotAlpha\
    \ = !isLastCharNotWord\n        val isLastCharNotSpace = lastChar.matches(\"\\\
    \\s\")\n        val isLastCharNotUpper = lastChar.matches(\"\\\\p{Upper}\")\n\
    \        val isLastCharNotLower = lastChar.matches(\"\\\\p{Lower}\")\n       \
    \ val isLastCharNotDigit = lastChar.matches(\"\\\\p{Digit}\")\n        val isLastCharNotPunct\
    \ = lastChar.matches(\"\\\\p{Punct}\")\n        val isLastCharNotCntrl = lastChar.matches(\"\
    \\\\p{Cntrl}\")\n        val isLastCharNotUpper = lastChar.matches(\"\\\\p{Upper}\"\
    )\n        val isLastCharNotLower = lastChar.matches(\"\\\\p{Lower}\")\n     \
    \   val isLastCharNotDigit = lastChar.matches(\"\\\\p{Digit}\")\n        val isLastCharNotPunct\
    \ = lastChar.matches(\"\\\\p{Punct}\")\n        val isLastCharNotCntrl = lastChar.matches(\"\
    \\\\p{Cntrl}\")\n        val isLastCharNotUpper = lastChar.matches(\"\\\\p{Upper}\"\
    )\n        val isLastCharNotLower = lastChar.matches(\"\\\\p{Lower}\")\n     \
    \   val isLastCharNotDigit = lastChar.matches(\"\\\\p{Digit}\")\n        val isLastCharNotPunct\
    \ = lastChar.matches(\"\\\\p{Punct}\")\n        val isLastCharNotCntrl = lastChar.matches(\"\
    \\\\p{Cntrl}\")\n        val isLastCharNotUpper = lastChar.matches(\"\\\\p{Upper}\"\
    )\n        val isLastCharNotLower = lastChar.matches(\"\\\\p{Lower}\")\n     \
    \   val isLastCharNotDigit = lastChar.matches(\"\\\\p{Digit}\")\n        val isLastCharNotPunct\
    \ = lastChar.matches(\"\\\\p{Punct}\")\n        val isLastCharNotCntrl = lastChar.matches(\"\
    \\\\p{Cntrl}\")\n        val isLastCharNotUpper = lastChar.matches(\"\\\\p{Upper}\"\
    )\n        val isLastCharNotLower = last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaawpk9iu.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotUpper\e[0m\
    \ = lastChar.matches(\e[31m\"\\\\p{Upper}\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misLastCharNotUpper is already defined as \e[33mvalue\e[0m \e[35misLastCharNotUpper\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaawpk9iu.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotLower\e[0m = lastChar.matches(\e\
    [31m\"\\\\p{Lower}\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotLower is already defined as \e[33mvalue\e[0m\
    \ \e[35misLastCharNotLower\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpaawpk9iu.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotDigit\e[0m\
    \ = lastChar.matches(\e[31m\"\\\\p{Digit}\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misLastCharNotDigit is already defined as \e[33mvalue\e[0m \e[35misLastCharNotDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaawpk9iu.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotPunct\e[0m = lastChar.matches(\e\
    [31m\"\\\\p{Punct}\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotPunct is already defined as \e[33mvalue\e[0m\
    \ \e[35misLastCharNotPunct\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   lastCharIsALetter && !lastCharIsNotALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvs1pgw76.scala:25)\n\tat Problem.main(tmpvs1pgw76.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotAlpha = !lastChar.matches(\"[a-zA-Z ]\")\n        isLastCharAlpha\
    \ && !isLastCharNotAlpha\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4s94i0c.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4s94i0c.scala:20:43\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotAlpha\e[0m = !lastChar.matches(\e[31m\"[a-zA-Z ]\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  value matches is not a member of\
    \ Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   lastCharIsALetter && !lastCharIsNotALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvs1pgw76.scala:25)\n\tat Problem.main(tmpvs1pgw76.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").last.contains(lastChar)\n        isALetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb9xc6rw3.scala:25)\n\tat Problem.main(tmpb9xc6rw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"[a-zA-Z0-9 ]\")\n        val\
    \ isLastCharNotAlpha = !isLastCharNotWord\n        isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl5x27y67.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl5x27y67.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"[a-zA-Z0-9 ]\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                value matches is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.toString.isLetter\n        val isNotLastCharAlpha\
    \ = !lastChar.toString.isLetter\n        val isLastCharNotWord = words.last.contains(lastChar)\n\
    \        val isNotLastCharNotWord = !words.last.contains(lastChar)\n        val\
    \ isLastCharNotWordOrNotLastChar = words.last.contains(lastChar) && !words.last.contains(lastChar)\n\
    \        val isLastCharNotWordOrNotLastCharOrNotLastChar = words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar) && !words.last.contains(lastChar)\n      \
    \  val isLastCharNotWordOrNotLastCharOrNotLastCharOrNotLastChar = words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\n\
    \        val isLastCharNotWordOrNotLastCharOrNotLastCharOrNotLastCharOrNotLastChar\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar) && !words.last.contains(lastChar)\n      \
    \  val isLastCharNotWordOrNotLastCharOrNotLastCharOrNotLastCharOrNotLastCharOrNotLastChar\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\n\
    \        val isLastCharNotWordOrNotLastCharOrNotLastCharOrNotLastCharOrNotLastCharOrNotLastCharOrNotLastChar\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar)\n        val isLastCharNotWordOrNotLastCharOrNotLastCharOrNotLastCharOrNotLastCharOrNotLastCharOrNotLastCharOrNotLastChar\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar) && !words.last.contains(lastChar)\n      \
    \  val isLastCharNotWordOrNotLastCharOr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjjqfpax5.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjjqfpax5.scala:20:48\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharAlpha\e[0m = lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value isLetter is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpjjqfpax5.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misNotLastCharAlpha\e[0m\
    \ = !lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                       \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \               value isLetter is not a member of String\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjjqfpax5.scala:32:5 ---------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n\
    \        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n    \
    \    var isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var\
    \ isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n\
    \        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n    \
    \    var isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var\
    \ isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n\
    \        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n    \
    \    var isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var\
    \ isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n\
    \        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n    \
    \    var isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var\
    \ isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n\
    \        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n    \
    \    var isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var\
    \ isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n\
    \        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n    \
    \    var isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var\
    \ isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n\
    \        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n    \
    \    var isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var\
    \ isLastCharAlpha = true\n\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa5bednra.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e\
    [31mtrue\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0misLastCharAlpha is already defined as \e[33mvariable\e[0m \e[35misLastCharAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa5bednra.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misLastCharAlpha is already defined as \e[33mvariable\e[0m \e[35misLastCharAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa5bednra.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misLastCharAlpha is already defined as \e[33mvariable\e[0m \e[35misLastCharAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa5bednra.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misLastCharAlpha is already defined as \e[33mvariable\e[0m \e[35misLastCharAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa5bednra.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misLastCharAlpha is already defin"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5v8lq9l.scala:24)\n\tat Problem.main(tmpq5v8lq9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val isLastCharALetter = lastChar.toString.isLetter\n        val isNotLastCharALetter\
    \ = lastChar.toString.isNotLetter\n        val isLastCharNotALetter = lastChar.toString.isNotLetter\n\
    \        val isLastCharNotALetter2 = lastChar.toString.isNotLetter\n        val\
    \ isLastCharNotALetter3 = lastChar.toString.isNotLetter\n        val isLastCharNotALetter4\
    \ = lastChar.toString.isNotLetter\n        val isLastCharNotALetter5 = lastChar.toString.isNotLetter\n\
    \        val isLastCharNotALetter6 = lastChar.toString.isNotLetter\n        val\
    \ isLastCharNotALetter7 = lastChar.toString.isNotLetter\n        val isLastCharNotALetter8\
    \ = lastChar.toString.isNotLetter\n        val isLastCharNotALetter9 = lastChar.toString.isNotLetter\n\
    \        val isLastCharNotALetter10 = lastChar.toString.isNotLetter\n        val\
    \ isLastCharNotALetter11 = lastChar.toString.isNotLetter\n        val isLastCharNotALetter12\
    \ = lastChar.toString.isNotLetter\n        val isLastCharNotALetter13 = lastChar.toString.isNotLetter\n\
    \        val isLastCharNotALetter14 = lastChar.toString.isNotLetter\n        val\
    \ isLastCharNotALetter15 = lastChar.toString.isNotLetter\n        val isLastCharNotALetter16\
    \ = lastChar.toString.isNotLetter\n        val isLastCharNotALetter17 = lastChar.toString.isNotLetter\n\
    \        val isLastCharNotALetter18 = lastChar.toString.isNotLetter\n        val\
    \ isLastCharNotALetter19 = lastChar.toString.isNotLetter\n        val isLastCharNotALetter20\
    \ = lastChar.toString.isNotLetter\n        val isLastCharNotALetter21 = lastChar.toString.isNotLetter\n\
    \        val isLastCharNotALetter22 = lastChar.toString.isNotLetter\n        val\
    \ isLastCharNotALetter23 = lastChar.toString.isNotLetter\n        val isLastCharNotALetter24\
    \ = lastChar.toString.isNotLetter\n        val isLastCharNotALetter25 = lastChar.toString.isNotLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg514ptpl.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpg514ptpl.scala:21:53 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36misNotLastCharALetter\e[0m = lastChar.toString.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg514ptpl.scala:22:53\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetter\e[0m = lastChar.toString.isNotLetter\n\e[31m\e[31m  \
    \ |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg514ptpl.scala:23:54\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetter2\e[0m = lastChar.toString.isNotLetter\n\e[31m\e[31m \
    \  |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg514ptpl.scala:24:54\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetter3\e[0m = lastChar.toString.isNotLetter\n\e[31m\e[31m \
    \  |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg514ptpl.scala:25:54\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetter4\e[0m = lastChar.toString.isNotLetter\n\e[31m\e[31m \
    \  |\e[0m  "
  stdout: ''
  timestamp: 1659792905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotWord = lastChar.isNotWord\n\
    \        val lastCharIsNotWordOrALetter = lastChar.isNotWord && lastCharIsALetter\n\
    \        val lastCharIsWord = lastChar.isWord\n        val lastCharIsWordOrALetter\
    \ = lastChar.isWord && lastCharIsALetter\n        val lastCharIsWordOrNotALetter\
    \ = lastChar.isWord && lastCharIsNotALetter\n        val lastCharIsWordOrNotWord\
    \ = lastChar.isWord && lastCharIsNotWord\n        val lastCharIsWordOrNotWordOrALetter\
    \ = lastChar.isWord && lastCharIsNotWord && lastCharIsALetter\n        val lastCharIsWordOrNotWordOrNotALetter\
    \ = lastChar.isWord && lastCharIsNotWord && lastCharIsNotALetter\n        val\
    \ lastCharIsWordOrNotWordOrNotWord = lastChar.isWord && lastCharIsNotWord && lastCharIsNotWord\n\
    \        val lastCharIsWordOrNotWordOrNotWordOrALetter = lastChar.isWord && lastCharIsNotWord\
    \ && lastCharIsNotWord && lastCharIsALetter\n        val lastCharIsWordOrNotWordOrNotWordOrNotALetter\
    \ = lastChar.isWord && lastCharIsNotWord && lastCharIsNotWord && lastCharIsNotALetter\n\
    \        val lastCharIsWordOrNotWordOrNotWordOrNotWord = lastChar.isWord && lastCharIsNotWord\
    \ && lastCharIsNotWord && lastCharIsNotWord\n        val lastCharIsWordOrNotWordOrNotWordOrNotWordOrALetter\
    \ = lastChar.isWord && lastCharIsNotWord && lastCharIsNotWord && lastCharIsNotWord\
    \ && lastCharIsALetter\n        val lastCharIsWordOrNotWordOrNotWordOrNotWordOrNotALetter\
    \ = lastChar.isWord && lastCharIsNotWord && lastCharIsNotWord && lastCharIsNotWord\
    \ && lastCharIsNotALetter\n        val lastCharIsWordOrNotWordOrNotWordOrNotWordOr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr8fu4wbz.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr8fu4wbz.scala:20:44\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetter\e[0m = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m  \
    \                                 ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                              value isNotLetter is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpr8fu4wbz.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ lastChar.isNotWord\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isNotWord is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr8fu4wbz.scala:22:50\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotWordOrALetter\e[0m = lastChar.isNotWord && lastCharIsALetter\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isNotWord is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr8fu4wbz.scala:23:38\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsWord\e[0m = lastChar.isWord\n\e[31m\e[31m   |\e[0m             \
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      value isWord is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpr8fu4wbz.scala:24:47 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mlastCharIsWordOrALetter\e[0m = lastChar.isWord\
    \ && lastCharIsALetter\n\e[31m\e[31m   |\e[0m                                \
    \      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \   value isWord is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpr8fu4wbz.scala:25:50 ------------------------\e[0m\e[0m\n\e["
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.toString.isLetter\n     \
    \   val isLastCharNotAlpha = !lastChar.toString.isLetter\n        val isLastCharNotWord\
    \ = txt.last.trim.toString.isWord\n        val isLastCharNotWordAlpha = !isLastCharNotWord\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastChar\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa_rs5dej.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa_rs5dej.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa_rs5dej.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa_rs5dej.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa_rs5dej.scala:27:"
  stdout: ''
  timestamp: 1659792903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNot\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2kihsfcz.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2kihsfcz.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2kihsfcz.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2kihsfcz.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordA"
  stdout: ''
  timestamp: 1659792903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterButNotWord = lastChar.isNotLetter\
    \ && !txt.split(\" \").contains(lastChar)\n        val lastCharIsALetterButNotWord\
    \ = lastChar.isLetter && !txt.split(\" \").contains(lastChar)\n        val lastCharIsALetterAndNotWord\
    \ = lastChar.isLetter && txt.split(\" \").contains(lastChar)\n        val lastCharIsALetterAndNotWordButNotLastChar\
    \ = lastChar.isLetter && !txt.split(\" \").contains(lastChar)\n        val lastCharIsALetterAndNotWordButNotLastCharButNotWord\
    \ = lastChar.isLetter && !txt.split(\" \").contains(lastChar) && !txt.split(\"\
    \ \").contains(lastChar)\n        val lastCharIsALetterAndNotWordButNotLastCharButNotWordButNotLastChar\
    \ = lastChar.isLetter && !txt.split(\" \").contains(lastChar) && !txt.split(\"\
    \ \").contains(lastChar) && !txt.split(\" \").contains(lastChar)\n        val\
    \ lastCharIsALetterAndNotWordButNotLastCharButNotWordButNotLastCharButNotWord\
    \ = lastChar.isLetter && !txt.split(\" \").contains(lastChar) && !txt.split(\"\
    \ \").contains(lastChar) && !txt.split(\" \").contains(lastChar) && !txt.split(\"\
    \ \").contains(lastChar)\n        val lastCharIsALetterAndNotWordButNotLastCharButNotWordButNotLastCharButNotWordButNotLastChar\
    \ = lastChar.isLetter && !txt.split(\" \").contains(lastChar) && !txt.split(\"\
    \ \").contains(lastChar) && !txt.split(\" \").contains(lastChar) && !txt.split(\"\
    \ \").contains(lastChar) && !txt.split(\" \").contains(lastChar)\n        val\
    \ lastCharIsALetterAndNotWordButNotLastCharButNotWordButNotLastCharButNotWordButNotLastCharButNotWord\
    \ = lastChar.isLetter && !txt.split(\" \").contains(lastChar) && !txt.split(\"\
    \ \").contains(lastChar) && !txt.split(\" \").contains(lastChar) && !txt.split(\"\
    \ \").contains(lastChar) && !txt.split(\" \").contains(lastChar) && !txt.split(\"\
    \ \").contains(lastChar)\n        val lastCharIsALetterAndNotWord\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjubmkp3h.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjubmkp3h.scala:20:44\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetter\e[0m = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m  \
    \                                 ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                              value isNotLetter is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpjubmkp3h.scala:21:54 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterButNotWord\e\
    [0m = lastChar.isNotLetter && !txt.split(\e[31m\" \"\e[0m).contains(lastChar)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjubmkp3h.scala:22:88\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterButNotWord\e\
    [0m = lastChar.isLetter && !txt.split(\e[31m\" \"\e[0m).contains(lastChar)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                             Found:    (lastChar : Char)\n\e[31m   |\e[0m   \
    \                                          Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjubmkp3h.scala:23:87 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterAndNotWord\e\
    [0m = lastChar.isLetter && txt.split(\e[31m\" \"\e[0m).contains(lastChar)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                            Found:    (lastChar : Char)\n\e[31m   |\e[0m    \
    \                            "
  stdout: ''
  timestamp: 1659792905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = lastChar.matches(\"\\\\\
    w+$\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp68mx2p9a.scala:49:11 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp68mx2p9a.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp68mx2p9a.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp68mx2p9a.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp68mx2p9a.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659792903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.toString.isLetter\n     \
    \   val isLastCharNotAlpha = !lastChar.toString.isLetter\n        val isLastCharNotWord\
    \ = lastChar.toString.isWord\n        val isLastCharNotWordAlpha = !isLastCharNotWord\n\
    \        val isLastCharNotWordNotAlpha = !isLastCharNotWord && !isLastCharAlpha\n\
    \        val isLastCharNotWordNotAlpha = !isLastCharNotWord && !isLastCharAlpha\
    \ && !isLastCharNotAlpha\n        val isLastCharNotWordNotAlpha = !isLastCharNotWord\
    \ && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\n        val\
    \ isLastCharNotWordNotAlpha = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha\
    \ && !isLastCharNotWord && !isLastCharNotWordNotAlpha\n        val isLastCharNotWordNotAlpha\
    \ = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\
    \ && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha\n        val isLastCharNotWordNotAlpha\
    \ = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\
    \ && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha\n\
    \        val isLastCharNotWordNotAlpha = !isLastCharNotWord && !isLastCharAlpha\
    \ && !isLastCharNotAlpha && !isLastCharNotWord && !isLastCharNotWordNotAlpha &&\
    \ !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha\n\
    \        val isLastCharNotWordNotAlpha = !isLastCharNotWord && !isLastCharAlpha\
    \ && !isLastCharNotAlpha && !isLastCharNotWord && !isLastCharNotWordNotAlpha &&\
    \ !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha\
    \ && !isLastCharNotWordNotAlpha\n        val isLastCharNotWordNotAlpha = !isLastCharNotWord\
    \ && !isLastCharAlpha && !isLastCharNotAlpha && !is\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpldrlbn2c.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordNotAlpha\e\
    [0m = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordNotAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpldrlbn2c.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordNotAlpha\e\
    [0m = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordNotAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpldrlbn2c.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordNotAlpha\e\
    [0m = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\
    \ && !isLastCharNotWordNotAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordNotAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpldrlbn2c.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36misLastC"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotAlpha = !lastChar.matches(\"[a-zA-Z ]\")\n        isLastCharAlpha\
    \ && !isLastCharNotAlpha\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4s94i0c.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4s94i0c.scala:20:43\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotAlpha\e[0m = !lastChar.matches(\e[31m\"[a-zA-Z ]\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  value matches is not a member of\
    \ Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val lastCharIsALetterOrSpaceOrWord\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord\n        val lastCharIsALetterOrSpaceOrWordOrSpace\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\n\
    \        val lastCharIsALetterOrSpaceOrWordOrSpaceOrWord = lastChar.isLetter ||\
    \ lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord ||\
    \ lastChar.isWord\n        val lastCharIsALetterOrSpaceOrWordOrSpaceOrWord = lastChar.isLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\
    \ || lastChar.isWord || lastChar.isWord\n        val lastCharIsALetterOrSpaceOrWordOrSpaceOrWord\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isWord || lastChar.isWord || lastChar.isWord\n\
    \        val lastCharIsALetterOrSpaceOrWordOrSpaceOrWord = lastChar.isLetter ||\
    \ lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord ||\
    \ lastChar.isWord || lastChar.isWord || lastChar.isWord\n        val lastCharIsALetterOrSpaceOrWordOrSpaceOrWord\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isWord || lastChar.isWord || lastChar.isWord\n\
    \        val lastCharIsALetterOrSpaceOrWordOrSpaceOrWord = lastChar.isLetter ||\
    \ lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord ||\
    \ lastChar.isWord || lastChar.isWord || lastChar.isWord\n        val lastCharIsALet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8k81srua.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8k81srua.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsALetterOrSpaceOrWordOrSpaceOrWord\e[0m = lastChar.isLetter ||\
    \ lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord ||\
    \ lastChar.isWord || lastChar.isWord\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsALetterOrSpaceOrWordOrSpaceOrWord is already defined\
    \ as \e[33mvalue\e[0m \e[35mlastCharIsALetterOrSpaceOrWordOrSpaceOrWord\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8k81srua.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterOrSpaceOrWordOrSpaceOrWord\e\
    [0m = lastChar.isLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isWord || lastChar.isWord || lastChar.isWord\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsALetterOrSpaceOrWordOrSpaceOrWord is already defined\
    \ as \e[33mvalue\e[0m \e[35mlastCharIsALetterOrSpaceOrWordOrSpaceOrWord\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8k81srua.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterOrSpaceOrWordOrSpaceOrWord\e\
    [0m = lastChar.isLetter || lastChar"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n        isAlpha\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpibq4grmd.scala:25)\n\tat Problem.main(tmpibq4grmd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        isLastCharAlpha && !isLastCharNotWordAlpha\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp2ss92iza.scala:19)\n\tat Problem$.main(tmp2ss92iza.scala:26)\n\
    \tat Problem.main(tmp2ss92iza.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.last.forall(x => !x.isLetter)\n\
    \        isLastCharAlpha && isLastCharNotAlpha && isLastCharNotWord\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc7a0bevz.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ txt.last.forall(\e[36mx\e[0m => !x.isLetter)\n\e[31m\e[31m   |\e[0m        \
    \                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 value forall is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        val words = txt.split(\"\
    \ \").filter(_.nonEmpty)\n        val wordSet = words.toSet\n        val wordSetSize\
    \ = wordSet.size\n        val charSet = lastChar.toSet\n        val charSetSize\
    \ = charSet.size\n        val isLastCharALetter = (charSetSize == wordSetSize)\n\
    \        val isLastCharALetter = (charSetSize == wordSetSize)\n        val isLastCharALetter\
    \ = (charSetSize == wordSetSize)\n        val isLastCharALetter = (charSetSize\
    \ == wordSetSize)\n        val isLastCharALetter = (charSetSize == wordSetSize)\n\
    \        val isLastCharALetter = (charSetSize == wordSetSize)\n        val isLastCharALetter\
    \ = (charSetSize == wordSetSize)\n        val isLastCharALetter = (charSetSize\
    \ == wordSetSize)\n        val isLastCharALetter = (charSetSize == wordSetSize)\n\
    \        val isLastCharALetter = (charSetSize == wordSetSize)\n        val isLastCharALetter\
    \ = (charSetSize == wordSetSize)\n        val isLastCharALetter = (charSetSize\
    \ == wordSetSize)\n        val isLastCharALetter = (charSetSize == wordSetSize)\n\
    \        val isLastCharALetter = (charSetSize == wordSetSize)\n        val isLastCharALetter\
    \ = (charSetSize == wordSetSize)\n        val isLastCharALetter = (charSetSize\
    \ == wordSetSize)\n        val isLastCharALetter = (charSetSize == wordSetSize)\n\
    \        val isLastCharALetter = (charSetSize == wordSetSize)\n        val isLastCharALetter\
    \ = (charSetSize == wordSetSize)\n        val isLastCharALetter = (charSetSize\
    \ == wordSetSize)\n        val isLastCharALetter = (charSetSize == wordSetSize)\n\
    \        val isLastCharALetter = (charSetSize == wordSetSize)\n        val isLastCharALetter\
    \ = (charSetSize == wordSetSize)\n        val isLastCharALetter = (charSetSize\
    \ == wordSetSize)\n        val isLastCharALetter = (charSetSize \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcf354d2z.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcf354d2z.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36misLastCharALetter\e[0m = (charSetSize == wordSetSize)\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0misLastCharALetter is already defined as \e[33mvariable\e[0m \e[35misLastCharALetter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcf354d2z.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m = (charSetSize\
    \ == wordSetSize)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharALetter is already defined as \e[33mvariable\e[0m\
    \ \e[35misLastCharALetter\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcf354d2z.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ (charSetSize == wordSetSize)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharALetter is already defined as \e[33mvariable\e[0m\
    \ \e[35misLastCharALetter\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcf354d2z.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ (charSetSize == wordSetSize)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharALetter is already defined as \e[33mvariable\e[0m\
    \ \e[35misLastCharALetter\e[0m\n\e[31m   |\e[0m\n\e"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").last.contains(lastChar)\n        isALetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb9xc6rw3.scala:25)\n\tat Problem.main(tmpb9xc6rw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar.toString.toLowerCase == lastChar)\n        val isLastCharNotALetter\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase == words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.toLowerCase != words.last)\n        val isLastCharNotALetterWord\
    \ = (words.last.toString.to\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp50it1vwd.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp50it1vwd.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36misLastCharNotALetterWord\e[0m = (words.last.toString.toLowerCase != words.last)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp50it1vwd.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterWord\e\
    [0m = (words.last.toString.toLowerCase != words.last)\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp50it1vwd.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterWord\e\
    [0m = (words.last.toString.toLowerCase != words.last)\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp50it1vwd.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterWord\e\
    [0m = (words.last.toString.toLowerC"
  stdout: ''
  timestamp: 1659792910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.last.split(\" \").forall(_.isLetter)\n\
    \        isLastCharAlpha && isLastCharNotAlpha && isLastCharNotWord\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2yc9lixb.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ txt.last.split(\e[31m\" \"\e[0m).forall(_.isLetter)\n\e[31m\e[31m   |\e[0m \
    \                               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                       value split is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = txt.last != lastChar\n        isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z5nbu8o.scala:24)\n\tat Problem.main(tmp8z5nbu8o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5v8lq9l.scala:24)\n\tat Problem.main(tmpq5v8lq9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        var isLastCharNotALetter\
    \ = false\n        while(lastChar != \" \") {\n            if(!Character.isLetter(lastChar))\
    \ {\n                isLastCharNotALetter = true\n            }\n            else\
    \ {\n                isLastCharALetter = true\n            }\n            lastChar\
    \ = txt.last\n        }\n        return isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa__qak6m.scala:21:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mwhile\e[0m(lastChar != \e[31m\" \"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659792909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = txt.split(\" \").last.contains(lastChar)\n   \
    \     isLastCharAlpha && !isLastCharNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy8fzdwhw.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.last.split(\" \").contains(lastChar)\n\
    \        isLastCharAlpha && isLastCharNotAlpha && isLastCharNotWord\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq987hyy3.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ txt.last.split(\e[31m\" \"\e[0m).contains(lastChar)\n\e[31m\e[31m   |\e[0m \
    \                               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                       value split is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val words = txt.split(\" \").map(_.toLowerCase)\n      \
    \  val wordSet = words.toSet\n        val isLastCharALetter = lastChar != ' '\
    \ && wordSet.contains(lastChar)\n        !isLastCharALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4pzr0bav.scala:21:68\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e\
    [0m = lastChar != \e[31m' '\e[0m && wordSet.contains(lastChar)\n\e[31m\e[31m \
    \  |\e[0m                                                                    ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (lastChar\
    \ : Char)\n\e[31m   |\e[0m                                             Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.forall(x => x.isLetter)\n        val isLastCharNotAlpha\
    \ = !lastChar.forall(x => x.isLetter)\n        isLastCharAlpha && !isLastCharNotAlpha\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp8u894ff1.scala:19)\n\tat Problem$.main(tmp8u894ff1.scala:25)\n\
    \tat Problem.main(tmp8u894ff1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"\\\\W\")\n        isLastCharAlpha\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsur61jh1.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsur61jh1.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value matches is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isNotWord = txt.dropRight(1).forall(_.isLetter)\n        !isAlpha && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcotmsxh_.scala:25)\n\tat Problem.main(tmpcotmsxh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterAndNotWord = lastChar.isNotLetter\
    \ && !lastChar.isWord\n        val lastCharIsWord = lastChar.isWord\n        val\
    \ lastCharIsNotWord = lastChar.isNotWord\n        val lastCharIsNotWordAndNotLetter\
    \ = lastChar.isNotWord && !lastChar.isLetter\n        val lastCharIsNotWordAndNotLetterAndNotSpace\
    \ = lastChar.isNotWord && !lastChar.isLetter && !lastChar.isSpace\n        val\
    \ lastCharIsNotWordAndNotLetterAndNotSpaceAndNotUpper = lastChar.isNotWord &&\
    \ !lastChar.isLetter && !lastChar.isSpace && !lastChar.isUpper\n        val lastCharIsNotWordAndNotLetterAndNotSpaceAndNotUpperAndNotUpper\
    \ = lastChar.isNotWord && !lastChar.isLetter && !lastChar.isSpace && !lastChar.isUpper\
    \ && !lastChar.isUpper\n        val lastCharIsNotWordAndNotLetterAndNotSpaceAndNotUpperAndNotUpperAndNotUpper\
    \ = lastChar.isNotWord && !lastChar.isLetter && !lastChar.isSpace && !lastChar.isUpper\
    \ && !lastChar.isUpper && !lastChar.isUpper\n        val lastCharIsNotWordAndNotLetterAndNotSpaceAndNotUpperAndNotUpperAndNotUpperAndNotUpper\
    \ = lastChar.isNotWord && !lastChar.isLetter && !lastChar.isSpace && !lastChar.isUpper\
    \ && !lastChar.isUpper && !lastChar.isUpper && !lastChar.isUpper\n        val\
    \ lastCharIsNotWordAndNotLetterAndNotSpaceAndNotUpperAndNotUpperAndNotUpperAndNotUpperAndNotUpper\
    \ = lastChar.isNotWord && !lastChar.isLetter && !lastChar.isSpace && !lastChar.isUpper\
    \ && !lastChar.isUpper && !lastChar.isUpper && !lastChar.isUpper && !lastChar.isUpper\n\
    \        val lastCharIsNotWordAndNotLetterAndNotSpaceAndNotUpperAndNotUpperAndNotUpperAndNotUpperAndNotUpperAndNotUpper\
    \ = lastChar.isNotWord && !lastChar.isLetter && !lastChar.isSpace && !lastChar.isUpper\
    \ && !lastChar.isUpper && !lastChar.isUpper && !lastChar.isUpper \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4r5t5045.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m\
    \ = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp4r5t5045.scala:21:54 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterAndNotWord\e[0m = lastChar.isNotLetter\
    \ && !lastChar.isWord\n\e[31m\e[31m   |\e[0m                                 \
    \            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp4r5t5045.scala:22:38 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsWord\e[0m = lastChar.isWord\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             value isWord is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4r5t5045.scala:23:41 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ lastChar.isNotWord\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isNotWord is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4r5t5045.scala:24:53\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotWordAndNotLetter\e[0m = lastChar.isNotWord && !lastChar.isLetter\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isNotWord is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4r5t5045.scala:25:64\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotWordAndNotLetterAndNotSpace\e[0m = lastChar.isNotWord && !lastChar.isLetter\
    \ && !lastChar.isSpace\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659792911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\
    \ || lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyfjg_drt.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyfjg_drt.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpace\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ is already defined as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpyfjg_drt.scala:20:44 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m = lastChar.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n"
  stdout: ''
  timestamp: 1659792911
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5v8lq9l.scala:24)\n\tat Problem.main(tmpq5v8lq9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").lastOption.exists(_.equals(lastChar))\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxyo_lwya.scala:24)\n\tat Problem.main(tmpxyo_lwya.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.last.nonEmpty && !txt.last.split(\"\
    \ \").contains(lastChar)\n        isLastCharAlpha && isLastCharNotAlpha && isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1a0bozug.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ txt.last.nonEmpty && !txt.last.split(\e[31m\" \"\e[0m).contains(lastChar)\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                value nonEmpty is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").lastOption.exists(_.equals(lastChar))\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxyo_lwya.scala:24)\n\tat Problem.main(tmpxyo_lwya.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792911
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   lastCharIsALetter && lastCharIsNotALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph7v0dz_1.scala:24)\n\tat Problem.main(tmph7v0dz_1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toChar == 'A') && !(lastChar.toString.toChar\
    \ == 'a') && !(lastChar.toString.toChar == 'B') && !(lastChar.toString.toChar\
    \ == 'b') && !(lastChar.toString.toChar == 'C') && !(lastChar.toString.toChar\
    \ == 'c') && !(lastChar.toString.toChar == 'D') && !(lastChar.toString.toChar\
    \ == 'd') && !(lastChar.toString.toChar == 'E') && !(lastChar.toString.toChar\
    \ == 'e') && !(lastChar.toString.toChar == 'F') && !(lastChar.toString.toChar\
    \ == 'f') && !(lastChar.toString.toChar == 'G') && !(lastChar.toString.toChar\
    \ == 'g') && !(lastChar.toString.toChar == 'H') && !(lastChar.toString.toChar\
    \ == 'h') && !(lastChar.toString.toChar == 'I') && !(lastChar.toString.toChar\
    \ == 'i') && !(lastChar.toString.toChar == 'J') && !(lastChar.toString.toChar\
    \ == 'j') && !(lastChar.toString.toChar == 'K') && !(lastChar.toString.toChar\
    \ == 'k') && !(lastChar.toString.toChar == 'L') && !(lastChar.toString.toChar\
    \ == 'l') && !(lastChar.toString.toChar == 'M') && !(lastChar.toString.toChar\
    \ == 'm') && !(lastChar.toString.toChar == 'N') && !(lastChar.toString.toChar\
    \ == 'n') && !(lastChar.toString.toChar == 'O') && !(lastChar.toString.toChar\
    \ == 'o') && !(lastChar.toString.toChar == 'P') && !(lastChar.toString.toChar\
    \ == 'p') && !(lastChar.toString.toChar == 'Q') && !(lastChar.toString.toChar\
    \ == 'q') && !(lastChar.toString.toChar == 'R') && !(lastChar.toString.toChar\
    \ == 'r') && !(lastChar.toString.toChar == 'S') && !(lastChar.toString.toChar\
    \ == 's') && !(lastChar.toString.toChar == 'T') && !(lastChar.toString.toChar\
    \ == 't') && !(lastChar.toString.toChar == 'U') && !(lastChar.toString.toChar\
    \ == 'u') && !(lastChar.toString.toChar == 'V') && !(lastChar.toString.toChar\
    \ == 'v') && !(lastChar.to\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi846o2k1.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi846o2k1.scala:20:51\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharALetter\e[0m = (lastChar.toString.toChar == \e[31m'A'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'a'\e[0m) && !(lastChar.toString.toChar == \e[31m'B'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'b'\e[0m) && !(lastChar.toString.toChar == \e[31m'C'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'c'\e[0m) && !(lastChar.toString.toChar == \e[31m'D'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'd'\e[0m) && !(lastChar.toString.toChar == \e[31m'E'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'e'\e[0m) && !(lastChar.toString.toChar == \e[31m'F'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'f'\e[0m) && !(lastChar.toString.toChar == \e[31m'G'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'g'\e[0m) && !(lastChar.toString.toChar == \e[31m'H'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'h'\e[0m) && !(lastChar.toString.toChar == \e[31m'I'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'i'\e[0m) && !(lastChar.toString.toChar == \e[31m'J'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'j'\e[0m) && !(lastChar.toString.toChar == \e[31m'K'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'k'\e[0m) && !(lastChar.toString.toChar == \e[31m'L'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'l'\e[0m) && !(lastChar.toString.toChar == \e[31m'M'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'm'\e[0m) && !(lastChar.toString.toChar == \e[31m'N'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'n'\e[0m) && !(lastChar.toString.toChar == \e[31m'O'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'o'\e[0m) && !(lastChar.toString.toChar == \e[31m'P'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'p'\e[0m) && !(lastChar.toString.toChar == \e[31m'Q'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'q'\e[0m) && !(lastChar.toString.toChar == \e[31m'R'\e[0m) && !(lastChar.toString.toChar\
    \ == \e[31m'r'\e[0m) && !(la"
  stdout: ''
  timestamp: 1659792911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   val lastCharIsNotALetterButNotWord = lastCharIsALetter && lastCharIsNotALetter\n\
    \        val lastCharIsALetterButNotWord = lastCharIsALetter && !lastCharIsNotALetter\n\
    \        val lastCharIsALetterButNotWordButNotSpace = lastCharIsALetter && !lastCharIsNotALetter\
    \ && !lastCharIsNotALetterButNotWord\n        val lastCharIsALetterButNotWordButNotSpaceButNotLastChar\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastCharIsNotALetterButNotWord\
    \ && !lastCharIsNotALetterButNotWord && !lastCharIsALetterButNotWordButNotSpace\n\
    \        val lastCharIsALetterButNotWordButNotSpaceButNotLastChar = lastCharIsALetter\
    \ && !lastCharIsNotALetter && !lastCharIsNotALetterButNotWord && !lastCharIsNotALetterButNotWord\
    \ && !lastCharIsALetterButNotWordButNotSpace\n        val lastCharIsALetterButNotWordButNotSpaceButNotLastChar\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastCharIsNotALetterButNotWord\
    \ && !lastCharIsNotALetterButNotWord && !lastCharIsALetterButNotWordButNotSpace\n\
    \        val lastCharIsALetterButNotWordButNotSpaceButNotLastChar = lastCharIsALetter\
    \ && !lastCharIsNotALetter && !lastCharIsNotALetterButNotWord && !lastCharIsNotALetterButNotWord\
    \ && !lastCharIsALetterButNotWordButNotSpace\n        val lastCharIsALetterButNotWordButNotSpaceButNotLastChar\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastCharIsNotALetterButNotWord\
    \ && !lastCharIsNotALetterButNotWord && !lastCharIsALetterButNotWordButNotSpace\n\
    \        val lastCharIsALet\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi46fgpfz.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi46fgpfz.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsALetterButNotWordButNotSpaceButNotLastChar\e[0m = lastCharIsALetter\
    \ && !lastCharIsNotALetter && !lastCharIsNotALetterButNotWord && !lastCharIsNotALetterButNotWord\
    \ && !lastCharIsALetterButNotWordButNotSpace\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsALetterButNotWordButNotSpaceButNotLastChar is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsALetterButNotWordButNotSpaceButNotLastChar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi46fgpfz.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterButNotWordButNotSpaceButNotLastChar\e\
    [0m = lastCharIsALetter && !lastCharIsNotALetter && !lastCharIsNotALetterButNotWord\
    \ && !lastCharIsNotALetterButNotWord && !lastCharIsALetterButNotWordButNotSpace\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsALetterButNotWordButNotSpaceButNotLastChar is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsALetterButNotWordButNotSpaceButNotLastChar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi46fgpfz.scala:27:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659792911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.toChar.isLetter\n        val isLastCharNotALetter\
    \ = lastChar.toString.toChar.isLetterOrDigit\n        val isLastCharNotALetterOrSpace\
    \ = lastChar.toString.toChar.isLetterOrDigit && !lastChar.toString.toChar.isSpace\n\
    \        val isLastCharNotALetterOrSpaceOrEmpty = lastChar.toString.toChar.isLetterOrDigit\
    \ && !lastChar.toString.toChar.isSpace && !lastChar.toString.toChar.isEmpty\n\
    \        val isLastCharNotALetterOrSpaceOrEmptyOrSpace = lastChar.toString.toChar.isLetterOrDigit\
    \ && !lastChar.toString.toChar.isSpace && !lastChar.toString.toChar.isEmpty &&\
    \ !lastChar.toString.toChar.isSpace\n        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpace\
    \ = lastChar.toString.toChar.isLetterOrDigit && !lastChar.toString.toChar.isSpace\
    \ && !lastChar.toString.toChar.isEmpty && !lastChar.toString.toChar.isSpace &&\
    \ !lastChar.toString.toChar.isSpace\n        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpace\
    \ = lastChar.toString.toChar.isLetterOrDigit && !lastChar.toString.toChar.isSpace\
    \ && !lastChar.toString.toChar.isEmpty && !lastChar.toString.toChar.isSpace &&\
    \ !lastChar.toString.toChar.isSpace && !lastChar.toString.toChar.isSpace\n   \
    \     val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace = lastChar.toString.toChar.isLetterOrDigit\
    \ && !lastChar.toString.toChar.isSpace && !lastChar.toString.toChar.isEmpty &&\
    \ !lastChar.toString.toChar.isSpace && !lastChar.toString.toChar.isSpace && !lastChar.toString.toChar.isSpace\
    \ && !lastChar.toString.toChar.isSpace\n        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace\
    \ = lastChar.toString.toChar.isLetterOrDigit && !lastChar.toString.toChar.isSpace\
    \ && !lastChar.toString.toChar.isEmpty && !lastChar.toString.toChar.isSpace &&\
    \ !lastChar.toString.toChar.isSpace && !lastChar.toString.toChar.isSpace && !lastChar.toString.toChar.is\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5xm8fmc2.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpace\e\
    [0m = lastChar.toString.toChar.isLetterOrDigit && !lastChar.toString.toChar.isSpace\
    \ && !lastChar.toString.toChar.isEmpty && !lastChar.toString.toChar.isSpace &&\
    \ !lastChar.toString.toChar.isSpace && !lastChar.toString.toChar.isSpace\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpace is already\
    \ defined as \e[33mvalue\e[0m \e[35misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5xm8fmc2.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace\e\
    [0m = lastChar.toString.toChar.isLetterOrDigit && !lastChar.toString.toChar.isSpace\
    \ && !lastChar.toString.toChar.isEmpty && !lastChar.toString.toChar.isSpace &&\
    \ !lastChar.toString.toChar.isSpace && !lastChar.toString.toChar.isSpace && !lastChar.toString.toChar.is\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace is\
    \ already defined as \e[33mvalue\e[0m \e[35misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all"
  stdout: ''
  timestamp: 1659792911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.matches(\"[a-zA-Z]\") &&\
    \ !lastChar.contains(\" \")\n        return isLastCharALetter\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp75e5511d.scala:19:41 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m) && !lastChar.contains(\e[31m\" \"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value matches is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   val lastCharIsNotALetterAndNotWord = lastCharIsALetter && !lastCharIsNotALetter\n\
    \        val lastCharIsNotALetterAndNotWordAndNotSpace = lastCharIsALetter &&\
    \ !lastCharIsNotALetter && !lastChar.isSpace\n        val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewline\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewline\n\
    \        val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewlineAndNotUpper\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewline\
    \ && !lastChar.isUpper\n        val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewlineAndNotUpperAndNotUpper\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewline\
    \ && !lastChar.isUpper && !lastChar.isUpper\n        val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewlineAndNotUpperAndNotUpperAndNotUpper\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewline\
    \ && !lastChar.isUpper && !lastChar.isUpper && !lastChar.isUpper\n        val\
    \ lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewlineAndNotUpperAndNotUpperAndNotUpper\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewline\
    \ && !lastChar.isUpper && !lastChar.isUpper && !lastChar.isUpper && !lastChar.isUpper\n\
    \        val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewlineAndNotUpperAndNotUpperAndNotUpperAndNotUpper\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewline\
    \ && !lastChar.isUpper && !lastChar.isUpper && !lastChar.isUpper && !\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpea6lyuxb.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewlineAndNotUpperAndNotUpperAndNotUpper\e\
    [0m = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewline\
    \ && !lastChar.isUpper && !lastChar.isUpper && !lastChar.isUpper && !lastChar.isUpper\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewlineAndNotUpperAndNotUpperAndNotUpper\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewlineAndNotUpperAndNotUpperAndNotUpper\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpea6lyuxb.scala:22:112 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterAndNotWordAndNotSpace\e\
    [0m = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   value isSpace is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpea6lyuxb.scala:23:125 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewline\e\
    [0m = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewline\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   "
  stdout: ''
  timestamp: 1659792912
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !isLastCharALetter\n        return isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2oas7qiw.scala:24)\n\tat Problem.main(tmp2oas7qiw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ lastCharIsALetter = lastChar.forall(_.isLetter)\n        val lastCharIsNotALetter\
    \ = lastChar.forall(!_.isLetter)\n        val lastCharIsNotALetterAndNotWord =\
    \ lastChar.forall(!_.isLetter && !_.isLetterOrDigit)\n        val lastCharIsNotALetterAndNotWordAndNotSpace\
    \ = lastChar.forall(!_.isLetter && !_.isLetterOrDigit && !_.isSpace)\n       \
    \ val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewline = lastChar.forall(!_.isLetter\
    \ && !_.isLetterOrDigit && !_.isSpace && !_.isNewline)\n        val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewlineAndNotUppercase\
    \ = lastChar.forall(!_.isLetter && !_.isLetterOrDigit && !_.isSpace && !_.isNewline\
    \ && !_.isUppercase)\n        val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewlineAndNotUppercaseAndNotUppercase\
    \ = lastChar.forall(!_.isLetter && !_.isLetterOrDigit && !_.isSpace && !_.isNewline\
    \ && !_.isUppercase && !_.isUppercase)\n        val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewlineAndNotUppercaseAndNotUppercaseAndNotUppercase\
    \ = lastChar.forall(!_.isLetter && !_.isLetterOrDigit && !_.isSpace && !_.isNewline\
    \ && !_.isUppercase && !_.isUppercase && !_.isUppercase)\n        val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewlineAndNotUppercaseAndNotUppercaseAndNotUppercaseAndNotUppercase\
    \ = lastChar.forall(!_.isLetter && !_.isLetterOrDigit && !_.isSpace && !_.isNewline\
    \ && !_.isUppercase && !_.isUppercase && !_.isUppercase && !_.isUppercase)\n \
    \       val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewlineAndNotUppercaseAndNotUppercaseAndNotUppercaseAndNotUppercaseAndNotUppercase\
    \ = lastChar.forall(!_.isLetter && !_.isLetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_ls2kkyp.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_ls2kkyp.scala:22:61\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsNotALetterAndNotWord\e[0m = lastChar.forall(!_.isLetter && !_.isLetterOrDigit)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmp_ls2kkyp.scala:23:72 ---------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterAndNotWordAndNotSpace\e\
    [0m = lastChar.forall(!_.isLetter && !_.isLetterOrDigit && !_.isSpace)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Wrong number of parameters, expected: 1\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmp_ls2kkyp.scala:24:85 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewline\e\
    [0m = lastChar.forall(!_.isLetter && !_.isLetterOrDigit && !_.isSpace && !_.isNewline)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_ls2kkyp.scala:25:100\
    \ --------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewlineAndNotUppercase\e\
    [0m = lastChar.forall(!_.isLetter && !_.isLetterOrDigit && !_.isSpace && !_.isNewline\
    \ && !_.isUppercase)\n\e[31m\e[31m   |\e[0m                                  \
    \                                               "
  stdout: ''
  timestamp: 1659792911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ lastCharIsALetter = (lastChar.toString.toChar == 'a') && !(lastChar.isDigit)\n\
    \        return lastCharIsALetter\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm6bp8zdc.scala:20:51 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetter\e[0m =\
    \ (lastChar.toString.toChar == \e[31m'a'\e[0m) && !(lastChar.isDigit)\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value toChar is not a member of\
    \ String\n1 error found\n"
  stdout: ''
  timestamp: 1659792912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlphabetic = lastChar.toString.isLetter\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        val isLastCharNotWordOrEmpty = words.last.contains(lastChar)\
    \ && txt.length>0\n        val isLastCharNotWordOrEmptyOrNotLetter = words.last.contains(lastChar)\
    \ && !lastChar.toString.isLetter\n        val isLastCharNotWordOrEmptyOrNotLetterOrNotLetter\
    \ = words.last.contains(lastChar) && !lastChar.toString.isLetter && !lastChar.toString.isLetter\n\
    \        val isLastCharNotWordOrEmptyOrNotLetterOrNotLetterOrNotLetter = words.last.contains(lastChar)\
    \ && !lastChar.toString.isLetter && !lastChar.toString.isLetter && !lastChar.toString.isLetter\
    \ && !lastChar.toString.isLetter\n        val isLastCharNotWordOrEmptyOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = words.last.contains(lastChar) && !lastChar.toString.isLetter && !lastChar.toString.isLetter\
    \ && !lastChar.toString.isLetter && !lastChar.toString.isLetter && !lastChar.toString.isLetter\n\
    \        val isLastCharNotWordOrEmptyOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = words.last.contains(lastChar) && !lastChar.toString.isLetter && !lastChar.toString.isLetter\
    \ && !lastChar.toString.isLetter && !lastChar.toString.isLetter && !lastChar.toString.isLetter\
    \ && !lastChar.toString.isLetter\n        val isLastCharNotWordOrEmptyOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = words.last.contains(lastChar) && !lastChar.toString.isLetter && !lastChar.toString.isLetter\
    \ && !lastChar.toString.isLetter && !lastChar.toString.isLetter && !lastChar.toString.isLetter\
    \ && !lastChar.toString.isLetter && !lastChar.toString.isLetter\n        val isLastCharNotWordOrEmptyOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = words.last.contains(lastChar) && !lastChar.toString.isLetter && !lastChar.toString.isLetter\
    \ && !lastChar.toString.isLetter && !lastChar.toString.isLetter && !lastChar.toString.isLetter\
    \ && !lastChar.toString.is\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy897xoxn.scala:20:53 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlphabetic\e[0m\
    \ = lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                        \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \               value isLetter is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpy897xoxn.scala:23:102 -----------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordOrEmptyOrNotLetter\e\
    [0m = words.last.contains(lastChar) && !lastChar.toString.isLetter\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpy897xoxn.scala:24:113 -----------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordOrEmptyOrNotLetterOrNotLetter\e\
    [0m = words.last.contains(lastChar) && !lastChar.toString.isLetter && !lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                value isLetter is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy897xoxn.scala:24:144 -----------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordOrEmptyOrNotLetterOrNotLetter\e\
    [0m = words.last.contains(lastChar) && !lastChar.toString.isLetter && !lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy897xoxn.scala:25:124\
    \ -----------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWordOrEmptyOrNotLe"
  stdout: ''
  timestamp: 1659792917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"\\\\W\")\n        isLastCharAlpha\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsur61jh1.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsur61jh1.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value matches is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.lastIndexOfAny(\"\
    \ \") != txt.length - 1\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLast\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6hpt56v.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && isLastCharNotAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6hpt56v.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && isLastCharNotAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6hpt56v.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && isLastCharNotAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6hpt56v.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && isLastCharNotAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overl"
  stdout: ''
  timestamp: 1659792916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !(isLastCharALetter)\n        isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81xo1hgx.scala:25)\n\tat Problem.main(tmp81xo1hgx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isLetterOrDigit\n        val lastCharIsNotALetterOrDigit = lastChar.isLetterOrDigitOrUnderscore\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscore = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\
    \        val lastCharIsNotALetterOrDigitOrUnderscoreOrSpace = lastChar.is\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpknhtcr_y.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrDigitOrUnderscoreOrSpace\e\
    [0m = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrDigitOrUnderscoreOrSpace is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrDigitOrUnderscoreOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpknhtcr_y.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrDigitOrUnderscoreOrSpace\e\
    [0m = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrDigitOrUnderscoreOrSpace is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrDigitOrUnderscoreOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpknhtcr_y.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrDigitOrUnderscoreOrSpace\e\
    [0m = lastChar.isLetterOrDigitOrUnderscoreOrSpace\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrDigitOrUnderscoreOrSpace is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrDigitOrUnderscoreOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpknhtcr_y.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsN"
  stdout: ''
  timestamp: 1659792916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastWord = words(words.length-1)\n        val\
    \ lastChar = lastWord.last\n        val isLastCharALetter = lastChar >= 'a' &&\
    \ lastChar <= 'z'\n        val isLastCharNotALetter = lastChar != 'a' && lastChar\
    \ != 'z'\n        isLastCharALetter && !isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_tdw1n9x.scala:27)\n\tat Problem.main(tmp_tdw1n9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.matches(\"[a-zA-Z]+\")\n        val isLastCharNotALetter\
    \ = lastChar.matches(\"[a-zA-Z]+$\")\n        val isLastCharNotALetterOrSpace\
    \ = lastChar.matches(\"[a-zA-Z]+\\\\s+$\")\n        val isLastCharNotALetterOrSpaceOrEmpty\
    \ = lastChar.matches(\"[a-zA-Z]+\\\\s+$|^$\")\n        val isLastCharNotALetterOrSpaceOrEmptyOrSpace\
    \ = lastChar.matches(\"[a-zA-Z]+\\\\s+$|^$\\\\s+$\")\n        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpace\
    \ = lastChar.matches(\"[a-zA-Z]+\\\\s+$|^$\\\\s+$\\\\s+$\")\n        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace\
    \ = lastChar.matches(\"[a-zA-Z]+\\\\s+$|^$\\\\s+$\\\\s+$\\\\s+$\")\n        val\
    \ isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace = lastChar.matches(\"\
    [a-zA-Z]+\\\\s+$|^$\\\\s+$\\\\s+$\\\\s+$\\\\s+$\")\n        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpaceOrSpace\
    \ = lastChar.matches(\"[a-zA-Z]+\\\\s+$|^$\\\\s+$\\\\s+$\\\\s+$\\\\s+$\\\\s+$\"\
    )\n        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = lastChar.matches(\"[a-zA-Z]+\\\\s+$|^$\\\\s+$\\\\s+$\\\\s+$\\\\s+$\\\\s+$\\\
    \\s+$\")\n        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = lastChar.matches(\"[a-zA-Z]+\\\\s+$|^$\\\\s+$\\\\s+$\\\\s+$\\\\s+$\\\\s+$\\\
    \\s+$\\\\s+$\\\\s+$\")\n        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = lastChar.matches(\"[a-zA-Z]+\\\\s+$|^$\\\\s+$\\\\s+$\\\\s+$\\\\s+$\\\\s+$\\\
    \\s+$\\\\s+$\\\\s+$\\\\s+$\")\n        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiz5w4qb1.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiz5w4qb1.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]+\\\\s+$|^$\\\\s+$\\\\s+$\\\\s+$\\\\s+$\"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace is\
    \ already defined as \e[33mvalue\e[0m \e[35misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpiz5w4qb1.scala:33:5 ---------------------\e[0m\e[0m\n\
    \e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"\\\\W\")\n        isLastCharAlpha\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsur61jh1.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsur61jh1.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value matches is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val words = txt.split(\" \").map(_.toLowerCase)\n      \
    \  words.contains(lastChar) && words.last.forall(_.isLetter)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr3e0r3g_.scala:20:23\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        words.contains(lastChar)\
    \ && words.last.forall(_.isLetter)\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (lastChar :\
    \ Char)\n\e[31m   |\e[0m                       Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n      \
    \  isALetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph6vt4axf.scala:25)\n\tat Problem.main(tmph6vt4axf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\
    \ || lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyfjg_drt.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyfjg_drt.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpace\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ is already defined as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpyfjg_drt.scala:20:44 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m = lastChar.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n"
  stdout: ''
  timestamp: 1659792911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]+\")\n\
    \        val isLastCharNotWord = lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\"\
    )\n        val isLastCharNotWord2 = lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\")\n        val isLastCharNotWord3 = lastChar.matches(\"[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\")\n        val isLastCharNotWord4 =\
    \ lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\"\
    )\n        val isLastCharNotWord5 = lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\")\n        val isLastCharNotWord6\
    \ = lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\\
    s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\")\n        val isLastCharNotWord7 = lastChar.matches(\"\
    [a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\")\n        val isLastCharNotWord8 = lastChar.matches(\"\
    [a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\")\n        val isLastCharNotWord9 =\
    \ lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\")\n    \
    \    val isLastCharNotWord10 = lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\\\
    s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\")\n        val isLastCharNotWord11 =\
    \ lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\")\n        val isLastCharNotWord12 = lastChar.matches(\"[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpoeatpo8g.scala:31:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord12\e[0m\
    \ = lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\\
    s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\\n\e[31m\e[31m   |\e[0m                          \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \                     unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpoeatpo8g.scala:33:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m33 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpoeatpo8g.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoeatpo8g.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"[a-zA-Z]+\\\\s[a-zA-Z]+\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoeatpo8g.scala:21:42\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord2\e[0m = lastChar.matches(\e[31m\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoeatpo8g.scala:22:42\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord3\e[0m = lastChar.matches(\e[31m\"[a-zA-Z]+\\"
  stdout: ''
  timestamp: 1659792917
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val isLastCharNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   isLastCharALetter && !isLastCharNotALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwm_zy14r.scala:25)\n\tat Problem.main(tmpwm_zy14r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.isLetter\n        val isLastCharNotALetter\
    \ = lastChar != lastChar.toLowerCase\n        val isLastCharNotALetterAndNotWord\
    \ = lastChar != lastChar.toLowerCase() && lastChar != lastChar.toUpperCase()\n\
    \        val isLastCharNotALetterAndNotWordAndNotSpace = lastChar != lastChar.toLowerCase()\
    \ && lastChar != lastChar.toUpperCase() && lastChar != lastChar.trim\n       \
    \ val isLastCharNotALetterAndNotWordAndNotSpaceAndNotUpper = lastChar != lastChar.toLowerCase()\
    \ && lastChar != lastChar.toUpperCase() && lastChar != lastChar.trim && lastChar\
    \ != lastChar.toUpperCase.trim\n        val isLastCharNotALetterAndNotWordAndNotSpaceAndNotUpperAndNotUpper\
    \ = lastChar != lastChar.toLowerCase() && lastChar != lastChar.toUpperCase() &&\
    \ lastChar != lastChar.trim && lastChar != lastChar.toUpperCase.trim && lastChar\
    \ != lastChar.toUpperCase.toUpperCase.trim\n        val isLastCharNotALetterAndNotWordAndNotSpaceAndNotUpperAndNotUpperAndNotUpper\
    \ = lastChar != lastChar.toLowerCase() && lastChar != lastChar.toUpperCase() &&\
    \ lastChar != lastChar.trim && lastChar != lastChar.toUpperCase.trim && lastChar\
    \ != lastChar.toUpperCase.toUpperCase.trim && lastChar != lastChar.toUpperCase.toUpperCase.toUpperCase.trim\n\
    \        val isLastCharNotALetterAndNotWordAndNotSpaceAndNotUpperAndNotUpperAndNotUpperAndNotUpper\
    \ = lastChar != lastChar.toLowerCase() && lastChar != lastChar.toUpperCase() &&\
    \ lastChar != lastChar.trim && lastChar != lastChar.toUpperCase.trim && lastChar\
    \ != lastChar.toUpperCase.toUpperCase.trim && lastChar != lastChar.toUpperCase.toUpperCase.toUpperCase.trim\
    \ && lastChar != lastChar.toUpperCase.toUpperCase.toUpperCase.toUpperCase.trim\n\
    \        val isLastCharNotALetterAndNotWordAndNotSpaceAndNotUpperAndNotUpperAndNotUpperAndNotUpperAndNotUpper\
    \ = lastChar != lastChar.toLowerCase() && lastChar != lastChar.toUpperCase() &&\
    \ lastChar != lastChar.trim && lastChar != lastChar.toUpperCase.trim && lastChar\
    \ != lastChar.toUpperCase.toUpperCase.trim && lastChar != lastChar.toUpperCase.toUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpngaq2740.scala:20:56 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m\
    \ = lastChar != lastChar.toLowerCase\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                          value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpngaq2740.scala:21:66 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterAndNotWord\e\
    [0m = lastChar != lastChar.toLowerCase() && lastChar != lastChar.toUpperCase()\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpngaq2740.scala:22:77 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misLastCharNotALetterAndNotWordAndNotSpace\e[0m\
    \ = lastChar != lastChar.toLowerCase() && lastChar != lastChar.toUpperCase() &&\
    \ lastChar != lastChar.trim\n\e[31m\e[31m   |\e[0m                           \
    \                                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                               value toLowerCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpngaq2740.scala:23:88 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterAndNotWordAndNotSpaceAndNotUpper\e\
    [0m = lastChar != lastChar.toLowerCase() && lastChar != lastChar.toUpperCase()\
    \ && lastChar != lastChar.trim && lastChar != lastChar.toUpperCase.trim\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \            value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpngaq2740.scala:24:99 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterAndNotWordAndNotSpaceAndNotUpperAndNotUpper\e\
    [0m ="
  stdout: ''
  timestamp: 1659792918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isNotWord = txt.dropRight(1).forall(_.isLetter)\n        isAlpha && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbtr5f2p7.scala:27)\n\tat Problem.main(tmpbtr5f2p7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar != \" \" && lastChar != \"-\"\n        val isLastCharNotAlpha = !isLastCharNotWord\n\
    \        isLastCharAlpha && !isLastCharNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpeyrem30p.scala:20:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ lastChar != \e[31m\" \"\e[0m && lastChar != \e[31m\"-\"\e[0m\n\e[31m\e[31m \
    \  |\e[0m                                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpeyrem30p.scala:20:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ lastChar != \e[31m\" \"\e[0m && lastChar != \e[31m\"-\"\e[0m\n\e[31m\e[31m \
    \  |\e[0m                                                   ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659792917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.forall(_.isLetter)\n        val isLastCharNotAlpha\
    \ = !lastChar.forall(_.isLetter)\n        val isLastCharNotWord = words.last.forall(_.forall(_.isLetter))\n\
    \        isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnoj20btf.scala:22:52 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ words.last.forall(_.forall(_.isLetter))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                           value forall is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.last.split(\" \").exists(!_.isLetter)\n\
    \        isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe93kao78.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ txt.last.split(\e[31m\" \"\e[0m).exists(!_.isLetter)\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        value split is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.toString.isLetter\n   \
    \     val lastCharIsNotALetter = lastChar.isLetter\n        val lastCharIsNotALetterOrSpace\
    \ = lastChar.isLetter || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrPunctuation\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord || lastChar.isPunctuation\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrPunctuationOrNumberOrSpace = lastChar.isLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isPunctuation || lastChar.isNumber\
    \ || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWordOrPunctuationOrNumberOrSpaceOrWord\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord || lastChar.isPunctuation\
    \ || lastChar.isNumber || lastChar.isSpace || lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrPunctuationOrNumberOrSpaceOrWordOrPunctuation\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord || lastChar.isPunctuation\
    \ || lastChar.isNumber || lastChar.isSpace || lastChar.isWord || lastChar.isPunctuation\
    \ || lastChar.isNumber\n        val lastCharIsNotALetterOrSpaceOrWordOrPunctuationOrNumberOrSpaceOrWordOrPunctuationOrNumber\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord || lastChar.isPunctuation\
    \ || lastChar.isNumber || lastChar.isSpace || lastChar.isWord || lastChar.isPunctuation\
    \ || lastChar.isNumber || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWordOrPunctuationOrNumberOrSpaceOrWordOrPunctuationOrNumberOrSpace\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord || lastChar.isPunctuation\
    \ || lastChar.isNumber || lastChar.isSpace || lastChar.isWord || lastChar.isPunctuation\
    \ || lastChar.isNumber || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWordOrPunctuationOrNumberOrSpaceOrWordOrPunctuationOrNumberOrSpaceOrWord\
    \ = last\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxylcr7_b.scala:19:50 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpxylcr7_b.scala:21:72 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpace\e[0m =\
    \ lastChar.isLetter || lastChar.isSpace\n\e[31m\e[31m   |\e[0m               \
    \                                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   value isSpace is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxylcr7_b.scala:22:78 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWord\e\
    [0m = lastChar.isLetter || lastChar.isSpace || lastChar.isWord\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \ ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   value\
    \ isSpace is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxylcr7_b.scala:22:98\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterOrSpaceOrWord\e[0m = lastChar.isLetter || lastChar.isSpace\
    \ || lastChar.isWord\n\e[31m\e[31m   |\e[0m                                  \
    \                                                       ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    value isWord is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxylcr7_b.scala:23:91\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterOrSpaceOrWordOrPunctuation\e[0m = lastChar.isLetter ||\
    \ lastChar.isSpace || lastChar.isWord || lastChar.isPunctuation\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1659792920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == lastChar)\n        val\
    \ isLastCharNotALetter = (lastChar.toString.toLowerCase != lastChar)\n       \
    \ val isLastCharNotALetterWord = words.lastOption.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterWordOrEmpty = words.lastOption.exists(word =>\
    \ word.contains(lastChar) && word != \"\")\n        val isLastCharNotALetterWordOrEmptyOrLastCharNotALetter\
    \ = words.lastOption.exists(word => word.contains(lastChar) && word != \"\" &&\
    \ word.contains(lastChar))\n        val isLastCharNotALetterWordOrEmptyOrLastCharNotALetterWord\
    \ = words.lastOption.exists(word => word.contains(lastChar) && word != \"\" &&\
    \ word.contains(lastChar) && word != lastChar)\n        val isLastCharNotALetterWordOrEmptyOrLastCharNotALetterWordOrLastCharNotALetter\
    \ = words.lastOption.exists(word => word.contains(lastChar) && word != \"\" &&\
    \ word.contains(lastChar) && word != lastChar && word.contains(lastChar))\n  \
    \      val isLastCharNotALetterWordOrEmptyOrLastCharNotALetterWordOrLastCharNotALetterWord\
    \ = words.lastOption.exists(word => word.contains(lastChar) && word != \"\" &&\
    \ word.contains(lastChar) && word != lastChar && word.contains(lastChar) && word\
    \ != lastChar)\n        val isLastCharNotALetterWordOrEmptyOrLastCharNotALetterWordOrLastCharNotALetterWordOrLastCharNotALetter\
    \ = words.lastOption.exists(word => word.contains(lastChar) && word != \"\" &&\
    \ word.contains(lastChar) && word != lastChar && word.contains(lastChar) && word\
    \ != lastChar && word.contains(lastChar))\n        val isLastCharNotALetterWordOrEmptyOrLastCharNotALetterWordOrLastCharNotALetterWordOrLastCharNotALetterWord\
    \ = words.lastOption.exists(word => word.contains(lastChar) && word != \"\" &&\
    \ word.contains(lastChar) && word != lastChar && word.contains(lastChar) && word\
    \ != lastChar && word.contains(lastChar) && word != lastChar)\n        val isLastCharNotALetterWordOrEmptyOrLastCharNotALetterWordOrLastCharNotALet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk43xc341.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpk43xc341.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"\\\\W\")\n        val isLastCharNotAlpha\
    \ = !isLastCharNotWord\n        val isLastCharNotSpace = lastChar.matches(\"\\\
    \\s\")\n        isLastCharAlpha && !isLastCharNotSpace && !isLastCharNotAlpha\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpexz3fyla.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpexz3fyla.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value matches is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpexz3fyla.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotSpace\e[0m\
    \ = lastChar.matches(\e[31m\"\\\\s\"\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                value matches is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659792917
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").last.contains(lastChar)\n        isALetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb9xc6rw3.scala:25)\n\tat Problem.main(tmpb9xc6rw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotAlpha = !lastChar.matches(\"[a-zA-Z ]\")\n        isLastCharAlpha\
    \ && !isLastCharNotAlpha\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4s94i0c.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4s94i0c.scala:20:43\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotAlpha\e[0m = !lastChar.matches(\e[31m\"[a-zA-Z ]\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  value matches is not a member of\
    \ Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").lastOption match {\n            case None\
    \ => false\n            case Some(word) => !word.contains(lastChar)\n        }\n\
    \        isALetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy6uqra72.scala:27)\n\tat Problem.main(tmpy6uqra72.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        var isLastCharNotALetter\
    \ = false\n        for(i <- 0 until txt.length) {\n            val c = txt(i)\n\
    \            if(c == ' ') {\n                isLastCharNotALetter = true\n   \
    \         } else {\n                isLastCharNotALetter = false\n           \
    \ }\n            if(lastChar == c) {\n                isLastCharALetter = true\n\
    \            } else {\n                isLastCharALetter = false\n           \
    \ }\n            lastChar = c\n        }\n        return isLastCharALetter\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpja35hwsi.scala:39)\n\tat Problem.main(tmpja35hwsi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"[a-zA-Z ]+\")\n        isLastCharAlpha\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt1qgfv2v.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt1qgfv2v.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"[a-zA-Z ]+\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value matches is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.toString.isLetter\n   \
    \     val isLastCharNotALetter = lastChar.toString.isNotLetter\n        val isLastCharNotALetterOrSpace\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace\n        val isLastCharNotALetterOrSpaceOrWord\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isWord\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrSpace = lastChar.toString.isNotLetter\
    \ || lastChar.toString.isSpace || lastChar.toString.isWord || lastChar.toString.isSpace\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrSpaceOrWord = lastChar.toString.isNotLetter\
    \ || lastChar.toString.isSpace || lastChar.toString.isWord || lastChar.toString.isSpace\
    \ || lastChar.toString.isWord || lastChar.toString.isWord\n        val isLastCharNotALetterOrSpaceOrWordOrSpaceOrWord\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isWord\
    \ || lastChar.toString.isSpace || lastChar.toString.isWord || lastChar.toString.isWord\
    \ || lastChar.toString.isWord\n        val isLastCharNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isWord\
    \ || lastChar.toString.isSpace || lastChar.toString.isWord || lastChar.toString.isSpace\
    \ || lastChar.toString.isWord || lastChar.toString.isWord || lastChar.toString.isSpace\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWord = lastChar.toString.isNotLetter\
    \ || lastChar.toString.isSpace || lastChar.toString.isWord || lastChar.toString.isSpace\
    \ || lastChar.toString.isWord || lastChar.toString.isSpace || lastChar.toString.isWord\
    \ || lastChar.toString.isSpace || lastChar.toString.isWord || lastChar.toString.isWord\
    \ || lastChar.toString.isWord\n        val isLastCharNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.toString.isNot\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpekt_n7nb.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrWordOrSpaceOrWord\e\
    [0m = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isWord\
    \ || lastChar.toString.isSpace || lastChar.toString.isWord || lastChar.toString.isWord\
    \ || lastChar.toString.isWord\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterOrSpaceOrWordOrSpaceOrWord is already\
    \ defined as \e[33mvalue\e[0m \e[35misLastCharNotALetterOrSpaceOrWordOrSpaceOrWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpekt_n7nb.scala:19:50 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpekt_n7nb.scala:20:53\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetter\e[0m = lastChar.toString.isNotLetter\n\e[31m\e[31m  \
    \ |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpekt_n7nb.scala:21:60\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpace\e[0m = lastChar.toString.isNotLetter || lastChar.toString.isSpace\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value isNotL"
  stdout: ''
  timestamp: 1659792919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.toString.matches(\"[a-zA-Z]\"\
    )\n        val isLastCharNotAlpha = !lastChar.toString.matches(\"[a-zA-Z ]\")\n\
    \        isLastCharAlpha && !isLastCharNotAlpha\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_coj45k.scala:24)\n\tat Problem.main(tmpx_coj45k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !(isLastCharALetter)\n        return isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnm48rxm2.scala:24)\n\tat Problem.main(tmpnm48rxm2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        while (lastChar !=\
    \ \" \") {\n            if (lastChar.isLetter) {\n                isLastCharALetter\
    \ = false\n            }\n            lastChar = txt.last\n        }\n       \
    \ return isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvka0uyz3.scala:20:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mwhile\e[0m (lastChar != \e[31m\" \"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659792921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5v8lq9l.scala:24)\n\tat Problem.main(tmpq5v8lq9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z')\n        val lastCharIsNotALetter = (lastChar != 'a' && lastChar != 'z')\n\
    \        lastCharIsALetter && !lastCharIsNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptedq2khc.scala:25)\n\tat Problem.main(tmptedq2khc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n       \
    \ isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsf1mb1u7.scala:25)\n\tat Problem.main(tmpsf1mb1u7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.toString.isLetter\n   \
    \     val isLastCharNotALetter = lastChar.toString.isNotLetter\n        val isLastCharNotALetterOrSpace\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace\n        val isLastCharNotALetterOrSpaceOrEmpty\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isEmpty\n\
    \        val isLastCharNotALetterOrSpaceOrEmptyOrSpace = lastChar.toString.isNotLetter\
    \ || lastChar.toString.isSpace || lastChar.toString.isEmpty || lastChar.toString.isSpace\n\
    \        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpace = lastChar.toString.isNotLetter\
    \ || lastChar.toString.isSpace || lastChar.toString.isEmpty || lastChar.toString.isSpace\
    \ || lastChar.toString.isSpace\n        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpace\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isEmpty\
    \ || lastChar.toString.isSpace || lastChar.toString.isSpace || lastChar.toString.isSpace\n\
    \        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace = lastChar.toString.isNotLetter\
    \ || lastChar.toString.isSpace || lastChar.toString.isEmpty || lastChar.toString.isSpace\
    \ || lastChar.toString.isSpace || lastChar.toString.isSpace || lastChar.toString.isSpace\n\
    \        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace = lastChar.toString.isNotLetter\
    \ || lastChar.toString.isSpace || lastChar.toString.isEmpty || lastChar.toString.isSpace\
    \ || lastChar.toString.isSpace || lastChar.toString.isSpace || lastChar.toString.isSpace\
    \ || lastChar.toString.isSpace\n        val isLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpaceOrSpace\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isEmpty\
    \ || lastChar.toString.isSpace || lastChar.toString.isSpace || lastChar.toString.isSpace\
    \ || lastChar.toString.isSpace || last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpugt202pd.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpace\e\
    [0m = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isEmpty\
    \ || lastChar.toString.isSpace || lastChar.toString.isSpace || lastChar.toString.isSpace\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpace is already\
    \ defined as \e[33mvalue\e[0m \e[35misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpugt202pd.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace\e\
    [0m = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isEmpty\
    \ || lastChar.toString.isSpace || lastChar.toString.isSpace || lastChar.toString.isSpace\
    \ || lastChar.toString.isSpace || lastChar.toString.isSpace\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace is\
    \ already defined as \e[33mvalue\e[0m \e[35misLastCharNotALetterOrSpaceOrEmptyOrSpaceOrSpaceOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpugt202pd.scala:19:50 ------------------------\e[0m\e[0m"
  stdout: ''
  timestamp: 1659792923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isNotWord = txt.split(\" \").last.contains(lastChar)\n        isAlpha\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0bsr4l8l.scala:25)\n\tat Problem.main(tmp0bsr4l8l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   lastCharIsALetter && !lastCharIsNotALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvs1pgw76.scala:25)\n\tat Problem.main(tmpvs1pgw76.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar.toChar.isLetter\n        val isLastCharNotALetter = words.last.last.isLetter\n\
    \        val isLastCharNotALetterOrWord = words.last.last.isLetter || words.last.last\
    \ == lastChar\n        val isLastCharNotALetterOrWordOrEmpty = words.last.last.isLetter\
    \ || words.last.last == lastChar || words.last == \"\"\n        val isLastCharNotALetterOrWordOrEmptyOrLastCharNotALetter\
    \ = words.last.last.isLetter || words.last.last == lastChar || words.last == \"\
    \" || words.last.last != lastChar\n        val isLastCharNotALetterOrWordOrEmptyOrLastCharNotALetterOrWord\
    \ = words.last.last.isLetter || words.last.last == lastChar || words.last == \"\
    \" || words.last.last != lastChar || words.last.last == words.last.last\n    \
    \    val isLastCharNotALetterOrWordOrEmptyOrLastCharNotALetterOrWordOrEmpty =\
    \ words.last.last.isLetter || words.last.last == lastChar || words.last == \"\"\
    \ || words.last.last != lastChar || words.last.last == words.last.last || words.last\
    \ == \"\"\n        val isLastCharNotALetterOrWordOrEmptyOrLastCharNotALetterOrWordOrEmptyOrLastCharNotALetter\
    \ = words.last.last.isLetter || words.last.last == lastChar || words.last == \"\
    \" || words.last.last != lastChar || words.last.last == words.last.last || words.last\
    \ == \"\" || words.last.last != lastChar\n        val isLastCharNotALetterOrWordOrEmptyOrLastCharNotALetterOrWordOrEmptyOrLastCharNotALetterOrWord\
    \ = words.last.last.isLetter || words.last.last == lastChar || words.last == \"\
    \" || words.last.last != lastChar || words.last.last == words.last.last || words.last\
    \ == \"\" || words.last.last != lastChar || words.last.last == words.last.last\n\
    \        val isLastCharNotALetterOrWordOrEmptyOrLastCharNotALetterOrWordOrEmptyOrLastCharNotALetterOr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkmyuv7rm.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkmyuv7rm.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = (lastChar >= 'a' && lastChar <= 'z') ||\
    \ (lastChar >= 'A' && lastChar <= 'Z')\n        !isALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprjc2oin9.scala:24)\n\tat Problem.main(tmprjc2oin9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.isLetter\n        val isNotLastCharALetter\
    \ = lastChar.toString.isNotLetter\n        val isNotLastCharALetterInWord = words.contains(lastChar)\n\
    \        val isNotLastCharALetterInWordButNotALetter = words.contains(lastChar)\
    \ && !lastChar.toString.isLetter\n        val isLastCharALetterInWordButNotALetter\
    \ = lastChar.toString.isLetter && !words.contains(lastChar)\n        val isLastCharALetterInWordButNotALetter2\
    \ = words.contains(lastChar) && !lastChar.toString.isLetter\n        val isLastCharALetterInWordButNotALetter3\
    \ = words.contains(lastChar) && !lastChar.toString.isLetter\n        val isLastCharALetterInWordButNotALetter4\
    \ = words.contains(lastChar) && !lastChar.toString.isLetter\n        val isLastCharALetterInWordButNotALetter5\
    \ = words.contains(lastChar) && !lastChar.toString.isLetter\n        val isLastCharALetterInWordButNotALetter6\
    \ = words.contains(lastChar) && !lastChar.toString.isLetter\n        val isLastCharALetterInWordButNotALetter7\
    \ = words.contains(lastChar) && !lastChar.toString.isLetter\n        val isLastCharALetterInWordButNotALetter8\
    \ = words.contains(lastChar) && !lastChar.toString.isLetter\n        val isLastCharALetterInWordButNotALetter9\
    \ = words.contains(lastChar) && !lastChar.toString.isLetter\n        val isLastCharALetterInWordButNotALetter10\
    \ = words.contains(lastChar) && !lastChar.toString.isLetter\n        val isLastCharALetterInWordButNotALetter11\
    \ = words.contains(lastChar) && !lastChar.toString.isLetter\n        val isLastCharALetterInWordButNotALetter12\
    \ = words.contains(lastChar) && !lastChar.toString.isLetter\n        val isLastCharALetterInWordButNotALetter13\
    \ = words.contains(lastChar) && !lastChar.toString.isLetter\n        val isLastCharALetterInWordButNotALetter14\
    \ = words.contains(lastChar) && !lastChar.toString.isLetter\n        val isLastCharALetterInWordButNotALetter15\
    \ = words.contains(lastChar) && !\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbiz7f0hz.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpbiz7f0hz.scala:21:53 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36misNotLastCharALetter\e[0m = lastChar.toString.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbiz7f0hz.scala:23:101\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36misNotLastCharALetterInWordButNotALetter\e[0m = words.contains(lastChar) &&\
    \ !lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                         \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbiz7f0hz.scala:24:69\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharALetterInWordButNotALetter\e[0m = lastChar.toString.isLetter &&\
    \ !words.contains(lastChar)\n\e[31m\e[31m   |\e[0m                           \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                            value isLetter is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbiz7f0hz.scala:25:99 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetterInWordButNotALetter2\e\
    [0m = words.contains(lastChar) && !lastChar.toString.isLetter\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                value isLetter is not a member"
  stdout: ''
  timestamp: 1659792925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.toString.isLetter\n   \
    \     val isLastCharNotALetter = lastChar.toString.isNotLetter\n        val isLastCharNotALetterOrSpace\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace\n        val isLastCharNotALetterOrSpaceOrNewLine\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isNewLine\n\
    \        val isLastCharNotALetterOrSpaceOrNewLineOrNewLine = lastChar.toString.isNotLetter\
    \ || lastChar.toString.isSpace || lastChar.toString.isNewLine || lastChar.toString.isNewLine\n\
    \        val isLastCharNotALetterOrSpaceOrNewLineOrNewLineOrNewLine = lastChar.toString.isNotLetter\
    \ || lastChar.toString.isSpace || lastChar.toString.isNewLine || lastChar.toString.isNewLine\
    \ || lastChar.toString.isNewLine\n        val isLastCharNotALetterOrSpaceOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isNewLine\
    \ || lastChar.toString.isNewLine || lastChar.toString.isNewLine || lastChar.toString.isNewLine\n\
    \        val isLastCharNotALetterOrSpaceOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isNewLine\
    \ || lastChar.toString.isNewLine || lastChar.toString.isNewLine || lastChar.toString.isNewLine\
    \ || lastChar.toString.isNewLine\n        val isLastCharNotALetterOrSpaceOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isNewLine\
    \ || lastChar.toString.isNewLine || lastChar.toString.isNewLine || lastChar.toString.isNewLine\
    \ || lastChar.toString.isNewLine || lastChar.toString.isNewLine\n        val isLastCharNotALetterOrSpaceOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.toString.is\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt1hhth0j.scala:19:50 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpt1hhth0j.scala:20:53 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m = lastChar.toString.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt1hhth0j.scala:21:60\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpace\e[0m = lastChar.toString.isNotLetter || lastChar.toString.isSpace\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt1hhth0j.scala:22:69\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpaceOrNewLine\e[0m = lastChar.toString.isNotLetter\
    \ || lastChar.toString.isSpace || lastChar.toString.isNewLine\n\e[31m\e[31m  \
    \ |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt1hhth0j.scala:23:78\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpaceOrNewLineOrNewLine\e[0m = lastChar.toString.isNotLetter\
    \ || lastChar.toString.isSpace || lastChar.toString.isNewLine || lastChar.toString.isNewLine\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 "
  stdout: ''
  timestamp: 1659792925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.toLowerCase match {\n            case\
    \ c if c.isLetter => true\n            case _ => false\n        }\n        !isLastCharALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1yyhs4o6.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m c \e[33mif\e[0m c.isLetter\
    \ => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value isLetter is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5v8lq9l.scala:24)\n\tat Problem.main(tmpq5v8lq9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.isLetter\n        val isNotWord = words.last.forall(_.toString.isLetter)\n\
    \        isLastCharALetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyf8vxndk.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpyf8vxndk.scala:21:53 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.toString.isLetter)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659792924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.matches(\"[a-zA-Z]\") &&\
    \ !lastChar.matches(\"\\\\s\")\n        isLastCharALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6awn1qlm.scala:19:41 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m) && !lastChar.matches(\e[31m\"\\\\\
    s\"\e[0m)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value matches is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val isLastCharNotALetter = lastChar != 'a' && lastChar != 'e' && lastChar\
    \ != 'i'\n        val isLastCharNotALetterAndNotWord = lastChar != 'a' && lastChar\
    \ != 'e' && lastChar != 'i' && lastChar != 'o' && lastChar != 'u'\n        val\
    \ isLastCharNotALetterAndNotWordAndNotSpace = lastChar != 'a' && lastChar != 'e'\
    \ && lastChar != 'i' && lastChar != 'o' && lastChar != 'u' && lastChar != 's'\n\
    \        val isLastCharNotALetterAndNotWordAndNotSpaceAndNotUpper = lastChar !=\
    \ 'a' && lastChar != 'e' && lastChar != 'i' && lastChar != 'o' && lastChar !=\
    \ 'u' && lastChar != 's' && lastChar != 'A' && lastChar != 'E' && lastChar !=\
    \ 'I' && lastChar != 'O' && lastChar != 'U'\n        val isLastCharNotALetterAndNotWordAndNotSpaceAndNotUpperAndNotUpper\
    \ = lastChar != 'a' && lastChar != 'e' && lastChar != 'i' && lastChar != 'o' &&\
    \ lastChar != 'u' && lastChar != 's' && lastChar != 'A' && lastChar != 'E' &&\
    \ lastChar != 'I' && lastChar != 'O' && lastChar != 'U' && lastChar != 'a'\n \
    \       val isLastCharNotALetterAndNotWordAndNotSpaceAndNotUpperAndNotUpperAndNotUpper\
    \ = lastChar != 'a' && lastChar != 'e' && lastChar != 'i' && lastChar != 'o' &&\
    \ lastChar != 'u' && lastChar != 's' && lastChar != 'A' && lastChar != 'E' &&\
    \ lastChar != 'I' && lastChar != 'O' && lastChar != 'U' && lastChar != 'a' &&\
    \ lastChar != 'e' && lastChar != 'i' && lastChar != 'o' && lastChar != 'u' &&\
    \ lastChar != 's'\n        val isLastCharNotALetterAndNotWordAndNotSpaceAndNotUpperAndNotUpperAndNotUpperAndNotUpper\
    \ = lastChar != 'a' && lastChar != 'e' && lastChar != 'i' && lastChar != 'o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1kqagxas.scala:26:169 ----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterAndNotWordAndNotSpaceAndNotUpperAndNotUpperAndNotUpperAndNotUpper\e\
    [0m = lastChar != \e[31m'a'\e[0m && lastChar != \e[31m'e'\e[0m && lastChar !=\
    \ \e[31m'i'\e[0m && lastChar != \e[31m'o\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0msymbol literal 'o is no longer supported,\n\e\
    [31m   |\e[0muse a string literal \"o\" or an application Symbol(\"o\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{o} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1kqagxas.scala:27:5\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotAlpha = !lastChar.matches(\"[a-zA-Z ]\")\n        isLastCharAlpha\
    \ && !isLastCharNotAlpha\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4s94i0c.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4s94i0c.scala:20:43\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotAlpha\e[0m = !lastChar.matches(\e[31m\"[a-zA-Z ]\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  value matches is not a member of\
    \ Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").lastOption.exists(_.equals(lastChar))\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxyo_lwya.scala:24)\n\tat Problem.main(tmpxyo_lwya.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792911
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.dropRight(1).forall(_.isLetter)\n        isALetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8c5fywkr.scala:27)\n\tat Problem.main(tmp8c5fywkr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        !isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpdupjo_e_.scala:19)\n\tat Problem$.main(tmpdupjo_e_.scala:25)\n\
    \tat Problem.main(tmpdupjo_e_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsLetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotWord = lastChar != ' ' && lastChar != '-' && lastChar\
    \ != '_'\n        val lastCharIsNotLetterOrWord = lastCharIsLetter || lastCharIsNotWord\n\
    \        lastCharIsLetter == lastCharIsNotWord && lastCharIsNotLetterOrWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp638itdn2.scala:25)\n\tat Problem.main(tmp638itdn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"[a-zA-Z]+\")\n        isLastCharAlpha\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps3vxolyj.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps3vxolyj.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"[a-zA-Z]+\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value matches is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5v8lq9l.scala:24)\n\tat Problem.main(tmpq5v8lq9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.toString.isLetter\n     \
    \   val isLastCharNotAlpha = !lastChar.toString.isLetter\n        val isLastCharNotWord\
    \ = txt.last.trim.toString.split(\" \").length == 0\n        isLastCharAlpha &&\
    \ isLastCharNotAlpha && isLastCharNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9hvu5p3b.scala:19:48 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9hvu5p3b.scala:20:52\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotAlpha\e[0m = !lastChar.toString.isLetter\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                value isLetter is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9hvu5p3b.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ txt.last.trim.toString.split(\e[31m\" \"\e[0m).length == \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value trim is not a member of Char\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        while(lastChar !=\
    \ \" \") {\n            if(lastChar.isLetter) {\n                isLastCharALetter\
    \ = false\n            }\n            lastChar = txt.last\n        }\n       \
    \ return isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnzhh2ypm.scala:20:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mwhile\e[0m(lastChar != \e[31m\" \"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659792924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = txt.last\n        val lastCharIsALetter\
    \ = lastChar.isLetter\n        val lastCharIsNotALetter = lastChar.isNotLetter\n\
    \        val lastCharIsNotALetterButInWord = words.last.contains(lastChar)\n \
    \       val lastCharIsNotALetterButNotInWord = words.last.contains(lastChar) &&\
    \ !words.last.contains(lastChar)\n        val lastCharIsALetterButNotInWord =\
    \ words.last.contains(lastChar) && words.last.contains(lastChar)\n        val\
    \ lastCharIsALetterButInWord = words.last.contains(lastChar) && words.last.contains(lastChar)\n\
    \        val lastCharIsNotALetterButInWord = words.last.contains(lastChar) &&\
    \ !words.last.contains(lastChar)\n        val lastCharIsNotALetterButNotInWord\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar)\n        val\
    \ lastCharIsALetterButInWord = words.last.contains(lastChar) && words.last.contains(lastChar)\n\
    \        val lastCharIsNotALetterButInWord = words.last.contains(lastChar) &&\
    \ !words.last.contains(lastChar)\n        val lastCharIsNotALetterButNotInWord\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar)\n        val\
    \ lastCharIsALetterButInWord = words.last.contains(lastChar) && words.last.contains(lastChar)\n\
    \        val lastCharIsNotALetterButInWord = words.last.contains(lastChar) &&\
    \ !words.last.contains(lastChar)\n        val lastCharIsNotALetterButNotInWord\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar)\n        val\
    \ lastCharIsALetterButInWord = words.last.contains(lastChar) && words.last.contains(lastChar)\n\
    \        val lastCharIsNotALetterButInWord = words.last.contains(lastChar) &&\
    \ !words.last.contains(lastChar)\n        val lastCharIsNotALetterButNotInWord\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar)\n        val\
    \ lastCharIsALetterButInWord = words.last.contains(lastChar) && words.last.contains(lastChar)\n\
    \        val lastCharIsNotALetterButInWord = words.last.contains(lastChar) &&\
    \ !words.last.contains(lastChar)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8t8aleto.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterButInWord\e\
    [0m = words.last.contains(lastChar) && !words.last.contains(lastChar)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterButInWord is already defined as \e[33mvalue\e\
    [0m \e[35mlastCharIsNotALetterButInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8t8aleto.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterButNotInWord\e\
    [0m = words.last.contains(lastChar) && !words.last.contains(lastChar)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterButNotInWord is already defined as \e\
    [33mvalue\e[0m \e[35mlastCharIsNotALetterButNotInWord\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8t8aleto.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsALetterButInWord\e[0m = words.last.contains(lastChar) && words.last.contains(lastChar)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsALetterButInWord is already defined as \e[33mvalue\e\
    [0m \e[35mlastCharIsALetterButInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8t8aleto.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterButInWord\e\
    [0m = words.last.contains(lastChar) && !words.last.contains(lastCha"
  stdout: ''
  timestamp: 1659792925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = txt.split(\" \").last.contains(lastChar)\n   \
    \     isLastCharAlpha && !isLastCharNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy8fzdwhw.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"\\\\S\")\n        isLastCharAlpha\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp89k84l0b.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp89k84l0b.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"\\\\S\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value matches is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val lastCharIsALetter = lastChar.toString.isLetter\n        val isNotWord\
    \ = words.last.forall(_.toString.isLetter)\n        !lastCharIsALetter && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8vgc7v8c.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp8vgc7v8c.scala:21:53 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.toString.isLetter)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659792926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.toString.isLetter\n   \
    \     val lastCharIsNotALetter = lastChar.isLetter\n        val lastCharIsNotALetterOrSpace\
    \ = lastChar.isLetter || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrDigit\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUpper = lastChar.isLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isDigit || lastChar.isUpper\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUpperOrLower  = lastChar.isLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isDigit || lastChar.isUpper\
    \ || lastChar.isLower\n        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUpperOrLowerOrSpace\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUpper || lastChar.isLower || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUpperOrLowerOrSpaceOrWord\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUpper || lastChar.isLower || lastChar.isSpace || lastChar.isWord\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUpperOrLowerOrSpaceOrWordOrDigit\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUpper || lastChar.isLower || lastChar.isSpace || lastChar.isWord\
    \ || lastChar.isDigit\n        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUpperOrLowerOrSpaceOrWordOrDigitOrUpper\
    \ = lastChar.isLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUpper || lastChar.isLower || lastChar.isSpace || lastChar.isWor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9o3na9u2.scala:19:50 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp9o3na9u2.scala:21:72 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpace\e[0m =\
    \ lastChar.isLetter || lastChar.isSpace\n\e[31m\e[31m   |\e[0m               \
    \                                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   value isSpace is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9o3na9u2.scala:22:78 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWord\e\
    [0m = lastChar.isLetter || lastChar.isSpace || lastChar.isWord\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \ ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   value\
    \ isSpace is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9o3na9u2.scala:22:98\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterOrSpaceOrWord\e[0m = lastChar.isLetter || lastChar.isSpace\
    \ || lastChar.isWord\n\e[31m\e[31m   |\e[0m                                  \
    \                                                       ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    value isWord is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9o3na9u2.scala:23:85\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterOrSpaceOrWordOrDigit\e[0m = lastChar.isLetter || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isDigit\n\e[31m\e[31m   |\e[0m              \
    \                                                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           "
  stdout: ''
  timestamp: 1659792929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar.toString.toLowerCase == lastChar\n        val isLastCharNotALetter\
    \ = words.last.last.toString.toLowerCase != words.last.last\n        isLastCharALetter\
    \ && !isLastCharNotALetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjw9a5ju8.scala:20:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.toLowerCase == lastChar\n\e[31m\e[31m   |\e[0m           \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpjw9a5ju8.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m\
    \ = words.last.last.toString.toLowerCase != words.last.last\n\e[31m\e[31m   |\e\
    [0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659792928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLetter = lastChar.matches(\"[a-zA-Z]+\")\n       \
    \ val isNotWord = txt.split(\" \").map(_.trim).filter(_.nonEmpty).map(_.last).exists(_.equals(lastChar))\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_l1o4udn.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLetter\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value matches is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = (lastChar != 'a' && lastChar != 'e' && lastChar != 'i' && lastChar != 'o'\
    \ && lastChar != 'u')\n        isLastCharALetter && !isLastCharNotALetter\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9dm9wl8r.scala:24)\n\tat Problem.main(tmp9dm9wl8r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotAlpha = !lastChar.matches(\"[a-zA-Z ]\")\n        val\
    \ isLastCharNotWord = !lastChar.matches(\"[a-zA-Z ]+\")\n        isLastCharAlpha\
    \ && !isLastCharNotAlpha && !isLastCharNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptkdskg71.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptkdskg71.scala:20:43\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotAlpha\e[0m = !lastChar.matches(\e[31m\"[a-zA-Z ]\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  value matches is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptkdskg71.scala:21:42 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ !lastChar.matches(\e[31m\"[a-zA-Z ]+\"\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                    value matches is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659792930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.toString.isLetter\n   \
    \     val isLastCharNotALetter = lastChar.toString.isNotLetter\n        val isLastCharNotALetterOrSpace\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace\n        val isLastCharNotALetterOrSpaceOrWord\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isWord\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrEmpty = lastChar.toString.isNotLetter\
    \ || lastChar.toString.isSpace || lastChar.toString.isWord || lastChar.toString.isEmpty\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrEmptyOrNull = lastChar.toString.isNotLetter\
    \ || lastChar.toString.isSpace || lastChar.toString.isWord || lastChar.toString.isEmpty\
    \ || lastChar.toString.isNull\n        val isLastCharNotALetterOrSpaceOrWordOrEmptyOrNullOrEmpty\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isWord\
    \ || lastChar.toString.isEmpty || lastChar.toString.isNull || lastChar.toString.isEmpty\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrEmptyOrNullOrEmptyOrNull = lastChar.toString.isNotLetter\
    \ || lastChar.toString.isSpace || lastChar.toString.isWord || lastChar.toString.isEmpty\
    \ || lastChar.toString.isNull || lastChar.toString.isEmpty || lastChar.toString.isNull\
    \ || lastChar.toString.isEmpty\n        val isLastCharNotALetterOrSpaceOrWordOrEmptyOrNullOrEmptyOrNull\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isWord\
    \ || lastChar.toString.isEmpty || lastChar.toString.isNull || lastChar.toString.isEmpty\
    \ || lastChar.toString.isNull || lastChar.toString.isEmpty || lastChar.toString.isNull\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrEmptyOrNullOrEmptyOrNullOrNull\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isWord\
    \ || lastChar.toString.isEmpty || lastChar.toString.isNull || lastChar.to\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv78ey_jz.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrWordOrEmptyOrNullOrEmptyOrNull\e\
    [0m = lastChar.toString.isNotLetter || lastChar.toString.isSpace || lastChar.toString.isWord\
    \ || lastChar.toString.isEmpty || lastChar.toString.isNull || lastChar.toString.isEmpty\
    \ || lastChar.toString.isNull || lastChar.toString.isEmpty || lastChar.toString.isNull\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterOrSpaceOrWordOrEmptyOrNullOrEmptyOrNull\
    \ is already defined as \e[33mvalue\e[0m \e[35misLastCharNotALetterOrSpaceOrWordOrEmptyOrNullOrEmptyOrNull\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpv78ey_jz.scala:19:50 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv78ey_jz.scala:20:53\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetter\e[0m = lastChar.toString.isNotLetter\n\e[31m\e[31m  \
    \ |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv78ey_jz.scala:21:60\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpace\e[0m = lastChar.toString.isNotLetter || lastCh"
  stdout: ''
  timestamp: 1659792931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val words = txt.split(\" \").map(_.toLowerCase)\n      \
    \  val isLastCharALetter = lastChar != null && !words.contains(lastChar)\n   \
    \     return isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3lz4jhhq.scala:20:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar != \e[31mnull\e[0m && !words.contains(lastChar)\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \      Values of types Char and Null cannot be compared with == or !=\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3lz4jhhq.scala:20:68 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar != \e[31mnull\e[0m && !words.contains(lastChar)\n\e[31m\e[31m   |\e\
    [0m                                                                    ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (lastChar\
    \ : Char)\n\e[31m   |\e[0m                                             Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !(isLastCharALetter)\n        isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81xo1hgx.scala:25)\n\tat Problem.main(tmp81xo1hgx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\
    \ || lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpaceOrWord\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4keuc3de.scala:29:169 --------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpaceOrWord\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || \n\e[31m\e[31m   |\e[0m                                                 \
    \                                                                            \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4keuc3de.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\e[0m = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp4keuc3de.scala:20:44 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m = lastChar.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4keuc3de.scala:21:51\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.lastOption.map(_.toString.charAt(0)).exists(!_.isLetter)\n        isLastCharAlpha\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp1swqy3hp.scala:19)\n\tat Problem$.main(tmp1swqy3hp.scala:25)\n\
    \tat Problem.main(tmp1swqy3hp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"[a-zA-Z]+\")\n        isLastCharAlpha\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps3vxolyj.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps3vxolyj.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"[a-zA-Z]+\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value matches is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.last.forall(letter\
    \ => !letter.isLetter)\n        isLastCharAlpha && isLastCharNotAlpha && isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplvt8pda_.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ txt.last.forall(\e[36mletter\e[0m => !letter.isLetter)\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                         value forall is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == lastChar)\n        val\
    \ isLastCharNotALetter = (lastChar.toString.toLowerCase != lastChar)\n       \
    \ val isLastCharNotALetterWord = words.last.contains(lastChar)\n        val isLastCharNotALetterWord\
    \ = words.last.contains(lastChar)\n        val isLastCharNotALetterWord = words.last.contains(lastChar)\n\
    \        val isLastCharNotALetterWord = words.last.contains(lastChar)\n      \
    \  val isLastCharNotALetterWord = words.last.contains(lastChar)\n        val isLastCharNotALetterWord\
    \ = words.last.contains(lastChar)\n        val isLastCharNotALetterWord = words.last.contains(lastChar)\n\
    \        val isLastCharNotALetterWord = words.last.contains(lastChar)\n      \
    \  val isLastCharNotALetterWord = words.last.contains(lastChar)\n        val isLastCharNotALetterWord\
    \ = words.last.contains(lastChar)\n        val isLastCharNotALetterWord = words.last.contains(lastChar)\n\
    \        val isLastCharNotALetterWord = words.last.contains(lastChar)\n      \
    \  val isLastCharNotALetterWord = words.last.contains(lastChar)\n        val isLastCharNotALetterWord\
    \ = words.last.contains(lastChar)\n        val isLastCharNotALetterWord = words.last.contains(lastChar)\n\
    \        val isLastCharNotALetterWord = words.last.contains(lastChar)\n      \
    \  val isLastCharNotALetterWord = words.last.contains(lastChar)\n        val isLastCharNotALetterWord\
    \ = words.last.contains(lastChar)\n        val isLastCharNotALetterWord = words.last.contains(lastChar)\n\
    \        val isLastCharNotALetterWord = words.last.contains(lastChar)\n      \
    \  val isLastCharNotALetterWord = words.last.contains(lastChar)\n        val isLastCharNotALetterWord\
    \ = words.last.contains(lastChar)\n        val isLastCharNotALetterWord = words.last.contains(lastChar)\n\
    \        val isLastCharNotALetterWord = words.last.contains(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9imzvgbo.scala:45:59 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterWord\e\
    [0m = words.last.contains(\n\e[31m\e[31m   |\e[0m                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp9imzvgbo.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterWord\e\
    [0m = words.last.contains(lastChar)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9imzvgbo.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterWord\e\
    [0m = words.last.contains(lastChar)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9imzvgbo.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterWord\e\
    [0m = words.last.contains(lastChar)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tm"
  stdout: ''
  timestamp: 1659792931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.last.trim.toString.split(\"\
    \ \").length == 0\n        isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps02ynpeo.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ txt.last.trim.toString.split(\e[31m\" \"\e[0m).length == \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value trim is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastWord = words(words.length-1)\n        val\
    \ lastChar = lastWord.last\n        val isLastCharALetter = lastChar >= 'a' &&\
    \ lastChar <= 'z'\n        !isLastCharALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqj38ixox.scala:26)\n\tat Problem.main(tmpqj38ixox.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val words = txt.split(\" \").filter(_.nonEmpty)\n      \
    \  val lastWord = words.last\n        val lastWordChar = lastWord.last\n     \
    \   lastChar.isLetterOrDigit() && lastWordChar != lastChar\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmptxsq2a0s.scala:22:17 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        lastChar.isLetterOrDigit() && lastWordChar !=\
    \ lastChar\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m       \e[33mmethod\e[0m \e[35misLetterOrDigit\e[0m in \e[33mclass\e\
    [0m \e[35mRichChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar.isLetter) && (!lastChar.isDigit)\n\
    \        val isLastCharNotALetter = !lastChar.isLetter\n        return isLastCharALetter\
    \ && isLastCharNotALetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd6uy9iwc.scala:25)\n\tat Problem.main(tmpd6uy9iwc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   val lastCharIsNotALetterOrLastCharIsALetter = lastCharIsALetter || lastCharIsNotALetter\n\
    \        lastCharIsALetter && lastCharIsNotALetterOrLastCharIsALetter\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu2o7argg.scala:25)\n\tat Problem.main(tmpu2o7argg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5v8lq9l.scala:24)\n\tat Problem.main(tmpq5v8lq9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterButInWord = lastChar.isNotLetter\
    \ && !txt.contains(lastChar)\n        val lastCharIsALetterButInWord = lastChar.isLetter\
    \ && !txt.contains(lastChar)\n        val lastCharIsNotALetterButInWord = lastChar.isNotLetter\
    \ && txt.contains(lastChar)\n        val lastCharIsNotALetterButInWordButNotLastChar\
    \ = lastChar.isNotLetter && !txt.contains(lastChar)\n        val lastCharIsALetterButNotLastChar\
    \ = lastChar.isLetter && txt.contains(lastChar)\n        val lastCharIsALetterButNotLastCharButNotLastChar\
    \ = lastChar.isLetter && !txt.contains(lastChar)\n        val lastCharIsNotALetterButNotLastChar\
    \ = lastChar.isNotLetter && !txt.contains(lastChar)\n        val lastCharIsNotALetterButNotLastCharButNotLastChar\
    \ = lastChar.isNotLetter && txt.contains(lastChar)\n        val lastCharIsALetterButNotLastCharButNotLastChar\
    \ = lastChar.isLetter && !txt.contains(lastChar)\n        val lastCharIsNotALetterButNotLastCharButNotLastChar\
    \ = lastChar.isNotLetter && !txt.contains(lastChar)\n        val lastCharIsALetterButNotLastCharButNotLastChar\
    \ = lastChar.isLetter && !txt.contains(lastChar)\n        val lastCharIsNotALetterButNotLastCharButNotLastChar\
    \ = lastChar.isNotLetter && txt.contains(lastChar)\n        val lastCharIsALetterButNotLastCharButNotLastChar\
    \ = lastChar.isLetter && !txt.contains(lastChar)\n        val lastCharIsNotALetterButNotLastCharButNotLastChar\
    \ = lastChar.isNotLetter && !txt.contains(lastChar)\n        val lastCharIsALetterButNotLastCharButNotLastChar\
    \ = lastChar.isLetter && !txt.contains(lastChar)\n        val lastCharIsNotALetterButNotLastCharButNotLastChar\
    \ = lastChar.isNotLetter && txt.contains(lastChar)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8mggpsr_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterButInWord\e\
    [0m = lastChar.isNotLetter && txt.contains(lastChar)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterButInWord is already defined as \e[33mvalue\e\
    [0m \e[35mlastCharIsNotALetterButInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8mggpsr_.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterButNotLastCharButNotLastChar\e\
    [0m = lastChar.isLetter && !txt.contains(lastChar)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsALetterButNotLastCharButNotLastChar is already defined\
    \ as \e[33mvalue\e[0m \e[35mlastCharIsALetterButNotLastCharButNotLastChar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8mggpsr_.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterButNotLastCharButNotLastChar\e\
    [0m = lastChar.isNotLetter && !txt.contains(lastChar)\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterButNotLastCharButNotLastChar is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterButNotLastCharButNotLastChar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8mggpsr_.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterButNotLastCharButNotLastChar\e\
    [0m = lastCha"
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5v8lq9l.scala:24)\n\tat Problem.main(tmpq5v8lq9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !(isLastCharALetter)\n        isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81xo1hgx.scala:25)\n\tat Problem.main(tmp81xo1hgx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotAlpha = !lastChar.matches(\"[a-zA-Z ]\")\n        isLastCharAlpha\
    \ && !isLastCharNotAlpha\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4s94i0c.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4s94i0c.scala:20:43\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotAlpha\e[0m = !lastChar.matches(\e[31m\"[a-zA-Z ]\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  value matches is not a member of\
    \ Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == lastChar)\n        val\
    \ isLastCharNotALetter = (lastChar.toString.toLowerCase != lastChar)\n       \
    \ val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterWord = (words.last.toString.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnl25t6sn.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnl25t6sn.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterWord\e[0m = (words.last.toString.toLowerCase\
    \ != lastChar)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnl25t6sn.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterWord\e\
    [0m = (words.last.toString.toLowerCase != lastChar)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnl25t6sn.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterWord\e\
    [0m = (words.last.toString.toLowerCase != lastChar)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnl25t6sn.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterWord\e\
    [0m = (words.last.toString.toLowerCas"
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = txt.last != lastChar\n        val isLastCharNotALetterOrLastCharNotALetter\
    \ = (isLastCharALetter && isLastCharNotALetter) || (!isLastCharALetter && !isLastCharNotALetter)\n\
    \        isLastCharNotALetterOrLastCharNotALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpylucg36a.scala:26)\n\tat Problem.main(tmpylucg36a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n        isAlpha\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpibq4grmd.scala:25)\n\tat Problem.main(tmpibq4grmd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !(isLastCharALetter)\n        isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81xo1hgx.scala:25)\n\tat Problem.main(tmp81xo1hgx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        var isLastCharALetterWord\
    \ = false\n        var isLastCharALetterSpace = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterTab = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLastCharALetterNewline = false\n        var isLastCharALetterNewline\
    \ = false\n        var isLast\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_i08lhi7.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_i08lhi7.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m\
    \ \e[36misLastCharALetterNewline\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misLastCharALetterNewline\
    \ is already defined as \e[33mvariable\e[0m \e[35misLastCharALetterNewline\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_i08lhi7.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mvar\e[0m \e[36misLastCharALetterNewline\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0misLastCharALetterNewline is already defined as \e[33mvariable\e[0m\
    \ \e[35misLastCharALetterNewline\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_i08lhi7.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36misLastCharALetterNewline\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharALetterNewline is already defined as \e[33mvariable\e\
    [0m \e[35misLastCharALetterNewline\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_i08lhi7.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36misLastCharALetterNewline\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharALetterNewline is already defined as \e[33mvariable\e\
    [0m \e[35misLastCharALetterNewline\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded met"
  stdout: ''
  timestamp: 1659792931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.last.split(\" \").forall(!_.isLetter)\n\
    \        isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp971j4ig1.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ txt.last.split(\e[31m\" \"\e[0m).forall(!_.isLetter)\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        value split is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = txt.lastIndexOfAny(\" \") != txt.length - 1\n\
    \        isLastCharAlpha && !isLastCharNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcjidkuaw.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcjidkuaw.scala:20:36\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = txt.lastIndexOfAny(\e[31m\" \"\e[0m) != txt.length\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue lastIndexOfAny is not a member of String - did you mean\
    \ txt.lastIndexOf?\n2 errors found\n"
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]+\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        !isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp_53bhun8.scala:19)\n\tat Problem$.main(tmp_53bhun8.scala:25)\n\
    \tat Problem.main(tmp_53bhun8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5v8lq9l.scala:24)\n\tat Problem.main(tmpq5v8lq9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar.matches(\"[a-zA-Z]\") && !lastChar.matches(\"\
    \\\\W\")\n        return isALetter\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c7e16in.scala:19:33 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misALetter\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m) && !lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").last.contains(lastChar)\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi16cbau9.scala:25)\n\tat Problem.main(tmpi16cbau9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterAndNotWord = lastChar.isNotLetter\
    \ && !lastChar.isWord\n        val lastCharIsWord = lastChar.isWord\n        val\
    \ lastCharIsNotWord = lastChar.isNotWord\n        val lastCharIsWordAndNotALetter\
    \ = lastChar.isWord && !lastChar.isLetter\n        val lastCharIsWordAndNotALetterAndNotWord\
    \ = lastChar.isWord && !lastChar.isLetter && !lastChar.isNotWord\n        val\
    \ lastCharIsWordAndNotALetterAndNotWordAndNotALetter = lastChar.isWord && !lastChar.isLetter\
    \ && !lastChar.isNotWord && !lastChar.isNotLetter\n        val lastCharIsWordAndNotALetterAndNotWordAndNotALetterAndNotWord\
    \ = lastChar.isWord && !lastChar.isLetter && !lastChar.isNotWord && !lastChar.isNotLetter\
    \ && !lastChar.isNotWord\n        val lastCharIsWordAndNotALetterAndNotWordAndNotALetterAndNotWordAndNotALetter\
    \ = lastChar.isWord && !lastChar.isLetter && !lastChar.isNotWord && !lastChar.isNotLetter\
    \ && !lastChar.isNotWord && !lastChar.isNotLetter\n        val lastCharIsWordAndNotALetterAndNotWordAndNotALetterAndNotWordAndNotALetterAndNotWord\
    \ = lastChar.isWord && !lastChar.isLetter && !lastChar.isNotWord && !lastChar.isNotLetter\
    \ && !lastChar.isNotWord && !lastChar.isNotLetter && !lastChar.isNotWord\n   \
    \     val lastCharIsWordAndNotALetterAndNotWordAndNotALetterAndNotWordAndNotALetterAndNotWordAndNotALetter\
    \ = lastChar.isWord && !lastChar.isLetter && !lastChar.isNotWord && !lastChar.isNotLetter\
    \ && !lastChar.isNotWord && !lastChar.isNotLetter && !lastChar.isNotWord && !lastChar.isNotLetter\n\
    \        val lastCharIsWordAndNotALetterAndNotWordAndNotALetterAndNotWordAndNotALetterAndNotWordAndNotALetterAndNotWord\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpear8usxt.scala:31:120 --------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsWordAndNotALetterAndNotWordAndNotALetterAndNotWordAndNotALetterAndNotWordAndNotALetterAndNotWord\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpear8usxt.scala:20:44\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetter\e[0m = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m  \
    \                                 ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                              value isNotLetter is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpear8usxt.scala:21:54 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterAndNotWord\e\
    [0m = lastChar.isNotLetter && !lastChar.isWord\n\e[31m\e[31m   |\e[0m        \
    \                                     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value isNotLetter is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpear8usxt.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsWord\e[0m = lastChar.isWord\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             value isWord is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpear8usxt.scala:23:41 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ lastChar.isNotWord\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isNotWord is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpear8usxt.scala:24:51\
    \ ---"
  stdout: ''
  timestamp: 1659792937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        var isLastCharNotALetter\
    \ = false\n        while(lastChar != \" \" && lastChar != \"\") {\n          \
    \  if(lastChar.matches(\"[a-zA-Z]\")) {\n                isLastCharALetter = false\n\
    \            } else {\n                isLastCharNotALetter = true\n         \
    \   }\n            lastChar = txt.last\n        }\n        return isLastCharALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgghbhz35.scala:21:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mwhile\e[0m(lastChar != \e[31m\" \"\e[0m\
    \ && lastChar != \e[31m\"\"\e[0m) {\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpgghbhz35.scala:21:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mwhile\e[0m(lastChar != \e[31m\" \"\e[0m\
    \ && lastChar != \e[31m\"\"\e[0m) {\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpgghbhz35.scala:22:24 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            \e[33mif\e[0m(lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m)) {\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \            value matches is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659792936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.toString.isLetter\n   \
    \     val isLastCharNotWord = lastChar.toString.isNotEmpty && !lastChar.toString.contains(\"\
    _\")\n        isLastCharALetter && !isLastCharNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa0yowo1e.scala:19:50 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpa0yowo1e.scala:20:50 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m = lastChar.toString.isNotEmpty\
    \ && !lastChar.toString.contains(\e[31m\"_\"\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ isNotEmpty is not a member of String - did you mean String.isEmpty?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        for(i <- 0 until txt.length){\n\
    \            if(txt(i) != lastChar){\n                isLastCharALetter = false\n\
    \                break\n            }\n        }\n        return isLastCharALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcrmaed8.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        if(lastChar.isLetter) {\n            val words = txt.split(\"\
    \ \").filter(_.nonEmpty)\n            val lastWord = words.last\n            if(lastWord.contains(lastChar))\
    \ {\n                return false\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6x06ru62.scala:30)\n\tat Problem.main(tmp6x06ru62.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\") &&\
    \ !lastChar.matches(\"\\\\W\")\n        val isLastCharNotAlpha = !lastChar.matches(\"\
    [a-zA-Z]\")\n        isLastCharAlpha && isLastCharNotAlpha\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpov1ynf9v.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m) && !lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value matches is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpov1ynf9v.scala:20:43 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m\
    \ = !lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                      value matches is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659792937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.toString.isLetter\n     \
    \   val isLastCharNotAlpha = !lastChar.toString.isLetter\n        val isLastCharNotWord\
    \ = txt.last.trim.toString.contains(\"space\")\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWord\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !is\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq96f0bz9.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq96f0bz9.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq96f0bz9.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq96f0bz9.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq96f0bz9.scala:27:"
  stdout: ''
  timestamp: 1659792937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"\\\\W\")\n        isLastCharAlpha\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsur61jh1.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsur61jh1.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value matches is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        while(lastChar !=\
    \ ' ') {\n            if(lastChar.matches(\"[a-zA-Z]\")) {\n                isLastCharALetter\
    \ = false\n            }\n            lastChar = txt.last\n        }\n       \
    \ return isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmputu3o9ef.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(lastChar.matches(\e[31m\"[a-zA-Z]\"\
    \e[0m)) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m               value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar.toString.isLetter\n        val\
    \ isNotALetter = lastChar.toString.isNotLetter\n        val isNotALetterOrSpace\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace\n        val isNotALetterOrNotSpace\
    \ = lastChar.toString.isNotLetter && !lastChar.toString.isSpace\n        val isNotALetterOrNotSpaceOrNotLetter\
    \ = lastChar.toString.isNotLetter && !lastChar.toString.isSpace && !lastChar.toString.isLetter\n\
    \        val isNotALetterOrNotSpaceOrNotLetterOrNotLetter = lastChar.toString.isNotLetter\
    \ && !lastChar.toString.isSpace && !lastChar.toString.isLetter && !lastChar.toString.isLetter\n\
    \        val isNotALetterOrNotSpaceOrNotLetterOrNotLetterOrNotLetter = lastChar.toString.isNotLetter\
    \ && !lastChar.toString.isSpace && !lastChar.toString.isLetter && !lastChar.toString.isLetter\
    \ && !lastChar.toString.isLetter\n        val isNotALetterOrNotSpaceOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = lastChar.toString.isNotLetter && !lastChar.toString.isSpace && !lastChar.toString.isLetter\
    \ && !lastChar.toString.isLetter && !lastChar.toString.isLetter && !lastChar.toString.isLetter\n\
    \        val isNotALetterOrNotSpaceOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = lastChar.toString.isNotLetter && !lastChar.toString.isSpace && !lastChar.toString.isLetter\
    \ && !lastChar.toString.isLetter && !lastChar.toString.isLetter && !lastChar.toString.isLetter\
    \ && !lastChar.toString.isLetter\n        val isNotALetterOrNotSpaceOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = lastChar.toString.isNotLetter && !lastChar.toString.isSpace && !lastChar.toString.isLetter\
    \ && !lastChar.toString.isLetter && !lastChar.toString.isLetter && !lastChar.toString.isLetter\
    \ && !lastChar.toString.isLetter && !lastChar.toString.isLetter\n        val isNotALetterOrNotSpaceOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpey00ro3t.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpey00ro3t.scala:19:42\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36misALetter\e[0m = lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m       \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             value isLetter is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpey00ro3t.scala:20:45 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misNotALetter\e[0m = lastChar.toString.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpey00ro3t.scala:21:52\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misNotALetterOrSpace\e[0m = lastChar.toString.isNotLetter || lastChar.toString.isSpace\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpey00ro3t.scala:22:55\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36misNotALetterOrNotSpace\e[0m = lastChar.toString.isNotLetter && !lastChar.toString.isSpace\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpey00ro3t.scala:23:66\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36misNotALetterOrNotSpaceOrNotLetter\e[0m = lastChar.toString.isNotLetter &&\
    \ !lastChar.toString.isSpace && !lastChar.toString.isLetter\n\e[31m\e[31m   |\e\
    [0m                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659792938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        if(lastChar.isLetter) {\n            val words = txt.split(\"\
    \ \").filter(_.nonEmpty)\n            val lastWord = words.last\n            val\
    \ lastWordChar = lastWord.last\n            if(lastWordChar != lastChar) {\n \
    \               return false\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplkqgemjv.scala:30)\n\tat Problem.main(tmplkqgemjv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.isLetter\n        val isLastCharNotALetter\
    \ = lastChar.isNotLetter\n        val isLastCharNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val isLastCharNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val isLastCharNotALetterOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\
    \ || lastChar.isWord\n        val isLastCharNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord\n        val isLastCharNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord\n        val isLastCharNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpaceOrWord\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpizkkwdk1.scala:29:149 --------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpaceOrWord\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || \n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpizkkwdk1.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace is already\
    \ defined as \e[33mvalue\e[0m \e[35misLastCharNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpizkkwdk1.scala:20:44 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m = lastChar.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpizkkwdk1.scala:21:51\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpace\e[0m = "
  stdout: ''
  timestamp: 1659792938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrDigit\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUppercase = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isDigit || lastChar.isUppercase\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUppercaseOrLowercase =\
    \ lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUppercase || lastChar.isLowercase\n        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUppercaseOrLowercaseOrDigit\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUppercase || lastChar.isLowercase || lastChar.isDigit\n      \
    \  val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUppercaseOrLowercaseOrDigitOrUppercase\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUppercase || lastChar.isLowercase || lastChar.isDigit || lastChar.isUppercase\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUppercaseOrLowercaseOrDigitOrUppercaseOrLowercase\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUppercase || lastChar.isLowercase || lastChar.isDigit || lastChar.isUppercase\
    \ || lastChar.isLowercase\n        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUppercaseOrLowercaseOrDigitOrUppercaseOrLowercaseOrDigit\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWor\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbf5rpyui.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m\
    \ = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpbf5rpyui.scala:21:51 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpace\e[0m = lastChar.isNotLetter\
    \ || lastChar.isSpace\n\e[31m\e[31m   |\e[0m                                 \
    \         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpbf5rpyui.scala:22:57 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWord\e[0m =\
    \ lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord\n\e[31m\e[31m  \
    \ |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbf5rpyui.scala:23:64\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterOrSpaceOrWordOrDigit\e[0m = lastChar.isNotLetter || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isDigit\n\e[31m\e[31m   |\e[0m              \
    \                                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                               value isNotLetter is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbf5rpyui.scala:24:75 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWordOrDigitOrUppercase\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUppercase\n\e[31m\e[31m   |\e[0m                             \
    \                                     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            "
  stdout: ''
  timestamp: 1659792938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.forall(_.isLetter)\n        val isLastCharNotAlpha\
    \ = !lastChar.forall(_.isLetter)\n        isLastCharAlpha && !isLastCharNotAlpha\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpg_2oljgc.scala:19)\n\tat Problem$.main(tmpg_2oljgc.scala:25)\n\
    \tat Problem.main(tmpg_2oljgc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n\
    \        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n    \
    \    var isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var\
    \ isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n\
    \        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n    \
    \    var isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var\
    \ isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n\
    \        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n    \
    \    var isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var\
    \ isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n\
    \        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n    \
    \    var isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var\
    \ isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n\
    \        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n    \
    \    var isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var\
    \ isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n\
    \        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n    \
    \    var isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var\
    \ isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = true\n        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n\
    \        var isLastCharAlpha = true\n        var isLastCharAlpha = true\n    \
    \    var isLastCharAlpha = true\n        var isLastCharAlpha = true\n        var\
    \ isLastCharAlpha = true\n\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa5bednra.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e\
    [31mtrue\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0misLastCharAlpha is already defined as \e[33mvariable\e[0m \e[35misLastCharAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa5bednra.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misLastCharAlpha is already defined as \e[33mvariable\e[0m \e[35misLastCharAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa5bednra.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misLastCharAlpha is already defined as \e[33mvariable\e[0m \e[35misLastCharAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa5bednra.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misLastCharAlpha is already defined as \e[33mvariable\e[0m \e[35misLastCharAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa5bednra.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misLastCharAlpha is already defin"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.forall(x => x.isLetter)\n        val isLastCharNotAlpha\
    \ = !lastChar.forall(x => x.isLetter)\n        return isLastCharAlpha && !isLastCharNotAlpha\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpmdbyiw07.scala:19)\n\tat Problem$.main(tmpmdbyiw07.scala:25)\n\
    \tat Problem.main(tmpmdbyiw07.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   val lastCharIsNotALetterAndNotWord = lastCharIsALetter && !lastCharIsNotALetter\n\
    \        val lastCharIsNotALetterAndNotWordAndNotSpace = lastCharIsALetter &&\
    \ !lastCharIsNotALetter && !lastChar.isSpace\n        val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewLine\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewLine\n\
    \        val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewLineAndNotUppercase\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewLine\
    \ && !lastChar.isUppercase\n        val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewLineAndNotUppercaseAndNotSpace\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewLine\
    \ && !lastChar.isUppercase && !lastChar.isSpace\n        val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewLineAndNotUppercaseAndNotSpaceAndNotNewLine\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewLine\
    \ && !lastChar.isUppercase && !lastChar.isSpace && !lastChar.isNewLine\n     \
    \   val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewLineAndNotUppercaseAndNotSpaceAndNotNewLineAndNotUppercase\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewLine\
    \ && !lastChar.isUppercase && !lastChar.isSpace && !lastChar.isNewLine && !lastChar.isUppercase\n\
    \        val lastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewLineAndNotUppercaseAndNotSpaceAndNotNewLineAndNotUppercaseAndNotSpace\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNew\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwplvo76p.scala:22:112 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterAndNotWordAndNotSpace\e\
    [0m = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   value isSpace is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpwplvo76p.scala:23:125 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewLine\e\
    [0m = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewLine\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value isSpace is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwplvo76p.scala:23:146\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewLine\e[0m = lastCharIsALetter\
    \ && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewLine\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                         ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isNewLine is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwplvo76p.scala:24:140\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterAndNotWordAndNotSpaceAndNotNewLineAndNotUppercase\e[0m\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastChar.isSpace && !lastChar.isNewLine\
    \ && !lastChar.isUppercase\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                           ^^^^^^^^^^^^^^^^\e["
  stdout: ''
  timestamp: 1659792939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !isLastCharALetter\n        isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1iqgdu10.scala:25)\n\tat Problem.main(tmp1iqgdu10.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        var isLastCharNotALetter\
    \ = false\n        var isLastCharALetter = false\n        for(i <- 0 until txt.length){\n\
    \            if(txt(i) == lastChar){\n                isLastCharALetter = true\n\
    \            }\n            else{\n                isLastCharNotALetter = true\n\
    \            }\n        }\n        if(isLastCharALetter){\n            return\
    \ true\n        }\n        else{\n            return false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmcb6rlbs.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36misLastCharALetter\e[0m =\
    \ \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharALetter is already defined as \e[33mvariable\e[0m\
    \ \e[35misLastCharALetter\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659792937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ lastCharIsALetter = lastChar.matches(\"[a-zA-Z]\") && !lastChar.matches(\"\\\
    \\w\")\n        lastCharIsALetter\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpnkvs5jw5.scala:19)\n\tat Problem$.main(tmpnkvs5jw5.scala:24)\n\
    \tat Problem.main(tmpnkvs5jw5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val lastCharIsALetterOrSpace = lastChar.isLetter\
    \ || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val lastCharIsALetterOrWord\
    \ = lastChar.isLetter || lastChar.isWord || lastChar.isSpace\n        val lastCharIsNotALetterOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotSpace\n\
    \        val lastCharIsALetterOrWordOrSpace = lastChar.isLetter || lastChar.isWord\
    \ || lastChar.isSpace || lastChar.isNotSpace\n        val lastCharIsNotALetterOrWordOrSpaceOrWord\
    \ = lastChar.isNotLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotSpace\
    \ || lastChar.isWord\n        val lastCharIsALetterOrWordOrSpaceOrWord = lastChar.isLetter\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isNotSpace || lastChar.isWord\n\
    \        val lastCharIsNotALetterOrWordOrSpaceOrWordOrSpace = lastChar.isNotLetter\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isNotSpace || lastChar.isWord\
    \ || lastChar.isNotSpace\n        val lastCharIsALetterOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotSpace\
    \ || lastChar.isWord || lastChar.isNotSpace || lastChar.isNotWord\n        val\
    \ lastCharIsNotALetterOrWordOrSpaceOrWordOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isNotSpace || lastChar.isWord\
    \ || lastChar.isNotSpace || lastChar.isNotWord || lastChar.isNotWord\n       \
    \ val lastCharIsALetterOrWordOrSpaceOrWordOrSpaceOrWord = lastChar.isLetter \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjpkdt7wd.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m\
    \ = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpjpkdt7wd.scala:21:51 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpace\e[0m = lastChar.isNotLetter\
    \ || lastChar.isSpace\n\e[31m\e[31m   |\e[0m                                 \
    \         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpjpkdt7wd.scala:22:69 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterOrSpace\e[0m = lastChar.isLetter\
    \ || lastChar.isSpace\n\e[31m\e[31m   |\e[0m                                 \
    \                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                        value isSpace is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjpkdt7wd.scala:23:57 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWord\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjpkdt7wd.scala:24:68\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsALetterOrWord\e[0m = lastChar.isLetter || lastChar.isWord || lastChar.isSpace\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    value\
    \ isWord is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjpkdt7wd.scala:24:87\
    \ ------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1659792939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"\\\\W\")\n        isLastCharAlpha\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsur61jh1.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsur61jh1.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value matches is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        !isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpdupjo_e_.scala:19)\n\tat Problem$.main(tmpdupjo_e_.scala:25)\n\
    \tat Problem.main(tmpdupjo_e_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"\\\\W\")\n        isLastCharAlpha\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsur61jh1.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsur61jh1.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value matches is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar.toString.toLowerCase ==\
    \ lastChar)\n        val isLastCharNotALetter = !isLastCharALetter\n        return\
    \ isLastCharNotALetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw32pk_bf.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ (lastChar.toString.toLowerCase == lastChar)\n\e[31m\e[31m   |\e[0m         \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659792937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.last.forall(_.isLetter)\n\
    \        val isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n        val\
    \ isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n        val isLastCharNotWordAlpha\
    \ = !txt.last.forall(_.isLetter)\n        val isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n\
    \        val isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n        val\
    \ isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n        val isLastCharNotWordAlpha\
    \ = !txt.last.forall(_.isLetter)\n        val isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n\
    \        val isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n        val\
    \ isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n        val isLastCharNotWordAlpha\
    \ = !txt.last.forall(_.isLetter)\n        val isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n\
    \        val isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n        val\
    \ isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n        val isLastCharNotWordAlpha\
    \ = !txt.last.forall(_.isLetter)\n        val isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n\
    \        val isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n        val\
    \ isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n        val isLastCharNotWordAlpha\
    \ = !txt.last.forall(_.isLetter)\n        val isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n\
    \        val isLastCharNotWordAlpha = !txt.last.forall(_.isLetter)\n        val\
    \ isLastCharNotWordAlpha = !txt.last.forall(_.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw1mrr0bs.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw1mrr0bs.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e[0m = !txt.last.forall(_.isLetter)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw1mrr0bs.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !txt.last.forall(_.isLetter)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw1mrr0bs.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !txt.last.forall(_.isLetter)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw1mrr0bs.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !txt.last.forall(_.isLetter)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is alr"
  stdout: ''
  timestamp: 1659792940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = txt.last\n        val lastCharIsALetter\
    \ = lastChar.isLetter\n        val lastCharIsNotALetter = lastChar.forall(_.isLetter)\n\
    \        val lastCharIsNotALetterButInWord = words.lastOption.exists(_.contains(lastChar))\n\
    \        val lastCharIsNotALetterButInWordButNotLastChar = words.lastOption.exists(_.contains(lastChar)\
    \ && !lastChar.isLetter)\n        val lastCharIsALetterButNotInWord = words.lastOption.exists(_.contains(lastChar)\
    \ && !lastChar.isLetter)\n        val lastCharIsALetterButNotInWordButNotLastChar\
    \ = words.lastOption.exists(_.contains(lastChar) && !lastChar.isLetter && !lastChar.isLetter)\n\
    \        val lastCharIsALetterButNotInWordButNotLastChar = words.lastOption.exists(_.contains(lastChar)\
    \ && !lastChar.isLetter && !lastChar.isLetter)\n        val lastCharIsALetterButNotInWordButNotLastChar\
    \ = words.lastOption.exists(_.contains(lastChar) && !lastChar.isLetter && !lastChar.isLetter)\n\
    \        val lastCharIsALetterButNotInWordButNotLastChar = words.lastOption.exists(_.contains(lastChar)\
    \ && !lastChar.isLetter && !lastChar.isLetter)\n        val lastCharIsALetterButNotInWordButNotLastChar\
    \ = words.lastOption.exists(_.contains(lastChar) && !lastChar.isLetter && !lastChar.isLetter)\n\
    \        val lastCharIsALetterButNotInWordButNotLastChar = words.lastOption.exists(_.contains(lastChar)\
    \ && !lastChar.isLetter && !lastChar.isLetter)\n        val lastCharIsALetterButNotInWordButNotLastChar\
    \ = words.lastOption.exists(_.contains(lastChar) && !lastChar.isLetter && !lastChar.isLetter)\n\
    \        val lastCharIsALetterButNotInWordButNotLastChar = words.lastOption.exists(_.contains(lastChar)\
    \ && !lastChar.isLetter && !lastChar.isLetter)\n        val lastCharIsALetterButNotInWordButNotLastChar\
    \ = words.lastOption.exists(_.contains(lastChar) && !lastChar.isLetter && !lastChar.isLetter)\n\
    \        val lastCharIsALetterButNotInWordButNotLastChar = words.lastOption.exists(_.contains(lastChar)\
    \ && !lastChar.isLetter && !lastChar.isLetter)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpynvwbxvt.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterButNotInWordButNotLastChar\e\
    [0m = words.lastOption.exists(_.contains(lastChar) && !lastChar.isLetter && !lastChar.isLetter)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsALetterButNotInWordButNotLastChar is already defined\
    \ as \e[33mvalue\e[0m \e[35mlastCharIsALetterButNotInWordButNotLastChar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpynvwbxvt.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterButNotInWordButNotLastChar\e\
    [0m = words.lastOption.exists(_.contains(lastChar) && !lastChar.isLetter && !lastChar.isLetter)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsALetterButNotInWordButNotLastChar is already defined\
    \ as \e[33mvalue\e[0m \e[35mlastCharIsALetterButNotInWordButNotLastChar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpynvwbxvt.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterButNotInWordButNotLastChar\e\
    [0m = words.lastOption.exists(_.contains(lastChar) && !lastChar.isLetter && !lastChar.isLetter)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsALetterButNotInWordButNotLastChar is already defined\
    \ as \e[33mvalue\e[0m \e[35mlastCharIsALetterButNotInWordButNotLastChar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659792941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.toLowerCase == lastChar\n        val isNotWord\
    \ = words.last.contains(lastChar)\n        isLastCharALetter && !isNotWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpkmtzg1ao.scala:19)\n\tat Problem$.main(tmpkmtzg1ao.scala:25)\n\
    \tat Problem.main(tmpkmtzg1ao.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar.toString.isLetter\n        val\
    \ isNotWord = txt.splitAt(txt.length-1)\n            .map(_.toString.trim).\n\
    \            filter(_.nonEmpty).\n            forall(_.isLetter)\n        isALetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp87yf8yzr.scala:19:42 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misALetter\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value isLetter is not a member of String\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmp87yf8yzr.scala:21:17 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            .map(_.toString.trim).\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1 of\
    \ expanded function:\n\e[31m   |\e[0m   _$1 => _$1.toString.trim.\n2 errors found\n"
  stdout: ''
  timestamp: 1659792942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLetter = lastChar.matches(\"[a-zA-Z]\")\n        val\
    \ isNotWord = txt.split(\" \").last.contains(lastChar)\n        isLetter && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyftw7va2.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLetter\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value matches is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = (lastChar >= 'a' && lastChar <= 'z') ||\
    \ (lastChar >= 'A' && lastChar <= 'Z')\n        !isALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprjc2oin9.scala:24)\n\tat Problem.main(tmprjc2oin9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.toString.isLetter\n   \
    \     val lastCharIsNotALetter = lastChar.isLetter\n        val lastCharIsNotALetterOrSpace\
    \ = lastChar.isLetter && !lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrSpace\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isSpace\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWord = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isSpace && !lastChar.isWord\
    \ && !lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isSpace\
    \ && !lastChar.isWord && !lastChar.isSpace && !lastChar.isWord && !lastChar.isWord\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isSpace && !lastChar.isWord\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isWord && !lastChar.isSpace\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWord = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isSpace && !lastChar.isWord\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isSpace && !lastChar.isWord\
    \ && !lastChar.isWord && !lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isSpace\
    \ && !lastChar.isWord && !lastChar.isSpace && !lastChar.isWord && !lastChar.isSpace\
    \ && !lastChar.isWord && !lastChar.isSpace && !lastChar.isWord && !lastChar.isWord\
    \ && !lastChar.isSpace\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzqyi5hlk.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\e\
    [0m = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isSpace\
    \ && !lastChar.isWord && !lastChar.isSpace && !lastChar.isWord && !lastChar.isWord\
    \ && !lastChar.isSpace\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrSpaceOrWordOrSpaceOrWordOrSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpzqyi5hlk.scala:19:50 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetter\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzqyi5hlk.scala:21:73\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterOrSpace\e[0m = lastChar.isLetter && !lastChar.isSpace\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \     value isSpace is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpzqyi5hlk.scala:22:79 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWord\e[0m = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isWord\n\e[31m\e[31m   |\e[0m            \
    \                                                          ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659792944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isNotWord = txt.split(\" \").last.contains(lastChar)\n        isAlpha\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0bsr4l8l.scala:25)\n\tat Problem.main(tmp0bsr4l8l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotWord = lastChar.isNotWord\n\
    \        val lastCharIsWord = lastChar.isWord\n        val lastCharIsNotWordOrALetter\
    \ = lastCharIsWord || lastCharIsALetter\n        val lastCharIsWordOrALetter =\
    \ lastCharIsWord || lastCharIsALetter\n        val lastCharIsNotWordOrALetterOrNotWord\
    \ = lastCharIsNotWord || lastCharIsNotALetter || lastCharIsNotWord\n        val\
    \ lastCharIsWordOrALetterOrNotWord = lastCharIsWord || lastCharIsALetter || lastCharIsNotWord\n\
    \        val lastCharIsNotWordOrALetterOrNotWordOrNotWord = lastCharIsNotWord\
    \ || lastCharIsNotALetter || lastCharIsNotWord || lastCharIsNotWord\n        val\
    \ lastCharIsWordOrALetterOrNotWordOrNotWord = lastCharIsWord || lastCharIsALetter\
    \ || lastCharIsNotWord || lastCharIsNotWord\n        val lastCharIsNotWordOrALetterOrNotWordOrNotWord\
    \ = lastCharIsNotWord || lastCharIsNotALetter || lastCharIsNotWord || lastCharIsNotWord\n\
    \        val lastCharIsWordOrALetterOrNotWordOrNotWordOrNotWord = lastCharIsWord\
    \ || lastCharIsALetter || lastCharIsNotWord || lastCharIsNotWord || lastCharIsNotWord\n\
    \        val lastCharIsWordOrALetterOrNotWordOrNotWordOrNotWord = lastCharIsWord\
    \ || lastCharIsALetter || lastCharIsNotWord || lastCharIsNotWord || lastCharIsNotWord\n\
    \        val lastCharIsWordOrALetterOrNotWordOrNotWordOrNotWordOrNotWord = lastCharIsWord\
    \ || lastCharIsALetter || lastCharIsNotWord || lastCharIsNotWord || lastCharIsNotWord\
    \ || lastCharIsNotWord\n        val lastCharIsWordOrALetterOrNotWordOrNotWordOrNotWordOrNotWord\
    \ = lastCharIsWord || lastCharIsALetter || lastCharIsNotWord || lastCharIsNotWord\
    \ || last\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn9ahvy25.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordOrALetterOrNotWordOrNotWord\e\
    [0m = lastCharIsNotWord || lastCharIsNotALetter || lastCharIsNotWord || lastCharIsNotWord\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotWordOrALetterOrNotWordOrNotWord is already defined\
    \ as \e[33mvalue\e[0m \e[35mlastCharIsNotWordOrALetterOrNotWordOrNotWord\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpn9ahvy25.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsWordOrALetterOrNotWordOrNotWordOrNotWord\e\
    [0m = lastCharIsWord || lastCharIsALetter || lastCharIsNotWord || lastCharIsNotWord\
    \ || lastCharIsNotWord\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsWordOrALetterOrNotWordOrNotWordOrNotWord is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsWordOrALetterOrNotWordOrNotWordOrNotWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn9ahvy25.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsWordOrALetterOrNotWordOrNotWordOrNotWordOrNotWord\e\
    [0m = lastCharIsWord || lastCharIsALetter || lastCharIsNotWord || lastCharIsNotWord\
    \ || last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsWordOrALetterOrNotWordOrNotWordOrNotWordOrNotWord\
    \ is already defined as \e[33mvalue\e[0m \e["
  stdout: ''
  timestamp: 1659792943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5v8lq9l.scala:24)\n\tat Problem.main(tmpq5v8lq9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = txt.last\n        val lastCharIsALetter\
    \ = lastChar.isLetter\n        val lastCharIsNotALetter = lastChar.isNotLetter\n\
    \        val lastCharIsNotWord = words.last.last.isLetter\n        val lastCharIsNotWordOrALetter\
    \ = lastCharIsNotWord || lastCharIsALetter\n        val lastCharIsNotWordOrNotALetter\
    \ = lastCharIsNotWord && !lastCharIsALetter\n        val lastCharIsNotWordOrNotALetterOrLastCharIsALetter\
    \ = lastCharIsNotWord && !lastCharIsALetter && lastCharIsALetter\n        val\
    \ lastCharIsNotWordOrNotALetterOrLastCharIsNotALetter = lastCharIsNotWord && !lastCharIsALetter\
    \ && !lastCharIsALetter\n        val lastCharIsNotWordOrNotALetterOrLastCharIsNotALetterOrLastCharIsALetter\
    \ = lastCharIsNotWord && !lastCharIsALetter && !lastCharIsALetter && lastCharIsALetter\n\
    \        val lastCharIsNotWordOrNotALetterOrLastCharIsNotALetterOrLastCharIsNotALetter\
    \ = lastCharIsNotWord && !lastCharIsALetter && !lastCharIsALetter && !lastCharIsALetter\n\
    \        val lastCharIsNotWordOrNotALetterOrLastCharIsNotALetterOrLastCharIsNotALetterOrLastCharIsALetter\
    \ = lastCharIsNotWord && !lastCharIsALetter && !lastCharIsALetter && !lastCharIsALetter\
    \ && !lastCharIsALetter\n        val lastCharIsNotWordOrNotALetterOrLastCharIsNotALetterOrLastCharIsNotALetterOrLastCharIsNotALetter\
    \ = lastCharIsNotWord && !lastCharIsALetter && !lastCharIsALetter && !lastCharIsALetter\
    \ && !lastCharIsALetter && !lastCharIsALetter\n        val lastCharIsNotWordOrNotALetterOrLastCharIsNotALetterOrLastCharIsNotALetterOrLastCharIsNotALetterOrLastCharIsALetter\
    \ = lastCharIsNotWord && !lastCharIsALetter && !lastCharIsALet\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnj936na.scala:21:44 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m\
    \ = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpqnj936na.scala:31:173 -----------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordOrNotALetterOrLastCharIsNotALetterOrLastCharIsNotALetterOrLastCharIsNotALetterOrLastCharIsALetter\e\
    [0m = lastCharIsNotWord && !lastCharIsALetter && !lastCharIsALet\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \                              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                                     Not found: lastCharIsALet\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqnj936na.scala:32:5 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659792943
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val\
    \ isNotWord = txt.split(\" \").last.contains(lastChar)\n        isAlpha && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbupp7wk1.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value matches is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792943
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        var isLastCharALetterInWord\
    \ = false\n        var isLastCharALetterInWordSpace = false\n        var isLastCharALetterInWordSpaceOrSpace\
    \ = false\n        var isLastCharALetterInWordSpaceOrSpaceOrSpace = false\n  \
    \      var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpace = false\n       \
    \ var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpace = false\n     \
    \   var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace = false\n\
    \        var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = false\n        var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = false\n        var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = false\n        var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = false\n        var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = false\n        var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = false\n        var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = false\n        var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = false\n        var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = false\n        var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = false\n        var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = false\n        var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ = false\n        var isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdopheqsj.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdopheqsj.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36misLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpdopheqsj.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m \e[36misLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  isLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpdopheqsj.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36misLastCharALetterInWordSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0"
  stdout: ''
  timestamp: 1659792943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        if(lastChar.isLetter) {\n            val words = txt.split(\"\
    \ \").filter(_.nonEmpty)\n            val lastWord = words.last\n            if(lastWord.last.isLetter)\
    \ {\n                return false\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoyos0fxg.scala:30)\n\tat Problem.main(tmpoyos0fxg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == lastChar)\n        val\
    \ isLastCharNotALetter = words.last.forall(_.toString.toLowerCase != lastChar)\n\
    \        val isLastCharNotALetterOrLastCharIsALetter = isLastCharNotALetter ||\
    \ isLastCharALetter\n        isLastCharNotALetterOrLastCharIsALetter\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpsqsnojc4.scala:19)\n\tat Problem$.main(tmpsqsnojc4.scala:26)\n\
    \tat Problem.main(tmpsqsnojc4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n        isAlpha\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpibq4grmd.scala:25)\n\tat Problem.main(tmpibq4grmd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.matches(\"[a-zA-Z]\") && !lastChar.matches(\"\\\
    \\w\")\n        return isLastCharALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp86pw_d29.scala:19)\n\tat Problem$.main(tmp86pw_d29.scala:24)\n\
    \tat Problem.main(tmp86pw_d29.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == \"a\" || lastChar.toString.toLowerCase\
    \ == \"e\" || lastChar.toString.toLowerCase == \"i\" || lastChar.toString.toLowerCase\
    \ == \"o\" || lastChar.toString.toLowerCase == \"u\")\n        val isLastCharNotALetter\
    \ = (lastChar.toString.toLowerCase != \"a\" && lastChar.toString.toLowerCase !=\
    \ \"e\" && lastChar.toString.toLowerCase != \"i\" && lastChar.toString.toLowerCase\
    \ != \"o\" && lastChar.toString.toLowerCase != \"u\")\n        isLastCharALetter\
    \ && !isLastCharNotALetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpwz89myro.scala:19)\n\tat Problem$.main(tmpwz89myro.scala:25)\n\
    \tat Problem.main(tmpwz89myro.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar.toString.isLetter\n        val\
    \ isNotWord = txt.dropRight(1).forall(_.toString.isLetter)\n        isALetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzsql2dz1.scala:19:42 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misALetter\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value isLetter is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzsql2dz1.scala:20:59 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.dropRight(\e\
    [31m1\e[0m).forall(_.toString.isLetter)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                              value isLetter is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = lastChar.isLetter\n  \
    \      val isLastCharNotWord = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetter\n        val isLastCharNotWord = lastChar.isLetter\n   \
    \     val isLastCharNotWord = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetter\n        val isLastCharNotWord = lastChar.isLetter\n   \
    \     val isLastCharNotWord = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetter\n        val isLastCharNotWord = lastChar.isLetter\n   \
    \     val isLastCharNotWord = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetter\n        val isLastCharNotWord = lastChar.isLetter\n   \
    \     val isLastCharNotWord = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetter\n        val isLastCharNotWord = lastChar.isLetter\n   \
    \     val isLastCharNotWord = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetter\n        val isLastCharNotWord = lastChar.isLetter\n   \
    \     val isLastCharNotWord = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetter\n        val isLastCharNotWord = lastChar.isLetter\n   \
    \     val isLastCharNotWord = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetter\n        val isLastCharNotWord = lastChar.isLetter\n   \
    \     val isLastCharNotWord = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetter\n        val isLastCharNotWord = lastChar.isLetter\n   \
    \     val isLastCharNotWord = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetter\n        val isLastCharNotWord = lastChar.isLetter\n   \
    \     val isLastCharNotWord = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetter\n        val isLastCharNotWord = lastChar.isLetter\n   \
    \     val isLastCharNotWord = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetter\n        val isLastCharNotWord = last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_w0fvcz.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ lastChar.isLetter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWord is already defined as \e[33mvalue\e[0m \e\
    [35misLastCharNotWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpy_w0fvcz.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ lastChar.isLetter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWord is already defined as \e[33mvalue\e[0m \e\
    [35misLastCharNotWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpy_w0fvcz.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ lastChar.isLetter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWord is already defined as \e[33mvalue\e[0m \e\
    [35misLastCharNotWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpy_w0fvcz.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ lastChar.isLetter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWord is already defined as \e[33mvalue\e[0m \e\
    [35misLastCharNotWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpy_w0fvcz.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ lastChar.isLetter\n\e[31m\e[3"
  stdout: ''
  timestamp: 1659792944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = txt.last\n        val lastCharIsALetter\
    \ = lastChar.toString.isLetter\n        val isLastCharNotInWord = words.lastOption.map(_.last).map(_.toString.toInt).contains(lastChar.toString.toInt)\n\
    \        !lastCharIsALetter && !isLastCharNotInWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1hnnslsw.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659792944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isNotWord = txt.split(\" \").last.contains(lastChar)\n        isAlpha\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0bsr4l8l.scala:25)\n\tat Problem.main(tmp0bsr4l8l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isNotWordChar = txt.last.forall(c\
    \ => c != ' ' && c != '-' && c != '_')\n        !isLastCharALetter && !isNotWordChar\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2mr1t8e7.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misNotWordChar\e[0m = txt.last.forall(\e\
    [36mc\e[0m => c != \e[31m' '\e[0m && c != \e[31m'-'\e[0m && c != \e[31m'_'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            value forall is not a member of Char\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1659792944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.matches(\"[a-zA-Z]\") &&\
    \ !(lastChar.matches(\"\\\\w\"))\n        return isLastCharALetter\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpanch4z3n.scala:19:41 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m) && !(lastChar.matches(\e[31m\"\\\\\
    w\"\e[0m))\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value matches is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659792944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar.isLetter\n        val isNotALetter\
    \ = lastChar.isNotLetter\n        val isNotWord = txt.split(\" \").last.contains(lastChar)\n\
    \        isALetter && !isNotALetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfl1xfpbj.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misNotALetter\e[0m = lastChar.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           value isNotLetter is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsLetter = lastChar.toString.isLetter\n    \
    \    val lastCharIsNotWord = lastChar.isLetter\n        val lastCharIsNotWordButNotALetter\
    \ = lastChar.isLetter && !lastChar.isLetter\n        val lastCharIsNotWordButNotALetterAndNotLastCharIsALetter\
    \ = lastChar.isLetter && !lastChar.isLetter && !lastChar.isLetter && lastCharIsLetter\n\
    \        val lastCharIsNotWordButNotALetterAndNotLastCharIsALetterAndNotLastCharIsALetter\
    \ = lastChar.isLetter && !lastChar.isLetter && !lastChar.isLetter && !lastChar.isLetter\
    \ && !lastChar.isLetter && !lastChar.isLetter\n        val lastCharIsNotWordButNotALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetter\
    \ = lastChar.isLetter && !lastChar.isLetter && !lastChar.isLetter && !lastChar.isLetter\
    \ && !lastChar.isLetter && !lastChar.isLetter && !lastChar.isLetter\n        val\
    \ lastCharIsNotWordButNotALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetter\
    \ = lastChar.isLetter && !lastChar.isLetter && !lastChar.isLetter && !lastChar.isLetter\
    \ && !lastChar.isLetter && !lastChar.isLetter && !lastChar.isLetter && !lastChar.isLetter\n\
    \        val lastCharIsNotWordButNotALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetter\
    \ = lastChar.isLetter && !lastChar.isLetter && !lastChar.isLetter && !lastChar.isLetter\
    \ && !lastChar.isLetter && !lastChar.isLetter && !lastChar.isLetter && !lastChar.isLetter\
    \ && !lastChar.isLetter\n        val lastCharIsNotWordButNotALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetter\
    \ = lastChar.isLetter && !lastChar.isLetter && !lastChar\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfm71k4f.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsLetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpxfm71k4f.scala:27:226 -----------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordButNotALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetter\e\
    [0m = lastChar.isLetter && !lastChar.isLetter && !lastChar\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \                                                                            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m  value unary_! is not a member of Char - did you mean lastChar.unary_+?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxfm71k4f.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659792944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").lastOption.isEmpty\n        isALetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3bwl0nxu.scala:24)\n\tat Problem.main(tmp3bwl0nxu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").lastOption match {\n            case Some(word)\
    \ => !word.contains(lastChar)\n            case None => false\n        }\n   \
    \     isALetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmwahnwch.scala:27)\n\tat Problem.main(tmpmwahnwch.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !isLastCharALetter\n        isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1iqgdu10.scala:25)\n\tat Problem.main(tmp1iqgdu10.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").lastOption.exists(_ != lastChar)\n     \
    \   isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp19ws_0wy.scala:20:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns true if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and false otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val lastCharIsALetter = lastChar.forall(Character.isLetter)\n        val\
    \ lastCharIsNotALetter = lastChar.forall(!Character.isLetter)\n        lastCharIsALetter\
    \ && !lastCharIsNotALetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpsb10wcoh.scala:21:62 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m\
    \ = lastChar.forall(!Character.isLetter)\n\e[31m\e[31m   |\e[0m              \
    \                                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35misLetter\e[0m in \e\
    [33mobject\e[0m \e[35mCharacter\e[0m with types\n\e[31m   |\e[0m (x$0: Int): Boolean\n\
    \e[31m   |\e[0m (x$0: Char): Boolean\n\e[31m   |\e[0mmatch expected type ?{ unary_!\
    \ : ? }\n1 error found\n"
  stdout: ''
  timestamp: 1659792945
