name: HumanEval_84_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer N, return the total sum of its digits in binary.\n\
  \    // Example\n    // >>> solve((1000l))\n    // (\"1\")\n    // >>> solve((150l))\n\
  \    // (\"110\")\n    // >>> solve((147l))\n    // (\"1100\")\n    // Variables:\n\
  \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
  \    // a string of binary number\n    def solve(N : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
  1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
  1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
  10010\")));\n    }\n\n}\n"
completions: ["        val binary = N.toBinaryString\n        val binary = binary.reverse\n\
    \        val binary = binary.dropWhile(_ == '0').reverse\n        val binary =\
    \ binary.takeWhile(_ == '1').reverse\n        binary.mkString", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.foldLeft(mutable.Map.empty[Int, Int]){\n          \
    \  case (acc, digit) =>\n                val key = digit.charAt(0).toInt\n   \
    \             val value = acc.get(key) match {\n                    case Some(sum)\
    \ => sum + digit.charAt(1).toInt\n                    case None => digit.charAt(1).toInt\n\
    \                }\n                acc + (key -> value)\n        }\n        val\
    \ result = sums.filter(_._2 > 0).map(_._1).mkString\n        result + (if (sums.isEmpty)\
    \ \"\" else s\"(${sums.last._2})\")", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.foldLeft(Map[String, Long]()){\n            case (acc,\
    \ digit) =>\n                val key = digit.mkString\n                val value\
    \ = acc.getOrElse(key, 0) + 1\n                acc + (key -> value)\n        }\n\
    \        val result = sums.map{case (digit, count) => s\"${digit}${count.toBinaryString}\"\
    }\n        result.mkString(\"\")", "        val binary = N.toBinaryString\n  \
    \      val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)",
  "        val binary = N.toBinaryString\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- binary.indices) {\n            val digit\
    \ = binary.charAt(i)\n            sum += digit.toInt\n        }\n        binary.reverse\n\
    \        binary.reverse.takeWhile(_ != '0').mkString", "        var sum = 0\n\
    \        var binary = \"\"\n        for(i <- N.toInt) {\n            sum += i\n\
    \            binary += i.toBinaryString\n        }\n        if(sum < 10) {\n \
    \           binary += \"0\"\n        }\n        binary.reverse", "        val\
    \ binary = N.toBinaryString\n        val result = binary.reverse.foldLeft(\"\"\
    ) { (result, digit) =>\n            val sum = result + digit\n            if (sum.length\
    \ == binary.length) {\n                sum\n            } else {\n           \
    \     val newSum = sum.substring(0, sum.length - 1) + digit\n                if\
    \ (newSum.length == binary.length) {\n                    newSum\n           \
    \     } else {\n                    newSum + digit\n                }\n      \
    \      }\n        }\n        result", "        val binary = N.toBinaryString\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n   \
    \     val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.foldLeft(mutable.Map[String, Int]()){\n           \
    \ case (acc, digit) => acc + (digit -> (acc.getOrElse(digit, 0) + 1))\n      \
    \  }\n        sums.map{case (digit, count) => digit + count.toString}.mkString",
  "        val binary = N.toBinaryString\n        val result = binary.reverse.foldLeft(\"\
    \")(_ + _)\n        result + binary.reverse.dropWhile(_ == '0').takeWhile(_ !=\
    \ '0').mkString", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = digits.foldLeft(0)(_ + _)\n        val binary = digits.map(x\
    \ => if (x == 0) \"0\" else (x % 2 + \"1\")).mkString\n        binary.reverse.foldRight(\"\
    \")((acc, x) => acc + x)", "        val binary = N.toBinaryString\n        val\
    \ bin = binary.toList\n        val binSum = bin.foldLeft(0)(_ + _)\n        val\
    \ binSumString = binSum.toBinaryString\n        binSumString.reverse", "     \
    \   val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sums\
    \ = digits.foldLeft(Map[Int, Int]()){\n            case (acc, digit) =>\n    \
    \            val sum = digit._1 + digit._2\n                acc + (sum -> (sum\
    \ + digit._1))\n        }\n        val result = sums.filter(_._2 > 0).map(_._2).sum.toString\n\
    \        result", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.foldLeft(\"\") { (s, d) => s + d }\n        binary.reverse",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val result = mutable.Stack[String]()\n        val sum = 0\n        val\
    \ maxDigit = digits.length\n        val maxDigits = digits.length\n        val\
    \ maxDigitSum = digits.length\n        val maxDigitSums = digits.length\n    \
    \    val maxDigitSumsOfDigits = digits.length\n        val maxDigitSumsOfDigitsOfDigits\
    \ = digits.length\n        val maxDigitSumsOfDigitsOfDigitsOfDigits = digits.length\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigits = digits.length\n  \
    \      val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = digits.length\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = digits.length\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits\
    \ = digits.length\n        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits\
    \ = digits.length\n        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits\
    \ = digits.length\n        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits\
    \ = digits.length\n        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits\
    \ = digits.length\n        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits\
    \ = digits.length\n        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits\
    \ = digits.length\n        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits\
    \ = digits.length\n        val maxDigitSumsOfDigitsOfDigitsOf", "        val binary\
    \ = N.toBinaryString\n        val sum = 0\n        val binary = binary.toCharArray\n\
    \        binary.foreach(x => {\n            sum += x\n        })\n        binary.toString.reverse.mkString(\"\
    \")", "        val binary = N.toBinaryString\n        val sum = 0\n        val\
    \ bin = binary.toList\n        val binLen = bin.length\n        val binLen2 =\
    \ binLen/2\n        val binLen3 = binLen2/2\n        val binLen4 = binLen3/2\n\
    \        val binLen5 = binLen4/2\n        val binLen6 = binLen5/2\n        val\
    \ binLen7 = binLen6/2\n        val binLen8 = binLen7/2\n        val binLen9 =\
    \ binLen8/2\n        val binLen10 = binLen9/2\n        val binLen11 = binLen10/2\n\
    \        val binLen12 = binLen11/2\n        val binLen13 = binLen12/2\n      \
    \  val binLen14 = binLen13/2\n        val binLen15 = binLen14/2\n        val binLen16\
    \ = binLen15/2\n        val binLen17 = binLen16/2\n        val binLen18 = binLen17/2\n\
    \        val binLen19 = binLen18/2\n        val binLen20 = binLen19/2\n      \
    \  val binLen21 = binLen20/2\n        val binLen22 = binLen21/2\n        val binLen23\
    \ = binLen22/2\n        val binLen24 = binLen23/2\n        val binLen25 = binLen24/2\n\
    \        val binLen26 = binLen25/2\n        val binLen27 = binLen26/2\n      \
    \  val binLen28 = binLen27/2\n        val binLen29 = binLen28/2\n        val binLen30\
    \ = binLen29/2\n        val binLen31 = binLen30/2\n        val binLen32 = binLen31/2\n\
    \        val binLen33 = binLen32/2\n        val binLen34 = binLen33/2\n      \
    \  val binLen35 = binLen34/2\n        val binLen36 = binLen35/2\n        val binLen37\
    \ = binLen36/2\n        val binLen38 = binLen37/2\n        val binLen39 = binLen38/2\n\
    \        val binLen40 = binLen39/2\n        val binLen41 = binLen40/2\n      \
    \  val binLen42 = binLen41/2\n        val binLen43 = binLen42/2\n        val binLen44\
    \ = binLen43/2\n        val binLen45 = binLen44/2\n        val binLen46 = bin",
  "        val binary = N.toBinaryString\n        val bins = binary.split(\"\")\n\
    \        val sum = 0\n        bins.foreach(x => {\n            val y = x.toInt\n\
    \            sum += y\n        })\n        binary.reverse.split(\"\").map(x =>\
    \ x.toInt + sum).mkString(\"\")", "        val binary = N.toBinaryString\n   \
    \     val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- binary.indices)\
    \ {\n            sum += binary.charAt(i)\n        }\n        binary.reverse",
  "        val binary = N.toBinaryString\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.map(_.toBinaryString).mkString(\"\")\n        val\
    \ result = binary.reverse.grouped(2).map(_.mkString).reverse\n        result match\
    \ {\n            case Nil => \"\"\n            case _ => result\n        }", " \
    \       val binary = N.toBinaryString\n        val binary = binary.reverse\n \
    \       val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val binary = binary.toCharArray\n        val binary\
    \ = binary.filter(_ != '0')\n        val binary = binary.filter(_ != '1')\n  \
    \      binary.foreach(x => sum += x)\n        binary.toString.reverse", "    \
    \    val binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0 to\
    \ binary.length-1){\n            val temp = binary.charAt(i)\n            val\
    \ digit = temp.charAt(0)\n            val bin = digit.toInt\n            sum +=\
    \ bin\n        }\n        binary.reverse", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- binary.indices) {\n            val bin\
    \ = binary.substring(i)\n            val num = bin.toInt\n            sum += num\n\
    \        }\n        binary.reverse.mkString(\"\")", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.foldLeft(\"\") { (acc, digit) =>\n            acc\
    \ + (if (digit.length > 1) \"1\" + digit else \"0\" + digit)\n        }\n    \
    \    binary.reverse", "        val binary = N.toBinaryString\n        val sum\
    \ = 0\n        for(i <- binary.indices) {\n            sum += binary(i)\n    \
    \    }\n        binary.reverse.foldLeft(\"\") {\n            (a,b) => a + b.toInt\n\
    \        }", "        val s = N.toBinaryString\n        val l = s.length\n   \
    \     val m = l / 2\n        val r = s.substring(m, l)\n        val x = s.substring(0,\
    \ m)\n        val y = x.reverse\n        val z = y.reverse\n        val w = z.reverse\n\
    \        val a = w.reverse\n        val b = a.reverse\n        val c = b.reverse\n\
    \        val d = c.reverse\n        val e = d.reverse\n        val f = e.reverse\n\
    \        val g = f.reverse\n        val h = g.reverse\n        val i = h.reverse\n\
    \        val j = i.reverse\n        val k = j.reverse\n        val l = k.reverse\n\
    \        val m = l.reverse\n        val n = m.reverse\n        val o = n.reverse\n\
    \        val p = o.reverse\n        val q = p.reverse\n        val r = q.reverse\n\
    \        val s = r.reverse\n        val t = s.reverse\n        val u = t.reverse\n\
    \        val v = u.reverse\n        val w = v.reverse\n        val x = w.reverse\n\
    \        val y = x.reverse\n        val z = y.reverse\n        val a = z.reverse\n\
    \        val b = a.reverse\n        val c = b.reverse\n        val d = c.reverse\n\
    \        val e = d.reverse\n        val f = e.reverse\n        val g = f.reverse\n\
    \        val h = g.reverse\n        val i = h.reverse\n        val j = i.reverse\n\
    \        val k = j.reverse\n        val l = k.reverse\n        val m = l.reverse\n\
    \        val n = m.reverse\n        val o = n.reverse\n        val p = o.reverse\n\
    \        val q = p.reverse\n        val r = q.reverse\n        val s = r.reverse\n\
    \        val t = s.reverse\n        val u = t.reverse\n        val v = u.reverse\n\
    \        val w = v.reverse\n        val x = w.reverse\n        val y = x.reverse\n\
    \        val z = y.reverse\n        val a = z.reverse\n        val b = a.reverse\n\
    \        val c = b.reverse\n        val d = c.reverse\n        val e = d.reverse\n\
    \        val f = e.reverse\n        val g = f.reverse\n        val h = g.reverse\n\
    \        val i = h.reverse\n        val j = i.reverse\n        val k = j.reverse\n\
    \        val l = k.reverse\n        val m = l.reverse\n        val n = m.reverse\n\
    \        val o = n.reverse\n        val p = o.reverse\n        val q = p.reverse\n\
    \        val r = q.reverse\n        val s = r.reverse\n        val t = s.reverse\n\
    \        val u = t.reverse\n        val v = u.reverse\n        val w = v.reverse\n\
    \        val x = w.reverse\n        val y = ", "        val binary = N.toBinaryString\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.",
  "        val s = \"\"\n        var sum = 0\n        var i = N\n        while (i\
    \ > 0) {\n            sum += i % 2\n            i /= 2\n        }\n        s +=\
    \ sum.toString\n        return s", "        val binary = N.toBinaryString\n  \
    \      val digits = binary.toList\n        val sum = 0\n        val result = new\
    \ mutable.ListBuffer[String]\n        for (i <- 0 until digits.size) {\n     \
    \       val digit = digits(i)\n            sum += digit.toLong\n            val\
    \ bin = sum.toBinaryString\n            val binDigits = bin.toList\n         \
    \   val binSum = 0\n            for (j <- 0 until binDigits.size) {\n        \
    \        val binDigit = binDigits(j)\n                binSum += binDigit.toLong\n\
    \            }\n            val binSumStr = binSum.toBinaryString\n          \
    \  if (binSumStr.length == 1) {\n                result.append((binSumStr))\n\
    \            } else {\n                result.append((binSumStr.substring(0, binSumStr.length\
    \ - 1))).append(\"0\")\n            }\n        }\n        result.toString", " \
    \       val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n \
    \       val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n \
    \       for (digit <- digits) {\n            val value = digit.toInt\n       \
    \     val bin = math.pow(10, value).toInt\n            val binStr = binary.take(binary.size\
    \ - 1).mkString(\"\")\n            val binStr2 = binStr + binStr\n           \
    \ binary.append(binStr2)\n            sum += bin\n        }\n        binary.reverse.mkString(\"\
    \")", "        val nums = N.toBinaryString\n        val numsArray = nums.toCharArray\n\
    \        val numsArrayLen = numsArray.length\n        val numsArraySum = numsArray.sum\n\
    \        val numsArraySumLen = numsArraySum.length\n        val numsArraySumLen2\
    \ = numsArraySumLen * numsArraySumLen\n        val numsArraySumLen3 = numsArraySumLen2\
    \ * numsArraySumLen\n        val numsArraySumLen4 = numsArraySumLen3 * numsArraySumLen\n\
    \        val numsArraySumLen5 = numsArraySumLen4 * numsArraySumLen\n        val\
    \ numsArraySumLen6 = numsArraySumLen5 * numsArraySumLen\n        val numsArraySumLen7\
    \ = numsArraySumLen6 * numsArraySumLen\n        val numsArraySumLen8 = numsArraySumLen7\
    \ * numsArraySumLen\n        val numsArraySumLen9 = numsArraySumLen8 * numsArraySumLen\n\
    \        val numsArraySumLen10 = numsArraySumLen9 * numsArraySumLen\n        val\
    \ numsArraySumLen11 = numsArraySumLen10 * numsArraySumLen\n        val numsArraySumLen12\
    \ = numsArraySumLen11 * numsArraySumLen\n        val numsArraySumLen13 = numsArraySumLen12\
    \ * numsArraySumLen\n        val numsArraySumLen14 = numsArraySumLen13 * numsArraySumLen\n\
    \        val numsArraySumLen15 = numsArraySumLen14 * numsArraySumLen\n       \
    \ val numsArraySumLen16 = numsArraySumLen15 * numsArraySumLen\n        val numsArraySumLen17\
    \ = numsArraySumLen16 * numsArraySumLen\n        val numsArraySumLen18 = numsArraySumLen17\
    \ * numsArraySumLen\n        val numsArraySumLen19 = numsArraySumLen18 * numsArraySumLen\n\
    \        val numsArraySumLen20 = numsArraySumLen19 * numsArraySumLen\n       \
    \ val numsArraySumLen21 = numsArraySumLen20 * numsArraySumLen\n        val numsArraySumLen22\
    \ = numsArraySumLen21 * numsArraySumLen\n        val numsArraySumLen23 = ", " \
    \       val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n \
    \       val sums = digits.foldLeft(Map[String, Int]())((map, digit) => {\n   \
    \         val key = digit + map.getOrElse(digit, 0)\n            map + (key ->\
    \ map.getOrElse(key, 0) + 1)\n        })\n        val result = sums.foldLeft(Map[String,\
    \ String]())((map, sum) => {\n            val key = sum + map.getOrElse(sum, 0)\n\
    \            map + (key -> map.getOrElse(key, 0).toString + key)\n        }).values.toList.sortBy(_.length).reverse.mkString\n\
    \        val result = result.substring(0, result.length - 1)\n        result",
  "        val s = N.toBinaryString\n        val l = s.length\n        val r = new\
    \ Array[String](l)\n        var i = 0\n        var j = 0\n        while (i < l)\
    \ {\n            val c = s(i)\n            if (c == '1') {\n                r(j)\
    \ = \"1\"\n                i += 1\n                j += 1\n            } else\
    \ {\n                r(j) = \"0\"\n                i += 1\n                j +=\
    \ 1\n            }\n        }\n        r.mkString", "        val binary = N.toBinaryString\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n   \
    \     val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val binary = N.toBinaryString\n        val\
    \ sum = 0\n        for(i <- binary.indices) {\n            sum += binary(i)\n\
    \        }\n        binary.reverse.foldLeft(\"\") {\n            case(acc, x)\
    \ => acc + (if (x == '1') 1 else 0)\n        }", "        val binary = N.toBinaryString\n\
    \        val result = binary.reverse.foldLeft(\"\") { (result, digit) =>\n   \
    \         val index = result.length - 1\n            if (digit == \"1\") result\
    \ + (\"0\" * (index - 1))\n            else result + (\"1\" * (index - 1))\n \
    \       }\n        result", "        val nums = N.toBinaryString\n        val\
    \ numsArray = nums.toCharArray\n        val numsArrayLen = numsArray.length\n\
    \        val numsArraySum = numsArray.foldLeft(0)((sum, digit) => sum + digit.toInt)\n\
    \        val numsArraySumString = numsArraySum.toString\n        val numsArraySumStringLen\
    \ = numsArraySumString.length\n        val numsArraySumStringLenMinusOne = numsArraySumStringLen\
    \ - 1\n        val numsArraySumStringLenMinusOneString = numsArraySumStringLen\
    \ - 1\n        val numsArraySumStringLenMinusOneStringChars = numsArraySumStringLen\
    \ - 1\n        val numsArraySumStringLenMinusOneStringCharsArray = numsArraySumStringLen\
    \ - 1\n        val numsArraySumStringLenMinusOneStringCharsArrayLen = numsArraySumStringLen\
    \ - 1\n        val numsArraySumStringLenMinusOneStringCharsArrayLenMinusOne =\
    \ numsArraySumStringLen - 1\n        val numsArraySumStringLenMinusOneStringCharsArrayLenMinusOneString\
    \ = numsArraySumStringLen - 1\n        val numsArraySumStringLenMinusOneStringCharsArrayLenMinusOneStringChars\
    \ = numsArraySumStringLen - 1\n        val numsArraySumStringLenMinusOneStringCharsArrayLenMinusOneStringCharsArray\
    \ = numsArraySumStringLen - 1\n        val numsArraySumStringLenMinusOneStringCharsArrayLenMinusOneStringCharsArrayLen\
    \ = numsArraySumStringLen - 1\n        val numsArraySumStringLenMinusOneStringCharsArrayLenMinusOneStringCharsArrayLenMinusOne\
    \ = numsArraySumStringLen - 1\n        val numsArraySumStringLenMinusOneStringCharsArrayLenMinusOneStringCharsArrayLenMinusOneString\
    \ = numsArraySumStringLen - 1\n        val numsArraySumStringLenMinusOneStringCharsArrayLenMinusOneStringCharsArrayLenMinusOneStringChars\
    \ = numsArraySumStringLen - 1\n        val numsArraySumStringLenMinusOneStringCharsArrayLenMinusOneStringCharsArrayLenMinusOneStringCharsArray\
    \ = numsArraySumStringLen - 1\n        val numsArraySumStringLenMinusOne", " \
    \       val binary = N.toBinaryString\n        val sum = 0\n        val bin =\
    \ binary.toList\n        val binary = bin.map(x => if (x == '1') 1 else 0)\n \
    \       binary.foreach(x => sum += x)\n        binary.toBinaryString", "     \
    \   val binary = N.toBinaryString\n        val binary = binary.reverse\n     \
    \   val binary = binary.dropRight(binary.length-1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n   \
    \     val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.",
  "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sum\
    \ = digits.foldLeft(0)(_ + _)\n        val binary = digits.map(x => if (x == 1)\
    \ \"1\" else \"0\").mkString\n        binary.reverse.grouped(2).map(_.toInt).sum.toString",
  "        val binary = N.toBinaryString\n        val sum = 0\n        var i = 0\n\
    \        while (i < binary.length) {\n            val c = binary.charAt(i)\n \
    \           val d = c.toInt\n            sum += d\n            i += 1\n      \
    \  }\n        val result = sum.toBinaryString\n        return result", "     \
    \   val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n     \
    \   val binary = digits.map(x => if (x.isEmpty) \"\" else x.reverse).mkString(\"\
    \")\n        val result = binary.reverse.foldLeft(\"\") {\n            (acc, x)\
    \ => acc + (if (x.isEmpty) \"\" else x.reverse)\n        }\n        return result",
  "        val binary = N.toBinaryString\n        val bin = binary.toList\n      \
    \  val binSum = bin.foldLeft(0)((sum, digit) => sum + digit.asInstanceOf[Int])\n\
    \        binSum.toString", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        for (d <- digits) {\n            sum += d.toInt\n\
    \        }\n        val binary = digits.length.toString + sum.toString\n     \
    \   binary.reverse", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = digits.foldLeft(0)((sum, digit) => sum + digit.toInt)\n   \
    \     val result = if (sum > 0) \"1\" + sum.toString else \"\"\n        result",
  "        val binary = N.toBinaryString\n        val result = binary.reverse.foldLeft(\"\
    \") {\n            (acc, x) => acc + (if (x == '1') \"1\" else \"0\") + x\n  \
    \      }\n        result", "        val s = N.toBinaryString\n        val l =\
    \ s.length\n        val result = new mutable.ListBuffer[String]()\n        val\
    \ sum = 0\n        var i = 0\n        while (i < l) {\n            val c = s(i)\n\
    \            val d = c.toInt\n            sum += d\n            i += 1\n     \
    \       if (sum > 9) {\n                result.append((sum / 10).toString)\n \
    \               sum -= (sum / 10).toInt\n            }\n        }\n        if\
    \ (sum > 0) {\n            result.append((sum / 10).toString)\n        }\n   \
    \     result.mkString", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = digits.foldLeft(0)(_ + _)\n        val result = digits.map(x\
    \ => if (x == 1) \"1\" else x.toString.reverse).mkString\n        val result =\
    \ if (sum == 0) \"0\" else result\n        result", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.map(_.toInt)\n        val result = sums.foldLeft(\"\
    \")(_ + _)\n        result + (if (sums.sum == 0) \"\" else \"\")", "        val\
    \ digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n        val\
    \ binary = digits.foldLeft(\"\") { (acc, digit) =>\n            acc + (if (digit.length\
    \ > 1) \"1\" + digit else \"0\" + digit)\n        }\n        binary.reverse",
  "        val s = N.toBinaryString\n        val m = s.toLong\n        val l = s.length\n\
    \        val r = new Array[String](l)\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        while (i < l) {\n            if (s(i) == '1') {\n\
    \                r(j) = \"1\"\n                j++\n            } else {\n   \
    \             r(j) = \"0\"\n                j++\n            }\n            i\
    \ += 1\n        }\n        var sum = 0\n        var sum2 = 0\n        var sum3\
    \ = 0\n        var sum4 = 0\n        var sum5 = 0\n        var sum6 = 0\n    \
    \    var sum7 = 0\n        var sum8 = 0\n        var sum9 = 0\n        var sum10\
    \ = 0\n        var sum11 = 0\n        var sum12 = 0\n        var sum13 = 0\n \
    \       var sum14 = 0\n        var sum15 = 0\n        var sum16 = 0\n        var\
    \ sum17 = 0\n        var sum18 = 0\n        var sum19 = 0\n        var sum20 =\
    \ 0\n        var sum21 = 0\n        var sum22 = 0\n        var sum23 = 0\n   \
    \     var sum24 = 0\n        var sum25 = 0\n        var sum26 = 0\n        var\
    \ sum27 = 0\n        var sum28 = 0\n        var sum29 = 0\n        var sum30 =\
    \ 0\n        var sum31 = 0\n        var sum32 = 0\n        var sum33 = 0\n   \
    \     var sum34 = 0\n        var sum35 = 0\n        var sum36 = 0\n        var\
    \ sum37 = 0\n        var sum38 = 0\n        var sum39 = 0\n        var sum40 =\
    \ 0\n        var sum41 = 0\n        var sum42 = 0\n        var sum43 = 0\n   \
    \     var sum44 = 0\n        var sum45 = 0\n        var sum46 = 0\n        var\
    \ sum47 = 0\n        var sum48 = 0\n        var sum49 = 0\n        var sum50 =\
    \ 0\n        var sum51 = 0\n        var sum52 = 0\n        var sum53 = 0\n   \
    \     var sum54 = 0\n        var sum55 = 0\n        var sum56 = 0\n        var\
    \ sum57 = 0\n        var sum58 = 0\n        var sum59 = 0\n        var sum60 =\
    \ 0\n        var sum61 = 0\n        var sum62 = 0\n        var sum63 = 0\n   \
    \     var sum64 = 0\n        var sum65 = 0\n        var sum66 = 0\n        var\
    \ sum67 = 0\n        var sum68 = 0\n        var sum69 = 0\n        var sum70 =\
    \ 0\n        var sum71 = 0\n        var sum72 = 0\n        var sum73 = 0\n   \
    \     var sum74 = 0\n        var sum75 = 0\n        var sum76 = 0\n        var\
    \ sum77 = 0\n        var sum78 = 0\n        var sum79 = 0\n        var sum80 =\
    \ 0\n        var sum81 = 0\n        var sum82 = 0\n        var sum83 = 0\n   \
    \     var sum84 = 0\n        var sum85 = 0\n        var sum86 = 0\n        var\
    \ sum", "        val binary = N.toBinaryString\n        val bin = binary.toList\n\
    \        val binSum = bin.foldLeft(0)(_ + _)\n        binary.toList.foldLeft(\"\
    \")((acc, x) => acc + (if (x == '1') 1 else 0).toString + x.toString.padToLength(4,\
    \ \"0\"))", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val result = sums.foldLeft(\"\"\
    ) { (result, sum) => result + sum.toString }\n        result", "        val binary\
    \ = N.toBinaryString\n        val bin = binary.toList\n        val sum = 0\n \
    \       val result = new mutable.ListBuffer[String]\n        for(i <- 0 until\
    \ bin.length){\n            val binStr = bin(i)\n            val binStrLen = binStr.length\n\
    \            val binStrLen2 = binStrLen / 2\n            val binStrLen3 = binStrLen\
    \ / 3\n            val binStrLen4 = binStrLen / 4\n            val binStrLen5\
    \ = binStrLen / 5\n            val binStrLen6 = binStrLen / 6\n            val\
    \ binStrLen7 = binStrLen / 7\n            val binStrLen8 = binStrLen / 8\n   \
    \         val binStrLen9 = binStrLen / 9\n            val binStrLen10 = binStrLen\
    \ / 10\n            val binStrLen11 = binStrLen / 11\n            val binStrLen12\
    \ = binStrLen / 12\n            val binStrLen13 = binStrLen / 13\n           \
    \ val binStrLen14 = binStrLen / 14\n            val binStrLen15 = binStrLen /\
    \ 15\n            val binStrLen16 = binStrLen / 16\n            val binStrLen17\
    \ = binStrLen / 17\n            val binStrLen18 = binStrLen / 18\n           \
    \ val binStrLen19 = binStrLen / 19\n            val binStrLen20 = binStrLen /\
    \ 20\n            val binStrLen21 = binStrLen / 21\n            val binStrLen22\
    \ = binStrLen / 22\n            val binStrLen23 = binStrLen / 23\n           \
    \ val binStrLen24 = binStrLen / 24\n            val binStrLen25 = binStrLen /\
    \ 25\n            val binStrLen26 = binStrLen / 26\n            val binStrLen27\
    \ = binStrLen / 27\n            val binStrLen28 = binStrLen / 28\n           \
    \ val binStrLen29 = binStrLen / 29\n            val binStrLen30 = binStrLen /\
    \ 30\n            val binStrLen31 = binStrLen / 31\n            val binStrLen32\
    \ = binStrLen / 32\n            val binStrLen33 = binStrLen / 33\n           \
    \ val binStrLen34 = binStrLen / 34\n            val binStrLen35 = binStrLen /\
    \ 35\n            val binStrLen36 = binStrLen / 36\n            val binStrLen37",
  "        var sum = 0\n        var binary = \"\"\n        var remainder = 0\n   \
    \     var remainder2 = 0\n        var remainder3 = 0\n        var remainder4 =\
    \ 0\n        var remainder5 = 0\n        var remainder6 = 0\n        var remainder7\
    \ = 0\n        var remainder8 = 0\n        var remainder9 = 0\n        var remainder10\
    \ = 0\n        var remainder11 = 0\n        var remainder12 = 0\n        var remainder13\
    \ = 0\n        var remainder14 = 0\n        var remainder15 = 0\n        var remainder16\
    \ = 0\n        var remainder17 = 0\n        var remainder18 = 0\n        var remainder19\
    \ = 0\n        var remainder20 = 0\n        var remainder21 = 0\n        var remainder22\
    \ = 0\n        var remainder23 = 0\n        var remainder24 = 0\n        var remainder25\
    \ = 0\n        var remainder26 = 0\n        var remainder27 = 0\n        var remainder28\
    \ = 0\n        var remainder29 = 0\n        var remainder30 = 0\n        var remainder31\
    \ = 0\n        var remainder32 = 0\n        var remainder33 = 0\n        var remainder34\
    \ = 0\n        var remainder35 = 0\n        var remainder36 = 0\n        var remainder37\
    \ = 0\n        var remainder38 = 0\n        var remainder39 = 0\n        var remainder40\
    \ = 0\n        var remainder41 = 0\n        var remainder42 = 0\n        var remainder43\
    \ = 0\n        var remainder44 = 0\n        var remainder45 = 0\n        var remainder46\
    \ = 0\n        var remainder47 = 0\n        var remainder48 = 0\n        var remainder49\
    \ = 0\n        var remainder50 = 0\n        var remainder51 = 0\n        var remainder52\
    \ = 0\n        var remainder53 = 0\n        var remainder54 = 0\n        var remainder55\
    \ = 0\n        var remainder56 = 0\n        var remainder57 = 0\n        var remainder58\
    \ = 0\n        var remainder59 = 0\n        var remainder60 = 0\n        var remainder61\
    \ = 0\n        var remainder62 = 0\n        var remainder63 = 0\n        var remainder64\
    \ = 0\n        var remainder65 = 0\n        var remainder66 = 0\n        var remainder67\
    \ = 0\n        var remainder68 = 0\n        var remainder69 = 0\n        var remainder70\
    \ = 0\n        var remainder71 = 0\n        var remainder72 = 0\n        var remainder73\
    \ = 0\n        var remainder74 = 0\n        var remainder75 = 0\n        var remainder76\
    \ = 0\n        var remainder77 = 0\n        var remainder78 = 0\n        var remainder79\
    \ = 0\n        var remainder80 = 0\n        var remainder81 = 0\n        var remainder82\
    \ = 0\n        var remainder83 = 0\n        var remainder84 = 0\n", "        val\
    \ digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sums = digits.map(_.sum)\n\
    \        val result = sums.foldLeft(\"\")(_ + _)\n        result", "        val\
    \ digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n        val\
    \ sums = digits.map(_.toInt)\n        val sum = sums.sum\n        val binary =\
    \ digits.map(_.toBinaryString).mkString(\"\")\n        val result = if (sum ==\
    \ 0) \"0\" else binary.padTo(sum, \"\")\n        result", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropWhile(_ == '0').reverse\n        val binary = binary.takeWhile(_\
    \ == '1').reverse\n        binary.mkString", "        val binary = N.toBinaryString\n\
    \        val result = binary.reverse.foldLeft(\"\") {\n            (result, digit)\
    \ => result + digit\n        }\n        return result", "        val binary =\
    \ N.toBinaryString\n        val sum = 0\n        val binary = binary.reverse\n\
    \        binary.foreach(x => {\n            sum += x.toInt\n        })\n     \
    \   binary.reverse", "        val binary = N.toBinaryString\n        val sum =\
    \ 0\n        for(i <- 0 until binary.length) sum += binary(i).toInt\n        binary.reverse.foldLeft(\"\
    \")(_ + _ + _)", "        var sum = 0\n        var binary = \"\"\n        var\
    \ remainder = 0\n        var lastDigit = 0\n        var lastDigitCount = 0\n \
    \       var lastDigitCount2 = 0\n        var lastDigitCount3 = 0\n        var\
    \ lastDigitCount4 = 0\n        var lastDigitCount5 = 0\n        var lastDigitCount6\
    \ = 0\n        var lastDigitCount7 = 0\n        var lastDigitCount8 = 0\n    \
    \    var lastDigitCount9 = 0\n        var lastDigitCount10 = 0\n        var lastDigitCount11\
    \ = 0\n        var lastDigitCount12 = 0\n        var lastDigitCount13 = 0\n  \
    \      var lastDigitCount14 = 0\n        var lastDigitCount15 = 0\n        var\
    \ lastDigitCount16 = 0\n        var lastDigitCount17 = 0\n        var lastDigitCount18\
    \ = 0\n        var lastDigitCount19 = 0\n        var lastDigitCount20 = 0\n  \
    \      var lastDigitCount21 = 0\n        var lastDigitCount22 = 0\n        var\
    \ lastDigitCount23 = 0\n        var lastDigitCount24 = 0\n        var lastDigitCount25\
    \ = 0\n        var lastDigitCount26 = 0\n        var lastDigitCount27 = 0\n  \
    \      var lastDigitCount28 = 0\n        var lastDigitCount29 = 0\n        var\
    \ lastDigitCount30 = 0\n        var lastDigitCount31 = 0\n        var lastDigitCount32\
    \ = 0\n        var lastDigitCount33 = 0\n        var lastDigitCount34 = 0\n  \
    \      var lastDigitCount35 = 0\n        var lastDigitCount36 = 0\n        var\
    \ lastDigitCount37 = 0\n        var lastDigitCount38 = 0\n        var lastDigitCount39\
    \ = 0\n        var lastDigitCount40 = 0\n        var lastDigitCount41 = 0\n  \
    \      var lastDigitCount42 = 0\n        var lastDigitCount43 = 0\n        var\
    \ lastDigitCount44 = 0\n        var lastDigitCount45 = 0\n        var lastDigitCount46\
    \ = 0\n        var lastDigitCount47 = 0\n        var lastDigitCount48 = 0\n  \
    \      var lastDigitCount49 = 0\n        var lastDigitCount50 = 0\n        var\
    \ lastDigitCount51 = 0\n        var lastDigitCount52 = 0\n        var lastDigitCount53\
    \ = 0\n        var lastDigitCount54 = 0\n        var lastDigitCount55 = 0\n  \
    \      var lastDigitCount56 = 0\n        var lastDigitCount57 = 0\n        var\
    \ lastDigitCount58 = 0\n        var lastDigitCount59 = 0\n        var lastDigitCount60\
    \ = 0\n        var lastDigitCount61 = 0\n        var lastDigitCount62 = 0\n  \
    \      var lastDigitCount63 = 0\n        var lastDigitCount64 = 0\n        var\
    \ lastDigitCount65 = 0\n        var lastDigitCount66 = 0\n        var lastDigitCount67\
    \ = 0\n        var lastDigitCount68 = 0\n        var lastDigitCount69 = 0\n  \
    \      var lastDigitCount70 = 0\n        var lastDigitCount", "        val s =\
    \ N.toBinaryString\n        val l = s.length\n        val result = new mutable.ListBuffer[String]()\n\
    \        val m = s.reverse.indexOf(\"1\")\n        val n = s.reverse.indexOf(\"\
    0\")\n        val x = s.reverse.indexOf(\"10\")\n        val y = s.reverse.indexOf(\"\
    11\")\n        val z = s.reverse.indexOf(\"100\")\n        val a = s.reverse.indexOf(\"\
    1000\")\n        val b = s.reverse.indexOf(\"10000\")\n        val c = s.reverse.indexOf(\"\
    100000\")\n        val d = s.reverse.indexOf(\"1000000\")\n        val e = s.reverse.indexOf(\"\
    10000000\")\n        val f = s.reverse.indexOf(\"100000000\")\n        val g =\
    \ s.reverse.indexOf(\"1000000000\")\n        val h = s.reverse.indexOf(\"10000000000\"\
    )\n        val i = s.reverse.indexOf(\"100000000000\")\n        val j = s.reverse.indexOf(\"\
    1000000000000\")\n        val k = s.reverse.indexOf(\"10000000000000\")\n    \
    \    val l = s.reverse.indexOf(\"100000000000000\")\n        val m = s.reverse.indexOf(\"\
    1000000000000000\")\n        val n = s.reverse.indexOf(\"10000000000000000\")\n\
    \        val o = s.reverse.indexOf(\"100000000000000000\")\n        val p = s.reverse.indexOf(\"\
    1000000000000000000\")\n        val q = s.reverse.indexOf(\"10000000000000000000\"\
    )\n        val r = s.reverse.indexOf(\"100000000000000000000\")\n        val s\
    \ = s.reverse.indexOf(\"1000000000000000000000\")\n        val t = s.reverse.indexOf(\"\
    10000000000000000000000\")\n        val u = s.reverse.indexOf(\"100000000000000000000000\"\
    )\n        val v = s.reverse.indexOf(\"1000000000000000000000000\")\n        val\
    \ w = s.reverse.indexOf(\"10000000000000000000000000\")\n        val x = s.reverse.indexOf(\"\
    10000000000000000000000000000000000\")\n        val y = s.reverse.indexOf(\"100000000000000000000000000000000000\"\
    )\n        val z = s.reverse.indexOf(\"1000000000000000000000000000000000000\"\
    )\n        val a = s.reverse.indexOf(\"10000000000000000000000000000000000000\"\
    )\n        val b = s.reverse.indexOf(\"100000000000000000000000000000000000000\"\
    )\n        val c = s.reverse.indexOf(\"1000000000000000000000000000000000000000\"\
    )\n        val d = s.reverse.indexOf(\"10000000000000000000000000000000000000000\"\
    )\n        val e = s.reverse.indexOf(\"100000000000000000000000000000000000000000\"\
    )\n        val f = s.reverse.indexOf(\"1000000000000000000000000000000000000000000\"\
    )\n        val g = s.reverse.indexOf(\"10000000000000000000000000000000000000000000\"\
    )\n        val h = s.reverse.indexOf(\"100000000000000000000000000000000000000000000\"\
    )\n        val i = s.reverse.indexOf", "        val nums = N.toBinaryString\n\
    \        val sums = nums.split(\"1\").map(_.toInt).sum\n        val result = nums.reverse.takeWhile(_\
    \ != '0').mkString(\"\")\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mkString(\"\
    \") + result\n        val result = nums.reverse.takeWhile(_ != '0').mk", "   \
    \     val binary = N.toBinaryString\n        val binary = binary.reverse\n   \
    \     val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val binary = N.toBinaryString\n\
    \        val binary = binary.reverse\n        val binary = binary.dropWhile(_\
    \ == '0')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(_\
    \ == '1')\n        binary.reverse", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.map(_.toInt).sum\n        val result = sums.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        result", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.foldLeft(Map[String, Int]())((m, d) => m + (d -> (m.getOrElse(d,\
    \ 0) + d.toInt)))\n        val result = sums.filter(_._2 > 0).map(_._1).mkString\n\
    \        result", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val result = mutable.StringBuilder()\n        val n = digits.length\n\
    \        digits.foreach(x => result.append(x.reverse))\n        result.toString",
  "        val binary = N.toBinaryString\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val binary = N.toBinaryString\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)",
  "        val binary = N.toBinaryString\n        val result = binary.reverse.foldLeft(\"\
    \") {\n            (res, digit) => res + digit\n        }\n        binary.reverse.foldLeft(\"\
    \") {\n            (res, digit) => res + digit\n        }", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- binary.indices) {\n            sum += binary.charAt(i)\n\
    \        }\n        binary.reverse.foldLeft(\"\") {\n            (a,b) => a +\
    \ b\n        }", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val sumsString = sums.mkString(\"\
    \")\n        val result = sumsString.reverse.grouped(2).map(_.mkString(\"\")).mkString(\"\
    \")\n        result", "        val binary = N.toBinaryString\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)", "        val binary\
    \ = N.toBinaryString\n        val bin = binary.toList\n        val binSum = bin.foldLeft(0)(_\
    \ + _)\n        binSum.toString", "        val binary = N.toBinaryString\n   \
    \     val binary = binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse", "        var sum = 0\n        var binary = \"\"\n       \
    \ var remainder = N\n        while (remainder > 0) {\n            sum += remainder\
    \ % 2\n            binary = remainder + binary\n            remainder = remainder\
    \ / 2\n        }\n        binary = binary + sum.toString\n        return binary",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0\
    \ until binary.length){\n            sum += binary(i).toLong\n        }\n    \
    \    sum.toString", "        val binary = N.toBinaryString\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n   \
    \     val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = bin", "        val nums = N.toBinaryString\n        val\
    \ sums = nums.split(\"1\").map(_.toInt).sum\n        val bins = nums.split(\"\
    1\").map(_.toInt).map(_.toBinaryString).mkString(\"0\")\n        bins.padTo(nums.length,\
    \ \"0\") + (sums.toBinaryString).padTo(nums.length, \"0\")", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropWhile(_ == '0').reverse\n        val binary = binary.dropWhile(_\
    \ == '1').reverse\n        binary.reverse", "        val binary = N.toBinaryString\n\
    \        val binary = binary.reverse\n        val binary = binary.dropWhile(_\
    \ == '0').reverse\n        val binary = binary.dropWhile(_ == '1').reverse\n \
    \       binary.reverse", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sums = digits.foldLeft(new mutable.HashMap[Int, Int]()) { (acc, digit)\
    \ =>\n            acc + (digit._1 -> (acc._1 + digit._2))\n        }\n       \
    \ val result = sums.foldLeft(\"\") { (acc, digit) =>\n            acc + (digit._1\
    \ -> digit._2.toString)\n        }\n        result", "        var sum = 0\n  \
    \      var binary = \"\"\n        var remainder = N\n        while (remainder\
    \ > 0) {\n            sum += remainder % 2\n            remainder = remainder\
    \ / 2\n        }\n        binary = binary(sum)\n        binary = binary(N - sum)\n\
    \        binary", "        val binary = N.toBinaryString\n        val sum = 0\n\
    \        for(i <- 0 until binary.length) sum += binary.charAt(i).toInt\n     \
    \   binary.reverse.foldLeft(\"\") {\n            case (acc, c) => acc + (if (c\
    \ == '1') 1 else 0)\n        }", "        val binary = N.toBinaryString\n    \
    \    val binary = binary.reverse\n        val binary = binary.dropRight(1)\n \
    \       val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- binary.indices)\
    \ {\n            sum += binary.charAt(i).toInt\n        }\n        binary.reverse.foldLeft(\"\
    \") {\n            (a,b) => a + b.toInt\n        }", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.map(x => if (x.isEmpty) \"\" else x.reverse).mkString(\"\
    \")\n        binary.reverse", "        val binary = N.toBinaryString\n       \
    \ val binary = binary.reverse\n        val binary = binary.dropRight(1)\n    \
    \    val binary = binary.reverse\n        val binary = binary.dropRight(1)\n \
    \       val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)",
  "        val binary = N.toBinaryString\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val bin", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.mkString).reverse\n        val sum = digits.foldLeft(0)(_\
    \ + _)\n        val binary = digits.map(_.toBinaryString).mkString\n        binary.padTo(binary.length,\
    \ 0)", "        val binary = N.toBinaryString\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val binary = digits.foldLeft(\"\") { (acc, digit) =>\n            acc\
    \ + (if (digit._1 == 0) \"0\" else digit._1.toString(2))\n        }\n        binary.reverse",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- binary.indices)\
    \ {\n            sum += binary.charAt(i).toInt\n        }\n        binary.reverse.foldLeft(\"\
    \") {\n            (a,b) => a + b.toInt\n        }", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropWhile(_ == '0').reverse\n        val binary = binary.dropWhile(_\
    \ == '1').reverse\n        val binary = binary.reverse\n        val binary = binary.dropWhile(_\
    \ == '0').reverse\n        val binary = binary.dropWhile(_ == '1').reverse\n \
    \       val binary = binary.reverse\n        val binary = binary.dropWhile(_ ==\
    \ '0').reverse\n        val binary = binary.dropWhile(_ == '1').reverse\n    \
    \    val binary = binary.reverse\n        val binary = binary.dropWhile(_ == '0').reverse\n\
    \        val binary = binary.dropWhile(_ == '1').reverse\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropWhile(_ == '0').reverse\n  \
    \      val binary = binary.dropWhile(_ == '1').reverse\n        val binary = binary.reverse\n\
    \        val binary = binary.dropWhile(_ == '0').reverse\n        val binary =\
    \ binary.dropWhile(_ == '1').reverse\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropWhile(_ == '0').reverse\n        val binary = binary.dropWhile(_\
    \ == '1').reverse\n        val binary = binary.reverse\n        val binary = binary.dropWhile(_\
    \ == '0').reverse\n        val binary = binary.dropWhile(_ == '1').reverse\n \
    \       val binary = binary.reverse\n        val binary = binary.dropWhile(_ ==\
    \ '0').reverse\n        val binary = binary.dropWhile(_ == '1').reverse\n    \
    \    val binary = binary.reverse\n        val binary = binary.dropWhile(_ == '0').reverse\n\
    \        val binary = binary.dropWhile(_ == '1').reverse\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropWhile(_ == '0').reverse\n  \
    \      val binary = binary.dropWhile(_ == '1').reverse\n        val binary = binary.reverse\n\
    \        val binary = binary.dropWhile(_ == '0').reverse\n        val binary =\
    \ binary.dropWhile(_ == '1').reverse\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropWhile(_ == '0').reverse\n        val binary = binary.dropWhile(_\
    \ == '1').reverse\n        val binary = binary.reverse\n        val binary = binary.dropWhile(_\
    \ == '0').reverse\n        val binary = binary.dropWhile(_ == '1').reverse\n \
    \       val binary = binary.reverse\n        val binary = binary.dropWhile(_ ==\
    \ '0').reverse\n        ", "        val binary = N.toBinaryString\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropWhile(_ == '0').reverse\n\
    \        val binary = binary.takeWhile(_ == '1').reverse\n        binary.mkString",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val result = mutable.StringBuilder()\n        val digitCount = digits.count(_\
    \ != \"\")\n        val digitSum = digits.sum\n        val digitSumInBinary =\
    \ digitSum.toBinaryString\n        val digitSumInBinaryLength = digitSumInBinary.length\n\
    \        val digitSumInBinaryDigitCount = digitSumInBinaryLength / 2\n       \
    \ val digitSumInBinaryDigits = digitSumInBinary.substring(digitSumInBinaryDigitCount\
    \ * 2, digitSumInBinaryDigitCount * 2 + digitSumInBinaryDigitCount)\n        val\
    \ digitSumInBinaryDigitCount = digitSumInBinaryDigits.length\n        val digitSumInBinaryDigits\
    \ = digitSumInBinary.substring(digitSumInBinaryDigitCount * 2, digitSumInBinaryDigitCount\
    \ * 2 + digitSumInBinaryDigitCount)\n        val digitSumInBinaryDigitCount =\
    \ digitSumInBinaryDigits.length\n        val digitSumInBinaryDigits = digitSumInBinary.substring(digitSumInBinaryDigitCount\
    \ * 2, digitSumInBinaryDigitCount * 2 + digitSumInBinaryDigitCount)\n        val\
    \ digitSumInBinaryDigitCount = digitSumInBinaryDigits.length\n        val digitSumInBinaryDigits\
    \ = digitSumInBinary.substring(digitSumInBinaryDigitCount * 2, digitSumInBinaryDigitCount\
    \ * 2 + digitSumInBinaryDigitCount)\n        val digitSumInBinaryDigitCount =\
    \ digitSumInBinaryDigits.length\n        val digitSumInBinaryDigits = digitSumInBinary.substring(digitSumInBinaryDigitCount\
    \ * 2, digitSumInBinaryDigitCount * 2 + digitSumInBinaryDigitCount)\n        val\
    \ digitSumInBinaryDigitCount = digitSumInBinaryDigits.length\n        val digitSumInBinaryDigits\
    \ = digitSumInBinary.substring(digitSumInBinaryDigitCount * 2, digitSumInBinaryDigitCount\
    \ * 2 + digitSumInBinaryDigitCount)\n        val digitSumInBinaryDigitCount =\
    \ digitSumInBinaryDigits.length\n        val digitSumInBinaryDigits = digitSumInBinary.substring(digitSumInBinaryDigitCount\
    \ * 2, digitSumInBinaryDigitCount * 2 + digitSumInBinaryDigitCount)\n        val\
    \ digitSumInBinaryDigitCount = digitSumInBinaryDigits.length\n        val digitSumInBinaryDigits\
    \ = digitSumInBinary.substring(digitSumInBinaryDigitCount * 2, digitSumInBinaryDigitCount\
    \ * 2 + digitSumInBinaryDigitCount)\n        val digitSumInBinaryDigitCount =\
    \ digitSumInBinaryDigit", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        digits.foreach(x => sum += x)\n        val result\
    \ = sum.toString.reverse.grouped(2).map(_.toInt).mkString\n        result", " \
    \       val binary = N.toBinaryString\n        val bins = binary.split(\"0\")\n\
    \        val sum = 0\n        bins.foreach(x => sum += x.toInt)\n        bins.toList.map(x\
    \ => x.toString + x.toString.reverse).mkString(\"\")", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val bin = binary.toList\n        bin.foreach(x =>\
    \ sum += x)\n        binary.toString.reverse.foldLeft(binary.toString.reverse.tail.foldLeft(binary.toString.reverse.tail.head)(_\
    \ + _))((x, y) => x + y)", "        val s = N.toBinaryString\n        val l =\
    \ s.length\n        val result = new mutable.ListBuffer[String]\n        var i\
    \ = 0\n        while (i < l) {\n            val c = s(i)\n            if (c ==\
    \ '1') {\n                result.add(\"1\")\n            } else {\n          \
    \      result.add(\"0\")\n            }\n            i += 1\n        }\n     \
    \   result.toString", "        val s = N.toBinaryString\n        val l = s.length\n\
    \        val r = s.reverse\n        val m = r.length\n        val d = r.drop(m)\n\
    \        val a = d.toInt\n        val b = d.take(m)\n        val c = b.toBinaryString\n\
    \        val d = c.reverse\n        val e = d.toInt\n        val f = d.take(m)\n\
    \        val g = f.toBinaryString\n        val h = g.reverse\n        val i =\
    \ h.toInt\n        val j = h.take(m)\n        val k = i.toBinaryString\n     \
    \   val l = j.reverse\n        val m = l.toInt\n        val n = l.take(m)\n  \
    \      val o = n.toBinaryString\n        val p = o.reverse\n        val q = p.toInt\n\
    \        val r = p.take(m)\n        val s = r.toBinaryString\n        val t =\
    \ s.reverse\n        val u = t.toInt\n        val v = t.take(m)\n        val w\
    \ = u.toBinaryString\n        val x = w.reverse\n        val y = x.toInt\n   \
    \     val z = x.take(m)\n        val a = z.toBinaryString\n        val b = y.reverse\n\
    \        val c = b.toInt\n        val d = b.take(m)\n        val e = c.toBinaryString\n\
    \        val f = d.reverse\n        val g = f.toInt\n        val h = f.take(m)\n\
    \        val i = g.toBinaryString\n        val j = h.reverse\n        val k =\
    \ j.toInt\n        val l = j.take(m)\n        val m = l.toBinaryString\n     \
    \   val n = m.reverse\n        val o = n.toInt\n        val p = n.take(m)\n  \
    \      val q = p.toBinaryString\n        val r = q.reverse\n        val s = r.toInt\n\
    \        val t = r.take(m)\n        val u = t.toBinaryString\n        val v =\
    \ u.take(m)\n        val w = v.toInt\n        val x = w.reverse\n        val y\
    \ = x.toInt\n        val z = x.take(m)\n        val a = z.toBinaryString\n   \
    \     val b = y.reverse\n        val c = b.toInt\n        val d = b.take(m)\n\
    \        val e = c.toBinaryString\n        val f = d.reverse\n        val g =\
    \ f.toInt\n        val h = f.take(m)\n        val i = g.toBinaryString\n     \
    \   val j = h.reverse\n        val k = j.toInt\n        val l = j.take(m)\n  \
    \      val m = l.toBinaryString\n        val n = m.reverse\n", "        val binary\
    \ = N.toBinaryString\n        val bin = binary.toList\n        val sum = 0\n \
    \       val binSum = bin.map(x => sum + x.toInt)\n        val binSumString = binSum.mkString(\"\
    \")\n        binSumString", "        val binary = N.toBinaryString\n        val\
    \ binary = binary.dropRight(binary.length-1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n   \
    \     val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val binary = N.toBinaryString\n        val\
    \ result = binary.reverse.foldLeft(\"\") {\n            (acc, x) => acc + (if\
    \ (x == '1') \"1\" else \"0\") + x\n        }\n        result", "        var sum\
    \ = 0\n        var binary = \"\"\n        while(N /= 10) {\n            sum +=\
    \ N % 10\n            N /= 10\n        }\n        while(sum > 0) {\n         \
    \   binary += (sum % 2 == 0 ? \"1\" : \"0\")\n            sum /= 2\n        }\n\
    \        binary", "        val binary = N.toBinaryString\n        val binary =\
    \ binary.dropRight(1)\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n   \
    \     val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val bin", "        val binary = N.toBinaryString\n        val binary\
    \ = binary.reverse\n        val sum = 0\n        var i = 0\n        while (i <\
    \ binary.length) {\n            val c = binary(i)\n            val d = c.toInt\n\
    \            sum += d\n            i += 1\n        }\n        binary.reverse",
  "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sum\
    \ = digits.foldLeft(0)(_ + _)\n        val result = digits.map(x => if (x == 1)\
    \ \"1\" else x.toString.reverse.take(x.length).reverse.toInt).mkString(\"\")\n\
    \        val result = if (sum == 0) \"0\" else result\n        result + sum.toString",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val result = mutable.ListBuffer[String]()\n        val sum = 0\n      \
    \  for (i <- 0 until digits.length) {\n            val digit = digits(i)\n   \
    \         val bin = digit.charAt(0).toString + digit.charAt(1).toString\n    \
    \        sum += bin.charAt(0).toInt * Math.pow(2,bin.length-1)\n        }\n  \
    \      result += sum.toString\n        result.toString", "        val digits =\
    \ N.toString.reverse.grouped(2).map(_.mkString).reverse\n        val sums = digits.foldLeft(mutable.HashMap[Int,\
    \ Int]())((sums, digit) => {\n            val sum = sums.get(digit.getOrElse(0)).getOrElse(0)\
    \ + digit.getOrElse(1)\n            sums.put(digit.getOrElse(0), sum)\n      \
    \      sums\n        })\n        val result = sums.foldLeft(\"\")(_ + _)\n   \
    \     result + sums.values.sum.toString", "        val binary = N.toBinaryString\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)",
  "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sums\
    \ = digits.foldLeft(0)((sum, digit) => sum + digit)\n        val result = sums.toBinaryString\n\
    \        val length = result.length\n        val result = result.substring(0,\
    \ length / 2)\n        val result = result + result.substring(length - length\
    \ / 2)\n        result", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.foldLeft(\"\")(_ + _)\n        binary.reverse", " \
    \       val binary = N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            sum\
    \ += binary(i).toInt\n        }\n        binary.reverse.mkString", "        val\
    \ binary = N.toBinaryString\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)", "        var sum = 0\n        var binary = \"\
    \"\n        while(N !=0){\n            sum = sum + N % 2\n            N = N /\
    \ 2\n        }\n        while(sum > 0){\n            binary = binary + sum % 2\n\
    \            sum = sum / 2\n        }\n        return binary", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.toInt)\n        val sums = digits.foldLeft(Map[Int,\
    \ Int]())((m, d) => m + (d -> (m.getOrElse(d, 0) + d.toInt)))\n        val binary\
    \ = sums.map{case (d, n) => d.toString + n.toString.reverse}.mkString\n      \
    \  binary.reverse", "        val binary = N.toBinaryString\n        val result\
    \ = binary.reverse.foldLeft(\"\") { (result, digit) =>\n            val index\
    \ = result.length - 1\n            if (digit == \"1\") {\n                result\
    \ + result.toCharArray\n            } else {\n                val newResult =\
    \ result.substring(0, index) + result.toCharArray\n                val newDigit\
    \ = digit.toCharArray\n                newResult + newDigit\n            }\n \
    \       }\n        result", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.map(_.toInt)\n        val sumsString = sums.mkString(\"\
    \")\n        val result = sumsString.takeWhile(_ != \"0\").mkString(\"\")\n  \
    \      result", "        val binary = N.toBinaryString\n        val bin = binary.toList\n\
    \        val binSum = bin.foldLeft(0)(_ + _)\n        val binSumStr = binSum.toBinaryString\n\
    \        val binSumStrLen = binSumStr.length\n        val binSumStrLenMinusOne\
    \ = binSumStrLen - 1\n        val binSumStrLenMinusOneBin = binSumStrLen - 2\n\
    \        val binSumStrLenMinusOneBinBin = binSumStrLen - 3\n        val binSumStrLenMinusOneBinBinBin\
    \ = binSumStrLen - 4\n        val binSumStrLenMinusOneBinBinBinBin = binSumStrLen\
    \ - 5\n        val binSumStrLenMinusOneBinBinBinBinBin = binSumStrLen - 6\n  \
    \      val binSumStrLenMinusOneBinBinBinBinBinBin = binSumStrLen - 7\n       \
    \ val binSumStrLenMinusOneBinBinBinBinBinBinBin = binSumStrLen - 8\n        val\
    \ binSumStrLenMinusOneBinBinBinBinBinBinBinBin = binSumStrLen - 9\n        val\
    \ binSumStrLenMinusOneBinBinBinBinBinBinBinBinBin = binSumStrLen - 10\n      \
    \  val binSumStrLenMinusOneBinBinBinBinBinBinBinBinBinBin = binSumStrLen - 11\n\
    \        val binSumStrLenMinusOneBinBinBinBinBinBinBinBinBinBinBin = binSumStrLen\
    \ - 12\n        val binSumStrLenMinusOneBinBinBinBinBinBinBinBinBinBinBin = binSumStrLen\
    \ - 13\n        val binSumStrLenMinusOneBinBinBinBinBinBinBinBinBinBinBinBin =\
    \ binSumStrLen - 14\n        val binSumStrLenMinusOneBinBinBinBinBinBinBinBinBinBinBinBin\
    \ = binSumStrLen - 15\n        val binSumStrLenMinusOneBinBinBinBinBinBinBinBinBinBinBinBinBin\
    \ = binSumStrLen - 16\n        val binSumStrLenMinusOneBinBinBinBinBinBinBinBinBinBinBinBinBin\
    \ = binSumStrLen - 17\n        val binSumStrLenMinusOneBinBinBinBinBinBinBinBinBinBinBinBinBinBin\
    \ = binSumStrLen - 18\n        val binSumStrLenMinus", "        var sum = 0\n\
    \        var binary = \"\"\n        var remainder = 0\n        var remainder2\
    \ = N\n        while(remainder2 > 0) {\n            sum += (remainder2 % 2)\n\
    \            remainder2 = (remainder2 / 2)\n        }\n        while(sum > 0)\
    \ {\n            binary += (sum % 2)\n            sum = (sum / 2)\n        }\n\
    \        binary", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        for (i <- 0 until digits.length) sum += digits(i).toLong\n\
    \        sum.toString", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        for (i <- 0 until digits.length) {\n           \
    \ sum += digits(i).toLong\n        }\n        sum.toString", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.mkString).reverse\n        val sum = 0\n\
    \        val binary = new mutable.ListBuffer[String]()\n        digits.foreach(x\
    \ => {\n            val y = x.toInt\n            val z = math.pow(10, y.toInt)\n\
    \            val bin = math.pow(10, y.toInt)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)\n            val binary = binary.filter(_\
    \ != x).filter(_ != y).filter(_ != z)", "        val binary = N.toBinaryString\n\
    \        val binary = binary.reverse\n        val sum = 0\n        val result\
    \ = new StringBuilder\n        for(i <- 0 until binary.length){\n            val\
    \ digit = binary.charAt(i)\n            sum += digit.toInt\n            if(sum\
    \ > 9){\n                result.append((sum % 10).toString)\n                sum\
    \ = 0\n            }\n        }\n        if(sum > 0){\n            result.append((sum\
    \ % 10).toString)\n        }\n        return result.toString", "        val s\
    \ = N.toBinaryString\n        val l = s.length\n        val m = l / 2\n      \
    \  val r = s.substring(m, l)\n        val x = s.substring(0, m)\n        val y\
    \ = x.reverse\n        val z = y.reverse\n        val w = z.reverse\n        val\
    \ a = w.reverse\n        val b = a.reverse\n        val c = b.reverse\n      \
    \  val d = c.reverse\n        val e = d.reverse\n        val f = e.reverse\n \
    \       val g = f.reverse\n        val h = g.reverse\n        val i = h.reverse\n\
    \        val j = i.reverse\n        val k = j.reverse\n        val l = k.reverse\n\
    \        val m = l.reverse\n        val n = m.reverse\n        val o = n.reverse\n\
    \        val p = o.reverse\n        val q = p.reverse\n        val r = q.reverse\n\
    \        val s = r.reverse\n        val t = s.reverse\n        val u = t.reverse\n\
    \        val v = u.reverse\n        val w = v.reverse\n        val x = w.reverse\n\
    \        val y = x.reverse\n        val z = y.reverse\n        val a = z.reverse\n\
    \        val b = a.reverse\n        val c = b.reverse\n        val d = c.reverse\n\
    \        val e = d.reverse\n        val f = e.reverse\n        val g = f.reverse\n\
    \        val h = g.reverse\n        val i = h.reverse\n        val j = i.reverse\n\
    \        val k = j.reverse\n        val l = k.reverse\n        val m = l.reverse\n\
    \        val n = m.reverse\n        val o = n.reverse\n        val p = o.reverse\n\
    \        val q = p.reverse\n        val r = q.reverse\n        val s = r.reverse\n\
    \        val t = s.reverse\n        val u = t.reverse\n        val v = u.reverse\n\
    \        val w = v.reverse\n        val x = w.reverse\n        val y = x.reverse\n\
    \        val z = y.reverse\n        val a = z.reverse\n        val b = a.reverse\n\
    \        val c = b.reverse\n        val d = c.reverse\n        val e = d.reverse\n\
    \        val f = e.reverse\n        val g = f.reverse\n        val h = g.reverse\n\
    \        val i = h.reverse\n        val j = i.reverse\n        val k = j.reverse\n\
    \        val l = k.reverse\n        val m = l.reverse\n        val n = m.reverse\n\
    \        val o = n.reverse\n        val p = o.reverse\n        val q = p.reverse\n\
    \        val r = q.reverse\n        val s = r.reverse\n        val t = s.reverse\n\
    \        val u = t.reverse\n        val v = u.reverse\n        val w = v.reverse\n\
    \        val x = w.reverse\n        val y = ", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.foldLeft(\"\") {\n            (acc, digit) => acc\
    \ + digit.charAt(0) + \"0\"\n        }\n        binary.reverse", "        val\
    \ binary = N.toBinaryString\n        val sum = 0\n        val binary = binary.reverse\n\
    \        val binary = binary.dropWhile(x => x != '0')\n        val binary = binary.takeWhile(x\
    \ => x != '1')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '0')\n        val binary = binary.takeWhile(x => x != '1')\n       \
    \ val binary = binary.reverse\n        val binary = binary.dropWhile(x => x !=\
    \ '0')\n        val binary = binary.takeWhile(x => x != '1')\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropWhile(x => x != '0')\n   \
    \     val binary = binary.takeWhile(x => x != '1')\n        val binary = binary.reverse\n\
    \        val binary = binary.dropWhile(x => x != '0')\n        val binary = binary.takeWhile(x\
    \ => x != '1')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '0')\n        val binary = binary.takeWhile(x => x != '1')\n       \
    \ val binary = binary.reverse\n        val binary = binary.dropWhile(x => x !=\
    \ '0')\n        val binary = binary.takeWhile(x => x != '1')\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropWhile(x => x != '0')\n   \
    \     val binary = binary.takeWhile(x => x != '1')\n        val binary = binary.reverse\n\
    \        val binary = binary.dropWhile(x => x != '0')\n        val binary = binary.takeWhile(x\
    \ => x != '1')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '0')\n        val binary = binary.takeWhile(x => x != '1')\n       \
    \ val binary = binary.reverse\n        val binary = binary.dropWhile(x => x !=\
    \ '0')\n        val binary = binary.takeWhile(x => x != '1')\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropWhile(x => x != '0')\n   \
    \     val binary = binary.takeWhile(x => x != '1')\n        val binary = binary.reverse\n\
    \        val binary = binary.dropWhile(x => x != '0')\n        val binary = binary.takeWhile(x\
    \ => x != '1')\n        val binary = ", "        val binary = N.toBinaryString\n\
    \        val binary = binary.reverse\n        val binary = binary.dropWhile(_\
    \ == '0')\n        val binary = binary.takeWhile(_ == '1').reverse\n        binary.reverse",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val sums = digits.map(_.toInt).sum\n        val result = sums.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        result", "        val binary = N.toBinaryString\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.reverse\n   \
    \     val binary = binary.dropRight(binary.length-1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n   \
    \     val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val binary = N.toBinaryString\n        val\
    \ bins = binary.toList\n        val sum = 0\n        bins.foreach(x => sum +=\
    \ x.toInt)\n        bins.toList.map(x => x.toBinaryString).mkString(\"\")", " \
    \       val binary = N.toBinaryString\n        val bin = binary.toList\n     \
    \   val binSum = bin.foldLeft(0)((sum, digit) => sum + digit.toInt)\n        val\
    \ binSumStr = binSum.toBinaryString\n        binSumStr.substring(0, binSumStr.length\
    \ - binSumStr.length % 2)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        for (i <- 0 until digits.length) sum += digits(i).toLong\n\
    \        sum.toString", "        val binary = N.toBinaryString\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n   \
    \     val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val bin", "        val binary = N.toBinaryString\n        val sum = 0\n\
    \        for(i <- 0 to binary.length-1){\n            sum += binary.charAt(i).toInt\n\
    \        }\n        binary.reverse\n        binary.dropRight(sum).reverse", " \
    \       val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n \
    \       val sum = digits.foldLeft(0)(_ + _)\n        val result = digits.map(x\
    \ => if (x == 1) \"1\" else x.toString.reverse).mkString\n        val result =\
    \ if (sum > 9) result + result.substring(0, result.length - 1) else result\n \
    \       val result = if (sum < 10) result + \"0\" + result else result\n     \
    \   result", "        val binary = N.toBinaryString\n        val binary = binary.reverse\n\
    \        val binary = binary.dropWhile(_ == '0')\n        val binary = binary.takeWhile(_\
    \ == '1')\n        binary.reverse", "        val binary = N.toBinaryString\n \
    \       val binary = binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)", "        val binary\
    \ = N.toBinaryString\n        val result = binary.reverse.foldLeft(\"\") {\n \
    \           case (acc, x) => acc + (if (x == '1') \"1\" else \"0\") + x\n    \
    \    }\n        result", "        var sum = 0\n        var binary = \"\"\n   \
    \     while(N /= 10) {\n            sum += N % 10\n            N = (N / 10).toLong\n\
    \        }\n        while(sum > 0) {\n            binary += sum % 2\n        \
    \    sum = (sum / 2).toLong\n        }\n        binary", "        val binary =\
    \ N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n \
    \       val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val binary = N.toBinaryString\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)", "      \
    \  val binary = N.toBinaryString\n        val sum = 0\n        val bin = binary.toList\n\
    \        val bin2 = bin.map(x => if (x == '1') 1 else 0)\n        val bin3 = bin2.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin4 = bin3.map(x => if (x == '1') 1\
    \ else 0)\n        val bin5 = bin4.map(x => if (x == '1') 1 else 0)\n        val\
    \ bin6 = bin5.map(x => if (x == '1') 1 else 0)\n        val bin7 = bin6.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin8 = bin7.map(x => if (x == '1') 1\
    \ else 0)\n        val bin9 = bin8.map(x => if (x == '1') 1 else 0)\n        val\
    \ bin10 = bin9.map(x => if (x == '1') 1 else 0)\n        val bin11 = bin10.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin12 = bin11.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin13 = bin12.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin14 = bin13.map(x => if (x == '1') 1 else 0)\n        val bin15 = bin14.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin16 = bin15.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin17 = bin16.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin18 = bin17.map(x => if (x == '1') 1 else 0)\n        val bin19 = bin18.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin20 = bin19.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin21 = bin20.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin22 = bin21.map(x => if (x == '1') 1 else 0)\n        val bin23 = bin22.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin24 = bin23.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin25 = bin24.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin26 = bin25.map(x => if (x == '1') 1 else 0)\n        val bin27 = bin26.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin28 = bin27.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin29 = bin28.map(x => if (x == '1", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n   \
    \     val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val bin", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)", "        val binary = N.toBinaryString\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)", "      \
    \  var sum = 0\n        var binary = \"\"\n        var remainder = 0\n       \
    \ while(N !=0){\n            remainder = N % 2\n            N = N / 2\n      \
    \      sum = sum + remainder\n            binary = binary + remainder\n      \
    \  }\n        if(sum == 0){\n            binary = binary + \"0\"\n        }\n\
    \        else{\n            binary = binary + sum.toString\n        }\n      \
    \  return binary", "        val binary = N.toBinaryString\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(binary.length - 1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.dropRight(binary.",
  "        val binary = N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val binary = N.toBinaryString\n        val\
    \ digits = binary.toList\n        val sum = digits.foldLeft(0)(_ + _)\n      \
    \  val result = binary.reverse.foldLeft(\"\")(_ + _ + _)\n        result + sum.toString",
  "        val binary = N.toBinaryString\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.foldLeft(\"\") { (s, d) =>\n            s + \"0\"\
    \ * (d.length + 1) + d\n        }\n        binary.reverse", "        val binary\
    \ = N.toBinaryString\n        val bin = binary.toList\n        val binSum = bin.foldLeft(0)((sum,\
    \ digit) => sum + digit.toInt)\n        val binSumString = binSum.toBinaryString\n\
    \        binSumString.reverse", "        val binary = N.toBinaryString\n     \
    \   val bin = binary.toList\n        val sum = 0\n        val binSum = bin.foldLeft(0)((sum,\
    \ digit) => sum + digit.toInt)\n        val binSumStr = binSum.toString\n    \
    \    val binSumStrLen = binSumStr.length\n        val binSumStrLenLen = binSumStrLen\
    \ + 1\n        val binSumStrLenLenLen = binSumStrLenLen + 1\n        val binSumStrLenLenLenLen\
    \ = binSumStrLenLenLen + 1\n        val binSumStrLenLenLenLenLen = binSumStrLenLenLenLen\
    \ + 1\n        val binSumStrLenLenLenLenLenLen = binSumStrLenLenLenLenLen + 1\n\
    \        val binSumStrLenLenLenLenLenLenLen = binSumStrLenLenLenLenLenLen + 1\n\
    \        val binSumStrLenLenLenLenLenLenLenLen = binSumStrLenLenLenLenLenLenLen\
    \ + 1\n        val binSumStrLenLenLenLenLenLenLenLenLen = binSumStrLenLenLenLenLenLenLenLen\
    \ + 1\n        val binSumStrLenLenLenLenLenLenLenLenLenLen = binSumStrLenLenLenLenLenLenLenLenLen\
    \ + 1\n        val binSumStrLenLenLenLenLenLenLenLenLenLenLen = binSumStrLenLenLenLenLenLenLenLenLenLen\
    \ + 1\n        val binSumStrLenLenLenLenLenLenLenLenLenLenLenLen = binSumStrLenLenLenLenLenLenLenLenLenLen\
    \ + 1\n        val binSumStrLenLenLenLenLenLenLenLenLenLenLenLenLen = binSumStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ + 1\n        val binSumStrLenLenLenLenLenLenLenLenLenLenLenLenLenLen = binSumStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ + 1\n        val binSumStrLenLenLenLenLenLenLenLenLenLenLenLenLenLen = binSumStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ + 1\n        val binSumStrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = binSumStrLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ + 1\n        val binSumStrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen =\
    \ binSumStrLenLenLenLenLen", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.map(_.toInt)\n        val sumsString = sums.map(_.toString).mkString(\"\
    \")\n        val sumsStringLength = sumsString.length\n        val sumsStringLength\
    \ = sumsString.length\n        val sumsStringLength = sumsString.length\n    \
    \    val sumsStringLength = sumsString.length\n        val sumsStringLength =\
    \ sumsString.length\n        val sumsStringLength = sumsString.length\n      \
    \  val sumsStringLength = sumsString.length\n        val sumsStringLength = sumsString.length\n\
    \        val sumsStringLength = sumsString.length\n        val sumsStringLength\
    \ = sumsString.length\n        val sumsStringLength = sumsString.length\n    \
    \    val sumsStringLength = sumsString.length\n        val sumsStringLength =\
    \ sumsString.length\n        val sumsStringLength = sumsString.length\n      \
    \  val sumsStringLength = sumsString.length\n        val sumsStringLength = sumsString.length\n\
    \        val sumsStringLength = sumsString.length\n        val sumsStringLength\
    \ = sumsString.length\n        val sumsStringLength = sumsString.length\n    \
    \    val sumsStringLength = sumsString.length\n        val sumsStringLength =\
    \ sumsString.length\n        val sumsStringLength = sumsString.length\n      \
    \  val sumsStringLength = sumsString.length\n        val sumsStringLength = sumsString.length\n\
    \        val sumsStringLength = sumsString.length\n        val sumsStringLength\
    \ = sumsString.length\n        val sumsStringLength = sumsString.length\n    \
    \    val sumsStringLength = sumsString.length\n        val sumsStringLength =\
    \ sumsString.length\n        val sumsStringLength = sumsString.length\n      \
    \  val sumsStringLength = sumsString.length\n        val sumsStringLength = sumsString.length\n\
    \        val sumsStringLength = sumsString.length\n        val sumsStringLength\
    \ = sumsString.length\n        val sumsStringLength = sumsString.length\n    \
    \    val sumsStringLength = sumsString.length\n        val sumsStringLength =\
    \ sumsString.length\n        val sumsStringLength = sumsString.length\n      \
    \  val sumsStringLength = sumsString.length\n        val sumsStringLength = sumsString.length\n\
    \        val sumsStringLength = sumsString.length\n        val sumsStringLength\
    \ = sumsString.length\n        val sums", "        val binary = N.toBinaryString\n\
    \        val result = binary.reverse.foldLeft(\"\") { (result, digit) =>\n   \
    \         val index = result + digit\n            if (index.length < binary.length)\
    \ {\n                index\n            } else {\n                val remainder\
    \ = index % 2\n                val newIndex = index / 2\n                val newDigit\
    \ = if (remainder == 0) 1 else 0\n                val newResult = result + newDigit\
    \ + newIndex\n                newResult\n            }\n        }\n        result",
  "        val binary = N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sums = digits.foldLeft(mutable.Map[Int, Int]())((map, digit) => map\
    \ + (digit -> (digit._1 + digit._2)))\n        val result = sums.foldLeft(\"\"\
    )( (acc, digit) => acc + digit._1 + digit._2)\n        result", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        digits.foreach { digit =>\n            val bin = digit.toInt\n      \
    \      val binStr = bin.toString\n            val binLen = binStr.length\n   \
    \         val binNum = binLen / 2\n            val binDigit = binStr.substring(0,\
    \ binNum)\n            val binRest = binStr.substring(binNum, binStr.length)\n\
    \            val binSum = binDigit + binRest\n            sum += binSum.toInt\n\
    \            binary.append(binSum)\n        }\n        binary.reverse.mkString",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val sum = 0\n        digits.foreach(sum ++= _)\n        sum.toString.reverse",
  "        val binary = N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.toList\n   \
    \     val binary = binary.filter(_ != '0')\n        val binary = binary.foldLeft(\"\
    \") {\n            (acc, x) => acc + (x.toInt*2).toBinaryString\n        }\n \
    \       binary.mkString", "        val binary = N.toBinaryString\n        val\
    \ sum = 0\n        val bin = binary.toList\n        val binLen = bin.length\n\
    \        val binSum = bin.map(x => if (x != '0') x else 0).sum\n        val binSumLen\
    \ = binSum.length\n        val binSumLenLen = binSumLen * 2\n        val binSumLenLenLen\
    \ = binSumLenLen * 2\n        val binSumLenLenLenLen = binSumLenLenLen * 2\n \
    \       val binSumLenLenLenLenLen = binSumLenLenLenLen * 2\n        val binSumLenLenLenLenLenLen\
    \ = binSumLenLenLenLenLen * 2\n        val binSumLenLenLenLenLenLenLen = binSumLenLenLenLenLenLen\
    \ * 2\n        val binSumLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLen\
    \ * 2\n        val binSumLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLen\
    \ * 2\n        val binSumLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLen\
    \ * 2\n        val binSumLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLen\
    \ * 2\n        val binSumLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLen\
    \ * 2\n        val binSumLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLen\
    \ * 2\n        val binSumLenLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLen\
    \ * 2\n        val binSumLenLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLenLen\
    \ * 2\n        val binSumLenLenLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLenLen\
    \ * 2\n        val binSumLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = binSumLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ * 2\n        val binSumLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = binSum",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val sum = digits.foldLeft(0)((sum, digit) => sum + digit.toInt)\n     \
    \   val result = if (sum > 0) \"1\" + sum.toString else \"\"\n        result",
  "        val binary = N.toBinaryString\n        val sum = 0\n        val binNum\
    \ = binary.toList\n        binNum.foreach(x => {\n            val y = x.toInt\n\
    \            sum += y\n        })\n        binNum.foreach(x => {\n           \
    \ val y = x.toInt\n            val bin = Integer.toBinaryString(y)\n         \
    \   val binNum = bin.mkString\n            binNum = binNum.substring(binNum.length\
    \ - 1)\n            binNum = binNum.substring(0, binNum.length - 1)\n        \
    \    binNum = binNum + bin\n            binNum = binNum.substring(0, binNum.length\
    \ - 1)\n            binNum = binNum + bin\n            binNum = binNum.substring(0,\
    \ binNum.length - 1)\n            binNum = binNum + bin\n            binNum =\
    \ binNum.substring(0, binNum.length - 1)\n            binNum = binNum + bin\n\
    \            binNum = binNum.substring(0, binNum.length - 1)\n            binNum\
    \ = binNum + bin\n            binNum = binNum.substring(0, binNum.length - 1)\n\
    \            binNum = binNum + bin\n            binNum = binNum.substring(0, binNum.length\
    \ - 1)\n            binNum = binNum + bin\n            binNum = binNum.substring(0,\
    \ binNum.length - 1)\n            binNum = binNum + bin\n            binNum =\
    \ binNum.substring(0, binNum.length - 1)\n            binNum = binNum + bin\n\
    \            binNum = binNum.substring(0, binNum.length - 1)\n            binNum\
    \ = binNum + bin\n            binNum = binNum.substring(0, binNum.length - 1)\n\
    \            binNum = binNum + bin\n            binNum = binNum.substring(0, binNum.length\
    \ - 1)\n            binNum = binNum + bin\n            binNum = binNum.substring(0,\
    \ binNum.length - 1)\n            binNum = binNum + bin\n            binNum =\
    \ binNum.substring(0, binNum.length - 1)\n            binNum = binNum + bin\n\
    \            binNum = binNum.substring(0, binNum.length - 1)\n            binNum\
    \ = binNum + bin\n            binNum = binNum.substring(0, binNum.length - 1)\n\
    \            binNum = binNum + bin\n            binNum = binNum.substring(0, binNum.length\
    \ - 1)\n            binNum = binNum + bin\n            binNum = binNum.substring(0,\
    \ binNum.length - 1)\n            binNum = binNum + bin\n            binNum =\
    \ binNum.substring(0, binNum.length - 1)\n            binNum = binNum + bin",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0\
    \ until binary.length){\n            sum += binary.charAt(i).toInt\n        }\n\
    \        binary.reverse\n        binary.reverse.takeWhile(x => x != 0).mkString",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val sums = digits.foldLeft(0)((sum, digit) => sum + digit.toInt)\n    \
    \    val result = sums.toBinaryString\n        val length = result.length\n  \
    \      val zeros = Array(0 until length).map(i => if (i == 0) \"0\" else \"1\"\
    )\n        val result = zeros ++ result\n        result", "        val binary\
    \ = N.toBinaryString\n        val sum = 0\n        val binNum = binary.toList\n\
    \        binNum.foreach(x => {\n            val y = x.toInt\n            sum +=\
    \ y\n        })\n        binNum.map(x => x.toString + sum.toString).mkString",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val sums = digits.map(_.toInt)\n        val sumsString = sums.mkString(\"\
    \")\n        val result = sumsString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        result match {\n            case Nil => \"0\"\n            case _ =>\
    \ result\n        }", "        val binary = N.toBinaryString\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n   \
    \     val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = bin", "        val binary = N.toBinaryString\n        val\
    \ binary = binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sums = digits.foldLeft(Map[Int, Int]())((m, d) => m + (d -> (m.getOrElse(d,\
    \ 0) + d.toInt)))\n        val result = sums.filter(_._2 > 0).map(_._1).mkString(\"\
    \")\n        result + sums.filter(_._2 == 0).map(_._1).mkString(\"\")", "    \
    \    val binary = N.toBinaryString\n        val binary = binary.reverse\n    \
    \    val binary = binary.dropWhile(_ == '0').reverse\n        val binary = binary.takeWhile(_\
    \ != '0')\n        binary.reverse", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.foldLeft(\"\") {\n            (acc, digit) => acc\
    \ + (if (digit.length > 1) digit else \"0\")\n        }\n        binary.reverse",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- binary.indices)\
    \ {\n            val digit = binary.charAt(i)\n            sum += digit.toInt\n\
    \        }\n        binary.reverse", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- binary.indices) {\n            sum += binary.charAt(i)\n\
    \        }\n        sum.toString", "        val binary = N.toBinaryString\n  \
    \      val bins = binary.toList\n        val sum = 0\n        bins.foreach(x =>\
    \ {\n            val y = x.toInt\n            sum += y\n        })\n        bins.reverse.mkString(\"\
    \") + sum.toString", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        digits.foreach { digit =>\n            val bin = digit.toBinaryString\n\
    \            val binary = binary.filterNot(_ == bin)\n            binary.append(bin)\n\
    \            sum += digit\n        }\n        binary.reverse.mkString(\"\")",
  "        val binary = N.toBinaryString\n        val sum = 0\n        var i = 0\n\
    \        while (i < binary.length) {\n            val c = binary.charAt(i)\n \
    \           val d = c.toInt\n            sum += d\n            i += 1\n      \
    \  }\n        val result = sum.toBinaryString\n        result + (if (result.length\
    \ < binary.length) \"\" else \"\")", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.foldLeft(Map[String, Int]())((sums, digit) => {\n \
    \           val digitStr = digit._1 + digit._2\n            val sum = sums.getOrElse(digitStr,\
    \ 0) + 1\n            sums + (digitStr -> sum)\n        })\n        val result\
    \ = sums.toList.sortBy(_._2).reverse.map(x => x._1 + \"(\" + x._2 + \")\").mkString\n\
    \        result match {\n            case x if x.contains(\"(0)\") => x\n    \
    \        case x if x.contains(\"(1)\") => x\n            case x if x.contains(\"\
    (2)\") => x\n            case x if x.contains(\"(3)\") => x\n            case\
    \ x if x.contains(\"(4)\") => x\n            case x if x.contains(\"(5)\") =>\
    \ x\n            case x if x.contains(\"(6)\") => x\n            case x if x.contains(\"\
    (7)\") => x\n            case x if x.contains(\"(8)\") => x\n            case\
    \ x if x.contains(\"(9)\") => x\n            case x => x\n        }", "      \
    \  var sum = 0\n        var binary = \"\"\n        while(N /= 10) {\n        \
    \    sum += N % 10\n            N /= 10\n        }\n        while(sum > 0) {\n\
    \            binary += (sum % 2)\n            sum /= 2\n        }\n        binary",
  "        val binary = N.toBinaryString\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropWhile(_ == '0').reverse\n        val binary = binary.dropWhile(_\
    \ == '1').reverse\n        binary.reverse", "        val binary = N.toBinaryString\n\
    \        val bin = binary.toList\n        val binSum = bin.foldLeft(0)((sum, digit)\
    \ => sum + digit.toInt)\n        val binSumString = binSum.toString\n        val\
    \ binSumStringLength = binSumString.length\n        val binSumStringLength = binSumStringLength\
    \ + binSumStringLength\n        val binSumStringLength = binSumStringLength +\
    \ binSumStringLength\n        val binSumStringLength = binSumStringLength + binSumStringLength\n\
    \        val binSumStringLength = binSumStringLength + binSumStringLength\n  \
    \      val binSumStringLength = binSumStringLength + binSumStringLength\n    \
    \    val binSumStringLength = binSumStringLength + binSumStringLength\n      \
    \  val binSumStringLength = binSumStringLength + binSumStringLength\n        val\
    \ binSumStringLength = binSumStringLength + binSumStringLength\n        val binSumStringLength\
    \ = binSumStringLength + binSumStringLength\n        val binSumStringLength =\
    \ binSumStringLength + binSumStringLength\n        val binSumStringLength = binSumStringLength\
    \ + binSumStringLength\n        val binSumStringLength = binSumStringLength +\
    \ binSumStringLength\n        val binSumStringLength = binSumStringLength + binSumStringLength\n\
    \        val binSumStringLength = binSumStringLength + binSumStringLength\n  \
    \      val binSumStringLength = binSumStringLength + binSumStringLength\n    \
    \    val binSumStringLength = binSumStringLength + binSumStringLength\n      \
    \  val binSumStringLength = binSumStringLength + binSumStringLength\n        val\
    \ binSumStringLength = binSumStringLength + binSumStringLength\n        val binSumStringLength\
    \ = binSumStringLength + binSumStringLength\n        val binSumStringLength =\
    \ binSumStringLength + binSumStringLength\n        val binSumStringLength = binSumStringLength\
    \ + binSumStringLength\n        val binSumStringLength = binSumStringLength +\
    \ binSumStringLength\n        val binSumStringLength = binSumStringLength + binSumStringLength\n\
    \        val binSumStringLength = binSumStringLength + binSumStringLength\n  \
    \      val binSumStringLength = binSumStringLength + binSumStringLength\n    \
    \    val binSumStringLength = binSumStringLength + binSumStringLength\n      \
    \  val binSumStringLength = binSumStringLength + binSumStringLength\n        val\
    \ binSumStringLength = binSumStringLength + binSumStringLength\n        val ",
  "        val binary = N.toBinaryString\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropWhile(_ == '0').reverse\n        val binary = binary.dropWhile(_\
    \ == '1').reverse\n        binary.reverse", "        val binary = N.toBinaryString\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val sums = digits.map(_.toInt)\n        val sumsSum = sums.sum\n      \
    \  val sumsSumString = sumsSum.toString\n        val sumsSumStringLength = sumsSumString.length\n\
    \        val sumsSumStringLength = sumsSumString.length\n        val sumsSumStringLength\
    \ = sumsSumString.length\n        val sumsSumStringLength = sumsSumString.length\n\
    \        val sumsSumStringLength = sumsSumString.length\n        val sumsSumStringLength\
    \ = sumsSumString.length\n        val sumsSumStringLength = sumsSumString.length\n\
    \        val sumsSumStringLength = sumsSumString.length\n        val sumsSumStringLength\
    \ = sumsSumString.length\n        val sumsSumStringLength = sumsSumString.length\n\
    \        val sumsSumStringLength = sumsSumString.length\n        val sumsSumStringLength\
    \ = sumsSumString.length\n        val sumsSumStringLength = sumsSumString.length\n\
    \        val sumsSumStringLength = sumsSumString.length\n        val sumsSumStringLength\
    \ = sumsSumString.length\n        val sumsSumStringLength = sumsSumString.length\n\
    \        val sumsSumStringLength = sumsSumString.length\n        val sumsSumStringLength\
    \ = sumsSumString.length\n        val sumsSumStringLength = sumsSumString.length\n\
    \        val sumsSumStringLength = sumsSumString.length\n        val sumsSumStringLength\
    \ = sumsSumString.length\n        val sumsSumStringLength = sumsSumString.length\n\
    \        val sumsSumStringLength = sumsSumString.length\n        val sumsSumStringLength\
    \ = sumsSumString.length\n        val sumsSumStringLength = sumsSumString.length\n\
    \        val sumsSumStringLength = sumsSumString.length\n        val sumsSumStringLength\
    \ = sumsSumString.length\n        val sumsSumStringLength = sumsSumString.length\n\
    \        val sumsSumStringLength = sumsSumString.length\n        val sumsSumStringLength\
    \ = sumsSumString.length\n        val sumsSumStringLength = sumsSumString.length\n\
    \        val sumsSumStringLength = sumsSumString.length\n        val sumsSumStringLength\
    \ = sumsSumString.length\n        val sumsSumStringLength = sumsSumString.length\n\
    \        val sumsSumStringLength = sumsSumString.length\n        val sumsSum",
  "        val nums = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ binary = scala.collection.mutable.ListBuffer.empty[String]\n        val digits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val remainder = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val remainders = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val sum = 0\n        val digit = scala.math.pow(10, math.log10(N))\n   \
    \     val digits = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val remainders = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val remainder = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val nums = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val binary = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val sum = scala.math.pow(10, math.log10(N))\n        val nums = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val binary = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val sum = scala.math.pow(10, math.log10(N))\n        val nums = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val binary = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val sum = scala.math.pow(10, math.log10(N))\n        val nums = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val binary = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val sum = scala.math.pow(10, math.log10(N))\n        val nums = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val binary = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val sum = scala.math.pow(10, math.log10(N))\n        val nums = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val binary = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val sum = scala.math.pow(10, math.log10(N))\n        val nums = scala.collection.mutable.ListBuffer.fill(math.log10(N).toInt)(0)\n\
    \        val binary = scala.collection.mutable.ListBuffer.fill(math.", "     \
    \   val binary = N.toBinaryString\n        val binary = binary.reverse\n     \
    \   val binary = binary.dropWhile(_ == '0').reverse\n        val binary = binary.dropWhile(_\
    \ == '1').reverse\n        binary.reverse"]
stop_tokens:
- "\n    }\n"
