name: HumanEval_121_solution
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
  \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
  \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst : List[Long])\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
  \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
  \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
  \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
  \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
  \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
  \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
completions: ["        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 == 1)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n    \
    \    val oddSum = odds.sum\n        evenSum + oddSum", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val result = even.sum\
    \ + odd.sum\n        result", "        val even = lst.filter(_ % 2 == 0)\n   \
    \     val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n     \
    \   val oddSum = odd.sum\n        oddSum - evenSum", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0l)(_ + _)\n        evenSum + oddSum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val\
    \ odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val\
    \ oddSum = odds.sum\n        oddSum - evenSum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        val result = evenSum + oddSum\n\
    \        result", "        val evens = lst.filter(x => x % 2 == 0)\n        val\
    \ odds = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n      \
    \  val oddSum = odds.sum\n        val evenOddSum = evenSum + oddSum\n        evenOddSum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    val evenSumOdds = evenSum + oddSum\n        evenSumOdds", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n    \
    \    val oddSum = odds.sum\n        val evenOddSum = evenSum + oddSum\n      \
    \  evenOddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(_ % 2\
    \ == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        val evenSumOdds = evenSum + oddSum\n \
    \       evenSumOdds", "        val even = lst.filter(_ % 2 == 0).toList\n    \
    \    val odd = lst.filter(_ % 2 != 0).toList\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        val\
    \ result = evenSum + oddSum\n        result", "        val evens = lst.filter(_\
    \ % 2 == 0).toList\n        val odds = lst.filter(_ % 2 != 0).toList\n       \
    \ val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenOddSum\
    \ = evenSum + oddSum\n        evenOddSum", "        val even = lst.filter(_ %\
    \ 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val evens =\
    \ lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        oddSum\
    \ - evenSum", "        val evens = lst.filter(x => x % 2 == 0)\n        val odds\
    \ = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n        val\
    \ oddSum = odds.sum\n        val evenOddSum = evenSum + oddSum\n        evenOddSum",
  "        val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n\
    \        val evenSumOdd = evenSum + oddSum\n        evenSumOdd", "        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n      \
    \  val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n      \
    \  val oddSum = odds.sum\n        val evenOddSum = evenSum + oddSum\n        evenOddSum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    val result = evenSum + oddSum\n        result", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        val result = evenSum\
    \ + oddSum\n        result", "        val even = lst.filter(_ % 2 == 0)\n    \
    \    val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n      \
    \  val oddSum = odd.sum\n        val result = evenSum + oddSum\n        result",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        val\
    \ evenOddSum = evenSum + oddSum\n        evenOddSum", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val even =\
    \ lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSumOdd = evenSum\
    \ + oddSum\n        evenSumOdd", "        val evens = lst.filter(x => x % 2 ==\
    \ 0).toList\n        val odds = lst.filter(x => x % 2 != 0).toList\n        val\
    \ result = evens.sum + odds.sum\n        result", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum\
    \ + oddSum", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val result = evenSum + oddSum\n        result", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val result = evenSum + oddSum\n        result", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val result = evenSum + oddSum\n       \
    \ result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n    \
    \    val oddSum = odds.sum\n        oddSum - evenSum", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenOddSum =\
    \ evenSum + oddSum\n        evenOddSum", "        val evens = lst.filter(_ % 2\
    \ == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val\
    \ odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val\
    \ oddSum = odds.sum\n        oddSum - evenSum", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        oddSum - evenSum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    val evenOddSum = evenSum + oddSum\n        evenOddSum", "        val even\
    \ = lst.filter(x => x % 2 == 0).toList\n        val odd = lst.filter(x => x %\
    \ 2 != 0).toList\n        val evenSum = even.foldLeft(0l) { (sum, elem) => sum\
    \ + elem }\n        val oddSum = odd.foldLeft(0l) { (sum, elem) => sum + elem\
    \ }\n        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        val result = evenSum + oddSum\n      \
    \  result", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_ + _)\n        val oddSum\
    \ = odd.foldLeft(0l)(_ + _)\n        evenSum + oddSum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        val result = evenSum + oddSum\n\
    \        result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(_ % 2\
    \ == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        oddSum - evenSum", "        var sum =\
    \ 0\n        for(i <- 0 until lst.size) {\n            if(i % 2 == 0) {\n    \
    \            sum += lst(i)\n            }\n        }\n        sum", "        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        result", "        val even = lst.filter(x => x %\
    \ 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.sum\n        val oddSum = odd.sum\n        evenSum + oddSum", "     \
    \   val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n       \
    \ oddSum - evenSum", "        val even = lst.filter(_ % 2 == 0).toList\n     \
    \   val odd = lst.filter(_ % 2 != 0).toList\n        val evenSum = even.foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val oddSum = odd.foldLeft(0l) { (sum,\
    \ elem) => sum + elem }\n        evenSum + oddSum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val evens = lst.filter(_ % 2 == 0).toList\n        val odds = lst.filter(_\
    \ % 2 != 0).toList\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val result = evenSum + oddSum\n        result", "        val even = lst.filter(_\
    \ % 2 == 0).toList\n        val odd = lst.filter(_ % 2 != 0).toList\n        val\
    \ evenSum = even.sum\n        val oddSum = odd.sum\n        val result = evenSum\
    \ + oddSum\n        result", "        var sum = 0\n        for(i <- 0 until lst.length)\n\
    \            if(i % 2 == 0)\n                sum += lst(i)\n        sum", "  \
    \      val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum\
    \ + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        oddSum - evenSum", "        val evens = lst.filter(x => x % 2 == 0).toList\n\
    \        val odds = lst.filter(x => x % 2 != 0).toList\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        val evenOddSum = evenSum +\
    \ oddSum\n        evenOddSum", "        val evens = lst.filter(_ % 2 == 0)\n \
    \       val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n \
    \       val oddSum = odds.sum\n        oddSum - evenSum", "        val evens =\
    \ lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val evenOddSum = evenSum + oddSum\n        evenOddSum", "        var\
    \ sum = 0\n        var even = 0\n        var odd = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val x = lst(i)\n            if(i%2 == 0) {\n      \
    \          even += x\n            } else {\n                odd += x\n       \
    \     }\n        }\n        sum = even + odd\n        return sum", "        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  evenSum + oddSum", "        val evens = lst.filter(x => x % 2 == 0)\n     \
    \   val odds = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        val result = evenSum + oddSum\n      \
    \  result", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n      \
    \  val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n      \
    \  val oddSum = odds.sum\n        oddSum - evenSum", "        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.sum\n        val oddSum = odd.sum\n        evenSum + oddSum", "     \
    \   val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = even.foldLeft(0l) { (sum, elem) => sum + elem }\n     \
    \   val oddSum = odd.foldLeft(0l) { (sum, elem) => sum + elem }\n        evenSum\
    \ + oddSum", "        val evens = lst.filter(x => x % 2 == 0)\n        val odds\
    \ = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n        val\
    \ oddSum = odds.sum\n        val evenOddSum = evenSum + oddSum\n        evenOddSum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    val result = evenSum + oddSum\n        result", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        val sum = evenSum + oddSum\n\
    \        sum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds =\
    \ lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        val evenOddSum = evens.sum + odds.sum\n        val evenOddSum\
    \ = evens.sum + odds.sum\n        val evenOddSum = evens.sum + odds.sum\n    \
    \    val evenOddSum = evens.sum + odds.sum\n        val evenOddSum = evens.sum\
    \ + odds.sum\n        val evenOddSum = evens.sum + odds.sum\n        val evenOddSum\
    \ = evens.sum + odds.sum\n        val evenOddSum = evens.sum + odds.sum\n    \
    \    val evenOddSum = evens.sum + odds.sum\n        val evenOddSum = evens.sum\
    \ + odds.sum\n        val evenOddSum = evens.sum + odds.sum\n        val evenOddSum\
    \ = evens.sum + odds.sum\n        val evenOddSum = evens.sum + odds.sum\n    \
    \    val evenOddSum = evens.sum + odds.sum\n        val evenOddSum = evens.sum\
    \ + odds.sum\n        val evenOddSum = evens.sum + odds.sum\n        val evenOddSum\
    \ = evens.sum + odds.sum\n        val evenOddSum = evens.sum + odds.sum\n    \
    \    val evenOddSum = evens.sum + odds.sum\n        val evenOddSum = evens.sum\
    \ + odds.sum\n        val evenOddSum = evens.sum + odds.sum\n        val evenOddSum\
    \ = evens.sum + odds.sum\n        val evenOddSum = evens.sum + odds.sum\n    \
    \    val evenOddSum = evens.sum + odds.sum\n        val evenOddSum = evens.sum\
    \ + odds.sum\n        val evenOddSum = evens.sum + odds.sum\n        val evenOddSum\
    \ = evens.sum + odds.sum\n        val evenOddSum = evens.sum + odds.sum\n    \
    \    val evenOddSum = evens.sum + odds.sum\n        val evenOddSum = evens.sum\
    \ + odds.sum\n        val evenOddSum = evens.sum + odds.sum\n        val evenO",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    evenSum + oddSum", "        var sum = 0\n        var even = 0\n        var\
    \ odd = 0\n        var evenIndex = 0\n        var oddIndex = 0\n        for(i\
    \ <- 0 until lst.size) {\n            val value = lst(i)\n            if(value\
    \ % 2 == 0) {\n                even += value\n                evenIndex += 1\n\
    \            } else {\n                odd += value\n                oddIndex\
    \ += 1\n            }\n        }\n        for(i <- 0 until evenIndex) {\n    \
    \        sum += even\n            even = 0\n        }\n        for(i <- 0 until\
    \ oddIndex) {\n            sum += odd\n            odd = 0\n        }\n      \
    \  sum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val sum = evenSum + oddSum\n        sum", "        var sum = 0\n    \
    \    var even = 0\n        var odd = 0\n        lst.foreach{\n            x =>\n\
    \            if (x % 2 == 0) {\n                even += x\n            } else\
    \ {\n                odd += x\n            }\n        }\n        sum = even +\
    \ odd\n        return sum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n    \
    \    val oddSum = odds.sum\n        oddSum - evenSum", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    oddSum - evenSum", "        val evens = lst.filter(_ % 2 == 0).toList\n \
    \       val odds = lst.filter(_ % 2 != 0).toList\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        oddSum - evenSum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum\
    \ + oddSum", "        val even = lst.filter(x => x % 2 == 0)\n        val odd\
    \ = lst.filter(x => x % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        evenSum + oddSum", "        val even = lst.filter(x => x\
    \ % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val sum =\
    \ even.foldLeft(0l) { (sum, e) => sum + e }\n        odd.foldLeft(sum) { (sum,\
    \ o) => sum + o }", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        val evenOddSum = evens.zip(odds).filter(_._1 % 2 == 0).map(_._2).sum\n\
    \        evenOddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val\
    \ odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val\
    \ oddSum = odds.sum\n        evenSum + oddSum", "        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val result\
    \ = even.foldLeft(0l) { (sum, elem) => sum + elem }\n        odd.foldLeft(result)\
    \ { case (sum, elem) => sum + elem }", "        val evens = lst.filter(_ % 2 ==\
    \ 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val even =\
    \ lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = even.foldLeft(0l)(_ + _)\n        val oddSum = odd.foldLeft(0l)(_\
    \ + _)\n        evenSum + oddSum", "        val even = lst.filter(x => x % 2 ==\
    \ 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        oddSum + (evenSum\
    \ - oddSum)", "        val evens = lst.filter(_ % 2 == 0)\n        val odds =\
    \ lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        oddSum + (evenSum - oddSum)", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val result = evenSum + oddSum\n       \
    \ result", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n      \
    \  val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n      \
    \  val oddSum = odds.sum\n        evenSum + oddSum", "        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.sum\n        val oddSum = odd.sum\n        val result = evenSum + oddSum\n\
    \        result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        oddSum - evenSum", "        val even = lst.filter(x => x\
    \ % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.sum\n        val oddSum = odd.sum\n        evenSum + oddSum", "     \
    \   val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = even.foldLeft(0l)(_ + _)\n        val oddSum = odd.foldLeft(0l)(_\
    \ + _)\n        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        val evenOddSum = evenSum + oddSum\n  \
    \      evenOddSum", "        var sum = 0\n        var even = 0\n        var odd\
    \ = 0\n        for (i <- 0 until lst.size) {\n            if (lst(i) % 2 == 0)\
    \ {\n                even += lst(i)\n            } else {\n                odd\
    \ += lst(i)\n            }\n        }\n        sum = even + odd\n        return\
    \ sum", "        val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val evenSumOdds = evenSum + oddSum\n        evenSumOdds", "        var\
    \ sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.foldLeft(0l) { (sum, elem) => sum + elem\
    \ }\n        val oddSum = odd.foldLeft(0l) { (sum, elem) => sum + elem }\n   \
    \     sum = evenSum + oddSum\n        return sum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        val evenOddSum = evenSum +\
    \ oddSum\n        evenOddSum", "        val evens = lst.filter(_ % 2 == 0)\n \
    \       val odds = lst.filter(_ % 2 == 1)\n        val evenSum = evens.sum\n \
    \       val oddSum = odds.sum\n        oddSum - evenSum", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        val sum = evenSum\
    \ + oddSum\n        sum", "        var sum = 0\n        var even = 0\n       \
    \ var odd = 0\n        var evenIndex = 0\n        var oddIndex = 0\n        for(i\
    \ <- 0 until lst.length){\n            if(i % 2 == 0){\n                sum +=\
    \ lst(i)\n                even += lst(i)\n                evenIndex += 1\n   \
    \         }else{\n                odd += lst(i)\n                oddIndex += 1\n\
    \            }\n        }\n        sum - even", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        val result = evenSum + oddSum\n\
    \        result", "        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        evenSum + oddSum", "        val evens = lst.filter(_ % 2\
    \ == 0).toList\n        val odd = lst.filter(_ % 2 != 0).toList\n        val result\
    \ = evens.foldLeft(0l) { (sum, e) => sum + e }\n        odd.foldLeft(result) {\
    \ case (sum, o) => sum + o }", "        val evens = lst.filter(x => x % 2 == 0)\n\
    \        val odds = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val evens\
    \ = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenSumOdds\
    \ = evenSum + oddSum\n        evenSumOdds", "        val even = lst.filter(x =>\
    \ x % 2 == 0).toList\n        val odd = lst.filter(x => x % 2 != 0).toList\n \
    \       val result = even.foldLeft(0l) { (sum, elem) => sum + elem }\n       \
    \ odd.foldLeft(result) { case (sum, elem) => sum + elem }", "        val even\
    \ = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n       \
    \ val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum + oddSum",
  "        val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val evenSumOdds = evenSum + oddSum\n        evenSumOdds", "        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val sum\
    \ = evenSum + oddSum\n        sum", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        val result = evenSum + oddSum\n      \
    \  result", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.foldLeft(0l) { (sum, elem) => sum + elem\
    \ }\n        val oddSum = odd.foldLeft(0l) { (sum, elem) => sum + elem }\n   \
    \     evenSum + oddSum", "        val evens = lst.filter(x => x % 2 == 0)\n  \
    \      val odds = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val evens\
    \ = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result", "        val even = lst.filter(_ % 2 ==\
    \ 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val result = evenSum + oddSum\n       \
    \ result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val result = evenSum + oddSum\n        result", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        val result = evenSum\
    \ + oddSum\n        result", "        val even = lst.filter(x => x % 2 == 0).toList\n\
    \        val odd = lst.filter(x => x % 2 != 0).toList\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val result = evenSum + oddSum\n       \
    \ result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 == 1)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        val evens = lst.filter(x => x % 2 == 0)\n\
    \        val odds = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        oddSum - evenSum", "        val evens\
    \ = lst.filter(x => x % 2 == 0).toList\n        val odds = lst.filter(x => x %\
    \ 2 != 0).toList\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val evenOddSum = evenSum + oddSum\n        evenOddSum", "        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenSumOdds\
    \ = evenSum + oddSum\n        evenSumOdds", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        val evenSumOdds = evenSum\
    \ + oddSum\n        evenSumOdds", "        val evens = lst.filter(x => x % 2 ==\
    \ 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    oddSum - evenSum", "        val evens = lst.filter(_ % 2 == 0)\n        val\
    \ odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val\
    \ oddSum = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ result = evens.foldLeft(0l) { (sum, e) => sum + e + odds(sum) }\n        result",
  "        val even = lst.filter(x => x % 2 == 0).toList\n        val odd = lst.filter(x\
    \ => x % 2 != 0).toList\n        val result = even.foldLeft(0l) { (sum, elem)\
    \ => sum + elem }\n        odd.foldLeft(result) { case (sum, elem) => sum + elem\
    \ }", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n      \
    \  val odds = lst.filter(_ % 2 == 1)\n        val evenSum = evens.sum\n      \
    \  val oddSum = odds.sum\n        val result = evenSum + oddSum\n        result",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum\
    \ + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val evenOddSum = evenSum + oddSum\n        evenOddSum", "        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenOddSum\
    \ = evenSum + oddSum\n        evenOddSum", "        val even = lst.filter(_ %\
    \ 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        oddSum - evenSum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum\
    \ + oddSum", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      evenSum + oddSum", "        val evens = lst.filter(x => x % 2 == 0)\n \
    \       val odds = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        val evenOddSum = evenSum + oddSum\n  \
    \      evenOddSum", "        var sum = 0\n        var even = 0\n        var odd\
    \ = 0\n        var evenIndex = 0\n        var oddIndex = 0\n        for(i <- 0\
    \ until lst.size) {\n            if(even(evenIndex)) {\n                sum +=\
    \ lst(oddIndex)\n                odd += 1\n                oddIndex += 1\n   \
    \         }\n            else if(odd(oddIndex)) {\n                sum += lst(evenIndex)\n\
    \                even += 1\n                evenIndex += 1\n            }\n  \
    \          else {\n                sum += lst(i)\n            }\n        }\n \
    \       sum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds =\
    \ lst.filter(_ % 2 == 1)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(_ % 2\
    \ == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        val result = evenSum + oddSum\n      \
    \  result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        oddSum - evenSum", "        val even = lst.filter(x => x % 2 == 0)\n\
    \        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val even =\
    \ lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = even.sum\n        val oddSum = odd.sum\n        val result = evenSum\
    \ + oddSum\n        result", "        val even = lst.filter(_ % 2 == 0)\n    \
    \    val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val oddSum = odd.foldLeft(0l) { (sum,\
    \ elem) => sum + elem }\n        evenSum + oddSum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        oddSum - evenSum", "     \
    \   val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum\
    \ + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val evenOddSum = evenSum + oddSum\n        evenOddSum", "        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n    \
    \    val oddSum = odds.sum\n        oddSum - evenSum", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        val even = lst.filter(x => x % 2 == 0).toList\n        val odd = lst.filter(x\
    \ => x % 2 != 0).toList\n        val result = even.zip(odd).foldLeft(0l) { (sum,\
    \ pair) => sum + pair._2 }\n        result", "        val even = lst.filter(_\
    \ % 2 == 0).toList\n        val odd = lst.filter(_ % 2 != 0).toList\n        val\
    \ evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum + oddSum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    val result = evenSum + oddSum\n        result", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum\
    \ + oddSum", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val result = evenSum + oddSum\n        result", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val result = evenSum + oddSum\n       \
    \ result", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val evenOddSum = evenSum + oddSum\n        evenOddSum", "        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val evenOddSum = evenSum + oddSum\n        evenOddSum", "        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.foldLeft(0L)(_ + _)\n        val oddSum = odd.foldLeft(0L)(_\
    \ + _)\n        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        val result = evenSum + oddSum\n      \
    \  result", "        val evens = lst.filter(x => x % 2 == 0).toList\n        val\
    \ odds = lst.filter(x => x % 2 != 0).toList\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result", "        val evens = lst.filter(x => x\
    \ % 2 == 0).toList\n        val odds = lst.filter(x => x % 2 != 0).toList\n  \
    \      val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenOddSum\
    \ = evenSum + oddSum\n        evenOddSum", "        val evens = lst.filter(_ %\
    \ 2 == 0)\n        val odds = lst.filter(_ % 2 == 1)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        oddSum - evenSum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result", "        val even = lst.filter(x => x %\
    \ 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.sum\n        val oddSum = odd.sum\n        val sum = evenSum + oddSum\n\
    \        sum", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_ + _)\n        val oddSum\
    \ = odd.foldLeft(0l)(_ + _)\n        evenSum + oddSum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x =>\
    \ x % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n\
    \        evenSum + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n    \
    \    val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n    \
    \    val oddSum = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x =>\
    \ x % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val result = evenSum + oddSum\n        result", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n    \
    \    val result = evenSum + oddSum\n        result", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val even =\
    \ lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n\
    \        val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum\
    \ + oddSum", "        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 == 1)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val result = evenSum + oddSum\n        result", "        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val result\
    \ = even.foldLeft(0l) { (sum, elem) => sum + elem }\n        odd.foldLeft(result)(\
    \ (sum, elem) => sum + elem )", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        val result = evenSum + oddSum\n      \
    \  result", "        val evens = lst.filter(x => x % 2 == 0)\n        val odds\
    \ = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n        val\
    \ oddSum = odds.sum\n        oddSum - evenSum"]
stop_tokens:
- "\n    }\n"
