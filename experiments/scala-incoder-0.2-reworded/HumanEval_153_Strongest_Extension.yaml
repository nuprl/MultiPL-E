name: HumanEval_153_Strongest_Extension
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given the name of a class (a string) and a list of extensions.\n\
  \    // The extensions are to be used to load additional classes to the class. The\n\
  \    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    // in the extension's name, the strength is given by the fraction CAP -\
  \ SM. \n    // You should find the strongest extension and return a string in this\
  \ \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or\
  \ more extensions with the same strength, you should\n    // choose the one that\
  \ comes first in the list.\n    // For example, if you are given \"Slices\" as the\
  \ class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is\
  \ the strongest extension \n    // (its strength is -1).\n    // Example:\n    //\
  \ >>> StrongestExtension((\"my_class\"), (List[String](\"AA\", \"Be\", \"CC\")))\n\
  \    // (\"my_class.AA\")\n    def StrongestExtension(class_name : String, extensions\
  \ : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
  Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
  )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\"\
  , \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"\
  __YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
  , \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\"\
  )));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\"\
  , \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"\
  -_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
  finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
  finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\"\
  , \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"\
  671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        val extensions_map = extensions.map(_.toUpperCase).zipWithIndex.toMap\n\
    \        val class_name_map = class_name.zipWithIndex.toMap\n        val strength\
    \ = class_name_map.get(class_name_map.keys.toList.sortBy(_._2).last)\n       \
    \ val extension_strength = extensions_map.get(extensions_map.keys.toList.sortBy(_._2).last)\n\
    \        val strength_diff = strength - extension_strength\n        if (strength_diff\
    \ == 0) class_name_map.get(class_name_map.keys.toList.sortBy(_._1).last)\n   \
    \     else class_name_map.get(class_name_map.keys.toList.sortBy(_._1).last) +\
    \ extensions_map.get(extensions_map.keys.toList.sortBy(_._1).last) + extensions_map.get(extensions_map.keys.toList.sortBy(_._2).last)\
    \ + extensions_map.get(extensions_map.keys.toList.sortBy(_._3).last) + extensions_map.get(extensions_map.keys.toList.sortBy(_._4).last)\
    \ + extensions_map.get(extensions_map.keys.toList.sortBy(_._5).last) + extensions_map.get(extensions_map.keys.toList.sortBy(_._6).last)\
    \ + extensions_map.get(extensions_map.keys.toList.sortBy(_._7).last) + extensions_map.get(extensions_map.keys.toList.sortBy(_._8).last)\
    \ + extensions_map.get(extensions_map.keys.toList.sortBy(_._9).last) + extensions_map.get(extensions_map.keys.toList.sortBy(_._10).last)\
    \ + extensions_map.get(extensions_map.keys.toList.sortBy(_._11).last) + extensions_map.get(extensions_map.keys.toList.sortBy(_._12).last)\
    \ + extensions_map.get(extensions_map.keys.toList.sortBy(_._13).last) + extensions_map.get(extensions_map.keys.toList.sortBy(_._14).last)\
    \ + extensions_map.get(extensions_map.keys.toList.sortBy(_._15).last) + extensions_map.get(extensions_map.keys.toList.sortBy(_._16).last)\
    \ + extensions_map.get(extensions_map.keys.toList.sortBy(_._17).last) + extensions_map.get(extensions_map.keys.toList.sortBy(_._18).last)\
    \ + extensions_map.get(extensions_map.keys.toList.sortBy(_._19).last) + extensions_map.get(extensions_map.keys.toList.sortBy(_._20).last)\
    \ + extensions_map.get(extensions_map.keys.toList.sortBy(_._21).last) + extensions_map.get(extensions_map.keys.",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n   \
    \     val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n    \
    \    val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toList\n        val extensions_sorted\
    \ = extensions_sorted.map(e => class_name + \".\" + e)\n        extensions_sorted.headOption.getOrElse(class_name)",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toString.toUpperCase.length).toList.max\n        val extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        class_name + extension", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase - x.toLowerCase -> x)).toMap\n        val extensions_sorted\
    \ = extensions_map.values.toList.sortWith(_._2 > _._2)\n        val extensions_sorted\
    \ = extensions_sorted.take(extensions_sorted.length-1)\n        val extensions_sorted\
    \ = extensions_sorted.map(x => class_name + x._1 + x._2)\n        extensions_sorted.head",
  "        val extensions_map = extensions.map(_.toUpperCase).zip(extensions.map(_.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(_.toUpperCase).zip(class_name.map(_.toLowerCase)).toMap\n\
    \        val strength = extensions_map.filter(_._2 > class_name_map.getOrElse(_._2,\
    \ 0)).length\n        val extension = extensions_map.filter(_._2 == strength).head._1\n\
    \        class_name + \".\" + extension", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C') / e.toUpperCase.count(_ == 'D')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.dropRight(1)\n       \
    \ val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length = extensions_count_sorted.map(_.length).sum\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted.sortWith(_.length < _.length)\n    \
    \    val extensions_count_sorted_length_sorted_length_sorted_length = extensions_count_sorted_length_sorted_length.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortWith(_.length < _.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val extensions_count_diff\
    \ = extensions_count_upper - extensions_count_lower\n        val extensions_count_diff_upper\
    \ = extensions_count_upper - extensions_count_diff\n        val extensions_count_diff_lower\
    \ = extensions_count_lower - extensions_count_diff\n        val extensions_count_diff_diff_upper\
    \ = extensions_count_diff_upper - extensions_count_diff_lower\n        val extensions_count_diff_diff_lower\
    \ = extensions_count_diff_lower - extensions_count_diff_upper\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper - extensions_count_diff_diff_lower\n    \
    \    val extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_lower\
    \ - extensions_count_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper - extensions_count_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_upper\n        val\
    \ extensions_count_diff_diff_diff_", "        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase - e.toLowerCase -> 1)).toMap\n        val class_name_map =\
    \ class_name.map(c => (c.toUpperCase - c.toLowerCase -> 1)).toMap\n        val\
    \ max_key = extensions_map.keys.max\n        val max_value = extensions_map.values.max\n\
    \        val max_key_value = class_name_map.get(max_key)\n        max_key_value.map(c\
    \ => c._1 + \".\" + c._2).getOrElse(\"\")", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_smallest = extensions.minBy(_.toUpperCase.length)\n\
    \        val extensions_count_lower_smallest = extensions.minBy(_.toLowerCase.length)\n\
    \        val extensions_count_smallest = extensions_count_upper_smallest - extensions_count_lower_smallest\n\
    \        val extensions_count_largest_upper = extensions.maxBy(_.toUpperCase.length)\n\
    \        val extensions_count_largest_lower = extensions.maxBy(_.toLowerCase.length)\n\
    \        val extensions_count_largest_smallest = extensions_count_largest_upper\
    \ - extensions_count_largest_lower\n        val extensions_count_largest_largest_upper\
    \ = extensions.maxBy(_.toUpperCase.length)\n        val extensions_count_largest_largest_lower\
    \ = extensions.maxBy(_.toLowerCase.length)\n        val extensions_count_largest_largest_smallest\
    \ = extensions_count_largest_largest_upper - extensions_count_largest_largest_lower\n\
    \        val extensions_count_largest_largest_largest_upper = extensions.maxBy(_.toUpperCase.length)\n\
    \        val extensions_count_largest_largest_largest_lower = extensions.maxBy(_.toLowerCase.length)\n\
    \        val extensions_count_largest_largest_largest_smallest = extensions_count_largest_largest_largest_upper\
    \ - extensions_count_largest_largest_largest_lower\n        val extensions_count_largest_largest_largest_largest_upper\
    \ = extensions.maxBy(_.toUpperCase.length)\n        val extensions_count_largest_largest_largest_largest_lower\
    \ = extensions.maxBy(_.toLowerCase.length)\n        val extensions_count_largest_largest_largest_largest_smallest\
    \ = extensions_count_largest_largest_largest_largest_upper - extensions_count_largest_largest_largest_largest_lower\n\
    \        val extensions_count_largest_largest_largest_largest_largest_upper =\
    \ extensions.maxBy(_.toUpperCase.length)\n        val extensions_count_largest_largest_largest_largest_largest_lower\
    \ = extensions.maxBy(_.toLowerCase.length)\n        val extensions_count_largest_largest_largest_largest_largest_smallest\
    \ = extensions_count_largest_largest_largest_largest_largest_upper - extensions_count_largest_largest_largest_largest_largest_largest_lower\n\
    \        val extensions_count_largest_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions_map.size\n\
    \        val class_name_count = class_name_map.size\n        val strength = extensions_count\
    \ - class_name_count\n        if (strength == 0) class_name\n        else if (strength\
    \ > 0) class_name + extensions_map.getOrElse(class_name_map.getOrElse(strength,\
    \ \"\"), \"\")\n        else class_name + extensions_map.getOrElse(class_name_map.getOrElse(strength,\
    \ \"\"), \"\") + extensions_map.getOrElse(class_name_map.getOrElse(strength, \"\
    \"), \"\")", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val class_name_map = class_name.map(x =>\
    \ (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val max_value = extensions_map.values.max\n\
    \        val max_key = extensions_map.keys.max\n        val max_key_value = class_name_map.get(max_key)\n\
    \        val max_key_key_value = max_key_value.map(x => (x._1, x._2))\n      \
    \  val max_key_key_value = max_key_key_value.max\n        val max_key_key_value\
    \ = max_key_key_value._2\n        val max_key_key_value = max_key_key_value._1\n\
    \        val max_key_key_value = max_key_key_value._1\n        val max_key_key_value\
    \ = max_key_key_value._1\n        val max_key_key_value = max_key_key_value._1\n\
    \        val max_key_key_value = max_key_key_value._1\n        val max_key_key_value\
    \ = max_key_key_value._1\n        val max_key_key_value = max_key_key_value._1\n\
    \        val max_key_key_value = max_key_key_value._1\n        val max_key_key_value\
    \ = max_key_key_value._1\n        val max_key_key_value = max_key_key_value._1\n\
    \        val max_key_key_value = max_key_key_value._1\n        val max_key_key_value\
    \ = max_key_key_value._1\n        val max_key_key_value = max_key_key_value._1\n\
    \        val max_key_key_value = max_key_key_value._1\n        val max_key_key_value\
    \ = max_key_key_value._1\n        val max_key_key_value = max_key_key_value._1\n\
    \        val max_key_key_value = max_key_key_value._1\n        val max_key_key_value\
    \ = max_key_key_value._1\n        val max_key_key_value = max_key_key_value._1\n\
    \        val max_key_key_value = max_key_key_value._1\n        val max_key_key_value\
    \ = max_key_key_value._1\n        val max_key_key_value = max_key_key_value._1\n\
    \        val max_key_key_value = max_key_key_value._1\n        val max_key_key_value\
    \ = max_key_key_value._1\n        val max_key_key_value = max_key_key_value._1\n\
    \        val max_key_key_value = max_key_key_value._1\n        val max_key_key_value\
    \ = max_key_key_value._1\n        val max_key_key_value = max_key_key_value._1\n\
    \        val max_key_key_value = max_key_key_value._1\n        val max_key_key_value\
    \ = max_key_key_value._1\n        val max_", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extension_strength = extensions_count.toDouble\
    \ / extensions.length\n        val extension_strength_upper = extensions_count_upper.toDouble\
    \ / extensions.length\n        val extension_strength_lower = extensions_count_lower.toDouble\
    \ / extensions.length\n        val strength_upper = extension_strength_upper -\
    \ extension_strength_lower\n        val strength_lower = extension_strength_lower\
    \ - extension_strength_upper\n        val strength_diff = strength_upper - strength_lower\n\
    \        val strength_diff_upper = strength_diff / strength_upper\n        val\
    \ strength_diff_lower = strength_diff / strength_lower\n        val strength_diff_diff_upper\
    \ = strength_diff_upper - strength_diff_lower\n        val strength_diff_diff_lower\
    \ = strength_diff_lower - strength_diff_upper\n        val strength_diff_diff_diff_upper\
    \ = strength_diff_diff_upper - strength_diff_diff_lower\n        val strength_diff_diff_diff_lower\
    \ = strength_diff_diff_lower - strength_diff_diff_upper\n        val strength_diff_diff_diff_diff_upper\
    \ = strength_diff_diff_diff_upper - strength_diff_diff_diff_lower\n        val\
    \ strength_diff_diff_diff_diff_lower = strength_diff_diff_diff_lower - strength_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_diff_upper = strength_diff_diff_diff_diff_upper\
    \ - strength_diff_diff_diff_diff_lower\n        val strength_diff_diff_diff_diff_lower\
    \ = strength_diff_diff_diff_diff_lower - strength_diff_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_diff_diff_upper = strength_diff_diff_diff_diff_diff_upper\
    \ - strength_diff_diff_diff_diff_diff_lower\n        val strength_diff_diff_diff_diff_diff_lower\
    \ = strength_diff_diff_diff_diff_diff_lower - strength_diff_diff_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_diff_diff_diff_upper = strength_diff_diff_diff_diff_diff_diff_upper\
    \ - strength_diff_diff_diff_diff_diff_diff_lower\n        val strength_diff_diff_diff_diff_diff_diff_lower\
    \ = strength_diff_diff_diff_diff_diff_diff_lower - strength_diff_diff_diff_diff_diff_diff_upper\n\
    \        val strength", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = class_name_map.foldLeft(0)((acc,\
    \ x) => acc + (extensions_map(x._1).length - extensions_map(x._2).length))\n \
    \       val strongest_extension = class_name_map.filter(_._1 == strength).map(_._2).mkString(\"\
    .\") + \".\" + class_name_map.filter(_._1 == strength).map(_._1).mkString(\".\"\
    ) + \".\"\n        \n        if (extensions_map.size == 0) strongest_extension\n\
    \        else strongest_extension + extensions_map.filter(_._1 == strength).map(_._2).mkString(\"\
    .\") + \".\" + extensions_map.filter(_._1 == strength).map(_._1).mkString(\".\"\
    ) + \".\"", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ class_name_map.getOrElse(x, 0) - x.toUpperCase.length).max\n        val extension\
    \ = extensions_map.getOrElse(strength, \"\")\n        class_name + extension",
  "        val extensions_map = extensions.map(e => e.toUpperCase).zipWithIndex.filter(_._2\
    \ > 0).map(_._1)\n        val extensions_count = extensions_map.length\n     \
    \   val extensions_count_map = extensions_map.map(e => (e.toUpperCase, 1)).reduceByKey(_\
    \ + _)\n        val extensions_count_sorted = extensions_count_map.toSeq.sortBy(_._2).reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.take(extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.map(_._1).mkString(\"\
    .\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\.\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\B\", \"\")\n        val extensions_count_sorted = extensions_count_", "  \
    \      val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val extensions_count_diff\
    \ = extensions_count_upper - extensions_count_lower\n        val extensions_count_diff_upper\
    \ = extensions_count_upper - extensions_count_diff\n        val extensions_count_diff_lower\
    \ = extensions_count_lower - extensions_count_diff\n        val extensions_count_diff_diff_upper\
    \ = extensions_count_diff_upper - extensions_count_diff_lower\n        val extensions_count_diff_diff_lower\
    \ = extensions_count_diff_lower - extensions_count_diff_upper\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper - extensions_count_diff_diff_lower\n    \
    \    val extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_lower\
    \ - extensions_count_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper - extensions_count_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_upper\n        val\
    \ extensions_count_diff_diff_diff_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.filter(_._2\
    \ > class_name_map.get(_._1)).map(_._1).sum\n        val extension = extensions_map.filter(_._1\
    \ == class_name_map.get(_._1)).map(_._2).head\n        s\"$class_name.$extension\"",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n   \
    \     val strength = extensions_map.getOrElse(class_name, 0)\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted =\
    \ extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n        val extensions_sor",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.get(x) -\
    \ x.toString.toString.toUpperCase.length).toArray\n        val max_strength =\
    \ strength.max\n        val max_key = extensions_map.keys.toArray.max\n      \
    \  val max_value = extensions_map.values.toArray.max\n        val max_key = class_name_map.get(max_key)\n\
    \        val max_value = max_key.map(x => class_name_map.get(x))\n        val\
    \ max_key = max_key.map(x => x.toString.toString.toUpperCase)\n        val max_value\
    \ = max_value.map(x => x.toString.toString.toUpperCase)\n        val max_key =\
    \ max_key.map(x => x.toString.toString.toUpperCase)\n        val max_value = max_value.map(x\
    \ => x.toString.toString.toUpperCase)\n        val max_key = max_key.map(x =>\
    \ x.toString.toString.toUpperCase)\n        val max_value = max_value.map(x =>\
    \ x.toString.toString.toUpperCase)\n        val max_key = max_key.map(x => x.toString.toString.toUpperCase)\n\
    \        val max_value = max_value.map(x => x.toString.toString.toUpperCase)\n\
    \        val max_key = max_key.map(x => x.toString.toString.toUpperCase)\n   \
    \     val max_value = max_value.map(x => x.toString.toString.toUpperCase)\n  \
    \      val max_key = max_key.map(x => x.toString.toString.toUpperCase)\n     \
    \   val max_value = max_value.map(x => x.toString.toString.toUpperCase)\n    \
    \    val max_key = max_key.map(x => x.toString.toString.toUpperCase)\n       \
    \ val max_value = max_value.map(x => x.toString.toString.toUpperCase)\n      \
    \  val max_key = max_key.map(x => x.toString.toString.toUpperCase)\n        val\
    \ max_value = max_value.map(x => x.toString.toString.toUpperCase)\n        val\
    \ max_key = max_key.map(x => x.toString.toString.toUpperCase)\n        val max_value\
    \ = max_value.map(x => x.toString.toString.toUpperCase)\n        val max_key =\
    \ max_key.map(x => x.toString.toString.toUpperCase)\n        val max_value = max_value.map(x\
    \ => x.toString.toString.toUpperCase)\n        val max_key = max_key.map(x =>\
    \ x.toString.toString.toUpperCase)\n        val max_value = max_value.map(x ",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).max\n        val extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        class_name + extension", "        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase - e.toLowerCase -> 1)).toMap\n        val class_name_map =\
    \ class_name.map(c => (c.toUpperCase - c.toLowerCase -> 1)).toMap\n        val\
    \ strength = class_name_map.foldLeft(0)((a, b) => if (extensions_map.contains(a._1))\
    \ a._2._1 + a._2._2 else a._2._1 + a._2._2)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val class_name_sorted = class_name_map.toSeq.sortBy(_._1).reverse\n\
    \        val class_name_sorted = class_name_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val strength_sorted = strength.toSeq.sortBy(_._1).reverse\n    \
    \    val strength_sorted = strength_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val class_name_sorted.concat(\".\").concat(extensions_sorted)",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n   \
    \     val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n    \
    \    val extensions_sorted = extensions_sorted.take(extensions_sorted.length-1)\n\
    \        val extensions_sorted = extensions_sorted.map(_._2)\n        val extensions_sorted\
    \ = extensions_sorted.mkString(\".\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"\
    \\\\.\", \"\")\n        class_name + extensions_sorted", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n \
    \       val extensions_sorted = extensions_map.toSeq.sortBy(x => x._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > ", "     \
    \   val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_count = extensions_map.filter(_._2 > 0).map(_._1).length\n\
    \        val extensions_count_sorted = extensions_count.sortWith(_ < _)\n    \
    \    val strength = extensions_count_sorted.last\n        val extensions_sorted\
    \ = extensions_count_sorted.filter(_._2 == strength)\n        val extensions_sorted.head._1\
    \ + \".\" + extensions_sorted.head._2", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_length = class_name.length\n        val strength = extensions_count\
    \ - class_name_length\n        val extension = extensions.find(_.length == class_name_length)\n\
    \        val extension_length = extension.length\n        val extension_strength\
    \ = extension.length - extension_length\n        if (strength < 0) extension.head\n\
    \        else extension.take(strength).mkString.drop(strength).mkString + extension.drop(strength).mkString",
  "        val extensions_count = extensions.map(_.length).sum\n        val class_name_count\
    \ = class_name.length\n        val strength = extensions_count - class_name_count\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.length\
    \ - b.length))\n        extensions_sorted.head", "        val extensions_map =\
    \ extensions.map(e => (e.toUpperCase.size, e.toLowerCase.size)).toMap\n      \
    \  val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n   \
    \     val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n    \
    \    val extensions_sorted = extensions_sorted.takeWhile(_._1 < strength).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.mkString(\"\")\n        class_name\
    \ + extensions_sorted", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    if (extensions_count > 1) {\n            val extensions_sorted = extensions.sortBy(_.length)\n\
    \            val extensions_sorted_upper = extensions_sorted.map(_.toUpperCase)\n\
    \            val extensions_sorted_lower = extensions_sorted.map(_.toLowerCase)\n\
    \            val strength_sorted = extensions_sorted_upper.map(_.length - extensions_sorted_lower.map(_.length)).sum\n\
    \            if (strength_sorted > strength) {\n                val extensions_sorted_sorted\
    \ = extensions_sorted_upper.sortBy(_.length)\n                val extensions_sorted_sorted_upper\
    \ = extensions_sorted_sorted.map(_.toUpperCase)\n                val extensions_sorted_sorted_lower\
    \ = extensions_sorted_sorted.map(_.toLowerCase)\n                val strength_sorted_sorted\
    \ = extensions_sorted_sorted_upper.map(_.length - extensions_sorted_sorted_lower.map(_.length)).sum\n\
    \                if (strength_sorted_sorted > strength) {\n                  \
    \  val extensions_sorted_sorted_sorted = extensions_sorted_sorted_upper.sortBy(_.length)\n\
    \                    val extensions_sorted_sorted_sorted_upper = extensions_sorted_sorted_sorted.map(_.toUpperCase)\n\
    \                    val extensions_sorted_sorted_sorted_lower = extensions_sorted_sorted_sorted.map(_.toLowerCase)\n\
    \                    val strength_sorted_sorted_sorted = extensions_sorted_sorted_sorted_upper.map(_.length\
    \ - extensions_sorted_sorted_sorted_lower.map(_.length)).sum\n               \
    \     if (strength_sorted_sorted_sorted > strength) {\n                      \
    \  val extensions_sorted_sorted_sorted_sorted = extensions_sorted_sorted_sorted_upper.sortBy(_.length)\n\
    \                        val extensions_sorted_sorted_sorted_sorted_upper = extensions_sorted_sorted_sorted_sorted.map(_.toUpperCase)\n\
    \                        val extensions_sorted_sorted_sorted_sorted_lower = extensions_sorted_sorted_sorted_sorted.map(_.toLowerCase)\n\
    \                        val strength_sorted_sorted_sorted_sorted = extensions_sorted_sorted_sorted_sorted_upper.map(_.length\
    \ - extensions_sorted_sorted_sorted_sorted_lower.map(_.length)).sum\n        \
    \                if (strength_sorted_sorted_sorted_sorted > strength) {\n    \
    \                        val extensions_sorted_sorted_sorted_sorted_sorted = extensions_sorted_sorted_sorted_sorted_upper.sortBy(_.length)\n\
    \                            val extensions_sorted_sorted_sorted_sorted_sorted_upper\
    \ = extensions_sorted_sorted_sorted_sorted_sorted.map(_.toUpperCase)\n       \
    \                     val extensions_sorted_sorted_sorted_sorted_sorted_lower\
    \ = extensions_sorted_sorted_sorted_sorted_sorted.", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_sm = extensions_count_upper - extensions_count_lower\
    \ - extensions_count\n        val extensions_count_lower_sm = extensions_count_lower\
    \ - extensions_count_upper - extensions_count\n        val extensions_count_upper_sm_extensions_count_upper\
    \ = extensions_count_upper_sm - extensions_count_upper\n        val extensions_count_lower_sm_extensions_count_lower\
    \ = extensions_count_lower_sm - extensions_count_lower\n        val extensions_count_upper_sm_extensions_count_lower_sm\
    \ = extensions_count_upper_sm_extensions_count_upper - extensions_count_lower_sm\n\
    \        val extensions_count_lower_sm_extensions_count_upper_sm = extensions_count_lower_sm_extensions_count_lower\
    \ - extensions_count_upper_sm\n        val extensions_count_upper_sm_extensions_count_lower_sm_extensions_count_upper_sm\
    \ = extensions_count_upper_sm_extensions_count_lower_sm - extensions_count_lower_sm_extensions_count_upper_sm\n\
    \        val extensions_count_lower_sm_extensions_count_upper_sm_extensions_count_lower_sm\
    \ = extensions_count_lower_sm_extensions_count_upper_sm - extensions_count_upper_sm_extensions_count_lower_sm\n\
    \        val extensions_count_upper_sm_extensions_count_lower_sm_extensions_count_upper_sm_extensions_count_lower_sm\
    \ = extensions_count_upper_sm_extensions_count_lower_sm_extensions_count_upper_sm\
    \ - extensions_count_lower_sm_extensions_count_upper_sm_extensions_count_lower_sm\n\
    \        val extensions_count_lower_sm_extensions_count_upper_sm_extensions_count_lower_sm_extensions_count_upper_sm_extensions_count_lower_sm\
    \ = extensions_count_lower_sm_extensions_count_upper_sm_extensions_count_lower_sm\
    \ - extensions_count_upper_sm_extensions_count_lower_sm_extensions_count_upper_sm_extensions_count_lower_sm\n\
    \        val extensions_count_upper_sm_extensions_count_lower_sm_extensions_count_upper_sm_extensions_count_lower_sm_extensions_count_upper_sm_extensions_count_lower_sm\
    \ = extensions_count_upper_sm_extensions_count_lower_sm_extensions_count_upper_sm_extensions_count_lower_sm\
    \ - extensions_count_lower_sm_extensions_count_upper_sm_extensions_count_lower_sm_extensions_count_upper_sm_extensions_count_lower_sm\n\
    \        val extensions_count_lower_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).toArray\n        val\
    \ max_strength = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength(max_key)\n        val max_key = class_name_map.keys.toArray.max\n\
    \        val max_value = class_name_map.get(max_key)\n        val max_key = max_key.map(x\
    \ => x.toUpperCase).max\n        val max_value = max_value.map(x => x.toUpperCase).max\n\
    \        val max_key = max_key.map(x => x.toLowerCase).max\n        val max_value\
    \ = max_value.map(x => x.toLowerCase).max\n        val max_key = max_key.map(x\
    \ => x.toUpperCase).max\n        val max_value = max_value.map(x => x.toUpperCase).max\n\
    \        val max_key = max_key.map(x => x.toLowerCase).max\n        val max_value\
    \ = max_value.map(x => x.toLowerCase).max\n        val max_key = max_key.map(x\
    \ => x.toUpperCase).max\n        val max_value = max_value.map(x => x.toUpperCase).max\n\
    \        val max_key = max_key.map(x => x.toLowerCase).max\n        val max_value\
    \ = max_value.map(x => x.toLowerCase).max\n        val max_key = max_key.map(x\
    \ => x.toUpperCase).max\n        val max_value = max_value.map(x => x.toUpperCase).max\n\
    \        val max_key = max_key.map(x => x.toLowerCase).max\n        val max_value\
    \ = max_value.map(x => x.toLowerCase).max\n        val max_key = max_key.map(x\
    \ => x.toUpperCase).max\n        val max_value = max_value.map(x => x.toUpperCase).max\n\
    \        val max_key = max_key.map(x => x.toLowerCase).max\n        val max_value\
    \ = max_value.map(x => x.toLowerCase).max\n        val max_key = max_key.map(x\
    \ => x.toUpperCase).max\n        val max_value = max_value.map(x => x.toUpperCase).max\n\
    \        val max_key = max_key.map(x => x.toLowerCase).max\n        val max_value\
    \ = max_value.map(x => x.toLowerCase).max\n        val max_key = max_key.map(x\
    \ => x.toUpperCase).max\n        val max_value = max_value.map(x => x.toUpperCase).max\n\
    \        val max_key = max_key.map(x => x.toLowerCase).max\n        ", "     \
    \   val extensions_map = extensions.map(e => e.toUpperCase).zipWithIndex.toMap\n\
    \        val class_name_map = class_name.zipWithIndex.toMap\n        val extensions_count\
    \ = extensions_map.size\n        val class_name_count = class_name_map.size\n\
    \        val strength = extensions_count - class_name_count\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val class_name_sorted =\
    \ class_name_map.toSeq.sortBy(_._2).reverse\n        val class_name_strength =\
    \ class_name_sorted.map(x => x._1).sum\n        val extensions_strength = extensions_sorted.map(x\
    \ => x._1).sum\n        val strength_fraction = strength / extensions_count\n\
    \        val strength_fraction = strength_fraction * 100\n        val strength_fraction\
    \ = strength_fraction.toInt\n        if (strength_fraction < 0) strength_fraction\
    \ = 0\n        if (strength_fraction > 100) strength_fraction = 100\n        if\
    \ (strength_fraction == 0) strength_fraction = 1\n        val strength_fraction\
    \ = strength_fraction.toString.padLeft(2, '0')\n        val strength_fraction\
    \ = strength_fraction.substring(0, strength_fraction.length - 1)\n        val\
    \ class_name_strength = class_name_strength.toString.padLeft(2, '0')\n       \
    \ val class_name_strength = class_name_strength.substring(0, class_name_strength.length\
    \ - 1)\n        if (strength_fraction < class_name_strength) class_name_strength\
    \ + extensions_strength\n        else class_name_strength + extensions_strength\
    \ + extensions_fraction", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n\
    \        val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.toList.sortWith(x => x._2 > x._1)\n        val extension =\
    \ sorted_extensions.find(x => x._2 == strength).getOrElse(\"\")\n        class_name\
    \ + extension", "        val extensions_count = extensions.count\n        val\
    \ extensions_count_upper = extensions.count(x => x.toUpperCase == x)\n       \
    \ val extensions_count_lower = extensions.count(x => x.toLowerCase == x)\n   \
    \     val extensions_count_diff = extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_diff_upper = extensions_count_diff / extensions_count_upper\n\
    \        val extensions_count_diff_lower = extensions_count_diff / extensions_count_lower\n\
    \        val extensions_count_diff_diff_upper = extensions_count_diff_upper /\
    \ extensions_count_upper\n        val extensions_count_diff_diff_lower = extensions_count_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper / extensions_count_upper\n        val extensions_count_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_lower / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper / extensions_count_upper\n        val\
    \ extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper / extensions_count_upper\n    \
    \    val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper / extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_upper / extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_upper / extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_upper / extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_lower\
    \ / extension", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ (x - class_name_map.get(x)).abs).max\n        val extensions_sorted = extensions_map.values.sortWith((x,\
    \ y) => strength - y)\n        val class_name_sorted = class_name_map.values.sortWith((x,\
    \ y) => strength - y)\n        val extensions_sorted_list = extensions_sorted.map(x\
    \ => class_name_sorted + x).mkString(\".\")\n        extensions_sorted_list",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_upper = strength.toDouble / extensions_count.toDouble\n\
    \        val strength_lower = strength.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ strength_upper = strength_upper.toDouble / extensions_count_upper.toDouble\n\
    \        val strength_lower = strength_lower.toDouble / extensions_count_lower.toDouble\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ strength_upper = strength_upper.toDouble / extensions_count_upper.toDouble\n\
    \        val strength_lower = strength_lower.toDouble / extensions_count_lower.toDouble\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ strength_upper = strength_upper.toDouble / extensions_count_upper.toDouble\n\
    \        val strength_lower = strength_lower.toDouble / extensions_count_lower.toDouble\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ strength_upper = strength_upper.toDouble / extensions_count_upper.toDouble\n\
    \        val strength_lower = strength_lower.toDouble / extensions_count_lower.toDouble\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ strength_upper = strength_upper.toDouble / extensions_count_upper.toDouble\n\
    \        val strength_lower = strength_lower.toDouble / extensions_count_lower.toDouble\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ strength_upper = strength_upper.toDouble / extensions_count_upper.toDouble\n\
    \        val strength_lower = strength_lower.toDouble / extensions_count_", " \
    \       val extensions_map = extensions.map(x => (x.toUpperCase - x.toLowerCase\
    \ -> x)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase\
    \ - x.toLowerCase -> x)).toMap\n        val max_strength = extensions_map.values.foldLeft(0)((x,\
    \ y) => if (x > y) x else y)\n        val max_key = extensions_map.keys.foldLeft(0)((x,\
    \ y) => if (x > y) x else y)\n        val max_key_index = max_key - 1\n      \
    \  val max_key_value = extensions_map.get(max_key)\n        val max_key_value_map\
    \ = max_key_value.map(x => (x.toUpperCase - x.toLowerCase -> x)).toMap\n     \
    \   val max_key_value_map_keys = max_key_value_map.keys\n        val max_key_value_map_values\
    \ = max_key_value_map.values\n        val max_key_value_map_keys_sorted = max_key_value_map_keys.sortWith(_\
    \ < _)\n        val max_key_value_map_values_sorted = max_key_value_map_values.sortWith(_\
    \ < _)\n        val max_key_value_map_keys_sorted_index = max_key_value_map_keys_sorted.indexOf(max_key_value_map_keys_sorted[0])\n\
    \        val max_key_value_map_values_sorted_index = max_key_value_map_values_sorted.indexOf(max_key_value_map_values_sorted[0])\n\
    \        val max_key_value_map_keys_sorted_value = max_key_value_map_keys_sorted[max_key_value_map_keys_sorted_index]\n\
    \        val max_key_value_map_values_sorted_value = max_key_value_map_values_sorted[max_key_value_map_values_sorted_index]\n\
    \        val max_key_value_map_keys_sorted_value_map = max_key_value_map_keys_sorted_value.map(x\
    \ => (x.toUpperCase - x.toLowerCase -> x)).toMap\n        val max_key_value_map_values_sorted_value_map\
    \ = max_key_value_map_values_sorted_value.map(x => (x.toUpperCase - x.toLowerCase\
    \ -> x)).toMap\n        val max_key_value_map_keys_sorted_value_map_keys = max_key_value_map_keys_sorted_value_map.keys\n\
    \        val max_key_value_map_keys_sorted_value_map_values = max_key_value_map_keys_sorted_value_map.values\n\
    \        val max_key_value_map_keys_sorted_value_map_keys_sorted = max_key_value_map_keys_sorted_value_map_keys.sortWith(_\
    \ < _)\n        val max_key_value_map_keys_sorted_value_map_values_sorted = max_key_value_map_keys_sorted_value_map_values.sortWith(_\
    \ < _)\n        val max_key_value_map_keys_sorted_value_map_keys_sorted_index\
    \ = max_key_value_map_keys_sorted_value_map_keys_sorted.indexOf(max_key_value_map_keys_sorted_value_map_keys_sorted[0])\n",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val extensions_count_upper_ratio = extensions_count_upper\
    \ / extensions_count.toDouble\n        val extensions_count_lower_ratio = extensions_count_lower\
    \ / extensions_count.toDouble\n        val strength_ratio = strength / extensions_count.toDouble\n\
    \        val extensions_count_ratio = extensions_count / extensions_count.toDouble\n\
    \        val extensions_count_ratio2 = extensions_count_ratio / extensions_count_ratio\n\
    \        val extensions_count_ratio3 = extensions_count_ratio * extensions_count_ratio\n\
    \        val extensions_count_ratio4 = extensions_count_ratio * extensions_count_ratio\
    \ * extensions_count_ratio\n        val extensions_count_ratio5 = extensions_count_ratio\
    \ * extensions_count_ratio * extensions_count_ratio * extensions_count_ratio\n\
    \        val extensions_count_ratio6 = extensions_count_ratio * extensions_count_ratio\
    \ * extensions_count_ratio * extensions_count_ratio * extensions_count_ratio\n\
    \        val extensions_count_ratio7 = extensions_count_ratio * extensions_count_ratio\
    \ * extensions_count_ratio * extensions_count_ratio * extensions_count_ratio *\
    \ extensions_count_ratio\n        val extensions_count_ratio8 = extensions_count_ratio\
    \ * extensions_count_ratio * extensions_count_ratio * extensions_count_ratio *\
    \ extensions_count_ratio * extensions_count_ratio * extensions_count_ratio * extensions_count_ratio\n\
    \        val extensions_count_ratio9 = extensions_count_ratio * extensions_count_ratio\
    \ * extensions_count_ratio * extensions_count_ratio * extensions_count_ratio *\
    \ extensions_count_ratio * extensions_count_ratio * extensions_count_ratio * extensions_count_ratio\
    \ * extensions_count_ratio * extensions_count_ratio\n        val extensions_count_ratio10\
    \ = extensions_count_ratio * extensions_count_ratio * extensions_count_ratio *\
    \ extensions_count_ratio * extensions_count_ratio * extensions_count_ratio * extensions_count_ratio\
    \ * extensions_count_ratio * extensions_count_ratio * extensions_count_ratio *\
    \ extensions_count_ratio * extensions_count_ratio * extensions_count_ratio * extensions_count_ratio\
    \ * extensions_count_ratio * extensions_count_ratio * extensions_count_ratio *\
    \ extensions_count_ratio * extensions_count_ratio * extensions_count_ratio * extensions_count_ratio\
    \ * extensions_count_ratio * extensions_count_ratio * extensions_count_ratio",
  "        val extensions_map = extensions.map(e => (e.toUpperCase - e.toLowerCase\
    \ -> 1)).toMap\n        val class_name_map = class_name.map(c => (c.toUpperCase\
    \ - c.toLowerCase -> 1)).toMap\n        val max_extension = extensions_map.maxBy(_._2)._1\n\
    \        val max_class_name = class_name_map.maxBy(_._2)._1\n        val strength\
    \ = max_class_name - max_extension\n        val class_name = max_class_name\n\
    \        val extension = max_extension\n        class_name + \".\" + extension",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n   \
    \     val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val first_extension = sorted_extensions.head._1\n\
    \        val first_extension_strength = sorted_extensions.head._2\n        val\
    \ second_extension = sorted_extensions.last._1\n        val second_extension_strength\
    \ = sorted_extensions.last._2\n        val strength_difference = strength - first_extension_strength\
    \ - second_extension_strength\n        if(strength_difference < 0)\n         \
    \   first_extension\n        else\n            second_extension", "        var\
    \ strongest_extension = \"\"\n        var strongest_extension_strength = -1\n\
    \        var strongest_extension_strength_counter = 0\n        var strongest_extension_strength_counter2\
    \ = 0\n        var strongest_extension_strength_counter3 = 0\n        var strongest_extension_strength_counter4\
    \ = 0\n        var strongest_extension_strength_counter5 = 0\n        var strongest_extension_strength_counter6\
    \ = 0\n        var strongest_extension_strength_counter7 = 0\n        var strongest_extension_strength_counter8\
    \ = 0\n        var strongest_extension_strength_counter9 = 0\n        var strongest_extension_strength_counter10\
    \ = 0\n        var strongest_extension_strength_counter11 = 0\n        var strongest_extension_strength_counter12\
    \ = 0\n        var strongest_extension_strength_counter13 = 0\n        var strongest_extension_strength_counter14\
    \ = 0\n        var strongest_extension_strength_counter15 = 0\n        var strongest_extension_strength_counter16\
    \ = 0\n        var strongest_extension_strength_counter17 = 0\n        var strongest_extension_strength_counter18\
    \ = 0\n        var strongest_extension_strength_counter19 = 0\n        var strongest_extension_strength_counter20\
    \ = 0\n        var strongest_extension_strength_counter21 = 0\n        var strongest_extension_strength_counter22\
    \ = 0\n        var strongest_extension_strength_counter23 = 0\n        var strongest_extension_strength_counter24\
    \ = 0\n        var strongest_extension_strength_counter25 = 0\n        var strongest_extension_strength_counter26\
    \ = 0\n        var strongest_extension_strength_counter27 = 0\n        var strongest_extension_strength_counter28\
    \ = 0\n        var strongest_extension_strength_counter29 = 0\n        var strongest_extension_strength_counter30\
    \ = 0\n        var strongest_extension_strength_counter31 = 0\n        var strongest_extension_strength_counter32\
    \ = 0\n        var strongest_extension_strength_counter33 = 0\n        var strongest_extension_strength_counter34\
    \ = 0\n        var strongest_extension_strength_counter35 = 0\n        var strongest_extension_strength_counter36\
    \ = 0\n        var strongest_extension_strength_counter37 = 0\n        var strongest_extension_strength_counter38\
    \ = 0\n        var strongest_extension_strength_counter39 = 0\n        var strongest_extension_strength_counter40\
    \ = 0\n        var strongest_extension_strength_counter41 = 0\n        var strongest_extension_",
  "        val extensions_map = extensions.map(_.toUpperCase).zip(extensions.map(_.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(_.toUpperCase).zip(class_name.map(_.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x.toInt - class_name_map.getOrElse(x,\
    \ 0)))\n        val max_strength = strength.max\n        val max_index = strength.indexWhere(x\
    \ => x == max_strength)\n        val max_extension = extensions(max_index)\n \
    \       val class_name_with_max_extension = class_name ++ max_extension\n    \
    \    val extensions_with_max_extension = extensions filterNot (x => x == max_extension)\n\
    \        val extensions_with_max_extension_map = extensions_with_max_extension.map(_.toUpperCase).zip(extensions_with_max_extension.map(_.toLowerCase)).toMap\n\
    \        val strength_with_max_extension = extensions_map.values.map(x => (x.toInt\
    \ - extensions_with_max_extension_map.getOrElse(x, 0)))\n        val max_strength_with_max_extension\
    \ = strength_with_max_extension.max\n        val max_index_with_max_extension\
    \ = strength_with_max_extension.indexWhere(x => x == max_strength_with_max_extension)\n\
    \        val max_extension_with_max_extension = extensions_with_max_extension(max_index_with_max_extension)\n\
    \        val extensions_with_max_extension_with_max_extension = extensions_with_max_extension\
    \ filterNot (x => x == max_extension_with_max_extension)\n        val extensions_with_max_extension_with_max_extension_map\
    \ = extensions_with_max_extension_with_max_extension.map(_.toUpperCase).zip(extensions_with_max_extension_with_max_extension.map(_.toLowerCase)).toMap\n\
    \        val strength_with_max_extension_with_max_extension = extensions_map.values.map(x\
    \ => (x.toInt - extensions_with_max_extension_with_max_extension_map.getOrElse(x,\
    \ 0)))\n        val max_strength_with_max_extension_with_max_extension = strength_with_max_extension_with_max_extension.max\n\
    \        val max_index_with_max_extension_with_max_extension = strength_with_max_extension_with_max_extension.indexWhere(x\
    \ => x == max_strength_with_max_extension_with_max_extension)\n        val max_extension_with_max_extension_with_max_extension\
    \ = extensions_with_max_extension_with_max_extension(max_index_with_max_extension_with_max_extension)\n\
    \        val extensions_with_max_extension_with_max_extension_with_max_extension\
    \ = extensions_with_max_extension_with_max_extension filterNot (x => x == max_extension_with_max_extension_with_max_extension_with_max_extension)\n\
    \        val extensions_with_max_extension_with_max_extension_with_max_extension_map\
    \ = extensions_with_max_extension_with_max_extension_with_max_extension.map(",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_upper = strength / extensions_count_upper\n\
    \        val strength_lower = strength / extensions_count_lower\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val\
    \ extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val\
    \ extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val\
    \ extensions_count_lower = extensions.", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions_map.size\n\
    \        val class_name_count = class_name_map.size\n        val strength = extensions_count\
    \ - class_name_count\n        if (strength == 0) class_name\n        else if (strength\
    \ > 0) class_name + extensions_map.getOrElse(class_name_map.getOrElse(strength,\
    \ \"\"), \"\")\n        else class_name + extensions_map.getOrElse(class_name_map.getOrElse(strength,\
    \ \"\"), \"\") + extensions_map.getOrElse(class_name_map.getOrElse(strength, \"\
    \"), \"\")", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val strongest_extension\
    \ = extensions_map.maxBy(x => strength(x._1))\n        val strongest_extension_class\
    \ = class_name_map(strongest_extension._1)\n        val strongest_extension_name\
    \ = strongest_extension._2\n        val strongest_extension_class_name = class_name_map(strongest_extension_class)\n\
    \        val strongest_extension_class_name_with_extension = strongest_extension_class\
    \ + \".\" + strongest_extension_name\n        val strongest_extension_class_name_with_extension_with_slash\
    \ = strongest_extension_class_name_with_extension + \".\"\n        val strongest_extension_class_name_with_extension_with_slash_with_slash\
    \ = strongest_extension_class_name_with_extension_with_slash + \"/\"\n       \
    \ val strongest_extension_class_name_with_extension_with_slash_with_slash_with_slash\
    \ = strongest_extension_class_name_with_extension_with_slash_with_slash + \"//\"\
    \n        val strongest_extension_class_name_with_extension_with_slash_with_slash_with_slash_with_slash\
    \ = strongest_extension_class_name_with_extension_with_slash_with_slash_with_slash\
    \ + \"///\"\n        val strongest_extension_class_name_with_extension_with_slash_with_slash_with_slash_with_slash_with_slash\
    \ = strongest_extension_class_name_with_extension_with_slash_with_slash_with_slash_with_slash\
    \ + \"////\"\n        val strongest_extension_class_name_with_extension_with_slash_with_slash_with_slash_with_slash_with_slash_with_slash\
    \ = strongest_extension_class_name_with_extension_with_slash_with_slash_with_slash_with_slash_with_slash\
    \ + \"/////\"\n        val strongest_extension_class_name_with_extension_with_slash_with_slash_with_slash_with_slash_with_slash_with_slash_with_slash_with_slash\
    \ = strongest_extension_class_name_with_extension", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val class_name_length = class_name.length\n\
    \        val strength = extensions_count - class_name_length\n        val extensions_sorted\
    \ = extensions.sortWith((a, b) => strength - a.length - b.length)\n        val\
    \ extensions_sorted = extensions_sorted.take(1).mkString.concat(\".\").concat(extensions_sorted.last)\n\
    \        class_name+\".\"+extensions_sorted", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x.toUpperCase, x.toLowerCase)).foldLeft(0)((x,\
    \ y) => if (x == 0) y else x + y)\n        val strength_map = strength.toMap\n\
    \        val strongest_extension = extensions_map.values.find(x => strength_map.contains(x))\n\
    \        strongest_extension match {\n            case Some(extension) => class_name_map\
    \ + extension\n            case None => class_name\n        }", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val extensions_count_cap = extensions.map(_.toUpperCase.length).sum -\
    \ extensions.map(_.toLowerCase.length).sum\n        val extensions_count_sm =\
    \ extensions.map(_.toLowerCase.length).sum - extensions.map(_.toUpperCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower - extensions_count_cap\
    \ - extensions_count_sm\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength.compareTo(a.toString.length - b.toString.length))\n        val\
    \ extensions_sorted = extensions_sorted.take(extensions_sorted.length-1)\n   \
    \     val extensions_sorted = extensions_sorted.mkString(\"\") + \".\" + extensions_sorted.last\n\
    \        val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val class_name_sorted = class_name_upper +\
    \ class_name_lower\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^a-z]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^_]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^_]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^_]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^_]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^_]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^_]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_sorted = class_name_sorted.replaceAll(\"\
    [^_]\", \"\")\n        val class_name_sorted = class_name_sorted.replace", " \
    \       val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n   \
    \     val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val first_extension = sorted_extensions.head\n\
    \        val first_extension_strength = first_extension._2\n        if (strength\
    \ == 0) first_extension\n        else if (strength < first_extension_strength)\
    \ first_extension\n        else class_name + first_extension", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_reversed = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_length = extensions_count_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum = extensions_count_sorted_reversed_length.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted = extensions_count_sorted_reversed_length.sortWith((a,\
    \ b) => b - a)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted.reverse\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sum\n \
    \       val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sortWith((a,\
    \ b) => b - a)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sorted.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sorted.sortWith((a,\
    \ b) => b - a)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sorted.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sorted.sortWith((a,\
    \ b) => b - a)\n        val ", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortWith(_.length < _.length)\n\
    \        val extensions_count_sorted_length = extensions_count_sorted.map(_.length).sum\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted.sortWith(_.length < _.length)\n    \
    \    val extensions_count_sorted_length_sorted_length_sorted_length = extensions_count_sorted_length_sorted_length.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortWith(_.length < _.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_",
  "        val extensions_count = extensions.map(_.length).sum\n        val class_name_count\
    \ = class_name.length\n        val strength = extensions_count - class_name_count\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => a.length - b.length)\n\
    \        val extension_first = extensions_sorted.head\n        val extension_last\
    \ = extensions_sorted.last\n        val extension_length = extension_last.length\
    \ - extension_first.length\n        val extension_first_upper = extension_first.substring(0,1)\n\
    \        val extension_last_upper = extension_last.substring(0,1)\n        val\
    \ extension_first_lower = extension_first.substring(1,2)\n        val extension_last_lower\
    \ = extension_last.substring(1,2)\n        val extension_first_upper_count = extension_first_upper.length\n\
    \        val extension_last_upper_count = extension_last_upper.length\n      \
    \  val extension_first_lower_count = extension_first_lower.length\n        val\
    \ extension_last_lower_count = extension_last_lower.length\n        val extension_first_upper_sm\
    \ = extension_first_upper_count - extension_first_upper_sm_count\n        val\
    \ extension_last_upper_sm = extension_last_upper_count - extension_last_upper_sm_count\n\
    \        val extension_first_lower_sm = extension_first_lower_count - extension_first_lower_sm_count\n\
    \        val extension_last_lower_sm = extension_last_lower_count - extension_last_lower_sm_count\n\
    \        val extension_strength = extension_length - extension_first_upper_sm\
    \ - extension_last_lower_sm\n        if (extension_strength > strength) {\n  \
    \          class_name + extension_first\n        } else if (extension_strength\
    \ == strength) {\n            class_name + extension_first + extension_last\n\
    \        } else if (extension_strength < strength) {\n            class_name +\
    \ extension_first + extension_last + extension_first\n        }", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x - class_name_map.get(x)).abs)\n\
    \        val max_strength = strength.max\n        val max_key = strength.maxBy(x\
    \ => x)\n        val max_key = max_key.key\n        val max_value = max_key.map(x\
    \ => extensions_map(x)).mkString(\".\")\n        val max_value = max_value.substring(0,max_value.lastIndexOf(\"\
    .\"))\n        class_name + max_value", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions_map.size\n\
    \        val class_name_count = class_name_map.size\n        val strength = extensions_count\
    \ - class_name_count\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val class_name_sorted = class_name_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_first = extensions_sorted.head._2\n        val class_name_first\
    \ = class_name_sorted.head._2\n        val extensions_last = extensions_sorted.last._2\n\
    \        val class_name_last = class_name_sorted.last._2\n        val extensions_first_index\
    \ = extensions_sorted.indexOf((extensions_first.toUpperCase + extensions_first.toLowerCase))\n\
    \        val class_name_first_index = class_name_sorted.indexOf((class_name_first.toUpperCase\
    \ + class_name_first.toLowerCase))\n        val extensions_last_index = extensions_sorted.indexOf((extensions_last.toUpperCase\
    \ + extensions_last.toLowerCase))\n        val class_name_last_index = class_name_sorted.indexOf((class_name_last.toUpperCase\
    \ + class_name_last.toLowerCase))\n        val extensions_first_index_2 = extensions_sorted.indexOf((extensions_first.toUpperCase\
    \ + extensions_first.toLowerCase))\n        val class_name_first_index_2 = class_name_sorted.indexOf((class_name_first.toUpperCase\
    \ + class_name_first.toLowerCase))\n        val extensions_last_index_2 = extensions_sorted.indexOf((extensions_last.toUpperCase\
    \ + extensions_last.toLowerCase))\n        val class_name_last_index_2 = class_name_sorted.indexOf((class_name_last.toUpperCase\
    \ + class_name_last.toLowerCase))\n        if (extensions_first_index == -1 &&\
    \ class_name_first_index == -1 && extensions_last_index == -1 && class_name_last_index\
    \ == -1) {\n            class_name + \".\" + extensions_first\n        } else\
    \ if (extensions_first_index == -1 && class_name_first_index == -1 && extensions_last_index\
    \ != -1 && class_name_last_index != -1) {\n            class_name + \".\" + extensions_last\n\
    \        } else if (extensions_first_index == -1 && class_name_first_index !=\
    \ -1 && extensions_last_index == -1 && class_name_last_index != -1) {\n      \
    \      class_name + \".\" + extensions_first\n        } else if (extensions_first_index\
    \ != -1 && class_name_first_index == -1 && extensions_last_index == -1 && class_name_last_index\
    \ != -1) {\n            class_name + \".", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - strength\n        val strength_lower\
    \ = extensions_count_lower - strength\n        val strength_total = strength_upper\
    \ + strength_lower\n        val strength_total_upper = strength_upper + strength_total\n\
    \        val strength_total_lower = strength_lower + strength_total\n        val\
    \ strength_total_total = strength_total_upper + strength_total_lower\n       \
    \ val strength_total_total_upper = strength_total_upper + strength_total_total\n\
    \        val strength_total_total_lower = strength_total_lower + strength_total_total\n\
    \        val strength_total_total_total = strength_total_total_upper + strength_total_total_lower\n\
    \        val strength_total_total_total_upper = strength_total_total_upper + strength_total_total_total\n\
    \        val strength_total_total_total_lower = strength_total_total_lower + strength_total_total_total\n\
    \        val strength_total_total_total_total = strength_total_total_total_upper\
    \ + strength_total_total_total_lower\n        val strength_total_total_total_total_upper\
    \ = strength_total_total_total_upper + strength_total_total_total_total\n    \
    \    val strength_total_total_total_total_lower = strength_total_total_total_lower\
    \ + strength_total_total_total_total\n        val strength_total_total_total_total_total\
    \ = strength_total_total_total_total_upper + strength_total_total_total_total_lower\n\
    \        val strength_total_total_total_total_total_upper = strength_total_total_total_total_upper\
    \ + strength_total_total_total_total_total\n        val strength_total_total_total_total_total_lower\
    \ = strength_total_total_total_total_lower + strength_total_total_total_total_total\n\
    \        val strength_total_total_total_total_total_total = strength_total_total_total_total_total_upper\
    \ + strength_total_total_total_total_total_lower\n        val strength_total_total_total_total_total_total_upper\
    \ = strength_total_total_total_total_total_upper + strength_total_total_total_total_total_total\n\
    \        val strength_total_total_total_total_total_total_lower = strength_total_total_total_total_total_lower\
    \ + strength_total_total_total_total_total_total\n        val strength_total_total_total_total_total_total_total\
    \ = strength_total_total_total_total_total_upper + strength_total_total_total_total_total_total_lower\n\
    \        val strength_total_total_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_ == 'Z') * -1)\n   \
    \     val extensions_sorted = extensions_map.toList.sortWith(_ < _)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ < 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ < 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ < 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ < 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ < 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ < 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ < 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ < 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ < 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ < 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ < 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ < 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ < 0).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n        val\
    \ extensions_", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_diff = extensions_count - extensions_count_upper\n \
    \       val extensions_count_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_lower = extension", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val class_name_length = class_name.length\n\
    \        val strength = extensions_count - class_name_length\n        val extensions_sorted\
    \ = extensions.sortWith(_.length > _.length)\n        val extension_length = extensions_sorted.map(_.length).sum\n\
    \        val extension_strength = extension_length - class_name_length\n     \
    \   val extension_sorted = extensions_sorted.sortWith(_.length > _.length)\n \
    \       val extension_first = extension_sorted.head\n        val extension_last\
    \ = extension_sorted.last\n        val extension_first_length = extension_first.length\n\
    \        val extension_last_length = extension_last.length\n        val extension_first_strength\
    \ = extension_first_length - class_name_length\n        val extension_last_strength\
    \ = extension_last_length - class_name_length\n        val extension_first_sorted\
    \ = extension_first.sortWith(_.length > _.length)\n        val extension_last_sorted\
    \ = extension_last.sortWith(_.length > _.length)\n        val extension_first_first\
    \ = extension_first_sorted.head\n        val extension_last_first = extension_last_sorted.head\n\
    \        val extension_first_last = extension_first_sorted.last\n        val extension_last_last\
    \ = extension_last_sorted.last\n        val extension_first_first_length = extension_first_first.length\n\
    \        val extension_last_first_length = extension_last_first.length\n     \
    \   val extension_first_last_strength = extension_first_last_length - class_name_length\n\
    \        val extension_last_last_strength = extension_last_last_length - class_name_length\n\
    \        val extension_first_last_sorted = extension_first_last.sortWith(_.length\
    \ > _.length)\n        val extension_last_last_sorted = extension_last_last.sortWith(_.length\
    \ > _.length)\n        val extension_first_last_first = extension_first_last_sorted.head\n\
    \        val extension_last_last_first = extension_last_last_sorted.head\n   \
    \     val extension_first_last_last = extension_first_last_sorted.last\n     \
    \   val extension_last_last_last = extension_last_last_sorted.last\n        val\
    \ extension_first_first_strength = extension_first_first_length - class_name_length\n\
    \        val extension_last_first_strength = extension_last_first_length - class_name_length\n\
    \        val extension_first_last_last_strength = extension_first_last_last_length\
    \ - class_name_length\n        val extension_last_last_last_strength = extension_last_last_last_length\
    \ - class_name_length\n        val extension_first_first_sorted = extension_first_first.sortWith(_.length\
    \ > _.length)\n        val ", "        val extensions_map = extensions.map(x =>\
    \ (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toString.toString.toUpperCase.length).toArray\n\
    \        val max_strength = strength.max\n        val max_key = extensions_map.keys.max\n\
    \        val max_value = strength.max\n        val max_key_value = class_name_map.getOrElse(max_key,\
    \ 0)\n        val max_key_value_length = max_key_value.toString.toString.length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n",
  "        val extensions_map = extensions.map(e => (e.toUpperCase.size, e.toLowerCase.size)).toMap\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_", "        val\
    \ extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val extensions_count_diff\
    \ = extensions_count_upper - extensions_count_lower\n        val extensions_count_diff_frac\
    \ = extensions_count_diff / extensions_count_upper\n        val extensions_count_diff_frac_upper\
    \ = extensions_count_diff_frac / extensions_count_upper\n        val extensions_count_diff_frac_lower\
    \ = extensions_count_diff_frac / extensions_count_lower\n        val extensions_count_diff_frac_diff\
    \ = extensions_count_diff_frac_upper - extensions_count_diff_frac_lower\n    \
    \    val extensions_count_diff_frac_diff_frac = extensions_count_diff_frac_diff\
    \ / extensions_count_diff_frac_upper\n        val extensions_count_diff_frac_diff_frac_upper\
    \ = extensions_count_diff_frac_diff_frac / extensions_count_diff_frac_upper\n\
    \        val extensions_count_diff_frac_diff_frac_lower = extensions_count_diff_frac_diff_frac\
    \ / extensions_count_diff_frac_lower\n        val extensions_count_diff_frac_diff_frac_diff\
    \ = extensions_count_diff_frac_diff_frac_upper - extensions_count_diff_frac_diff_frac_lower\n\
    \        val extensions_count_diff_frac_diff_frac_diff_frac = extensions_count_diff_frac_diff_frac_diff_frac\
    \ / extensions_count_diff_frac_diff_frac_upper\n        val extensions_count_diff_frac_diff_frac_diff_frac_upper\
    \ = extensions_count_diff_frac_diff_frac_diff_frac / extensions_count_diff_frac_diff_frac_upper\n\
    \        val extensions_count_diff_frac_diff_frac_diff_frac_lower = extensions_count_diff_frac_diff_frac_diff_frac\
    \ / extensions_count_diff_frac_diff_frac_lower\n        val extensions_count_diff_frac_diff_frac_diff_frac_diff\
    \ = extensions_count_diff_frac_diff_frac_diff_frac_upper - extensions_count_diff_frac_diff_frac_diff_frac_lower\n\
    \        val extensions_count_diff_frac_diff_frac_diff_frac_diff_frac = extensions_count_diff_frac_diff_frac_diff_frac_diff_frac\
    \ / extensions_count_diff_frac_diff_frac_diff_frac_upper\n        val extensions_count_diff_frac_diff_frac_diff_frac_diff_frac_upper\
    \ = extensions_count_diff_frac_diff_frac_diff_frac_diff_frac / ", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((x, y) => if (x < y) x else\
    \ y)\n        val extensions_sorted = extensions_map.values.sortWith((x, y) =>\
    \ x < y)\n        val extensions_sorted = extensions_sorted.takeWhile(_ < strength)\n\
    \        val extensions_sorted = extensions_sorted.map(_._1).mkString(\"\") +\
    \ extensions_sorted.last\n        class_name + extensions_sorted", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x - class_name_map.get(x)).abs)\n\
    \        val max_strength = strength.max\n        val max_key = strength.maxBy(x\
    \ => x)\n        val max_key = max_key.key\n        val max_value = max_key.map(x\
    \ => extensions_map(x)).mkString(\"\")\n        val max_key = max_key.map(x =>\
    \ class_name_map(x)).mkString(\"\")\n        val max_value = max_key.map(x =>\
    \ extensions_map(x)).mkString(\"\")\n        val max_key = max_key.map(x => class_name_map(x)).mkString(\"\
    \")\n        val max_value = max_key.map(x => extensions_map(x)).mkString(\"\"\
    )\n        val max_key = max_key.map(x => class_name_map(x)).mkString(\"\")\n\
    \        val max_value = max_key.map(x => extensions_map(x)).mkString(\"\")\n\
    \        val max_key = max_key.map(x => class_name_map(x)).mkString(\"\")\n  \
    \      val max_value = max_key.map(x => extensions_map(x)).mkString(\"\")\n  \
    \      val max_key = max_key.map(x => class_name_map(x)).mkString(\"\")\n    \
    \    val max_value = max_key.map(x => extensions_map(x)).mkString(\"\")\n    \
    \    val max_key = max_key.map(x => class_name_map(x)).mkString(\"\")\n      \
    \  val max_value = max_key.map(x => extensions_map(x)).mkString(\"\")\n      \
    \  val max_key = max_key.map(x => class_name_map(x)).mkString(\"\")\n        val\
    \ max_value = max_key.map(x => extensions_map(x)).mkString(\"\")\n        val\
    \ max_key = max_key.map(x => class_name_map(x)).mkString(\"\")\n        val max_value\
    \ = max_key.map(x => extensions_map(x)).mkString(\"\")\n        val max_key =\
    \ max_key.map(x => class_name_map(x)).mkString(\"\")\n        val max_value =\
    \ max_key.map(x => extensions_map(x)).mkString(\"\")\n        val max_key = max_key.map(x\
    \ => class_name_map(x)).mkString(\"\")\n        val max_value = max_key.map(x\
    \ => extensions_map(x)).mkString(\"\")\n        val max_key = max_key.map(x =>\
    \ class_name_map(x)).mkString(\"\")\n        val max_value = max_key.map(x =>\
    \ extensions_map(x)).mkString(\"\")\n        val max_key = max_key.map(x => ",
  "        val extensions_map = extensions.map(_.toUpperCase).zipWithIndex.toMap\n\
    \        val class_name_map = class_name.zipWithIndex.toMap\n        val strength\
    \ = extensions_map.filter(_._2 > class_name_map.filter(_._2 == _._2).length).map(_._1).max\n\
    \        val class_name_with_strength = class_name_map.filter(_._2 == strength).map(_._1).mkString(\"\
    .\") + \".\" + extensions_map.filter(_._2 == strength).map(_._1).mkString(\".\"\
    ) + \".\" + extensions_map.filter(_._2 > class_name_map.filter(_._2 == _._2).length).map(_._1).mkString(\"\
    .\") + \".\" + extensions_map.filter(_._2 > class_name_map.filter(_._2 > class_name_map.filter(_._2\
    \ == _._2).length).length).mkString(\".\") + \".\" + extensions_map.filter(_._2\
    \ > class_name_map.filter(_._2 > class_name_map.filter(_._2 > class_name_map.filter(_._2\
    \ == _._2).length).length).length).mkString(\".\") + \".\" + extensions_map.filter(_._2\
    \ > class_name_map.filter(_._2 > class_name_map.filter(_._2 > class_name_map.filter(_._2\
    \ > class_name_map.filter(_._2 == _._2).length).length).length).length).mkString(\"\
    .\") + \".\" + extensions_map.filter(_._2 > class_name_map.filter(_._2 > class_name_map.filter(_._2\
    \ > class_name_map.filter(_._2 > class_name_map.filter(_._2 > class_name_map.filter(_._2\
    \ > class_name_map.filter(_._2 > class_name_map.filter(_._2 > class_name_map.filter(_._2\
    \ > class_name_map.filter(_._2 > class_name_map.filter(_._2 > class_name_map.filter(_._2\
    \ > class_name_map.filter(_._2 > class_name_map.filter(_._2 > class_name_map.filter(_._2\
    \ > class_name_map.filter(_._2 > class_name_map.filter(_._2 > class_name_map.filter(_._2\
    \ > class_name_map.filter(_._2 > class_name_map.filter(_._2 > class_name_map.filter(_._2\
    \ > class_name_map.filter(_._2 > class_name_map.filter(_._2 > class_name_map.filter(_._2\
    \ > class_name_map.filter(_._2 > class_name_map.filter(_._2 > class_name_map.filter(_._2\
    \ > class_name_map.filter(_._2 > class_name_map.filter(_._2 > class_name_map.filter(_._2 ",
  "        val extensions_map = extensions.map(_.toUpperCase).zipWithIndex.toMap\n\
    \        val extensions_sorted = extensions.sortWith(_.toUpperCase.compareTo(_))\n\
    \        val extensions_sorted = extensions_sorted.map(_.toUpperCase)\n      \
    \  val extensions_sorted = extensions_sorted.map(x => extensions_map(x))\n   \
    \     val extensions_sorted = extensions_sorted.toList\n        val extensions_sorted\
    \ = extensions_sorted.sortWith(_.toString.compareTo(_))\n        val extensions_sorted\
    \ = extensions_sorted.map(_.toString.toUpperCase)\n        val extensions_sorted\
    \ = extensions_sorted.map(x => extensions_map(x))\n        val extensions_sorted\
    \ = extensions_sorted.toList\n        val extensions_sorted = extensions_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted = extensions_sorted.map(_.toString.toUpperCase)\n\
    \        val extensions_sorted = extensions_sorted.map(x => extensions_map(x))\n\
    \        val extensions_sorted = extensions_sorted.toList\n        val extensions_sorted\
    \ = extensions_sorted.sortWith(_.toString.compareTo(_))\n        val extensions_sorted\
    \ = extensions_sorted.map(_.toString.toUpperCase)\n        val extensions_sorted\
    \ = extensions_sorted.map(x => extensions_map(x))\n        val extensions_sorted\
    \ = extensions_sorted.toList\n        val extensions_sorted = extensions_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted = extensions_sorted.map(_.toString.toUpperCase)\n\
    \        val extensions_sorted = extensions_sorted.map(x => extensions_map(x))\n\
    \        val extensions_sorted = extensions_sorted.toList\n        val extensions_sorted\
    \ = extensions_sorted.sortWith(_.toString.compareTo(_))\n        val extensions_sorted\
    \ = extensions_sorted.map(_.toString.toUpperCase)\n        val extensions_sorted\
    \ = extensions_sorted.map(x => extensions_map(x))\n        val extensions_sorted\
    \ = extensions_sorted.toList\n        val extensions_sorted = extensions_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted = extensions_sorted.map(_.toString.toUpperCase)\n\
    \        val extensions_sorted = extensions_sorted.map(x => extensions_map(x))\n\
    \        val extensions_sorted = extensions_sorted.toList\n        val extensions_sorted\
    \ = extensions_sor", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_length = class_name.length\n        val strength = extensions_count\
    \ - class_name_length\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions_sorted.head\n\
    \        val class_name_with_extension = class_name + extensions_sorted\n    \
    \    val class_name_with_extension = class_name_with_extension.substring(class_name_length+1)\n\
    \        val class_name_with_extension = class_name_with_extension.substring(0,\
    \ class_name_length-1)\n        class_name_with_extension", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_map = extensions_map.toMap\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '_')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '$')\n        val extensions_map = extensions_map.filter(_._2 != '!')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val class_name_map = class_name.map(c => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val strength = extensions_map.values.map(c => class_name_map.getOrElse(c,\
    \ -1)).sum\n        val strongest_extension = extensions_map.values.map(c => class_name_map.getOrElse(c,\
    \ -1)).min\n        val class_name = class_name_map.getOrElse(strongest_extension,\
    \ \"\")\n        val extension = extensions_map.getOrElse(strongest_extension,\
    \ \"\")\n        class_name + \".\" + extension", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => (x - class_name_map.get(x)).abs).max\n    \
    \    val extension = extensions_map.getOrElse(strength, \"\")\n        class_name\
    \ + extension", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ class_name_map.getOrElse(x, 0) - x.toUpperCase.length).max\n        val extension\
    \ = extensions_map.getOrElse(strength, \"\")\n        class_name + extension",
  "        val extensions_count = extensions.count\n        val extensions_count_upper\
    \ = extensions.count(_.toUpperCase == _)\n        val extensions_count_lower =\
    \ extensions.count(_.toLowerCase == _)\n        val extensions_count_diff = extensions_count_upper\
    \ - extensions_count_lower\n        val extensions_count_diff_frac = extensions_count_diff\
    \ / extensions_count_upper\n        val extensions_count_diff_frac_int = extensions_count_diff_frac.toInt\n\
    \        val extensions_count_diff_frac_frac = extensions_count_diff_frac_int\
    \ / extensions_count_lower\n        val extensions_count_diff_frac_frac_int =\
    \ extensions_count_diff_frac_frac.toInt\n        val extensions_count_diff_frac_frac_frac\
    \ = extensions_count_diff_frac_frac_int / extensions_count_upper\n        val\
    \ extensions_count_diff_frac_frac_frac_int = extensions_count_diff_frac_frac_frac.toInt\n\
    \        val extensions_count_diff_frac_frac_frac_frac = extensions_count_diff_frac_frac_frac_int\
    \ / extensions_count_lower\n        val extensions_count_diff_frac_frac_frac_frac_int\
    \ = extensions_count_diff_frac_frac_frac_frac.toInt\n        val extensions_count_diff_frac_frac_frac_frac_frac\
    \ = extensions_count_diff_frac_frac_frac_frac_int / extensions_count_upper\n \
    \       val extensions_count_diff_frac_frac_frac_frac_frac_int = extensions_count_diff_frac_frac_frac_frac_frac_frac.toInt\n\
    \        val extensions_count_diff_frac_frac_frac_frac_frac_frac = extensions_count_diff_frac_frac_frac_frac_frac_int\
    \ / extensions_count_lower\n        val extensions_count_diff_frac_frac_frac_frac_frac_frac_frac\
    \ = extensions_count_diff_frac_frac_frac_frac_frac_frac_frac_int / extensions_count_upper\n\
    \        val extensions_count_diff_frac_frac_frac_frac_frac_frac_frac_int = extensions_count_diff_frac_frac_frac_frac_frac_frac_frac_frac.toInt\n\
    \        val extensions_count_diff_frac_frac_frac_frac_frac_frac_frac_frac = extensions_count_diff_frac_frac_frac_frac_frac_frac_frac_frac_int\
    \ / extensions_count_lower\n        val extensions_count_diff_frac_frac_frac_frac_frac_frac_frac_frac_frac\
    \ = extensions_count_diff_frac_frac_frac_frac_frac_frac_frac_frac_frac_frac_int\
    \ / extensions_count_upper\n        val extensions_count_diff_frac_frac_frac_frac_frac_frac_frac_frac_frac_frac\
    \ = extensions_count_diff_frac_frac_frac_frac_frac_frac_frac_frac_frac_frac_frac_frac\
    \ / extensions_count_lower\n        val extension", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.foldLeft(0) { (acc, e) =>\n            val c = class_name_map(e._1)\n\
    \            val s = class_name_map(e._2)\n            val cap = c.toUpperCase.length\n\
    \            val sm = s.toLowerCase().length\n            val strength = cap -\
    \ sm\n            if (strength > acc) strength else acc\n        }\n        val\
    \ class_name_with_strength = class_name_map.foldLeft(\"\") { (acc, e) =>\n   \
    \         val c = class_name_map(e._1)\n            val s = class_name_map(e._2)\n\
    \            val cap = c.toUpperCase.length\n            val sm = s.toLowerCase().length\n\
    \            val strength = cap - sm\n            if (strength == 0) acc else\
    \ acc + (e._1 + \".\" + e._2)\n        }\n        val class_name_with_strength_without_extension\
    \ = class_name_with_strength.dropRight(1)\n        val class_name_with_strength_without_extension_without_extension\
    \ = class_name_with_strength_without_extension.dropRight(1)\n        val class_name_with_strength_without_extension_without_extension_without_extension\
    \ = class_name_with_strength_without_extension_without_extension.dropRight(1)\n\
    \        val class_name_with_strength_without_extension_without_extension_without_extension_without_extension\
    \ = class_name_with_strength_without_extension_without_extension_without_extension.dropRight(1)\n\
    \        val class_name_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = class_name_with_strength_without_extension_without_extension_without_extension_without_extension.dropRight(1)\n\
    \        val class_name_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = class_name_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension.dropRight(1)\n\
    \        val class_name_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = class_name_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.dropRight(1)\n\
    \        val class_name_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = class_name_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.drop",
  "        val extensions_count = extensions.map(_.length).sum\n        val class_name_length\
    \ = class_name.length\n        val strength = extensions_count - class_name_length\n\
    \        if (strength < 0) \"\" else class_name + \".\" + extensions.sortWith(_\
    \ < _).head", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val class_name_map = class_name.map(x =>\
    \ (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val max_strength =\
    \ extensions_map.values.reduce((x, y) => if (x > y) x else y)\n        val max_key\
    \ = extensions_map.keys.max\n        val max_key_index = extensions_map.keys.indexOf(max_key)\n\
    \        val max_key_value = extensions_map.get(max_key)\n        val max_key_value_map\
    \ = max_key_value.map(x => (x._1, x._2)).toMap\n        val max_key_value_map_keys\
    \ = max_key_value_map.keys\n        val max_key_value_map_values = max_key_value_map.values\n\
    \        val max_key_value_map_keys_sorted = max_key_value_map_keys.sorted\n \
    \       val max_key_value_map_values_sorted = max_key_value_map_values.sorted\n\
    \        val max_key_value_map_keys_sorted_index = max_key_value_map_keys_sorted.indexOf(max_key_index)\n\
    \        val max_key_value_map_values_sorted_index = max_key_value_map_values_sorted.indexOf(max_key_index)\n\
    \        val max_key_value_map_keys_sorted_value = max_key_value_map_keys_sorted.take(max_key_value_map_keys_sorted_index)\n\
    \        val max_key_value_map_values_sorted_value = max_key_value_map_values_sorted.take(max_key_value_map_values_sorted_index)\n\
    \        val max_key_value_map_keys_sorted_value_sorted = max_key_value_map_keys_sorted_value.sorted\n\
    \        val max_key_value_map_values_sorted_value_sorted = max_key_value_map_values_sorted_value.sorted\n\
    \        val max_key_value_map_keys_sorted_value_sorted_index = max_key_value_map_keys_sorted_value_sorted.indexOf(max_key_index)\n\
    \        val max_key_value_map_values_sorted_value_sorted_index = max_key_value_map_values_sorted_value_sorted.indexOf(max_key_index)\n\
    \        val max_key_value_map_keys_sorted_value_sorted_value = max_key_value_map_keys_sorted_value_sorted.take(max_key_value_map_keys_sorted_value_sorted_index)\n\
    \        val max_key_value_map_values_sorted_value_sorted_value = max_key_value_map_values_sorted_value_sorted.take(max_key_value_map_values_sorted_value_sorted_index)\n\
    \        val max_key_value_map_keys_sorted_value_sorted_value_sorted = max_key_value_map_keys_sorted_value_sorted_value.sorted\n\
    \        val max_key_value_map_values_sorted_value_sorted_value_sorted = max_key_value_map_values_sorted_value_sorted_value.sorted\n\
    \        val max_key_value_map_keys_sorted_value_sorted_value_sorted_index = max_key_value_map_keys_sorted_value_sorted_value_sorted.indexOf(max_key_index)\n\
    \        val max_key_value_map_values_sorted_value_sorted_", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n     \
    \   val strength = extensions_sorted.head._2 - extensions_sorted.head._1\n   \
    \     val extension = extensions_sorted.head._1\n        val class_name = class_name.replaceAll(\"\
    [^A-Z]\", \"\")\n        class_name + \".\" + extension", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.foldLeft(0) { (acc, x) => acc + (class_name_map(x._1) - class_name_map(x._2))\
    \ }\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted = extensions_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted = extensions_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted = extensions_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted = extensions_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted = extensions_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted = extensions_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n\
    \        val strength = extensions_map.values.max\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val extensions_sorted =\
    \ extensions_sorted.takeWhile(_._2 != strength).reverse\n        val extensions_sorted\
    \ = extensions_sorted.take(1).mkString(\".\")\n        class_name + extensions_sorted",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).max\n        val extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        class_name + extension", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n    \
    \    val extensions_map_sorted_keys = extensions_map_sorted.keys\n        val\
    \ extensions_map_sorted_values = extensions_map_sorted.values\n        val extensions_map_sorted_keys_sorted\
    \ = extensions_map_sorted_keys.toSeq.sortBy(_._1).reverse\n        val extensions_map_sorted_keys_sorted_values\
    \ = extensions_map_sorted_keys_sorted.map(e => e -> extensions_map_sorted_values(extensions_map_sorted_keys.indexOf(e)))\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted = extensions_map_sorted_keys_sorted_values.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_keys = extensions_map_sorted_keys_sorted_values_sorted.keys\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values = extensions_map_sorted_keys_sorted_values_sorted.values\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_keys_sorted = extensions_map_sorted_keys_sorted_values_sorted_keys.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_keys_sorted_values\
    \ = extensions_map_sorted_keys_sorted_values_sorted_keys_sorted.map(e => e ->\
    \ extensions_map_sorted_values_sorted_keys(extensions_map_sorted_keys_sorted_values_sorted_keys.indexOf(e)))\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted_keys\
    \ = extensions_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted_keys.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted_keys_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted_keys_sorted.map(e\
    \ => e -> extensions_map_sorted_values_sorted_keys_sorted_values(extensions_map_sorted_keys_sorted_values_sorted_keys_sorted_values.indexOf(e)))\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted_keys_sorted_values\
    \ = extensions_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted_keys_sorted_values.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted.toSeq.sortBy(_._1).reverse\n\
    \        ", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n\
    \        val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.toList.sortWith(_._2 > _._2)\n        val first_extension =\
    \ sorted_extensions.head\n        val class_name = class_name + first_extension\n\
    \        class_name", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_count = class_name.length\n        val strength = extensions_count\
    \ - class_name_count\n        if (strength > 0) extensions(0) else extensions(1)",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val extensions_count_upper = extensions_count_upper.toDouble\n\
    \        val extensions_count_lower = extensions_count_lower.toDouble\n      \
    \  val strength_upper = strength.toDouble / extensions_count_upper\n        val\
    \ strength_lower = strength.toDouble / extensions_count_lower\n        val strength_max\
    \ = if (strength_upper > strength_lower) strength_upper else strength_lower\n\
    \        val extensions_count_max = extensions_count.toDouble\n        val extensions_count_min\
    \ = extensions_count_max.toDouble / extensions_count_upper\n        val extensions_count_min\
    \ = extensions_count_min.toDouble\n        val extensions_count_max = extensions_count_max.toDouble\
    \ / extensions_count_lower\n        val extensions_count_max = extensions_count_max.toDouble\n\
    \        val extensions_count_min = extensions_count_min.toDouble\n        val\
    \ extensions_count_min = extensions_count_min.toDouble\n        val extensions_count_max\
    \ = extensions_count_max.toDouble\n        val extensions_count_max = extensions_count_max.toDouble\n\
    \        val extensions_count_min = extensions_count_min.toDouble\n        val\
    \ extensions_count_min = extensions_count_min.toDouble\n        val extensions_count_max\
    \ = extensions_count_max.toDouble\n        val extensions_count_max = extensions_count_max.toDouble\n\
    \        val extensions_count_min = extensions_count_min.toDouble\n        val\
    \ extensions_count_min = extensions_count_min.toDouble\n        val extensions_count_max\
    \ = extensions_count_max.toDouble\n        val extensions_count_max = extensions_count_max.toDouble\n\
    \        val extensions_count_min = extensions_count_min.toDouble\n        val\
    \ extensions_count_min = extensions_count_min.toDouble\n        val extensions_count_max\
    \ = extensions_count_max.toDouble\n        val extensions_count_max = extensions_count_max.toDouble\n\
    \        val extensions_count_min = extensions_count_min.toDouble\n        val\
    \ extensions_count_min = extensions_count_min.toDouble\n        val extensions_count_max\
    \ = extensions_count_max.toDouble\n        val extensions_count_max = extensions_count_max.toDouble\n\
    \        val extensions_count_min = extensions_count_min.toDouble\n        val\
    \ extensions_count_min = extensions_count_min.toDouble\n        val extensions_count_max\
    \ = extensions_count_max.", "        val extensions_map = extensions.map(x =>\
    \ (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => (class_name_map.get(x), x)).maxBy(_._2)._2\n        val class_name_with_strength\
    \ = class_name_map.get(strength)\n        val extensions_with_strength = extensions_map.get(strength)\n\
    \        val extensions_with_strength_sorted = extensions_with_strength.sortBy(x\
    \ => x.length)\n        val extensions_with_strength_sorted_sorted = extensions_with_strength_sorted.sortBy(x\
    \ => x.length)\n        val extensions_with_strength_sorted_sorted_sorted = extensions_with_strength_sorted_sorted.sortBy(x\
    \ => x.length)\n        val extensions_with_strength_sorted_sorted_sorted_sorted\
    \ = extensions_with_strength_sorted_sorted_sorted.sortBy(x => x.length)\n    \
    \    val extensions_with_strength_sorted_sorted_sorted_sorted_sorted = extensions_with_strength_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.length)\n        val extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_with_strength_sorted_sorted_sorted_sorted_sorted.sortBy(x => x.length)\n\
    \        val extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.length)\n        val extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.length)\n        val extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.length)\n        val extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.length)\n        val extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.length)\n        val extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.length)\n        val extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.length)\n        val extensions_with_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0)((acc, x) => acc + (class_name_map(x._1)\
    \ - class_name_map(x._2)))\n        val extensions_sorted = extensions_map.toSeq.sortBy(x\
    \ => x._2).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 != class_name_map(x._1))\n        val extensions_sor", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (class_name_map.get(x),\
    \ x)).maxBy(_._2)._2\n        val class_name = class_name_map.get(strength)\n\
    \        val extension = extensions_map.get(strength)\n        class_name + \"\
    .\" + extension", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val class_name_map = class_name.map(x =>\
    \ (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val max_key = class_name_map.maxBy(_._1)._1\n\
    \        val max_value = class_name_map.maxBy(_._1)._2\n        val max_key_value\
    \ = class_name_map.filter(_._1 == max_key).maxBy(_._1)._2\n        val max_key_value_map\
    \ = class_name_map.filter(_._1 == max_key_value).maxBy(_._1)._2\n        val max_key_value_map_key\
    \ = max_key_value_map.keys.max\n        val max_key_value_map_value = max_key_value_map.values.max\n\
    \        val max_key_value_map_key_value = max_key_value_map.filter(_._1 == max_key_value_map_key).maxBy(_._1)._2\n\
    \        val max_key_value_map_key_value_map = max_key_value_map.filter(_._1 ==\
    \ max_key_value_map_key_value).maxBy(_._1)._2\n        val max_key_value_map_key_value_map_key\
    \ = max_key_value_map_key_value_map.keys.max\n        val max_key_value_map_key_value_map_value\
    \ = max_key_value_map_key_value_map.values.max\n        val max_key_value_map_key_value_map_key_value\
    \ = max_key_value_map_key_value_map.filter(_._1 == max_key_value_map_key_value_map_key).maxBy(_._1)._2\n\
    \        val max_key_value_map_key_value_map_key_value_map = max_key_value_map_key_value_map.filter(_._1\
    \ == max_key_value_map_key_value_map_key_value).maxBy(_._1)._2\n        val max_key_value_map_key_value_map_key_value_map_key\
    \ = max_key_value_map_key_value_map_key_value_map.keys.max\n        val max_key_value_map_key_value_map_key_value_map_value\
    \ = max_key_value_map_key_value_map_key_value_map.values.max\n        val max_key_value_map_key_value_map_key_value_map_key_value\
    \ = max_key_value_map_key_value_map_key_value_map.filter(_._1 == max_key_value_map_key_value_map_key_value_map_key).maxBy(_._1)._2\n\
    \        val max_key_value_map_key_value_map_key_value_map_key_value_map = max_key_value_map_key_value_map_key_value_map.filter(_._1\
    \ == max_key_value_map_key_value_map_key_value_map_key_value).maxBy(_._1)._2\n\
    \        val max_key_value_map_key_value_map_key_value_map_key_value_map_key =\
    \ max_key_value_map_key_value_map_key_value_map_key_value_map.keys.max\n     \
    \   val max_key_value_map_key_value_map_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.toSeq.sortWith((a, b) =>\
    \ strength - a._2).reverse\n        val extensions_sorted = extensions_sorted.take(1)\n\
    \        val extensions_sorted = extensions_sorted.map(_._1).mkString(\"\") +\
    \ extensions_sorted.map(_._2).mkString(\"\")\n        extensions_sorted.mkString(class_name\
    \ + \".\")", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.filter(_._2 > class_name_map.get(_._2)).map(_._1).size\n\
    \        val extension = extensions_map.filter(_._2 == class_name_map.get(_._2)).map(_._1).head\n\
    \        val extension_map = extensions_map.filter(_._2 > class_name_map.get(_._2)).map(_._1)\n\
    \        val extension_strength = extension_map.filter(_._2 > class_name_map.get(_._2)).map(_._1).size\n\
    \        val extension_strength_sum = extension_strength.foldLeft(0)(_ + _)\n\
    \        val extension_strength_product = extension_strength.foldLeft(1)(_ * _)\n\
    \        val extension_strength_product = extension_strength_product / extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product * extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product / extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product * extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product / extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product * extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product / extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product * extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product / extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product * extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product / extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product * extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product / extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product * extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product / extension_strength_sum\n\
    \        val extension_strength_product = extension_strength_product * extension_strength_sum\n\
    \        val extension_strength", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_count = class_name.length\n        val strength = extensions_count\
    \ - class_name_count\n        val extensions_sorted = extensions.sortWith(_.length\
    \ < _.length)\n        val extension_first = extensions_sorted.head\n        val\
    \ extension_last = extensions_sorted.last\n        val extension_length = extension_last.length\n\
    \        val extension_first = extension_first.toLowerCase + extension_last.substring(extension_length)\n\
    \        val extension_strength = extension_length - class_name_count\n      \
    \  val extension_strength_sorted = extension_strength.sortWith(_.toDouble < _.toDouble)\n\
    \        val extension_strength_first = extension_strength_sorted.head\n     \
    \   val extension_strength_last = extension_strength_sorted.last\n        val\
    \ extension_strength_length = extension_strength_last.length\n        val extension_strength_first\
    \ = extension_strength_first.toLowerCase + extension_strength_last.substring(extension_strength_length)\n\
    \        if (extension_strength_first == extension_first) {\n            class_name\
    \ + extension_first\n        } else {\n            class_name + extension_strength_first\n\
    \        }", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0) { (s,\
    \ e) =>\n            val c = class_name_map.getOrElse(e._1, e._1)\n          \
    \  val s = s + (c.toUpperCase.size - c.toLowerCase.size)\n        }\n        val\
    \ strongest_extension = extensions.find(x => x.toUpperCase.size == strength)\n\
    \        val class_name = class_name_map.getOrElse(strongest_extension._1, strongest_extension._1)\n\
    \        val extension = strongest_extension._2\n        class_name + \".\" +\
    \ extension", "        val extensions_count = extensions.map(_.length).sum\n \
    \       val class_name_length = class_name.length\n        val strength = extensions_count\
    \ - class_name_length\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extension_length = extensions_sorted.map(_.length).sum\n\
    \        val extension_strength = extensions_sorted.map(_.length).sum / extension_length\n\
    \        val extension_sorted = extensions_sorted.sortWith((a, b) => extension_strength\
    \ - a.length - b.length)\n        val extension_first = extension_sorted.head\n\
    \        val extension_last = extension_sorted.last\n        val extension_first\
    \ = extension_first.replaceAll(\"[A-Z]\", \"\").replaceAll(\"[a-z]\", \"\")\n\
    \        val extension_last = extension_last.replaceAll(\"[A-Z]\", \"\").replaceAll(\"\
    [a-z]\", \"\")\n        class_name + extension_first + extension_last", "    \
    \    val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortBy(_.length).reverse\n        val extensions_count_sorted_length\
    \ = extensions_count_sorted.map(_.length).sum\n        val extensions_count_sorted_length_sorted\
    \ = extensions_count_sorted.sortBy(_.length).reverse\n        val extensions_count_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortBy(_.length).reverse\n        val extensions_count_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted.sortBy(_.length).reverse\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length = extensions_count_sorted_length_sorted_length.sortBy(_.length).reverse\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortBy(_.length).reverse\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortBy(_.length).reverse\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length).reverse\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length).reverse\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length.sortBy(_.length).reverse\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length).reverse\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length).reverse\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length).reverse\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length).reverse\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length).reverse\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < strength)\n\
    \        val extensions_sorted = extensions_sorted.map(_._2).mkString(\".\")\n\
    \        class_name + extensions_sorted", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = class_name_map.foldLeft(0)\
    \ { (acc, x) => acc + (x._2 - x._1) }\n        val extensions_sorted = extensions_map.toSeq.sortBy(x\
    \ => x._2).reverse\n        val extension_strength = extensions_sorted.foldLeft(0)\
    \ { (acc, x) => acc + (x._2 - x._1) }\n        val strength_diff = strength -\
    \ extension_strength\n        if (strength_diff == 0) class_name_map.head\n  \
    \      else if (strength_diff < 0) extensions_sorted.head\n        else class_name_map.head\
    \ + extensions_sorted.head", "        val extensions_map = extensions.map(x =>\
    \ (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => math.max(a, b))\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 ", "       \
    \ val extensions_count = extensions.map(_.length).sum\n        val class_name_length\
    \ = class_name.length\n        val extensions_length_sum = extensions.map(_.length).sum\n\
    \        val strength = extensions_length_sum / extensions_count - class_name_length\
    \ / extensions_count\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        extensions_sorted.head", "  \
    \      val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val extensions_count_cap\
    \ = extensions.map(_.toUpperCase.length).sum - extensions.map(_.toLowerCase.length).sum\n\
    \        val extensions_count_sm = extensions.map(_.toLowerCase.length).sum -\
    \ extensions.map(_.toUpperCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower - extensions_count_cap - extensions_count_sm\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val class_name_count = class_name_upper.length\
    \ + class_name_lower.length\n        val class_name_count_upper = class_name_upper.length\n\
    \        val class_name_count_lower = class_name_lower.length\n        val class_name_count_cap\
    \ = class_name_count_upper - class_name_count_lower\n        val class_name_count_sm\
    \ = class_name_count_lower - class_name_count_upper\n        val class_name_strength\
    \ = class_name_count_upper - class_name_count_lower - class_name_count_cap - class_name_count_sm\n\
    \        if (strength > 0) {\n            val extensions_count_str = extensions.map(_.length).sum.toString\n\
    \            val extensions_count_str_upper = extensions.map(_.toUpperCase.length).sum.toString\n\
    \            val extensions_count_str_lower = extensions.map(_.toLowerCase.length).sum.toString\n\
    \            val extensions_count_str_upper = extensions.map(_.toUpperCase.length).sum.toString\n\
    \            val extensions_count_str_lower = extensions.map(_.toLowerCase.length).sum.toString\n\
    \            val extensions_count_str_upper = extensions.map(_.toUpperCase.length).sum.toString\n\
    \            val extensions_count_str_lower = extensions.map(_.toLowerCase.length).sum.toString\n\
    \            val extensions_count_str_upper = extensions.map(_.toUpperCase.length).sum.toString\n\
    \            val extensions_count_str_lower = extensions.map(_.toLowerCase.length).sum.toString\n\
    \            val extensions_count_str_upper = extensions.map(_.toUpperCase.length).sum.toString\n\
    \            val extensions_count_str_lower = extensions.map(_.toLowerCase.length).sum.toString\n\
    \            val extensions_count_str_upper = extensions.map(_.toUpperCase.length).sum.toString\n\
    \            val extensions_count_str_lower = extensions.map(_.toLowerCase.length).sum.toString\n\
    \            val extensions_count_str_upper = extensions.map(_.toUpperCase.length).sum.toString\n\
    \            val extensions_count_str_lower = extensions.map(_.toLowerCase.length).sum.toString\n\
    \            val extensions_count_str_upper = extensions.map(_.toUpperCase.length",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x - class_name_map.get(x)).abs)\n\
    \        val max_strength = strength.max\n        val max_extension = extensions_map.getOrElse(max_strength,\
    \ \"\")\n        (class_name + \".\" + max_extension)", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase).zipWithIndex.toMap\n        val class_name_map\
    \ = class_name.zipWithIndex.toMap\n        val extensions_count = extensions_map.values.toSet.size\n\
    \        val class_name_count = class_name_map.values.toSet.size\n        val\
    \ strength = extensions_count - class_name_count\n        val extension = extensions_map.values.toSet.min\n\
    \        val class_name = class_name_map.values.toSet.min\n        val extension_str\
    \ = extension.mkString.replaceAll(\"[A-Z]\", \"_$extension\")\n        val class_name_str\
    \ = class_name.mkString.replaceAll(\"[a-z]\", \"_$class_name\")\n        val class_name_str\
    \ = class_name_str.replaceAll(\"_\", \"\")\n        class_name_str + \".\" + extension_str",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.get(x) -\
    \ x.toString.toUpperCase.length).max\n        val extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        extension", "        val extensions_map = extensions.map(x =>\
    \ (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => (x - class_name_map.get(x)).abs)\n        val max_strength = strength.max\n\
    \        val max_key = strength.indexWhere(x => x == max_strength)\n        val\
    \ max_key = max_key match {\n            case -1 => \"\"\n            case x =>\
    \ class_name_map.get(extensions_map.keys.toSeq(max_key).head)\n        }\n   \
    \     max_key + extensions_map.get(max_key).last", "        val extensions_map\
    \ = extensions.map(_.toUpperCase).zipWithIndex.toMap\n        val class_name_map\
    \ = class_name.zipWithIndex.toMap\n        val strength = extensions_map.filter(_._2\
    \ > class_name_map.get(_._1)).map(_._1).sum\n        val extension = extensions_map.filter(_._2\
    \ == strength).map(_._1).head\n        class_name + \".\" + extension", "    \
    \    val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.filter(_._2 > class_name_map.get(_._2)).map(_._1).size\n\
    \        val extension = extensions_map.filter(_._2 == class_name_map.get(_._2)).map(_._1).head\n\
    \        val class_name = class_name_map.filter(_._2 == class_name_map.get(_._2)).map(_._1).head\n\
    \        val extension_name = extensions_map.filter(_._2 == class_name_map.get(_._2)).map(_._1).head\n\
    \        val class_name_with_extension = class_name + \".\" + extension_name\n\
    \        val extension_name_with_extension = extension_name + \".\" + class_name\n\
    \        val strength_with_name = strength + \".\" + class_name\n        val strength_with_name_with_extension\
    \ = strength + \".\" + extension_name\n        val extension_name_with_name =\
    \ extension_name + \".\" + class_name\n        val extension_name_with_name_with_extension\
    \ = extension_name + \".\" + extension_name\n        val extension_name_with_extension_name\
    \ = extension_name + \".\" + extension_name\n        val extension_name_with_name_with_extension_name\
    \ = extension_name + \".\" + extension_name\n        val extension_name_with_extension_name_with_name\
    \ = extension_name + \".\" + extension_name\n        val extension_name_with_extension_name_with_name_with_extension\
    \ = extension_name + \".\" + extension_name\n        val extension_name_with_extension_name_with_name_with_extension_name\
    \ = extension_name + \".\" + extension_name\n        val extension_name_with_extension_name_with_name_with_extension_name_with_extension\
    \ = extension_name + \".\" + extension_name\n        val extension_name_with_extension_name_with_name_with_extension_name_with_extension_name\
    \ = extension_name + \".\" + extension_name\n        val extension_name_with_extension_name_with_name_with_extension_name_with_extension_name_with_extension\
    \ = extension_name + \".\" + extension_name\n        val extension_name_with_extension_name_with_name_with_extension_name_with_extension_name_with_extension_name_with_extension\
    \ = extension_name + \".\" + extension_name\n        val extension_name_with_extension_name_with_name_with_extension_name_with_extension_name_with_extension_name_with_extension_name_with_extension\
    \ = extension_name + \".\" + extension_name\n        val extension_name_with_extension_name_with_name_with_extension_name_with_extension_name_with_extension_name_with_extension_name_with_extension_name_with_extension\
    \ = extension_name + \".\" + extension_name\n        val extension_name_with_extension_name_with_name_with_extension_name_with_extension_name_with_extension_name_with_extension_name_with_extension_name_with_extension_name_with_extension\
    \ = extension", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n\
    \        val strength = extensions_map.values.max\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted =\
    \ extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\".\")\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n        class_name\
    \ + extensions_sorted + extensions_map(strength).mkString(\".\") + extensions_map(strength\
    \ + 1).mkString(\".\") + extensions_map(strength + 2).mkString(\".\") + extensions_map(strength\
    \ + 3).mkString(\".\") + extensions_map(strength + 4).mkString(\".\") + extensions_map(strength\
    \ + 5).mkString(\".\") + extensions_map(strength + 6).mkString(\".\") + extensions_map(strength\
    \ + 7).mkString(\".\") + extensions_map(strength + 8).mkString(\".\") + extensions_map(strength\
    \ + 9).mkString(\".\") + extensions_map(strength + 10).mkString(\".\") + extensions_map(strength\
    \ + 11).mkString(\".\") + extensions_map(strength + 12).mkString(\".\") + extensions_map(strength\
    \ + 13).mkString(\".\") + extensions_map(strength + 14).mkString(\".\") + extensions_map(strength\
    \ + 15).mkString(\".\") + extensions_map(strength + 16).mkString(\".\") + extensions_map(strength\
    \ + 17).mkString(\".\") + extensions_map(strength + 18).mkString(\".\") + extensions_map(strength\
    \ + 19).mkString(\".\") + extensions_map(strength + 20).mkString(\".\") + extensions_map(strength\
    \ + 21).mkString(\".\") + extensions_map(strength + 22).mkString(\".\") + extensions_map(strength\
    \ + 23).mkString(\".\") + extensions_map(strength + 24).mkString(\".\") + extensions_map(strength\
    \ + 25).mkString(\".\") + extensions_map(strength + 26).mkString(\".\") + extensions_map(strength\
    \ + 27).mkString(\".\") + extensions_map(strength + 28).mkString(\".\") + extensions_map(strength\
    \ + 29).mkString(\".\") + extensions_map(strength + 30).mkString(\".\") + extensions_map(strength\
    \ + 31).mkString(\".\") + extensions_map(strength + 32).mkString(\".\") + extension",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((x, y) => x - y)\n      \
    \  val extensions_sorted = extensions_map.values.sortWith((x, y) => x < y)\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_ <= strength)\n \
    \       val extensions_sorted = extensions_sorted.mkString(\"\") + \".\" + extensions_sorted.last\n\
    \        class_name.toString + \".\" + extensions_sorted", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_sm = extensions_count_upper - extensions_count_lower\
    \ - extensions_count\n        val extensions_count_lower_sm = extensions_count_lower\
    \ - extensions_count_upper - extensions_count\n        val extensions_count_upper_c\
    \ = extensions_count_upper - extensions_count_lower\n        val extensions_count_lower_c\
    \ = extensions_count_lower - extensions_count_upper\n        val extensions_count_upper_sm_c\
    \ = extensions_count_upper_sm - extensions_count_lower_sm - extensions_count_c\n\
    \        val extensions_count_lower_sm_c = extensions_count_lower_sm - extensions_count_upper_sm\
    \ - extensions_count_c\n        val extensions_count_upper_c = extensions_count_upper\
    \ - extensions_count_lower\n        val extensions_count_lower_c = extensions_count_lower\
    \ - extensions_count_upper\n        val extensions_count_upper_sm_c_c = extensions_count_upper_sm_c\
    \ - extensions_count_lower_sm_c - extensions_count_c\n        val extensions_count_lower_sm_c_c\
    \ = extensions_count_lower_sm_c - extensions_count_upper_sm_c - extensions_count_c\n\
    \        val extensions_count_upper_c = extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower_c = extensions_count_lower - extensions_count_upper\n\
    \        val extensions_count_upper_sm_c_c_c = extensions_count_upper_sm_c_c -\
    \ extensions_count_lower_sm_c_c - extensions_count_c\n        val extensions_count_lower_sm_c_c_c\
    \ = extensions_count_lower_sm_c_c - extensions_count_upper_sm_c_c - extensions_count_c\n\
    \        val extensions_count_upper = extensions_count_upper - extensions_count_lower\
    \ - extensions_count\n        val extensions_count_lower = extensions_count_lower\
    \ - extensions_count_upper - extensions_count\n        val extensions_count_upper_sm\
    \ = extensions_count_upper_sm - extensions_count_lower_sm - extensions_count\n\
    \        val extensions_count_lower_sm = extensions_count_lower_sm - extensions_count_upper_sm\
    \ - extensions_count\n        val extensions_count_upper_c = extensions_count_upper_c\
    \ - extensions_count_lower_c - extensions_count\n        val extensions_count_lower_c\
    \ = extensions_count_lower_c - extensions_count_upper_c - extensions_count\n \
    \       val extensions_count_upper_sm_c = extensions_count_upper_s", "       \
    \ val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val class_name_upper = class_name.toUpperCase\n\
    \        val class_name_lower = class_name.toLowerCase\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val class_name_upper = class_name.toUpperCase\n\
    \        val class_name_lower = class_name.toLowerCase\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val class_name_upper = class_name.toUpperCase\n\
    \        val class_name_lower = class_name.toLowerCase\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val class_name_upper = class_name.toUpperCase\n\
    \        val class_name_lower = class_name.toLowerCase\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val class_name_upper = class_name.toUpperCase\n\
    \        val class_name_lower = class_name.toLowerCase\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val class_name_upper = class_name.toUpperCase\n\
    \        val class_name_lower = class_name.toLowerCase\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val class_name_upper = class_name.toUpperCase\n\
    \        val class_name_lower = class_name.toLowerCase\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val class_name_upper = class_name.toUpperCase\n\
    \        val class_name_low", "        val extensions_map = extensions.map(e =>\
    \ e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C') - e.toUpperCase.count(_ == 'D') - e.toUpperCase.count(_ == 'E') - e.toUpperCase.count(_\
    \ == 'F') - e.toUpperCase.count(_ == 'G') - e.toUpperCase.count(_ == 'H') - e.toUpperCase.count(_\
    \ == 'I') - e.toUpperCase.count(_ == 'J') - e.toUpperCase.count(_ == 'K') - e.toUpperCase.count(_\
    \ == 'L') - e.toUpperCase.count(_ == 'M') - e.toUpperCase.count(_ == 'N') - e.toUpperCase.count(_\
    \ == 'O') - e.toUpperCase.count(_ == 'P') - e.toUpperCase.count(_ == 'Q') - e.toUpperCase.count(_\
    \ == 'R') - e.toUpperCase.count(_ == 'S') - e.toUpperCase.count(_ == 'T') - e.toUpperCase.count(_\
    \ == 'U') - e.toUpperCase.count(_ == 'V') - e.toUpperCase.count(_ == 'W') - e.toUpperCase.count(_\
    \ == 'X') - e.toUpperCase.count(_ == 'Y') - e.toUpperCase.count(_ == 'Z') - e.toUpperCase.count(_\
    \ == 'a') - e.toUpperCase.count(_ == 'b') - e.toUpperCase.count(_ == 'c') - e.toUpperCase.count(_\
    \ == 'd') - e.toUpperCase.count(_ == 'e') - e.toUpperCase.count(_ == 'f') - e.toUpperCase.count(_\
    \ == 'g') - e.toUpperCase.count(_ == 'h') - e.toUpperCase.count(_ == 'i') - e.toUpperCase.count(_\
    \ == 'j') - e.toUpperCase.count(_ == 'k') - e.toUpperCase.count(_ == 'l') - e.toUpperCase.count(_\
    \ == 'm') - e.toUpperCase.count(_ == 'n') - e.toUpperCase.count(_ == 'o') - e.toUpperCase.count(_\
    \ == 'p') - e.toUpperCase.count(_ == 'q') - e.toUpperCase.count(_ == 'r') - e.toUpperCase.count(_\
    \ == 's') - e.toUpperCase.count(_ == 't') - e.toUpperCase.count(_ == 'u') - e.toUpperCase.count(_\
    \ == 'v') - e.toUpperCase.count(_ == 'w') - e.toUpperCase.count(_ == 'x') - e.toUpperCase.count(_\
    \ == 'y') - e.toUpperCase.count(_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).map(x => x._2.length - x._1.length)\n   \
    \     val max_strength = strength.max\n        val max_key = extensions_map.keys.find(x\
    \ => strength.contains(x))\n        val max_value = extensions_map.get(max_key)\n\
    \        val max_key_name = class_name_map.get(max_key)\n        val max_key_name_with_extension\
    \ = max_key_name + \".\" + max_value\n        val max_key_name_with_extension_map\
    \ = max_key_name_with_extension.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val max_key_name_with_extension_strength = max_key_name_with_extension_map.values.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).map(x => x._2.length - x._1.length)\n   \
    \     val max_key_name_with_extension_strength_max = max_key_name_with_extension_strength.max\n\
    \        val max_key_name_with_extension_strength_max_key = max_key_name_with_extension_strength_max.keys.find(x\
    \ => max_key_name_with_extension_strength_max.contains(x))\n        val max_key_name_with_extension_strength_max_value\
    \ = max_key_name_with_extension_strength_max.get(max_key_name_with_extension_strength_max_key)\n\
    \        val max_key_name_with_extension_strength_max_key_name = max_key_name_with_extension_strength_max_key.map(x\
    \ => x.toUpperCase).mkString(\"\")\n        val max_key_name_with_extension_strength_max_key_name_with_extension\
    \ = max_key_name_with_extension_strength_max_key_name + \".\" + max_key_name_with_extension_strength_max_value\n\
    \        val max_key_name_with_extension_strength_max_key_name_with_extension_map\
    \ = max_key_name_with_extension_strength_max_key_name_with_extension.map(x =>\
    \ (x.toUpperCase, x.toLowerCase)).toMap\n        val max_key_name_with_extension_strength_max_key_name_with_extension_strength\
    \ = max_key_name_with_extension_strength_max_key_name_with_extension_map.values.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).map(x => x._2.length - x._1.length)\n   \
    \     val max_key_name_with_extension_strength_max_key_name_with_extension_strength_max\
    \ = max_key_name_with_extension_strength_max_key_name_with_extension_strength.max\n\
    \        val max_key_name_with_extension_strength", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.foldLeft(0)((x, y) =>\n            val cap = x.length\n   \
    \         val sm = y.length\n            val strength_of_extension = cap - sm\n\
    \            if (strength_of_extension > x) \n                strength_of_extension\n\
    \            else if (strength_of_extension == x)\n                if (class_name_map.contains(y))\n\
    \                    class_name_map(y)\n                else\n               \
    \     0\n            else\n                0\n        )\n        val class_name\
    \ = class_name_map.getOrElse(\"\", \"\")\n        val extension = extensions_map.getOrElse(\"\
    \", \"\")\n        val strength_str = if (strength == 0) \"\" else s\"(${strength})\"\
    \n        s\"$class_name.$extension$strength_str\"", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = strength / extensions_count_upper\n        val strength_lower\
    \ = strength / extensions_count_lower\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength_upper - strength_lower compareTo a.length - b.length)\n     \
    \   val extensions_sorted = extensions.sortWith((a, b) => strength_lower - strength_upper\
    \ compareTo a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength_upper - strength_lower compareTo a.length - b.length)\n     \
    \   val extensions_sorted = extensions.sortWith((a, b) => strength_lower - strength_upper\
    \ compareTo a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength_upper - strength_lower compareTo a.length - b.length)\n     \
    \   val extensions_sorted = extensions.sortWith((a, b) => strength_lower - strength_upper\
    \ compareTo a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength_upper - strength_lower compareTo a.length - b.length)\n     \
    \   val extensions_sorted = extensions.sortWith((a, b) => strength_lower - strength_upper\
    \ compareTo a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength_upper - strength_lower compareTo a.length - b.length)\n     \
    \   val extensions_sorted = extensions.sortWith((a, b) => strength_lower - strength_upper\
    \ compareTo a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength_upper - strength_lower compareTo a.length - b.length)\n     \
    \   val extensions_sorted = extensions.sortWith((a, b) => strength_lower - strength_upper\
    \ compareTo a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength_upper - strength_lower compareTo a.length - b.length)\n     \
    \   val extensions_sorted = extensions.sortWith((a, b) => strength_lower - strength_upper\
    \ compareTo a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength_upper - strength_lower compareTo a.length - b.length)\n     \
    \   val extensions_sorted = extensions.sortWith((a, b) => strength_lower - strength_upper\
    \ compareTo a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val\
    \ extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val strength_upper\
    \ = extensions_count_upper - extensions_count_lower\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n\
    \        val strength_lower = extensions_count_lower - extensions_count_upper\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ strength_all = extensions_count_upper - extensions_count_lower\n        val\
    \ extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase).sum\n        val strength_all = extensions_count_upper\
    \ - extensions_count_lower\n        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_all = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val\
    \ extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val strength_all\
    \ = extensions_count_upper - extensions_count_lower\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n\
    \        val strength_all = extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ strength_all = extensions_count_upper - extensions_count_lower\n        val\
    \ extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase).sum\n        val strength_all = extensions_count_upper\
    \ - extensions_count_lower\n        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_all = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper = extensions.map(_.toUpperCase).", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x - class_name_map.get(x)).abs)\n\
    \        val max_strength = strength.max\n        val max_key = strength.max\n\
    \        val max_key_index = strength.indexOfMax\n        val max_key_value =\
    \ extensions_map.get(max_key)\n        val max_key_index = max_key_index + 1\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_value = max_key_value + extensions_map.get(max_key_index).length\n\
    \        val max_key_", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ (x - class_name_map.get(x)).abs)\n        val max_strength = strength.max\n\
    \        val max_key = strength.maxBy(x => x)\n        val max_key = max_key._1\n\
    \        val max_value = max_key._2\n        val class_name = class_name_map.get(max_key)\n\
    \        val extension = extensions_map.get(max_key)\n        val extension_str\
    \ = extension.mkString.toLowerCase\n        val class_name_str = class_name.mkString.toLowerCase\n\
    \        val strength_str = max_value.mkString.toUpperCase\n        val result\
    \ = class_name_str + \".\" + extension_str\n        \n        if(strength_str\
    \ != max_strength) {\n            val strength_str = max_strength.mkString.toUpperCase\n\
    \            val result = class_name_str + \".\" + strength_str\n        }\n \
    \       \n        result", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_ratio = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_lower_ratio = extensions_count_lower / extensions_count.toDouble\n\
    \        val strength_upper_ratio = strength / extensions_count_upper.toDouble\n\
    \        val strength_lower_ratio = strength / extensions_count_lower.toDouble\n\
    \        val extensions_count_ratio = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_ratio_upper = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_ratio_lower = extensions_count_lower / extensions_count.toDouble\n\
    \        val extensions_count_ratio_upper_ratio = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_ratio_lower_ratio = extensions_count_lower / extensions_count.toDouble\n\
    \        val extensions_count_ratio_upper_ratio_upper = extensions_count_upper\
    \ / extensions_count.toDouble\n        val extensions_count_ratio_lower_ratio_lower\
    \ = extensions_count_lower / extensions_count.toDouble\n        val extensions_count_ratio_upper_ratio_lower_ratio\
    \ = extensions_count_lower / extensions_count.toDouble\n        val extensions_count_ratio_lower_ratio_upper\
    \ = extensions_count_lower / extensions_count.toDouble\n        val extensions_count_ratio_lower_ratio_lower\
    \ = extensions_count_lower / extensions_count.toDouble\n        val extensions_count_ratio_upper_ratio_lower_ratio_upper\
    \ = extensions_count_lower / extensions_count.toDouble\n        val extensions_count_ratio_lower_ratio_lower_ratio\
    \ = extensions_count_lower / extensions_count.toDouble\n        val extensions_count_ratio_upper_ratio_lower_ratio_lower\
    \ = extensions_count_lower / extensions_count.toDouble\n        val extensions_count_ratio_lower_ratio_lower_ratio_upper\
    \ = extensions_count_lower / extensions_count.toDouble\n        val extensions_count_ratio_lower_ratio_lower_ratio_lower\
    \ = extensions_count_lower / extensions_count.toDouble\n        val extensions_count_ratio_upper_ratio_lower_ratio_lower_ratio\
    \ = extensions_count_lower / extensions_count.toDouble\n        val extensions_count_ratio_lower_ratio_lower_ratio_lower\
    \ = extensions_count_lower / extensions_count.toDouble\n        val extensions_count_ratio_upper_ratio_lower_",
  "        val extensions_count = extensions.map(_.length).sum\n        val class_name_length\
    \ = class_name.length\n        val strength = extensions_count - class_name_length\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength - a.length\
    \ - b.length)\n        val extension_length = extensions_sorted.map(_.length).sum\n\
    \        val extension_strength = extensions_sorted.map(_.length).sum\n      \
    \  val extension_first = extensions_sorted.head\n        val extension_last =\
    \ extensions_sorted.last\n        val extension_first = extension_first.length\n\
    \        val extension_last = extension_last.length\n        val extension_first\
    \ = extension_first / extension_length\n        val extension_last = extension_last\
    \ / extension_length\n        val extension_first = extension_first - extension_last\n\
    \        val extension_last = extension_last - extension_first\n        val extension_first\
    \ = extension_first / extension_strength\n        val extension_last = extension_last\
    \ / extension_strength\n        val extension_first = extension_first - extension_last\n\
    \        val extension_last = extension_last - extension_first\n        val extension_first\
    \ = extension_first / extension_length\n        val extension_last = extension_last\
    \ / extension_length\n        val extension_first = extension_first - extension_last\n\
    \        val extension_last = extension_last - extension_first\n        val extension_first\
    \ = extension_first / extension_strength\n        val extension_last = extension_last\
    \ / extension_strength\n        val extension_first = extension_first - extension_last\n\
    \        val extension_last = extension_last - extension_first\n        val extension_first\
    \ = extension_first / extension_length\n        val extension_last = extension_last\
    \ / extension_length\n        val extension_first = extension_first - extension_last\n\
    \        val extension_last = extension_last - extension_first\n        val extension_first\
    \ = extension_first / extension_strength\n        val extension_last = extension_last\
    \ / extension_strength\n        val extension_first = extension_first - extension_last\n\
    \        val extension_last = extension_last - extension_first\n        val extension_first\
    \ = extension_first / extension_length\n        val extension_last = extension_last\
    \ / extension_length\n        val extension_first = extension_first - extension_last\n\
    \        val extension_last = extension_last - extension_first\n        val extension_first\
    \ = extension_first / extension_strength\n        val extension_last = extension_last\
    \ / extension_", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    if (extensions_count > 1) {\n            val extensions_sorted = extensions.sortBy(_.length)\n\
    \            val extensions_sorted_upper = extensions_sorted.map(_.toUpperCase)\n\
    \            val extensions_sorted_lower = extensions_sorted.map(_.toLowerCase)\n\
    \            val strength_sorted = extensions_sorted_upper.map(_.length) - extensions_sorted_lower.map(_.length)\n\
    \            val strength_sorted_upper = extensions_sorted_upper.map(_.toUpperCase).map(_.length).sum\n\
    \            val strength_sorted_lower = extensions_sorted_lower.map(_.toLowerCase).map(_.length).sum\n\
    \            if (strength_sorted > strength) {\n                val extensions_sorted_sorted\
    \ = extensions_sorted.sortBy(_.length)\n                val extensions_sorted_sorted_upper\
    \ = extensions_sorted_sorted.map(_.toUpperCase)\n                val extensions_sorted_sorted_lower\
    \ = extensions_sorted_sorted.map(_.toLowerCase)\n                val strength_sorted_sorted\
    \ = extensions_sorted_sorted_upper.map(_.length) - extensions_sorted_sorted_lower.map(_.length)\n\
    \                val strength_sorted_sorted_upper = extensions_sorted_sorted_upper.map(_.toUpperCase).map(_.length).sum\n\
    \                val strength_sorted_sorted_lower = extensions_sorted_sorted_lower.map(_.toLowerCase).map(_.length).sum\n\
    \                if (strength_sorted_sorted > strength) {\n                  \
    \  val extensions_sorted_sorted_sorted = extensions_sorted_sorted.sortBy(_.length)\n\
    \                    val extensions_sorted_sorted_sorted_upper = extensions_sorted_sorted_sorted.map(_.toUpperCase)\n\
    \                    val extensions_sorted_sorted_sorted_lower = extensions_sorted_sorted_sorted.map(_.toLowerCase)\n\
    \                    val strength_sorted_sorted_sorted = extensions_sorted_sorted_sorted_upper.map(_.length)\
    \ - extensions_sorted_sorted_sorted_lower.map(_.length)\n                    val\
    \ strength_sorted_sorted_sorted_upper = extensions_sorted_sorted_sorted_upper.map(_.toUpperCase).map(_.length).sum\n\
    \                    val strength_sorted_sorted_sorted_lower = extensions_sorted_sorted_sorted_lower.map(_.toLowerCase).map(_.length).sum\n\
    \                    if (strength_sorted_sorted_sorted > strength) {\n       \
    \                 val extensions_sorted_sorted_sorted_sorted = extensions_sorted_sorted_sorted.sortBy(_.length)\n\
    \                        val extensions_sorted_sorted_sorted_sorted_upper = ",
  "        val extensions_map = extensions.map(x => (x.toUpperCase - x.toLowerCase\
    \ -> x)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase\
    \ - x.toLowerCase -> x)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0)).sum\n        val extensions_sorted = extensions_map.values.sortBy(x\
    \ => -x)\n        val class_name_sorted = class_name_map.values.sortBy(x => -x)\n\
    \        val extensions_sorted_list = extensions_sorted.toList\n        val class_name_sorted_list\
    \ = class_name_sorted.toList\n        val index = extensions_sorted_list.indexOf(strength)\n\
    \        if (index >= 0) {\n            class_name_sorted_list(index)\n      \
    \  } else {\n            class_name_sorted_list.head\n        }", "        val\
    \ extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val extensions_count_upper_sm = extensions_count_upper\
    \ - extensions_count_lower * strength / extensions_count \n        val extensions_count_lower_sm\
    \ = extensions_count_lower - extensions_count_upper * strength / extensions_count\
    \ \n        val extensions_count_upper_capped = extensions_count_upper - extensions_count_upper_sm\
    \ * strength / extensions_count \n        val extensions_count_lower_capped =\
    \ extensions_count_lower - extensions_count_lower_sm * strength / extensions_count\
    \ \n        val extensions_count_upper_capped2 = extensions_count_upper - extensions_count_upper_capped\
    \ * strength / extensions_count \n        val extensions_count_lower_capped2 =\
    \ extensions_count_lower - extensions_count_lower_capped * strength / extensions_count\
    \ \n        val extensions_count_upper_capped3 = extensions_count_upper - extensions_count_upper_capped2\
    \ * strength / extensions_count \n        val extensions_count_lower_capped3 =\
    \ extensions_count_lower - extensions_count_lower_capped2 * strength / extensions_count\
    \ \n        val extensions_count_upper_capped4 = extensions_count_upper - extensions_count_upper_capped3\
    \ * strength / extensions_count \n        val extensions_count_lower_capped4 =\
    \ extensions_count_lower - extensions_count_lower_capped3 * strength / extensions_count\
    \ \n        val extensions_count_upper_capped5 = extensions_count_upper - extensions_count_upper_capped4\
    \ * strength / extensions_count \n        val extensions_count_lower_capped5 =\
    \ extensions_count_lower - extensions_count_lower_capped4 * strength / extensions_count\
    \ \n        val extensions_count_upper_capped6 = extensions_count_upper - extensions_count_upper_capped5\
    \ * strength / extensions_count \n        val extensions_count_lower_capped6 =\
    \ extensions_count_lower - extensions_count_lower_capped5 * strength / extensions_count\
    \ \n        val extensions_count_upper_capped7 = extensions_count_upper - extensions_count_upper_capped6\
    \ * strength / extensions_count \n        val extensions_count_lower_capped7 =\
    \ extensions_count_lower - extensions_count_lower_capped6 * strength / extensions_count\
    \ \n        val extensions_count_upper_capped8 = extensions_count_upper - extensions_count_upper_capped7\
    \ * strength / extensions_count \n        val extension", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = strength / extensions_count_upper\n        val strength_lower\
    \ = strength / extensions_count_lower\n        val strength_total = strength_upper\
    \ + strength_lower\n        val extensions_sorted = extensions.sortWith((a, b)\
    \ => strength_total - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength_total - a.length - b.length)\n        val extensions_sorted =\
    \ extensions.sortWith((a, b) => strength_total - a.length - b.length)\n      \
    \  val extensions_sorted = extensions.sortWith((a, b) => strength_total - a.length\
    \ - b.length)\n        val extensions_sorted = extensions.sortWith((a, b) => strength_total\
    \ - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength_total - a.length - b.length)\n        val extensions_sorted =\
    \ extensions.sortWith((a, b) => strength_total - a.length - b.length)\n      \
    \  val extensions_sorted = extensions.sortWith((a, b) => strength_total - a.length\
    \ - b.length)\n        val extensions_sorted = extensions.sortWith((a, b) => strength_total\
    \ - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength_total - a.length - b.length)\n        val extensions_sorted =\
    \ extensions.sortWith((a, b) => strength_total - a.length - b.length)\n      \
    \  val extensions_sorted = extensions.sortWith((a, b) => strength_total - a.length\
    \ - b.length)\n        val extensions_sorted = extensions.sortWith((a, b) => strength_total\
    \ - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength_total - a.length - b.length)\n        val extensions_sorted =\
    \ extensions.sortWith((a, b) => strength_total - a.length - b.length)\n      \
    \  val extensions_sorted = extensions.sortWith((a, b) => strength_total - a.length\
    \ - b.length)\n        val extensions_sorted = extensions.sortWith((a, b) => strength_total\
    \ - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength_total - a.length - b.length)\n        val extensions_sorted =\
    \ extensions.sortWith((a, b) => strength_total - a.length - b.length)\n      \
    \  val extensions_sorted = extensions.sortWith((a, b) => strength_total - a.",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toString.toString.toUpperCase.length).toArray\n        val max_strength\
    \ = strength.max\n        val max_extension = extensions_map.getOrElse(max_strength,\
    \ \"\")\n        val max_class_name = class_name_map.getOrElse(max_strength, \"\
    \")\n        val max_extension_name = max_extension.map(x => x.toUpperCase)\n\
    \        val max_extension_name_with_extension = max_extension_name ++ extensions\n\
    \        (max_class_name + \".\" + max_extension_name).mkString", "        val\
    \ extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val extensions_count_upper_ratio = extensions_count_upper\
    \ / extensions_count.toDouble\n        val extensions_count_lower_ratio = extensions_count_lower\
    \ / extensions_count.toDouble\n        val extensions_count_ratio = extensions_count_upper\
    \ / extensions_count_lower\n        val extensions_count_ratio2 = extensions_count_upper\
    \ / extensions_count_upper_ratio\n        val extensions_count_ratio3 = extensions_count_lower\
    \ / extensions_count_lower_ratio\n        val extensions_count_ratio4 = extensions_count_upper\
    \ / extensions_count_ratio3\n        val extensions_count_ratio5 = extensions_count_lower\
    \ / extensions_count_ratio4\n        val extensions_count_ratio6 = extensions_count_upper\
    \ / extensions_count_ratio5\n        val extensions_count_ratio7 = extensions_count_lower\
    \ / extensions_count_ratio6\n        val extensions_count_ratio8 = extensions_count_upper\
    \ / extensions_count_ratio7\n        val extensions_count_ratio9 = extensions_count_lower\
    \ / extensions_count_ratio8\n        val extensions_count_ratio10 = extensions_count_upper\
    \ / extensions_count_ratio9\n        val extensions_count_ratio11 = extensions_count_lower\
    \ / extensions_count_ratio10\n        val extensions_count_ratio12 = extensions_count_upper\
    \ / extensions_count_ratio11\n        val extensions_count_ratio13 = extensions_count_lower\
    \ / extensions_count_ratio12\n        val extensions_count_ratio14 = extensions_count_upper\
    \ / extensions_count_ratio13\n        val extensions_count_ratio15 = extensions_count_lower\
    \ / extensions_count_ratio14\n        val extensions_count_ratio16 = extensions_count_upper\
    \ / extensions_count_ratio15\n        val extensions_count_ratio17 = extensions_count_lower\
    \ / extensions_count_ratio16\n        val extensions_count_ratio18 = extensions_count_upper\
    \ / extensions_count_ratio17\n        val extensions_count_ratio19 = extensions_count_lower\
    \ / extensions_count_ratio18\n        val extensions_count_ratio20 = extensions_count_upper\
    \ / extensions_count_ratio19\n        val extensions_count_ratio21 = extensions_count_lower\
    \ / extensions_count_ratio20\n        val extensions_count_ratio22 = extensions_count_upper\
    \ / extensions_count_ratio21\n        val extensions_count_ratio23 = extensions_count_lower ",
  "        val extensions_count = extensions.map(_.length).sum\n        val class_name_count\
    \ = class_name.length\n        val strength = extensions_count - class_name_count\n\
    \        val extension = extensions.sortWith(_.length > _.length).head\n     \
    \   val extension_length = extension.length\n        val extension_strength =\
    \ extension.length - extension_length\n        val extension_strength_str = extension_strength.toString\n\
    \        val extension_strength_str_length = extension_strength_str.length\n \
    \       val extension_strength_str_length_str = extension_strength_str_length.toString\n\
    \        val extension_strength_str_length_str_length = extension_strength_str_length_str.length\n\
    \        val extension_strength_str_length_str_length_str = extension_strength_str_length_str_length.toString\n\
    \        val extension_strength_str_length_str_length_str_length = extension_strength_str_length_str_length_str.length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str = extension_strength_str_length_str_length_str_length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length =\
    \ extension_strength_str_length_str_length_str_length_str.length.toString\n  \
    \      val extension_strength_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str.length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str.length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str.length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str.length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str.length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str.length.toString\n\
    \        val ", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => math.max(a, b))\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > strength).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.mkString(class_name + \".\"\
    )\n        extensions_sorted.mkString(extensions_sorted.last)", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase).zipWithIndex.toMap\n        val class_name_map\
    \ = class_name.zipWithIndex.toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (s, e) =>\n            val class_name_upper = class_name_map(e._1)\n     \
    \       val class_name_lower = class_name_map(e._2)\n            val class_name_length\
    \ = class_name_upper.length + class_name_lower.length\n            val extension_upper\
    \ = e._1\n            val extension_lower = e._2\n            val extension_length\
    \ = extension_upper.length + extension_lower.length\n            val strength_1\
    \ = if (class_name_length < extension_length) -1 else 0\n            val strength_2\
    \ = if (class_name_length == extension_length) 0 else 1\n            val strength_3\
    \ = if (class_name_length > extension_length) 1 else 0\n            val strength_4\
    \ = if (class_name_length < extension_length) 0 else 1\n            val strength_5\
    \ = if (class_name_length == extension_length) 1 else 0\n            val strength_6\
    \ = if (class_name_length > extension_length) 0 else 1\n            val strength_7\
    \ = if (class_name_length < extension_length) 1 else 0\n            val strength_8\
    \ = if (class_name_length == extension_length) 0 else 1\n            val strength_9\
    \ = if (class_name_length > extension_length) 0 else 1\n            val strength_10\
    \ = if (class_name_length < extension_length) 1 else 0\n            val strength_11\
    \ = if (class_name_length == extension_length) 0 else 1\n            val strength_12\
    \ = if (class_name_length > extension_length) 1 else 0\n            val strength_13\
    \ = if (class_name_length < extension_length) 0 else 1\n            val strength_14\
    \ = if (class_name_length == extension_length) 1 else 0\n            val strength_15\
    \ = if (class_name_length > extension_length) 0 else 1\n            val strength_16\
    \ = if (class_name_length < extension_length) 0 else 1\n            val strength_17\
    \ = if (class_name_length == extension_length) 1 else 0\n            val strength_18\
    \ = if (class_name_length > extension_length) 0 else 1\n            val strength_19\
    \ = if (class_name_length < extension_length) 0 else 1\n            val strength_20\
    \ = if (class_name_length == extension_length) 1 else 0\n            val strength_21\
    \ = if (class_name_length > extension_length) 0 else 1\n            val strength_22\
    \ = if (class_name_length < extension_length) 0 else 1\n            val strength_23\
    \ = if (", "        val extensions_count = extensions.map(_.length).sum\n    \
    \    val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n \
    \       val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_ratio = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_lower_ratio = extensions_count_lower / extensions_count.toDouble\n\
    \        val extensions_count_ratio = extensions_count_upper_ratio - extensions_count_lower_ratio\n\
    \        val extensions_count_ratio = extensions_count_ratio.toInt\n        val\
    \ extensions_count_ratio = extensions_count_ratio / 2\n        val extensions_count_ratio\
    \ = extensions_count_ratio.toInt\n        val extensions_count_ratio = extensions_count_ratio\
    \ / 2\n        val extensions_count_ratio = extensions_count_ratio.toInt\n   \
    \     val extensions_count_ratio = extensions_count_ratio / 2\n        val extensions_count_ratio\
    \ = extensions_count_ratio.toInt\n        val extensions_count_ratio = extensions_count_ratio\
    \ / 2\n        val extensions_count_ratio = extensions_count_ratio.toInt\n   \
    \     val extensions_count_ratio = extensions_count_ratio / 2\n        val extensions_count_ratio\
    \ = extensions_count_ratio.toInt\n        val extensions_count_ratio = extensions_count_ratio\
    \ / 2\n        val extensions_count_ratio = extensions_count_ratio.toInt\n   \
    \     val extensions_count_ratio = extensions_count_ratio / 2\n        val extensions_count_ratio\
    \ = extensions_count_ratio.toInt\n        val extensions_count_ratio = extensions_count_ratio\
    \ / 2\n        val extensions_count_ratio = extensions_count_ratio.toInt\n   \
    \     val extensions_count_ratio = extensions_count_ratio / 2\n        val extensions_count_ratio\
    \ = extensions_count_ratio.toInt\n        val extensions_count_ratio = extensions_count_ratio\
    \ / 2\n        val extensions_count_ratio = extensions_count_ratio.toInt\n   \
    \     val extensions_count_ratio = extensions_count_ratio / 2\n        val extensions_count_ratio\
    \ = extensions_count_ratio.toInt\n        val extensions_count_ratio = extensions_count_ratio\
    \ / 2\n        val extensions_count_ratio = extensions_count_ratio.toInt\n   \
    \     val extensions_count_ratio = extensions_count_ratio / 2\n        val extensions_count_ratio\
    \ = extensions_count_ratio.toInt\n        val extensions_count_", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((x, y) => if (x > y) x else\
    \ y)\n        val extensions_sorted = extensions_map.values.sortWith((x, y) =>\
    \ x < y)\n        val extensions_sorted = extensions_sorted.takeWhile(x => x <\
    \ strength)\n        val extensions_sorted = extensions_sorted.mkString(\"\")\
    \ + extensions_sorted.last\n        class_name + \".\" + extensions_sorted", " \
    \       val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortWith(_ < _)\n        val extensions_count_sorted_length = extensions_count_sorted.map(_.length).sum\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted = extensions_count_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_",
  "        val extensions_count = extensions.map(_.length).sum\n        val class_name_count\
    \ = class_name.length\n        val strength = extensions_count - class_name_count\n\
    \        val extensions_sorted = extensions.sortWith(_.length > _.length)\n  \
    \      val class_name_sorted = extensions_sorted.head\n        val extension_sorted\
    \ = extensions_sorted.last\n        val extension_length = extension_sorted.length\n\
    \        val extension_strength = extension_length - class_name_count\n      \
    \  if (extension_strength > strength) class_name_sorted + extension_sorted else\
    \ class_name_sorted", "        var strongest_extension = \"\"\n        var strongest_extension_strength\
    \ = -1\n        for(extension <- extensions) {\n            val cap = extension.filter(x\
    \ => x.isUpper).length\n            val sm = extension.filter(x => x.isLower).length\n\
    \            val strength = cap - sm\n            if(strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strength\n               \
    \ strongest_extension = extension\n            }\n        }\n        class_name\
    \ + \".\" + strongest_extension", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted =\
    \ extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.toList\n        val extensions_sorted = extensions_sorted.map(x\
    \ => class_name + x)\n        val extensions_sorted = extensions_sorted.sortBy(x\
    \ => extensions_map.getOrElse(x, 0))\n        extensions_sorted.head", "     \
    \   val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._2)\n    \
    \    val first_extension = sorted_extensions.head._1\n        val first_extension_strength\
    \ = sorted_extensions.head._2\n        if (strength == 0) first_extension\n  \
    \      else if (strength < first_extension_strength) first_extension\n       \
    \ else first_extension", "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0)\
    \ -> e.toUpperCase.charAt(1).toLowerCase).toMap\n        val extensions_sorted\
    \ = extensions.sortWith((a, b) => extensions_map(a) - extensions_map(b))\n   \
    \     val extensions_sorted = extensions_sorted.map(e => class_name + e.toUpperCase.charAt(0).toLowerCase)\n\
    \        extensions_sorted.head", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_sorted = extensions_map.toSeq.sortWith((a, b) => a._2 > b._2)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortWith((a, b) => a._1\
    \ < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.to", " \
    \       val extensions_map = extensions.map(e => e.toUpperCase).zipWithIndex.toMap\n\
    \        val class_name_map = class_name.zipWithIndex.toMap\n        val class_name_length\
    \ = class_name_map.length\n        val extensions_length = extensions_map.length\n\
    \        val strength = extensions_map.values.sum\n        val class_name_with_strength\
    \ = class_name_map + (strength -> class_name_length)\n        val extensions_with_strength\
    \ = extensions_map + (strength -> extensions_length)\n        val max_strength\
    \ = extensions_with_strength.maxBy(_._2)\n        val max_extension = extensions_with_strength.find(_._2\
    \ == max_strength).get._1\n        val class_name_with_max_strength = class_name_with_strength.filter(_._1\
    \ == max_extension)\n        val extensions_with_max_strength = extensions_with_strength.filter(_._1\
    \ == max_extension)\n        val max_extension_length = extensions_with_max_strength.length\n\
    \        val class_name_with_max_extension = class_name_with_max_strength.map(_._2).mkString(\"\
    .\")\n        val extensions_with_max_extension = extensions_with_max_strength.map(_._2).mkString(\"\
    .\")\n        val max_extension_strength = extensions_with_max_extension.sum\n\
    \        val class_name_with_max_extension_strength = class_name_with_max_extension.concat(\"\
    .\" + max_extension_strength)\n        val extensions_with_max_extension_strength\
    \ = extensions_with_max_extension.concat(\".\" + max_extension_strength)\n   \
    \     val max_extension_strength_length = extensions_with_max_extension_strength.length\n\
    \        val class_name_with_max_extension_strength = class_name_with_max_extension_strength.concat(\"\
    .\" + max_extension_strength)\n        val extensions_with_max_extension_strength\
    \ = extensions_with_max_extension_strength.concat(\".\" + max_extension_strength)\n\
    \        val max_extension_strength_strength_length = extensions_with_max_extension_strength_strength.length\n\
    \        val class_name_with_max_extension_strength_strength = class_name_with_max_extension_strength.concat(\"\
    .\" + max_extension_strength_strength)\n        val extensions_with_max_extension_strength_strength\
    \ = extensions_with_max_extension_strength.concat(\".\" + max_extension_strength_strength)\n\
    \        val max_extension_strength_strength_strength_length = extensions_with_max_extension_strength_strength_strength.length\n\
    \        val class_name_with_max_extension_strength_strength_strength = class_name_with_max_extension_strength_strength.concat(\"\
    .\" + max_extension_strength_strength_strength)\n        val extensions_with_max_extension_strength_strength_strength\
    \ = extensions_with_max_extension_", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val extensions_count_cap = extensions.map(_.toUpperCase.length).sum -\
    \ extensions.map(_.toLowerCase.length).sum\n        val extensions_count_sm =\
    \ extensions.map(_.toLowerCase.length).sum - extensions.map(_.toUpperCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower - extensions_count_cap\
    \ - extensions_count_sm\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => (x - class_name_map.get(x)).abs).max\n        val extensions_sorted = extensions_map.values.sortWith((x,\
    \ y) => strength - y)\n        val extensions_sorted_list = extensions_sorted.map(x\
    \ => class_name + x)\n        extensions_sorted_list.head", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val strength = extensions_count_sorted.last\n        val extensions_count_sorted_sorted\
    \ = extensions_count_sorted.sort\n        val strength_sorted = extensions_count_sorted_sorted.last\n\
    \        val strength_sorted_sorted = extensions_count_sorted_sorted.sort\n  \
    \      val strength_sorted_sorted_sorted = extensions_count_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted.sort\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted.sort\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted.sort\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted.sort\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted.sort\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted.sort\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted.sort\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted.sort\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted.sort\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted.sort\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted.sort\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted.sort\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sor",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n   \
    \     val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n    \
    \    val extensions_sorted = extensions_sorted.take(extensions_sorted.length /\
    \ 2)\n        val extensions_sorted = extensions_sorted.map(e => class_name +\
    \ \".\" + e._1)\n        extensions_sorted.head", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_map = extensions_map.toMap\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '_')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '$')\n        val extensions_map = extensions_map.filter(_._2 != '!')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val class_name_count = class_name.length\n\
    \        val strength = extensions_count - class_name_count\n        val extension\
    \ = extensions.sortWith(_ < _).head\n        val extension_length = extension.length\n\
    \        val class_name_length = class_name.length\n        val strength_length\
    \ = extension_length - class_name_length\n        val strength_fraction = strength\
    \ / extensions_count\n        val extension_class_name = extension.substring(0,\
    \ extension_length)\n        val extension_class_name_count = extension_class_name.length\n\
    \        val extension_class_name_strength = extension_class_name_count - strength_length\n\
    \        val extension_class_name_strength_fraction = extension_class_name_strength\
    \ / extension_class_name_count\n        val extension_class_name_strength_fraction\
    \ = extension_class_name_strength_fraction.toString.toDouble\n        val extension_class_name_strength_fraction\
    \ = extension_class_name_strength_fraction * 100\n        val extension_class_name_strength_fraction\
    \ = extension_class_name_strength_fraction.toInt\n        val extension_class_name_strength_fraction\
    \ = extension_class_name_strength_fraction.toString\n        val extension_class_name_strength_fraction\
    \ = extension_class_name_strength_fraction.substring(0, extension_class_name_strength_fraction.length\
    \ - 1)\n        val extension_class_name_strength_fraction = extension_class_name_strength_fraction\
    \ + extension_class_name\n        val extension_class_name_strength_fraction =\
    \ extension_class_name_strength_fraction + extension_class_name_count\n      \
    \  val extension_class_name_strength_fraction = extension_class_name_strength_fraction\
    \ + extension_class_name_strength\n        val extension_class_name_strength_fraction\
    \ = extension_class_name_strength_fraction + extension_class_name_strength_fraction\n\
    \        val extension_class_name_strength_fraction = extension_class_name_strength_fraction\
    \ + extension_class_name_strength_fraction\n        val extension_class_name_strength_fraction\
    \ = extension_class_name_strength_fraction + extension_class_name_strength_fraction\n\
    \        val extension_class_name_strength_fraction = extension_class_name_strength_fraction\
    \ + extension_class_name_strength_fraction\n        val extension_class_name_strength_fraction\
    \ = extension_class_name_strength_fraction + extension_class_name_strength_fraction\n\
    \        val extension_class_name_strength_fraction = extension_class_name_strength_fraction\
    \ + extension_class_name_strength_fraction\n        val extension_class_name_strength_fraction\
    \ = extension_class_name_strength_fraction + extension_class_name_strength_fraction\n",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.get(x) -\
    \ x.toString.toUpperCase.length).toArray\n        val max_strength = strength.max\n\
    \        val max_key = extensions_map.keys.toArray.max\n        val max_value\
    \ = extensions_map.values.toArray.max\n        val max_key_value = class_name_map.get(max_key)\n\
    \        val max_key_value_length = max_key_value.length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C') - e.toUpperCase.count(_\
    \ == 'D') - e.toUpperCase.count(_ == 'E') - e.toUpperCase.count(_ == 'F') - e.toUpperCase.count(_\
    \ == 'G') - e.toUpperCase.count(_ == 'H') - e.toUpperCase.count(_ == 'I') - e.toUpperCase.count(_\
    \ == 'J') - e.toUpperCase.count(_ == 'K') - e.toUpperCase.count(_ == 'L') - e.toUpperCase.count(_\
    \ == 'M') - e.toUpperCase.count(_ == 'N') - e.toUpperCase.count(_ == 'O') - e.toUpperCase.count(_\
    \ == 'P') - e.toUpperCase.count(_ == 'Q') - e.toUpperCase.count(_ == 'R') - e.toUpperCase.count(_\
    \ == 'S') - e.toUpperCase.count(_ == 'T') - e.toUpperCase.count(_ == 'U') - e.toUpperCase.count(_\
    \ == 'V') - e.toUpperCase.count(_ == 'W') - e.toUpperCase.count(_ == 'X') - e.toUpperCase.count(_\
    \ == 'Y') - e.toUpperCase.count(_ == 'Z')).toMap\n        val strength = extensions_map.values.max\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"\\\\..*\"\
    , \"\")\n        class_name + extensions_sorted", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val class_name_map = class_name.map(c => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val strength = extensions_map.values.map(c => class_name_map.get(c) -\
    \ class_name_map.get(c)).reduce(_ + _)\n        val strongest_extension = extensions_map.values.find(c\
    \ => class_name_map.get(c) == strength).getOrElse(\"\")\n        class_name +\
    \ strongest_extension", "        val extensions_count = extensions.count\n   \
    \     val extensions_count_upper = extensions.count(_.toUpperCase.size == extensions_count)\n\
    \        val extensions_count_lower = extensions.count(_.toLowerCase.size == extensions_count)\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compare",
  "        val extensions_count = extensions.count\n        val extensions_count_upper\
    \ = extensions.count(_.toUpperCase.size == extensions_count)\n        val extensions_count_lower\
    \ = extensions.count(_.toLowerCase.size == extensions_count)\n        val extensions_count_cap\
    \ = extensions.count(_.toUpperCase.size == extensions_count_lower)\n        val\
    \ extensions_count_sm = extensions.count(_.toLowerCase.size == extensions_count_upper)\n\
    \        val extensions_count_diff = extensions_count_cap - extensions_count_sm\n\
    \        if (extensions_count_diff == 0) extensions(0)\n        else if (extensions_count_diff\
    \ == 1) extensions(1)\n        else if (extensions_count_diff == 2) extensions(2)\n\
    \        else if (extensions_count_diff == 3) extensions(3)\n        else if (extensions_count_diff\
    \ == 4) extensions(4)\n        else if (extensions_count_diff == 5) extensions(5)\n\
    \        else if (extensions_count_diff == 6) extensions(6)\n        else if (extensions_count_diff\
    \ == 7) extensions(7)\n        else if (extensions_count_diff == 8) extensions(8)\n\
    \        else if (extensions_count_diff == 9) extensions(9)\n        else if (extensions_count_diff\
    \ == 10) extensions(10)\n        else if (extensions_count_diff == 11) extensions(11)\n\
    \        else if (extensions_count_diff == 12) extensions(12)\n        else if\
    \ (extensions_count_diff == 13) extensions(13)\n        else if (extensions_count_diff\
    \ == 14) extensions(14)\n        else if (extensions_count_diff == 15) extensions(15)\n\
    \        else if (extensions_count_diff == 16) extensions(16)\n        else if\
    \ (extensions_count_diff == 17) extensions(17)\n        else if (extensions_count_diff\
    \ == 18) extensions(18)\n        else if (extensions_count_diff == 19) extensions(19)\n\
    \        else if (extensions_count_diff == 20) extensions(20)\n        else if\
    \ (extensions_count_diff == 21) extensions(21)\n        else if (extensions_count_diff\
    \ == 22) extensions(22)\n        else if (extensions_count_diff == 23) extensions(23)\n\
    \        else if (extensions_count_diff == 24) extensions(24)\n        else if\
    \ (extensions_count_diff == 25) extensions(25)\n        else if (extensions_count_diff\
    \ == 26) extensions(26)\n        else if (extensions_count_diff == 27) extensions(27)\n\
    \        else if (extensions_count_diff == 28) extensions(28)\n        else if\
    \ (extensions_count_diff == 29) extensions(29)\n        else if (extensions_count_diff\
    \ == 30) extensions(30)\n        else if (extensions_count_diff == 31) extensions(31)\n\
    \        else if (extensions_count_diff == 32) extensions(32)\n        else if\
    \ (extensions_count_diff == 33) extensions(33)\n        else if (extensions_count_diff\
    \ == 34) ", "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0)\
    \ -> e.toUpperCase.charAt(1).toLowerCase)\n        val class_name_map = class_name.map(c\
    \ => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val strength = extensions_map.foldLeft(0)((acc, e) => acc + (class_name_map(e._1)\
    \ - class_name_map(e._2)))\n        val strongest_extension = extensions.find(e\
    \ => e.toUpperCase.charAt(0) == class_name_map(strength))\n        strongest_extension\
    \ match {\n            case Some(extension) => extension\n            case None\
    \ => \"\"\n        }", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortWith(_ < _)\n        val\
    \ extensions_count_sorted_length = extensions_count_sorted.map(_.length)\n   \
    \     val extensions_count_sorted_length_sum = extensions_count_sorted_length.sum\n\
    \        val extensions_count_sorted_length_sum_sorted = extensions_count_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sum_sorted_length = extensions_count_sorted_length_sum_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum = extensions_count_sorted_length_sum_sorted_length.sum\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted = extensions_count_sorted_length_sum_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length.sum\n \
    \       val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sorted.sum\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sorted.sum\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sorted.sum\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted\
    \ = ", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => math.max(a, b))\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > strength).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.mkString(\"\") + \".\" + extensions_sorted.last\n\
    \        class_name+\".\"+extensions_sorted", "        val extensions_count =\
    \ extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper_lower = extensions.map(_.toUpperCase.toLowerCase.length).sum\n\
    \        val extensions_count_lower_upper = extensions.map(_.toLowerCase.toUpperCase.length).sum\n\
    \        val strength_lower = extensions_count_lower_upper - extensions_count_upper\n\
    \        val strength_upper = extensions_count_upper_lower - extensions_count_lower\n\
    \        val strength_total = strength_lower + strength_upper\n        if (strength_total\
    \ > 0)\n            class_name_upper + extensions_count_upper + extensions_count_lower\
    \ + strength.toString + \".\" + extensions.map(_.toLowerCase).mkString(\".\")\n\
    \        else if (strength_total == 0)\n            class_name_upper + extensions_count_upper\
    \ + extensions_count_lower + strength.toString + \".\" + extensions.map(_.toLowerCase).mkString(\"\
    .\")\n        else if (strength_total == 1)\n            class_name_upper + extensions_count_upper\
    \ + extensions_count_lower + strength.toString + \".\" + extensions.map(_.toLowerCase).mkString(\"\
    .\") + extensions_count_lower_upper + extensions_count_upper.toString + \".\"\
    \ + extensions.map(_.toUpperCase).mkString(\".\")\n        else\n            class_name_upper\
    \ + extensions_count_upper + extensions_count_lower + strength.toString + \".\"\
    \ + extensions.map(_.toLowerCase).mkString(\".\") + extensions_count_lower_upper\
    \ + extensions_count_upper.toString + \".\" + extensions.map(_.toUpperCase).mkString(\"\
    .\")", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val class_name_map = class_name.map(x =>\
    \ (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = class_name_map.foldLeft(0)\
    \ { (s, x) =>\n            val cap = x._1.toUpperCase.size\n            val sm\
    \ = x._2.toUpperCase.size\n            val diff = cap - sm\n            if (diff\
    \ > s) diff else s\n        }\n        val extension_strength = extensions_map.foldLeft(0)\
    \ { (s, x) =>\n            val cap = x._1.toUpperCase.size\n            val sm\
    \ = x._2.toUpperCase.size\n            val diff = cap - sm\n            if (diff\
    \ > s) diff else s\n        }\n        if (extension_strength > strength) class_name\
    \ else class_name + \"_\" + extensions_map.maxBy(_._1)._2", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val class_name_length = class_name.length\n\
    \        val strength = extensions_count - class_name_length\n        val extensions_sorted\
    \ = extensions.sortWith((a, b) => strength - a.length - b.length)\n        val\
    \ extensions_sorted = extensions_sorted.take(1)\n        val extensions_sorted\
    \ = extensions_sorted.mkString(\".\") + extensions_sorted.last\n        class_name\
    \ + extensions_sorted", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extension_strength = extensions_count\
    \ - extensions_count_lower - extensions_count_upper\n        val extension_strength_upper\
    \ = extension_strength - extensions_count_lower\n        val extension_strength_lower\
    \ = extension_strength - extensions_count_upper\n        val extension_strength_sum\
    \ = extension_strength_upper + extension_strength_lower\n        val extension_strength_sum_upper\
    \ = extension_strength_sum - extensions_count_lower\n        val extension_strength_sum_lower\
    \ = extension_strength_sum - extensions_count_upper\n        val extension_strength_sum_sum\
    \ = extension_strength_sum_upper + extension_strength_sum_lower\n        val extension_strength_sum_sum_upper\
    \ = extension_strength_sum_sum - extensions_count_lower\n        val extension_strength_sum_sum_lower\
    \ = extension_strength_sum_sum - extensions_count_upper\n        val extension_strength_sum_sum_sum\
    \ = extension_strength_sum_sum_upper + extension_strength_sum_sum_lower\n    \
    \    val extension_strength_sum_sum_sum_upper = extension_strength_sum_sum_sum\
    \ - extensions_count_lower\n        val extension_strength_sum_sum_sum_lower =\
    \ extension_strength_sum_sum_sum - extensions_count_upper\n        val extension_strength_sum_sum_sum_sum\
    \ = extension_strength_sum_sum_sum_upper + extension_strength_sum_sum_sum_lower\n\
    \        val extension_strength_sum_sum_sum_sum_upper = extension_strength_sum_sum_sum_sum\
    \ - extensions_count_lower\n        val extension_strength_sum_sum_sum_sum_lower\
    \ = extension_strength_sum_sum_sum_sum - extensions_count_upper\n        val extension_strength_sum_sum_sum_sum_sum\
    \ = extension_strength_sum_sum_sum_sum_upper + extension_strength_sum_sum_sum_sum_lower\n\
    \        val extension_strength_sum_sum_sum_sum_sum_upper = extension_strength_sum_sum_sum_sum_sum\
    \ - extensions_count_lower\n        val extension_strength_sum_sum_sum_sum_sum_lower\
    \ = extension_strength_sum_sum_sum_sum_sum - extensions_count_upper\n        val\
    \ extension_strength_sum_sum_sum_sum_sum_sum = extension_strength_sum_sum_", " \
    \       val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val strength = extensions_sorted.head._2 - extensions_sorted.head._1\n\
    \        val extension = extensions_sorted.head._1\n        val extension_name\
    \ = extensions_sorted.head._2\n        val class_name = class_name.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_with_extension = class_name + \".\" +\
    \ extension_name\n        val class_name_with_extension_with_same_strength = class_name_with_extension\
    \ + extensions_sorted.head._1\n        val class_name_with_extension_with_same_strength_with_same_extension\
    \ = class_name_with_extension_with_same_strength + extensions_sorted.head._2\n\
    \        val class_name_with_extension_with_same_strength_with_same_extension_with_same_extension\
    \ = class_name_with_extension_with_same_strength_with_same_extension + extensions_sorted.head._3\n\
    \        val class_name_with_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension\
    \ = class_name_with_extension_with_same_strength_with_same_extension_with_same_extension\
    \ + extensions_sorted.head._4\n        val class_name_with_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension_with_same_extension\
    \ = class_name_with_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension\
    \ + extensions_sorted.head._5\n        val class_name_with_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension_with_same_extension_with_same_extension\
    \ = class_name_with_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension_with_same_extension\
    \ + extensions_sorted.head._6\n        val class_name_with_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension_with_same_extension_with_same_extension_with_same_extension\
    \ = class_name_with_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension_with_same_extension_with_same_extension\
    \ + extensions_sorted.head._7\n        val class_name_with_extension_with_same_strength_with_same_extension_",
  "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_count = extensions_map.size\n        val extensions_count_map\
    \ = extensions_count.toList.map(e => (e, extensions_map.get(e))).toMap\n     \
    \   val extensions_count_sorted = extensions_count_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.take(1).map(_._2)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_._1).reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.take(1).map(_._2)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_._1).reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.take(1).map(_._2)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_._1).reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.take(1).map(_._2)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_._1).reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.take(1).map(_._2)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_._1).reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.take(1).map(_._2)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_._1).reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.take(1).map(_._2)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_._1).reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.take(1).map(_._2)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_._1).reverse",
  "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase)).toMap\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase)).toMap\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase)).toMap\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase)).toMap\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase)).toMap\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase)).toMap\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase)).toMap\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase)).toMap\n\
    \        val extensions_map = extensions.", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).max\n        val extension\
    \ = extensions_map.getOrElse(strength, \"\")\n        class_name + extension",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (class_name_map.get(x),\
    \ x)).maxBy(_._2)._2\n        val class_name = class_name_map.get(strength)\n\
    \        val extension = extensions_map.get(strength)\n        class_name + \"\
    .\" + extension", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - strength\n        val strength_lower\
    \ = extensions_count_lower - strength\n        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val\
    \ extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val\
    \ extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val\
    \ extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ extensions_count_upper = extensions.map(_.toUpperCase).sum\n        val extensions_count_lower\
    \ = extensions.", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val class_name_map = class_name.map(x =>\
    \ (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = class_name_map.map{case\
    \ (k, v) => v - extensions_map(k)}.reduce(_ + _)\n        val strongest_extension\
    \ = class_name_map.map{case (k, v) => (k, v)}\n            .filter{case (k, v)\
    \ => v == strength}\n            .sortWith(_._1 < _._1)\n            .map(_._2)\n\
    \            .head\n        s\"$class_name.$strongest_extension\"", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val max_strength = extensions_map.values.max\n        val max_key = extensions_map.keys.max\n\
    \        val max_key_index = extensions_map.keys.indexOf(max_key)\n        val\
    \ max_key_value = extensions_map.values.max\n        val max_key_value_index =\
    \ extensions_map.values.indexOf(max_key_value)\n        val max_key_value_length\
    \ = extensions_map.values.max\n        val max_key_value_length_index = extensions_map.values.indexOf(max_key_value_length)\n\
    \        val max_key_value_length_length = extensions_map.values.max\n       \
    \ val max_key_value_length_length_index = extensions_map.values.indexOf(max_key_value_length_length)\n\
    \        val max_key_value_length_length_length = extensions_map.values.max\n\
    \        val max_key_value_length_length_length_index = extensions_map.values.indexOf(max_key_value_length_length_length)\n\
    \        val max_key_value_length_length_length_length = extensions_map.values.max\n\
    \        val max_key_value_length_length_length_index = extensions_map.values.indexOf(max_key_value_length_length_length_length)\n\
    \        val max_key_value_length_length_length_length = extensions_map.values.max\n\
    \        val max_key_value_length_length_length_index = extensions_map.values.indexOf(max_key_value_length_length_length_length)\n\
    \        val max_key_value_length_length_length_length = extensions_map.values.max\n\
    \        val max_key_value_length_length_length_index = extensions_map.values.indexOf(max_key_value_length_length_length_length)\n\
    \        val max_key_value_length_length_length_length = extensions_map.values.max\n\
    \        val max_key_value_length_length_length_index = extensions_map.values.indexOf(max_key_value_length_length_length_length)\n\
    \        val max_key_value_length_length_length_length = extensions_map.values.max\n\
    \        val max_key_value_length_length_length_index = extensions_map.values.indexOf(max_key_value_length_length_length_length)\n\
    \        val max_key_value_length_length_length_length = extensions_map.values.max\n\
    \        val max_key_value_length_length_length_index = extensions_map.values.indexOf(max_key_value_length_length_length_length)\n\
    \        val max_key_value_length_length_length_length = extensions_map.values.max\n\
    \        val max_key_value_length_length_length_index = extensions_map.values.indexOf(max_key_value_length_length_length_length)\n\
    \        val max_key_value_length_length_length_length = extensions_map.values.max\n\
    \        val max_key_value_length_length_length_index = extensions_map.values.indexOf(max_key_value_length_length_length_length)\n\
    \        val max_key_value_length_length_length_length = extensions_map.values.max\n\
    \        val ", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n\
    \        val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val extension = sorted_extensions.find(e\
    \ => e._2 == strength).getOrElse(\"\")\n        class_name + extension", "   \
    \     val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x - class_name_map.get(x)).abs).max\n\
    \        val extensions_sorted = extensions_map.values.sortBy(x => x - class_name_map.get(x))\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x <= strength).mkString(\"\
    \")\n        class_name + \".\" + extensions_sorted", "        val extensions_map\
    \ = extensions.map(e => (e.toUpperCase.size, e.toLowerCase.size)).toMap\n    \
    \    val class_name_map = class_name.map(c => (c.toUpperCase.size, c.toLowerCase.size)).toMap\n\
    \        val max_strength = extensions_map.values.max\n        val max_key = extensions_map.keys.max\n\
    \        val max_key_index = extensions_map.keys.indexOf(max_key)\n        val\
    \ max_key_value = extensions_map.get(max_key)\n        val max_key_key_index =\
    \ class_name_map.keys.indexOf(max_key_value)\n        val max_key_class_name =\
    \ class_name_map.get(max_key_value)\n        val max_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name)\n        val max_key_class_name_key_value\
    \ = extensions_map.get(max_key_class_name)\n        val max_key_class_name_key_key_index\
    \ = class_name_map.keys.indexOf(max_key_class_name_key_value)\n        val max_key_class_name_key_class_name\
    \ = class_name_map.get(max_key_class_name_key_value)\n        val max_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name)\n        val\
    \ max_key_class_name_key_class_name_key_value = extensions_map.get(max_key_class_name_key_class_name)\n\
    \        val max_key_class_name_key_class_name_key_key_index = class_name_map.keys.indexOf(max_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_index = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_key_index =\
    \ class_name_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_index)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength = extensions_count_sorted.last.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_", "        var extensions_count = extensions.length\n      \
    \  var strongest_extension = \"\"\n        var strongest_extension_strength =\
    \ -1\n        var class_name_length = class_name.length\n        for(i <- 0 until\
    \ extensions_count) {\n            var extension = extensions(i)\n           \
    \ var extension_length = extension.length\n            var extension_strength\
    \ = extension_length - class_name_length\n            if(extension_strength >\
    \ strongest_extension_strength) {\n                strongest_extension_strength\
    \ = extension_strength\n                strongest_extension = extension\n    \
    \        }\n        }\n        return class_name + \".\" + strongest_extension",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size,\
    \ x)).toMap\n        val strength = extensions_map.values.reduce((a, b) => math.max(a,\
    \ b))\n        val extensions_sorted = extensions_map.values.sortBy(x => x)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x < strength)\n\
    \        val extensions_sorted = extensions_sorted.map(x => extensions_map(x._2))\n\
    \        val extensions_sorted = extensions_sorted.mkString(\"\")\n        class_name\
    \ + extensions_sorted"]
stop_tokens:
- "\n    }\n"
