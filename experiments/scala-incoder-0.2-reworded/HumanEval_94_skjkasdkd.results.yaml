language: scala
name: HumanEval_94_skjkasdkd
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc65ztydt.scala:26)\n\tat Problem.main(tmpc65ztydt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804662
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val primesCount = primes.size\n\
    \        val maxPrime = primes.max\n        val maxPrimeIndex = primes.indexOf(maxPrime)\n\
    \        val maxPrimeValue = maxPrime.toInt\n        val maxPrimeValueString =\
    \ maxPrimeValue.toString\n        val maxPrimeValueStringLength = maxPrimeValueString.length\n\
    \        val maxPrimeValueStringLength = maxPrimeValueString.length\n        val\
    \ maxPrimeValueStringLength = maxPrimeValueString.length\n        val maxPrimeValueStringLength\
    \ = maxPrimeValueString.length\n        val maxPrimeValueStringLength = maxPrimeValueString.length\n\
    \        val maxPrimeValueStringLength = maxPrimeValueString.length\n        val\
    \ maxPrimeValueStringLength = maxPrimeValueString.length\n        val maxPrimeValueStringLength\
    \ = maxPrimeValueString.length\n        val maxPrimeValueStringLength = maxPrimeValueString.length\n\
    \        val maxPrimeValueStringLength = maxPrimeValueString.length\n        val\
    \ maxPrimeValueStringLength = maxPrimeValueString.length\n        val maxPrimeValueStringLength\
    \ = maxPrimeValueString.length\n        val maxPrimeValueStringLength = maxPrimeValueString.length\n\
    \        val maxPrimeValueStringLength = maxPrimeValueString.length\n        val\
    \ maxPrimeValueStringLength = maxPrimeValueString.length\n        val maxPrimeValueStringLength\
    \ = maxPrimeValueString.length\n        val maxPrimeValueStringLength = maxPrimeValueString.length\n\
    \        val maxPrimeValueStringLength = maxPrimeValueString.length\n        val\
    \ maxPrimeValueStringLength = maxPrimeValueString.length\n        val maxPrimeValueStringLength\
    \ = maxPrimeValueString.length\n        val maxPrimeValueStringLength = maxPrimeValueString.length\n\
    \        val maxPrimeValueStringLength = maxPrimeValueString.length\n        val\
    \ maxPrimeValueStringLength = maxPrimeValueString.length\n        val maxPrimeValueStringLength\
    \ = maxPrimeValueString.length\n        val maxPrimeValueStringLength = maxPrimeValueString.length\n\
    \        val maxPrimeValueStringLength = maxPrimeValueString.length\n        val\
    \ maxPrimeValueStringLength = maxPrimeValueString.length\n        val maxPrimeValueStringLength\
    \ = maxPrimeValueString.length\n        val maxPrimeValueStringLength = maxPrimeValue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpykgea03z.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxPrimeValueStringLength\e\
    [0m = maxPrimeValueString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxPrimeValueStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxPrimeValueStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpykgea03z.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxPrimeValueStringLength\e\
    [0m = maxPrimeValueString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxPrimeValueStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxPrimeValueStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpykgea03z.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxPrimeValueStringLength\e\
    [0m = maxPrimeValueString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxPrimeValueStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxPrimeValueStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpykgea03z.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxPrimeValueStringLength\e\
    [0m = maxPrimeValueString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxPrimeValueStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxPrimeValueStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n   \
    \     val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n  \
    \      sumOfDigits + maxPrime.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp49y_is46.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp49y_is46.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpin9j_mar.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val\
    \ primesSet = primes.toSet\n        val largestPrime = primes.max\n        val\
    \ sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpic72qk8w.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits + maxPrime.toString.toInt\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5fz5hx5y.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m   |\e[0m                             \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     Not\
    \ found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_\
    \ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_\
    \ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_\
    \ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp47qijoex.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp47qijoex.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpns_5k_yj.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ocys3r0.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7ocys3r0.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val primesCount = primes.size\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).sum\n        val sumOfDigitsOfMaxPrime = sumOfDigits\
    \ / maxPrime\n        val sumOfDigitsOfMaxPrimeWithMaxPrime = sumOfDigitsOfMaxPrime\
    \ * maxPrime\n        val sumOfDigitsOfMaxPrimeWithMaxPrimeAndPrimes = sumOfDigitsOfMaxPrimeWithMaxPrime\
    \ + primesCount\n        sumOfDigitsOfMaxPrimeWithMaxPrimeAndPrimes\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppdilbsx_.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppdilbsx_.scala:23:42 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_\
    \ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_\
    \ % 223 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6v_r8md5.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m201\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m207\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxo5xfm2j.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpaiukknbx.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaiukknbx.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^"
  stdout: ''
  timestamp: 1659804658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.HashSet[Long]()\n\
    \        val primesCount = mutable.HashMap[Long, Int]()\n        val primesSum\
    \ = mutable.HashMap[Long, Long]()\n        val primesSumCount = mutable.HashMap[Long,\
    \ Long]()\n        val primesSumCount2 = mutable.HashMap[Long, Long]()\n     \
    \   val primesSumCount3 = mutable.HashMap[Long, Long]()\n        val primesSumCount4\
    \ = mutable.HashMap[Long, Long]()\n        val primesSumCount5 = mutable.HashMap[Long,\
    \ Long]()\n        val primesSumCount6 = mutable.HashMap[Long, Long]()\n     \
    \   val primesSumCount7 = mutable.HashMap[Long, Long]()\n        val primesSumCount8\
    \ = mutable.HashMap[Long, Long]()\n        val primesSumCount9 = mutable.HashMap[Long,\
    \ Long]()\n        val primesSumCount10 = mutable.HashMap[Long, Long]()\n    \
    \    val primesSumCount11 = mutable.HashMap[Long, Long]()\n        val primesSumCount12\
    \ = mutable.HashMap[Long, Long]()\n        val primesSumCount13 = mutable.HashMap[Long,\
    \ Long]()\n        val primesSumCount14 = mutable.HashMap[Long, Long]()\n    \
    \    val primesSumCount15 = mutable.HashMap[Long, Long]()\n        val primesSumCount16\
    \ = mutable.HashMap[Long, Long]()\n        val primesSumCount17 = mutable.HashMap[Long,\
    \ Long]()\n        val primesSumCount18 = mutable.HashMap[Long, Long]()\n    \
    \    val primesSumCount19 = mutable.HashMap[Long, Long]()\n        val primesSumCount20\
    \ = mutable.HashMap[Long, Long]()\n        val primesSumCount21 = mutable.HashMap[Long,\
    \ Long]()\n        val primesSumCount22 = mutable.HashMap[Long, Long]()\n    \
    \    val primesSumCount23 = mutable.HashMap[Long, Long]()\n        val primesSumCount24\
    \ = mutable.HashMap[Long, Long]()\n        val primesSumCount25 = mutable.HashMap[Long,\
    \ Long]()\n        val primesSumCount26 = mutable.HashMap[Long, Long]()\n    \
    \    val primesSumCount27 = mutable.HashMap[Long\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8hzypgkx.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8hzypgkx.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8hzypgkx.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesCount\e[0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp8hzypgkx.scala:22:24 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSum\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8hzypgkx.scala:23:29\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSumCount\e[0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8hzypgkx.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSumCount2\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \         ^^^^^"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_\
    \ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_\
    \ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 231 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 351 == 0).filter(_ % 359 == 0).filter(_ % 361 == 0).filter(_ % 367 == 0).filter(_\
    \ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo5bi83dy.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpo5bi83dy.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpixbgw52x.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0xap64vv.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m   |\e[0m                             \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     Not\
    \ found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0xap64vv.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m   |\e[0m                             \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     Not\
    \ found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt)\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime.toString.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp085bykzt.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8y1kjb81.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m213\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptahiji0l.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n   \
    \     val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n  \
    \      sumOfDigits + maxPrime\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm7ypz25.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqm7ypz25.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgugx_knu.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgugx_knu.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val largestPrime = primes.max\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        sumOfDigits + largestPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpal3hcfmf.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpal3hcfmf.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n  \
    \      val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiwenano5.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsoyaetne.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsoyaetne.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val\
    \ primesCount = primes.size\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        val maxDigit = maxPrime.toString.toInt\n\
    \        val maxDigitCount = maxDigit * maxPrime\n        val maxDigitSum = sumOfDigits\
    \ / maxDigitCount\n        val maxDigitSumCount = maxDigitSum * maxDigitCount\n\
    \        val maxDigitSumCountCount = maxDigitSumCount * maxDigitCount\n      \
    \  val maxDigitSumCountCountCount = maxDigitSumCountCount * maxDigitCount\n  \
    \      val maxDigitSumCountCountCountCount = maxDigitSumCountCountCount * maxDigitCount\n\
    \        val maxDigitSumCountCountCountCountCount = maxDigitSumCountCountCountCount\
    \ * maxDigitCount\n        val maxDigitSumCountCountCountCountCountCount = maxDigitSumCountCountCountCountCount\
    \ * maxDigitCount\n        val maxDigitSumCountCountCountCountCountCountCount\
    \ = maxDigitSumCountCountCountCountCountCount * maxDigitCount\n        val maxDigitSumCountCountCountCountCountCountCountCount\
    \ = maxDigitSumCountCountCountCountCountCountCount * maxDigitCount\n        val\
    \ maxDigitSumCountCountCountCountCountCountCountCountCount = maxDigitSumCountCountCountCountCountCountCountCountCount\
    \ * maxDigitCount\n        val maxDigitSumCountCountCountCountCountCountCountCountCountCount\
    \ = maxDigitSumCountCountCountCountCountCountCountCountCount * maxDigitCount\n\
    \        val maxDigitSumCountCountCountCountCountCountCountCountCountCountCount\
    \ = maxDigitSumCountCountCountCountCountCountCountCountCountCount * maxDigitCount\n\
    \        val maxDigitSumCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = maxDigitSumCountCountCountCountCountCountCountCountCountCountCount * maxDigitCount\n\
    \        val maxDigitSumCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = maxDigitSumCountCountCountCountCountCountCountCountCountCountCountCount *\
    \ maxDigitCount\n        val maxDigitSumCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = maxDigitSumCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ * maxDigitCount\n        val maxDigitSumCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = maxDigitSumCountCountCount\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprhrwzs5w.scala:35:71 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitSumCountCountCountCountCountCountCountCountCount\e\
    [0m = maxDigitSumCountCountCountCountCountCountCountCountCount * maxDigitCount\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxDigitSumCountCountCountCountCountCountCountCountCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprhrwzs5w.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 177 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz2e1uqew.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvqiag58d.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n  \
    \      val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\
    \ + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoat5yfa7.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_\
    \ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_\
    \ % 223 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdlle4rwz.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpdlle4rwz.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val largestPrime = primes.max\n\
    \        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        largestPrime\
    \ + sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb6mmrade.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpuw902gyi.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n   \
    \     val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n  \
    \      sumOfDigits + maxPrime\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm7ypz25.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqm7ypz25.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 409 == 0).filter(_ % 419 == 0).filter(_ % 421 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgcyytmbn.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt)\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpasor44gq.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpezksf1hq.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpezksf1hq.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_\
    \ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdztu55ki.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 177 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 203 == 0).filter(_\
    \ % 207 == 0).filter(_ % 209 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_\
    \ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 243 == 0).filter(_ % 247 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 267 == 0).filter(_\
    \ % 269 == 0).filter(_ % 273 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 37\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4jf5n2j5.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4jf5n2j5.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1093nyrs.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1093nyrs.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804673
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0)\n        val primesSet = primes.toSet\n        val primesSetSize =\
    \ primesSet.size\n        val maxPrime = primesSet.max\n        val sumOfDigits\
    \ = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$6(tmp1wid94p_.scala:24)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmp1wid94p_.scala:24)\n\
    \tat Problem$.main(tmp1wid94p_.scala:28)\n\tat Problem.main(tmp1wid94p_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 201 == 0).filter(_ % 207 == 0).filter(_ % 209 == 0).filter(_ % 211 == 0).filter(_\
    \ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 231 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_\
    \ % 38\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_wocet0l.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_wocet0l.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsoyaetne.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsoyaetne.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_\
    \ % 353 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_\
    \ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_\
    \ % 38\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb3aj6l9l.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpb3aj6l9l.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpixbgw52x.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt)\n        val primeSum = primes.sum\n        val\
    \ primeSumDigits = primes.map(x => x.toString.toInt).sum\n        val primeSumDigit\
    \ = primeSumDigits.toString.toInt\n        primeSumDigit + primeSum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgqq9a_l_.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 409 == 0).filter(_ % 419 == 0).filter(_ % 421 == 0).filter(_ % 431 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmcw064qe.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmcw064qe.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0xap64vv.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m   |\e[0m                             \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     Not\
    \ found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n  \
    \      val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiwenano5.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpns_5k_yj.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val\
    \ maxPrime = primes.max\n        val sumOfDigits = primes.map(x => math.pow(10,\
    \ x)).sum\n        sumOfDigits + maxPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp561wnvli.scala:23:8\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m        sumOfDigits + maxPrime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Double\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659804673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm_b0k9ek.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_\
    \ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiea2dzcp.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpiea2dzcp.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxo5xfm2j.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n   \
    \     val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n  \
    \      sumOfDigits + maxPrime\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm7ypz25.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqm7ypz25.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpezksf1hq.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpezksf1hq.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr1sj39sj.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr1sj39sj.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n\
    \        val largestPrime = mutable.Set[Long]()\n        val sumOfDigits = mutable.Set[Long]()\n\
    \        val primesCount = mutable.Set[Long]()\n        val largestPrimeCount\
    \ = mutable.Set[Long]()\n        val sumOfDigitsCount = mutable.Set[Long]()\n\
    \        val primesCountCount = mutable.Set[Long]()\n        val largestPrimeCountCount\
    \ = mutable.Set[Long]()\n        val sumOfDigitsCountCount = mutable.Set[Long]()\n\
    \        val primesCountCountCount = mutable.Set[Long]()\n        val largestPrimeCountCountCount\
    \ = mutable.Set[Long]()\n        val sumOfDigitsCountCountCount = mutable.Set[Long]()\n\
    \        val primesCountCountCountCount = mutable.Set[Long]()\n        val largestPrimeCountCountCountCount\
    \ = mutable.Set[Long]()\n        val sumOfDigitsCountCountCountCount = mutable.Set[Long]()\n\
    \        val primesCountCountCountCountCount = mutable.Set[Long]()\n        val\
    \ largestPrimeCountCountCountCountCount = mutable.Set[Long]()\n        val sumOfDigitsCountCountCountCountCount\
    \ = mutable.Set[Long]()\n        val primesCountCountCountCountCountCount = mutable.Set[Long]()\n\
    \        val largestPrimeCountCountCountCountCountCount = mutable.Set[Long]()\n\
    \        val sumOfDigitsCountCountCountCountCountCount = mutable.Set[Long]()\n\
    \        val primesCountCountCountCountCountCountCount = mutable.Set[Long]()\n\
    \        val largestPrimeCountCountCountCountCountCountCount = mutable.Set[Long]()\n\
    \        val sumOfDigitsCountCountCountCountCountCountCount = mutable.Set[Long]()\n\
    \        val primesCountCountCountCountCountCountCountCount = mutable.Set[Long]()\n\
    \        val largestPrimeCountCountCountCountCountCountCountCount = mutable.Set[Long]()\n\
    \        val sumOfDigitsCountCountCountCountCountCountCountCount = mutable.Set[Long]()\n\
    \        val primesCountCountCountCountCountCountCountCountCount = mutable.Set[Long]()\n\
    \        val largestPrimeCountCountCountCountCountCountCountCountCount = mutable.Set[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrxs9u8y.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdrxs9u8y.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlargestPrime\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrxs9u8y.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrxs9u8y.scala:23:26 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrxs9u8y.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlargestPrimeCount\e[0m =\
    \ mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrxs9u8y.scala:25:31\
    \ ------------------------\e[0m\e[0m\n\e[31m25 "
  stdout: ''
  timestamp: 1659804679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.HashSet[Long]()\n\
    \        val primesSet = mutable.HashSet[Long]()\n        val primesSet2 = mutable.HashSet[Long]()\n\
    \        val primesSet3 = mutable.HashSet[Long]()\n        val primesSet4 = mutable.HashSet[Long]()\n\
    \        val primesSet5 = mutable.HashSet[Long]()\n        val primesSet6 = mutable.HashSet[Long]()\n\
    \        val primesSet7 = mutable.HashSet[Long]()\n        val primesSet8 = mutable.HashSet[Long]()\n\
    \        val primesSet9 = mutable.HashSet[Long]()\n        val primesSet10 = mutable.HashSet[Long]()\n\
    \        val primesSet11 = mutable.HashSet[Long]()\n        val primesSet12 =\
    \ mutable.HashSet[Long]()\n        val primesSet13 = mutable.HashSet[Long]()\n\
    \        val primesSet14 = mutable.HashSet[Long]()\n        val primesSet15 =\
    \ mutable.HashSet[Long]()\n        val primesSet16 = mutable.HashSet[Long]()\n\
    \        val primesSet17 = mutable.HashSet[Long]()\n        val primesSet18 =\
    \ mutable.HashSet[Long]()\n        val primesSet19 = mutable.HashSet[Long]()\n\
    \        val primesSet20 = mutable.HashSet[Long]()\n        val primesSet21 =\
    \ mutable.HashSet[Long]()\n        val primesSet22 = mutable.HashSet[Long]()\n\
    \        val primesSet23 = mutable.HashSet[Long]()\n        val primesSet24 =\
    \ mutable.HashSet[Long]()\n        val primesSet25 = mutable.HashSet[Long]()\n\
    \        val primesSet26 = mutable.HashSet[Long]()\n        val primesSet27 =\
    \ mutable.HashSet[Long]()\n        val primesSet28 = mutable.HashSet[Long]()\n\
    \        val primesSet29 = mutable.HashSet[Long]()\n        val primesSet30 =\
    \ mutable.HashSet[Long]()\n        val primesSet31 = mutable.HashSet[Long]()\n\
    \        val primesSet32 = mutable.HashSet[Long]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1659804681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n   \
    \     val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n  \
    \      sumOfDigits + maxPrime.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp49y_is46.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp49y_is46.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSetSet = mutable.Set[Long]()\n\
    \        val primesSetSetSet = mutable.Set[Long]()\n        val primesSetSetSetSet\
    \ = mutable.Set[Long]()\n        val primesSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val primesSetSetSetSetSetSet = mutable.Set[Long]()\n        val primesSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val primesSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val primesSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val\
    \ primesSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val primesSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val primesSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val primesSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n    \
    \    val primesSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val\
    \ primesSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val primesSetSetSetSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val primesSetSetSetSetSetSetSetSetSetSetSet =\
    \ mutable.Set[Long]()\n        val primesSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val primesSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n \
    \       val primesSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n  \
    \      val primesSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n   \
    \     val primesSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n    \
    \    val primesSetSetSetSetSetSetSetSetSetSetSetSet = mutable.Set[Long]()\n  \
    \      val primesSetSetSetSetSet\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptg2wc66a.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptg2wc66a.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetSetSetSetSetSetSetSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mprimesSetSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptg2wc66a.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mprimesSetSetSetSetSetSetSetSetSetSet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetSetSetSetSetSetSetSetSetSet is already defined as\
    \ \e[33mvalue\e[0m \e[35mprimesSetSetSetSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptg2wc66a.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetSetSetSetSetSetSetSetSetSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetSetSetSetSetSetSetSetSetSet is already defined as\
    \ \e[33mvalue\e[0m \e[35mprimesSetSetSetSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptg2wc66a.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetSetSetSetSetSetSetSetSetSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31"
  stdout: ''
  timestamp: 1659804680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmlb2u0uv.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmlb2u0uv.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n   \
    \     val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n  \
    \      sumOfDigits + maxPrime.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp49y_is46.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp49y_is46.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpixbgw52x.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpezksf1hq.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpezksf1hq.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsoyaetne.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsoyaetne.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 409 == 0).filter(_ % 419 == 0).filter(_ % 421 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptdt4x_ss.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptdt4x_ss.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr1sj39sj.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr1sj39sj.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 409 == 0).filter(_ % 419 == 0).filter(_ % 421 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu615ts7b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpu615ts7b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn2p4ro8u.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpn2p4ro8u.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val\
    \ primesCount = primes.size\n        val maxPrime = primes.max\n        val maxPrimeDigit\
    \ = maxPrime.toString.toInt\n        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n\
    \        val sumOfDigitsDigit = sumOfDigits.toString.toInt\n        val sumOfDigitsDigit2\
    \ = sumOfDigits * sumOfDigits\n        val sumOfDigitsDigit3 = sumOfDigits * sumOfDigits\
    \ * sumOfDigits\n        val sumOfDigitsDigit4 = sumOfDigits * sumOfDigits * sumOfDigits\
    \ * sumOfDigits\n        val sumOfDigitsDigit5 = sumOfDigits * sumOfDigits * sumOfDigits\
    \ * sumOfDigits * sumOfDigits\n        val sumOfDigitsDigit6 = sumOfDigits * sumOfDigits\
    \ * sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits\n        val sumOfDigitsDigit7\
    \ = sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits\
    \ * sumOfDigits\n        val sumOfDigitsDigit8 = sumOfDigits * sumOfDigits * sumOfDigits\
    \ * sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits\n    \
    \    val sumOfDigitsDigit9 = sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits\
    \ * sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits\n    \
    \    val sumOfDigitsDigit10 = sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits\
    \ * sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits\
    \ * sumOfDigits\n        val sumOfDigitsDigit11 = sumOfDigits * sumOfDigits *\
    \ sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits\
    \ * sumOfDigits * sumOfDigits * sumOfDigits * sumOfDigits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ddhjxvr.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt)\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime.toString.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp085bykzt.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpezksf1hq.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpezksf1hq.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpaiukknbx.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaiukknbx.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^"
  stdout: ''
  timestamp: 1659804658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0)\n        val primesCount = primes.size\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprtdt6tk8.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_\
    \ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_\
    \ % 223 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9c8mdtwn.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9c8mdtwn.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_\
    \ % 207 == 0).filter(_ % 209 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_\
    \ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7asvkjom.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7asvkjom.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpidy38ikb.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n   \
    \     val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n  \
    \      val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n \
    \       val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOf\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9in067dq.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9in067dq.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumOfDigits\e[0m = lst.filter(\e[36mx\e[0m => isPrime(x)).map(\e[36mx\e\
    [0m => x.toInt).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumOfDigits is already defined as \e[33mvalue\e[0m \e[35msumOfDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9in067dq.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e[36mx\e\
    [0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0msumOfDigits is already defined as \e[33mvalue\e[0m \e[35msumOfDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9in067dq.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e[36mx\e\
    [0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0msumOfDigits is already defined as \e[33mvalue\e[0m \e[35msumOfDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9in067dq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e[36mx\e\
    [0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659804684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpy87nt2td.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 351 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_\
    \ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_ % 397 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6y3kly86.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6y3kly86.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm_b0k9ek.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n   \
    \     val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n  \
    \      val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n \
    \       val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOf\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9in067dq.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9in067dq.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumOfDigits\e[0m = lst.filter(\e[36mx\e[0m => isPrime(x)).map(\e[36mx\e\
    [0m => x.toInt).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumOfDigits is already defined as \e[33mvalue\e[0m \e[35msumOfDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9in067dq.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e[36mx\e\
    [0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0msumOfDigits is already defined as \e[33mvalue\e[0m \e[35msumOfDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9in067dq.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e[36mx\e\
    [0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0msumOfDigits is already defined as \e[33mvalue\e[0m \e[35msumOfDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9in067dq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e[36mx\e\
    [0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659804684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz1b31soq.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpz1b31soq.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpezksf1hq.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpezksf1hq.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm_b0k9ek.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n  \
    \      val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiwenano5.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 201 == 0).filter(_ % 207 == 0).filter(_ % 209 == 0).filter(_ % 211 == 0).filter(_\
    \ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 231 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 243 == 0).filter(_ % 247 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_\
    \ % 347 == 0).filter(_ % 351 == 0).filter(_ % 353 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpltlp6_v5.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpltlp6_v5.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 409 == 0).filter(_ % 419 == 0).filter(_ % 421 == 0).filter(_ % 433 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp74cj325f.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m227\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2944dce_.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2944dce_.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n  \
    \      val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\
    \ + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoat5yfa7.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm_b0k9ek.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val largestPrime = primes.max\n\
    \        val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\
    \ + largestPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6pjzief.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.HashSet[Long]()\n\
    \        val primesSet = mutable.HashSet[Long]()\n        val primesSet2 = mutable.HashSet[Long]()\n\
    \        val primesSet3 = mutable.HashSet[Long]()\n        val primesSet4 = mutable.HashSet[Long]()\n\
    \        val primesSet5 = mutable.HashSet[Long]()\n        val primesSet6 = mutable.HashSet[Long]()\n\
    \        val primesSet7 = mutable.HashSet[Long]()\n        val primesSet8 = mutable.HashSet[Long]()\n\
    \        val primesSet9 = mutable.HashSet[Long]()\n        val primesSet10 = mutable.HashSet[Long]()\n\
    \        val primesSet11 = mutable.HashSet[Long]()\n        val primesSet12 =\
    \ mutable.HashSet[Long]()\n        val primesSet13 = mutable.HashSet[Long]()\n\
    \        val primesSet14 = mutable.HashSet[Long]()\n        val primesSet15 =\
    \ mutable.HashSet[Long]()\n        val primesSet16 = mutable.HashSet[Long]()\n\
    \        val primesSet17 = mutable.HashSet[Long]()\n        val primesSet18 =\
    \ mutable.HashSet[Long]()\n        val primesSet19 = mutable.HashSet[Long]()\n\
    \        val primesSet20 = mutable.HashSet[Long]()\n        val primesSet21 =\
    \ mutable.HashSet[Long]()\n        val primesSet22 = mutable.HashSet[Long]()\n\
    \        val primesSet23 = mutable.HashSet[Long]()\n        val primesSet24 =\
    \ mutable.HashSet[Long]()\n        val primesSet25 = mutable.HashSet[Long]()\n\
    \        val primesSet26 = mutable.HashSet[Long]()\n        val primesSet27 =\
    \ mutable.HashSet[Long]()\n        val primesSet28 = mutable.HashSet[Long]()\n\
    \        val primesSet29 = mutable.HashSet[Long]()\n        val primesSet30 =\
    \ mutable.HashSet[Long]()\n        val primesSet31 = mutable.HashSet[Long]()\n\
    \        val primesSet32 = mutable.HashSet[Long]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1659804681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 259 == 0).filter(_\
    \ % 261 == 0).filter(_ % 267 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 279 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 319 == 0).filter(_ % 323 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 343 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 37\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp57rq392k.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp57rq392k.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 267 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqc3dufj7.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqc3dufj7.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_\
    \ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 267 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_\
    \ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 38\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp26zhvdby.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp26zhvdby.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8y1kjb81.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m213\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val largestPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        largestPrime + sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ujwhwc.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m   |\e[0m                             \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     Not\
    \ found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n  \
    \      val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\
    \ + maxPrime.toString.toInt\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt_k_5c5p.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0)\n        val primesSet = primes.toSet\n        val primesSetIterator\
    \ = primesSet.iterator\n        val primesSetIteratorNext = primesSetIterator.next\n\
    \        val primesSetIteratorNextValue = primesSetIteratorNext.toLong\n     \
    \   val primesSetIteratorNextNext = primesSetIteratorNext.next\n        val primesSetIteratorNextNextValue\
    \ = primesSetIteratorNextNext.toLong\n        val primesSetIteratorNextNextNext\
    \ = primesSetIteratorNextNext.next\n        val primesSetIteratorNextNextNextValue\
    \ = primesSetIteratorNextNextNext.toLong\n        val primesSetIteratorNextNextNextNext\
    \ = primesSetIteratorNextNextNext.next\n        val primesSetIteratorNextNextNextNextValue\
    \ = primesSetIteratorNextNextNextNext.toLong\n        val primesSetIteratorNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextValue\
    \ = primesSetIteratorNextNextNextNextNext.toLong\n        val primesSetIteratorNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextNextValue\
    \ = primesSetIteratorNextNextNextNextNextNext.toLong\n        val primesSetIteratorNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextNextNextValue\
    \ = primesSetIteratorNextNextNextNextNextNextNext.toLong\n        val primesSetIteratorNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNext.next\n        val primesSetIteratorNextNextNextNextNextNextNextNextValue\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNext.toLong\n        val\
    \ primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextValue =\
    \ primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.toLong\n     \
    \   val primesSetIteratorNextNextNextNextNextNextNextNext\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbmdvea_d.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbmdvea_d.scala:25:62\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSetIteratorNextNext\e[0m = primesSetIteratorNext.next\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value next is not a\
    \ member of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbmdvea_d.scala:37:64\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorNextNextNextNextNextNextNextNext\e[0m = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmdvea_d.scala:38:69\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSetIteratorNextNextNextNextNextNextNextNextValue\e[0m = primesSetIteratorNextNextNextNextNextNextNextNextNext.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Not found: primesSetIteratorNextNextNextNextNextNextNextNextNext\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbmdvea_d.scala:39:72\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659804693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n   \
    \     val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n  \
    \      val result = sumOfDigits + maxPrime.toString.toInt\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpavig2axk.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpavig2axk.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 283 == 0).filter(_\
    \ % 289 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 343 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 409 == 0).filter(_ % 419 == 0).filter(_ % 421 == 0).filter(_ % 431 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmiy0cy9k.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmiy0cy9k.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 363 == 0).filter(_ % 369 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_\
    \ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 391 == 0).filter(_\
    \ % 397\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6hejqyw.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpd6hejqyw.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.HashSet[Long]()\n\
    \        val primesSet = mutable.HashSet[Long]()\n        val primesSum = mutable.HashMap[Long,\
    \ Long]()\n        val primesSumSet = mutable.HashMap[Long, Long]()\n        val\
    \ primesSumSet2 = mutable.HashMap[Long, Long]()\n        val primesSumSet3 = mutable.HashMap[Long,\
    \ Long]()\n        val primesSumSet4 = mutable.HashMap[Long, Long]()\n       \
    \ val primesSumSet5 = mutable.HashMap[Long, Long]()\n        val primesSumSet6\
    \ = mutable.HashMap[Long, Long]()\n        val primesSumSet7 = mutable.HashMap[Long,\
    \ Long]()\n        val primesSumSet8 = mutable.HashMap[Long, Long]()\n       \
    \ val primesSumSet9 = mutable.HashMap[Long, Long]()\n        val primesSumSet10\
    \ = mutable.HashMap[Long, Long]()\n        val primesSumSet11 = mutable.HashMap[Long,\
    \ Long]()\n        val primesSumSet12 = mutable.HashMap[Long, Long]()\n      \
    \  val primesSumSet13 = mutable.HashMap[Long, Long]()\n        val primesSumSet14\
    \ = mutable.HashMap[Long, Long]()\n        val primesSumSet15 = mutable.HashMap[Long,\
    \ Long]()\n        val primesSumSet16 = mutable.HashMap[Long, Long]()\n      \
    \  val primesSumSet17 = mutable.HashMap[Long, Long]()\n        val primesSumSet18\
    \ = mutable.HashMap[Long, Long]()\n        val primesSumSet19 = mutable.HashMap[Long,\
    \ Long]()\n        val primesSumSet20 = mutable.HashMap[Long, Long]()\n      \
    \  val primesSumSet21 = mutable.HashMap[Long, Long]()\n        val primesSumSet22\
    \ = mutable.HashMap[Long, Long]()\n        val primesSumSet23 = mutable.HashMap[Long,\
    \ Long]()\n        val primesSumSet24 = mutable.HashMap[Long, Long]()\n      \
    \  val primesSumSet25 = mutable.HashMap[Long, Long]()\n        val primesSumSet26\
    \ = mutable.HashMap[Long, Long]()\n        val primesSumSet27 = mutable.HashMap[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpse6dc2fx.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpse6dc2fx.scala:20:21 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.HashSet[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpse6dc2fx.scala:21:24 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpse6dc2fx.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSum\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpse6dc2fx.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSumSet\e[0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpse6dc2fx.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSumSet2\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659804693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 283 == 0).filter(_\
    \ % 289 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_\
    \ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_ % 419 == 0).filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dd6m1ra.scala:21:5\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpaiukknbx.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaiukknbx.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^"
  stdout: ''
  timestamp: 1659804658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 259 == 0).filter(_ % 263 == 0).filter(_\
    \ % 267 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprebymfg5.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprebymfg5.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr1sj39sj.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr1sj39sj.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val\
    \ largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9zrlo119.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsoyaetne.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsoyaetne.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n  \
    \      val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\
    \ + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoat5yfa7.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_ % 209 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 231 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 319 == 0).filter(_\
    \ % 323 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 37\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8yfbhlb0.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8yfbhlb0.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr1sj39sj.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr1sj39sj.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val primesSet = primes.toSet\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(x =>\
    \ primesSet.contains(x.toInt)).map(x => x.toInt).sum\n        sumOfDigits\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbswmxm7d.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_\
    \ % 353 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_\
    \ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_\
    \ % 38\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb3aj6l9l.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpb3aj6l9l.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n  \
    \      val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\
    \ + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoat5yfa7.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr1sj39sj.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr1sj39sj.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps008054o.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmps008054o.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsoyaetne.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsoyaetne.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val\
    \ primesSet = primes.toSet\n        val primesSetSize = primesSet.size\n     \
    \   val largestPrime = primes.max\n        val largestPrimeIndex = primes.indexOf(largestPrime)\n\
    \        val largestPrimeDigits = primes.filter(_ % largestPrime == 0).sum\n \
    \       val largestPrimeDigitsSet = largestPrimeDigits.toSet\n        val largestPrimeDigitsSetSize\
    \ = largestPrimeDigitsSet.size\n        val largestPrimeSum = largestPrimeDigits.sum\n\
    \        val largestPrimeSumDigits = largestPrimeSum.toSet\n        val largestPrimeSumDigitsSize\
    \ = largestPrimeSumDigitsSet.size\n        val largestPrimeSumDigitSum = largestPrimeSumDigits.sum\n\
    \        val largestPrimeSumDigitsSum = largestPrimeSumDigitsSum.toSet\n     \
    \   val largestPrimeSumDigitsSumSize = largestPrimeSumDigitsSum.size\n       \
    \ val largestPrimeSumDigitsSumSize = largestPrimeSumDigitsSum.size\n        val\
    \ largestPrimeSumDigitsSumSize = largestPrimeSumDigitsSum.size\n        val largestPrimeSumDigitsSumSize\
    \ = largestPrimeSumDigitsSum.size\n        val largestPrimeSumDigitsSumSize =\
    \ largestPrimeSumDigitsSum.size\n        val largestPrimeSumDigitsSumSize = largestPrimeSumDigitsSum.size\n\
    \        val largestPrimeSumDigitsSumSize = largestPrimeSumDigitsSum.size\n  \
    \      val largestPrimeSumDigitsSumSize = largestPrimeSumDigitsSum.size\n    \
    \    val largestPrimeSumDigitsSumSize = largestPrimeSumDigitsSum.size\n      \
    \  val largestPrimeSumDigitsSumSize = largestPrimeSumDigitsSum.size\n        val\
    \ largestPrimeSumDigitsSumSize = largestPrimeSumDigitsSum.size\n        val largestPrimeSumDigitsSumSize\
    \ = largestPrimeSumDigitsSum.size\n        val largestPrimeSumDigitsSumSize =\
    \ largestPrimeSumDigitsSum.size\n        val largestPrimeSumDig\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2hxwddni.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2hxwddni.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlargestPrimeSumDigitsSumSize\e[0m = largestPrimeSumDigitsSum.size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlargestPrimeSumDigitsSumSize is already defined as \e[33mvalue\e\
    [0m \e[35mlargestPrimeSumDigitsSumSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2hxwddni.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mlargestPrimeSumDigitsSumSize\e\
    [0m = largestPrimeSumDigitsSum.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlargestPrimeSumDigitsSumSize is already defined as \e[33mvalue\e\
    [0m \e[35mlargestPrimeSumDigitsSumSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2hxwddni.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mlargestPrimeSumDigitsSumSize\e\
    [0m = largestPrimeSumDigitsSum.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlargestPrimeSumDigitsSumSize is already defined as \e[33mvalue\e\
    [0m \e[35mlargestPrimeSumDigitsSumSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2hxwddni.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mlargestPrimeSumDigitsSumSize\e\
    [0m = largestPrimeSumDigitsSum.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659804698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_\
    \ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_\
    \ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_\
    \ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp47qijoex.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp47qijoex.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpezksf1hq.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpezksf1hq.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt)\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc3a08aky.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n  \
    \      val sumOfDigits = primes.map(x => x.toInt).sum\n        sumOfDigits\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgiyrdh_o.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val primesSet = primes.toSet\n\
    \        val primesSum = primes.map(x => x.toInt).sum\n        val primesSumDigits\
    \ = primesSum.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigitsDigits\
    \ = primesSumDigits.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigitsDigitsDigits\
    \ = primesSumDigitsDigits.toString.reverse.map(x => x.toInt).sum\n        val\
    \ primesSumDigitsDigitsDigitsDigits = primesSumDigitsDigitsDigits.toString.reverse.map(x\
    \ => x.toInt).sum\n        val primesSumDigitsDigitsDigitsDigitsDigits = primesSumDigitsDigitsDigitsDigits.toString.reverse.map(x\
    \ => x.toInt).sum\n        val primesSumDigitsDigitsDigitsDigitsDigitsDigits =\
    \ primesSumDigitsDigitsDigitsDigits.toString.reverse.map(x => x.toInt).sum\n \
    \       val primesSumDigitsDigitsDigitsDigitsDigitsDigitsDigits = primesSumDigitsDigitsDigitsDigitsDigits.toString.reverse.map(x\
    \ => x.toInt).sum\n        val primesSumDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits\
    \ = primesSumDigitsDigitsDigitsDigitsDigits.toString.reverse.map(x => x.toInt).sum\n\
    \        val primesSumDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits = primesSumDigitsDigitsDigitsDigitsDigits.toString.reverse.map(x\
    \ => x.toInt).sum\n        val primesSumDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits\
    \ = primesSumDigitsDigitsDigitsDigitsDigits.toString.reverse.map(x => x.toInt).sum\n\
    \        val primesSumDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits =\
    \ primesSumDigitsDigitsDigitsDigitsDigits.toString.reverse.map(x => x.toInt).sum\n\
    \        val primesSumDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits =\
    \ primesSumDigitsDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9eobl_fk.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mprimesSumDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits\e\
    [0m = primesSumDigitsDigitsDigitsDigitsDigits.toString.reverse.map(\e[36mx\e[0m\
    \ => x.toInt).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSumDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSumDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9eobl_fk.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mprimesSumDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits\e\
    [0m = primesSumDigitsDigitsDigitsDigitsDigits.toString.reverse.map(\e[36mx\e[0m\
    \ => x.toInt).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSumDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSumDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9eobl_fk.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mprimesSumDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits\e\
    [0m = primesSumDigitsDigits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSumDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSumDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigitsDigits\e\
    ["
  stdout: ''
  timestamp: 1659804698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val\
    \ primesSet = primes.toSet\n        val primesSetSize = primesSet.size\n     \
    \   val primesSetIterator = primesSet.iterator\n        val primesSetIteratorSize\
    \ = primesSetIterator.size\n        val primesSetIteratorIterator = primesSetIterator.iterator\n\
    \        val primesSetIteratorIteratorSize = primesSetIteratorIterator.size\n\
    \        val primesSetIteratorIteratorIterator = primesSetIteratorIterator.iterator\n\
    \        val primesSetIteratorIteratorIteratorSize = primesSetIteratorIteratorIterator.size\n\
    \        val primesSetIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n\
    \        val primesSetIteratorIteratorIteratorIteratorSize = primesSetIteratorIteratorIteratorIterator.size\n\
    \        val primesSetIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIteratorIterator.iterator\n\
    \        val primesSetIteratorIteratorIteratorIteratorIteratorSize = primesSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val primesSetIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorSize = primesSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n     \
    \   val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4y8vxjde.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4y8vxjde.scala:36:84\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e[0m\
    \ = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4y8vxjde.scala:37:96\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4y8vxjde.scala:38:92\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: primesSetIteratorIteratorIteratorIteratorIteratorIteratorItera"
  stdout: ''
  timestamp: 1659804699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbpkmbzy2.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbpkmbzy2.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_\
    \ % 353 == 0).filter(_ % 357 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_\
    \ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_xjzin3i.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_xjzin3i.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz1b31soq.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpz1b31soq.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 409 == 0).filter(_ % 419 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpygsuno5g.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m213\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ju2bzrs.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7ju2bzrs.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptahiji0l.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val primesSet = primes.toSet\n\
    \        val primesSum = primes.map(x => x.toInt).sum\n        val primesSumDigit\
    \ = primesSum.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit2\
    \ = primesSumDigit.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit3\
    \ = primesSumDigit2.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit4\
    \ = primesSumDigit3.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit5\
    \ = primesSumDigit4.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit6\
    \ = primesSumDigit5.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit7\
    \ = primesSumDigit6.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit8\
    \ = primesSumDigit7.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit9\
    \ = primesSumDigit8.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit10\
    \ = primesSumDigit9.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit11\
    \ = primesSumDigit10.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit12\
    \ = primesSumDigit11.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit13\
    \ = primesSumDigit12.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit14\
    \ = primesSumDigit13.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit15\
    \ = primesSumDigit14.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit16\
    \ = primesSumDigit15.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit17\
    \ = primesSumDigit16.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit18\
    \ = primesSumDigit17.toString.reverse.map(x => x.toInt).sum\n        val primesSumDigit19\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuarcc7k1.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuarcc7k1.scala:20:37\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = lst.filter(\e[36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     Not found: isPrime\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuarcc7k1.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n   \
    \     val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n  \
    \      val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n \
    \       val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n\
    \        val sumOf\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9in067dq.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9in067dq.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumOfDigits\e[0m = lst.filter(\e[36mx\e[0m => isPrime(x)).map(\e[36mx\e\
    [0m => x.toInt).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumOfDigits is already defined as \e[33mvalue\e[0m \e[35msumOfDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9in067dq.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e[36mx\e\
    [0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0msumOfDigits is already defined as \e[33mvalue\e[0m \e[35msumOfDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9in067dq.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e[36mx\e\
    [0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0msumOfDigits is already defined as \e[33mvalue\e[0m \e[35msumOfDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9in067dq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e[36mx\e\
    [0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659804684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp59gehw41.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp59gehw41.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2944dce_.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2944dce_.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpaiukknbx.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaiukknbx.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^"
  stdout: ''
  timestamp: 1659804658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_\
    \ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_ % 419 == 0).filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw6xvrmva.scala:21:5\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz1b31soq.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpz1b31soq.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val primeSum = primes.foldLeft(0l)\
    \ { (sum, prime) => sum + prime }\n        primeSum.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8b8oiydz.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpak9lhls9.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 409 == 0).filter(_ % 419 == 0).filter(_ % 421 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptdt4x_ss.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptdt4x_ss.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqbawoqro.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqbawoqro.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 259 == 0).filter(_\
    \ % 261 == 0).filter(_ % 263 == 0).filter(_ % 267 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 273 == 0).filter(_ % 277 == 0).filter(_ % 279 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 339 == 0).filter(_ % 343 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 351 == 0).filter(_ % 353 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoiugt1v0.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpoiugt1v0.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0)\n        val primesCount = primes.size\n        val maxPrime = primes.max\n\
    \        val maxPrimeIndex = primes.indexOf(maxPrime)\n        val maxPrimeDigit\
    \ = maxPrime % 10\n        val maxPrimeDigitIndex = maxPrimeIndex / 10\n     \
    \   val maxPrimeDigitSum = maxPrimeDigit + maxPrimeDigitIndex\n        val maxPrimeDigitSumIndex\
    \ = maxPrimeDigitSum / 10\n        val maxPrimeDigitSumIndexIndex = maxPrimeDigitSumIndex\
    \ / 10\n        val maxPrimeDigitSumIndexIndexIndex = maxPrimeDigitSumIndexIndex\
    \ / 10\n        val maxPrimeDigitSumIndexIndexIndexIndex = maxPrimeDigitSumIndexIndexIndex\
    \ / 10\n        val maxPrimeDigitSumIndexIndexIndexIndexIndex = maxPrimeDigitSumIndexIndexIndexIndex\
    \ / 10\n        val maxPrimeDigitSumIndexIndexIndexIndexIndexIndex = maxPrimeDigitSumIndexIndexIndexIndexIndex\
    \ / 10\n        val maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndex = maxPrimeDigitSumIndexIndexIndexIndexIndexIndex\
    \ / 10\n        val maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndex =\
    \ maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndex / 10\n        val maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndex / 10\n        val maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndex / 10\n     \
    \   val maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex / 10\n\
    \        val maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ / 10\n        val maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ / 10\n        val maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = maxPrimeDigitSumIndexIndexIndexIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8lwsir6_.scala:38:91 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mmaxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\e\
    [0m = maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8lwsir6_.scala:39:101 -----------------------\e[0m\e[0m\n\e[31m39 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\e\
    [0m = maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: maxPrimeDigitSumIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8lwsir6_.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxo5xfm2j.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val\
    \ largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9zrlo119.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_\
    \ % 207 == 0).filter(_ % 209 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_\
    \ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 231 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_\
    \ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4qultp9e.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4qultp9e.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt)\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime.toString.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp085bykzt.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0xap64vv.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m   |\e[0m                             \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     Not\
    \ found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0)\n        val primesCount = primes.size\n        val maxPrime = primes.max\n\
    \        val maxPrimeDigit = maxPrime % 10\n        val maxPrimeDigitCount = maxPrimeDigit.toInt\n\
    \        val maxPrimeSum = maxPrime / 10\n        val maxPrimeSumDigit = maxPrimeSum.toInt\n\
    \        val maxPrimeSumDigitCount = maxPrimeSumDigit.toInt\n        val maxPrimeSumDigitCount\
    \ = maxPrimeSumDigitCount + 1\n        val maxPrimeSumDigitCount = maxPrimeSumDigitCount\
    \ + 1\n        val maxPrimeSumDigitCount = maxPrimeSumDigitCount + 1\n       \
    \ val maxPrimeSumDigitCount = maxPrimeSumDigitCount + 1\n        val maxPrimeSumDigitCount\
    \ = maxPrimeSumDigitCount + 1\n        val maxPrimeSumDigitCount = maxPrimeSumDigitCount\
    \ + 1\n        val maxPrimeSumDigitCount = maxPrimeSumDigitCount + 1\n       \
    \ val maxPrimeSumDigitCount = maxPrimeSumDigitCount + 1\n        val maxPrimeSumDigitCount\
    \ = maxPrimeSumDigitCount + 1\n        val maxPrimeSumDigitCount = maxPrimeSumDigitCount\
    \ + 1\n        val maxPrimeSumDigitCount = maxPrimeSumDigitCount + 1\n       \
    \ val maxPrimeSumDigitCount = maxPrimeSumDigitCount + 1\n        val maxPrimeSumDigitCount\
    \ = maxPrimeSumDigitCount + 1\n        val maxPrimeSumDigitCount = maxPrimeSumDigitCount\
    \ + 1\n        val maxPrimeSumDigitCount = maxPrimeSumDigitCount + 1\n       \
    \ val maxPrimeSumDigitCount = maxPrimeSumDigitCount + 1\n        val maxPrimeSumDigitCount\
    \ = maxPrimeSumDigitCount + 1\n        val maxPrimeSumDigitCount = maxPrimeSumDigitCount\
    \ + 1\n        val maxPrimeSumDigitCount = maxPrimeSumDigitCount + 1\n       \
    \ val maxPrimeSumDigitCount = maxPrimeSumDigitCount + 1\n        val maxPrimeSumDigitCount\
    \ = maxPrimeSumDigitCount + 1\n        val maxPrimeSumDigitCount = maxPrimeSumDigitCount\
    \ + 1\n        val maxPrimeSumDigitCount = maxPrimeSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjuautpa.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxPrimeSumDigitCount\e\
    [0m = maxPrimeSumDigitCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxPrimeSumDigitCount is already defined as \e[33mvalue\e\
    [0m \e[35mmaxPrimeSumDigitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjuautpa.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxPrimeSumDigitCount\e\
    [0m = maxPrimeSumDigitCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxPrimeSumDigitCount is already defined as \e[33mvalue\e\
    [0m \e[35mmaxPrimeSumDigitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjuautpa.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxPrimeSumDigitCount\e\
    [0m = maxPrimeSumDigitCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxPrimeSumDigitCount is already defined as \e[33mvalue\e\
    [0m \e[35mmaxPrimeSumDigitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjuautpa.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxPrimeSumDigitCount\e\
    [0m = maxPrimeSumDigitCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxPrimeSumDigitCount is already defined as \e[33mvalue\e\
    [0m \e[35mmaxPrimeSumDigitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Nami"
  stdout: ''
  timestamp: 1659804708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0)\n        val primesCount = primes.size\n        val maxPrime = primes.max\n\
    \        val maxPrimeIndex = primes.indexOf(maxPrime)\n        val maxPrimeDigit\
    \ = maxPrime % 10\n        val maxPrimeDigitCount = maxPrimeDigit.length\n   \
    \     val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\
    \ + maxPrimeDigitCount\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkcsn_c8g.scala:25:47 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxPrimeDigitCount\e[0m\
    \ = maxPrimeDigit.length\n\e[31m\e[31m   |\e[0m                              \
    \   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \  value length is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659804707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 409 == 0).filter(_ % 419 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpygsuno5g.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m213\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptahiji0l.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_\
    \ % 347 == 0).filter(_ % 351 == 0).filter(_ % 353 == 0).filter(_ % 357 == 0).filter(_\
    \ % 363 == 0).filter(_ % 369 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_\
    \ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 391 == 0).filter(_\
    \ % 397\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp30lthb3c.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp30lthb3c.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_ % 259 == 0).filter(_\
    \ % 261 == 0).filter(_ % 263 == 0).filter(_ % 267 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 273 == 0).filter(_ % 277 == 0).filter(_ % 279 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 319 == 0).filter(_\
    \ % 323 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 343 == 0).filter(_\
    \ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplgo6v3jl.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmplgo6v3jl.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_\
    \ % 353 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_\
    \ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_\
    \ % 38\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb3aj6l9l.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpb3aj6l9l.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp25zqs3dz.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x - maxPrime).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptz7vmh8o.scala:26)\n\tat Problem.main(tmptz7vmh8o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 283 == 0).filter(_ % 289 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 323 == 0).filter(_ % 329 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 343 == 0).filter(_ % 349 == 0).filter(_ % 351 == 0).filter(_\
    \ % 357 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 371 == 0).filter(_\
    \ % 377 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_\
    \ % 399\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdlwypxpt.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpdlwypxpt.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0)\n        val primesSet = primes.toSet\n        val primesSetIterator\
    \ = primesSet.iterator\n        val primesSetIteratorNext = primesSetIterator.next\n\
    \        val primesSetIteratorNextNext = primesSetIteratorNext.next\n        val\
    \ primesSetIteratorNextNextNext = primesSetIteratorNextNext.next\n        val\
    \ primesSetIteratorNextNextNextNext = primesSetIteratorNextNextNext.next\n   \
    \     val primesSetIteratorNextNextNextNextNext = primesSetIteratorNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val primesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primesSetIteratorNextNext\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcz1iw1yd.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcz1iw1yd.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primesSetIteratorNextNext\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimesSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpcz1iw1yd.scala:24:62 ------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSetIteratorNextNext\e[0m = primesSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value next is not a\
    \ member of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcz1iw1yd.scala:33:72\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = primesSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                             "
  stdout: ''
  timestamp: 1659804709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz1b31soq.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpz1b31soq.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0)\n        val primesCount = primes.size\n        val maxPrime = primes.max\n\
    \        val maxPrimeIndex = primes.indexOf(maxPrime)\n        val sumOfDigits\
    \ = maxPrime.toString.toLong.digits.sum\n        sumOfDigits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp90ist1t8.scala:24:51 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = maxPrime.toString.toLong.digits.sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value digits is not a member of\
    \ Long\n1 error found\n"
  stdout: ''
  timestamp: 1659804709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpns_5k_yj.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val\
    \ primesCount = primes.size\n        val largestPrime = primes.max\n        val\
    \ sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ns93za0.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmlb2u0uv.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmlb2u0uv.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toSet\n        val maxPrime = primes.max\n   \
    \     val sumOfDigits = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n  \
    \      sumOfDigits + maxPrime\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm7ypz25.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqm7ypz25.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9oj1jbda.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9oj1jbda.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 253 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9oj1jbda.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9oj1jbda.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt)\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc3a08aky.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0xap64vv.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m   |\e[0m                             \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     Not\
    \ found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 161 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp62xzbrw1.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m161\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt)\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc3a08aky.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val\
    \ largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9zrlo119.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt)\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits + maxPrime.toString.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp085bykzt.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804657
