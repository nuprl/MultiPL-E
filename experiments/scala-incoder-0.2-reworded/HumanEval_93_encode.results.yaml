language: scala
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter))\
    \ + letter)\n        val messageWithVowelsAndLettersTwoAheadOfVowels = messageWithVowels.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1))\n        val messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels\
    \ = messageWithVowelsAndLettersTwoAheadOfVowels.map(letter => vowels.indexOf(letter)\
    \ + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter) + 1) +\
    \ alphabet(vowels.indexOf(letter) + 2))\n        val messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels\
    \ = messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1) + alphabet(vowels.indexOf(letter) + 2) + alphabet(vowels.indexOf(letter)\
    \ + 3))\n        val messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels\
    \ = messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1) + alphabet(vowels.indexOf(letter) + 2) + alphabet(vowels.indexOf(letter)\
    \ + 3) + alphabet(vowels.indexOf(letter) + 4))\n        val messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp33_vlpuw.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp33_vlpuw.scala:20:110\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels\e\
    [0m = messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels.map(\e\
    [36mletter\e[0m => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) +\
    \ alphabet(vowels.indexOf(letter) + \e[31m1\e[0m) + alphabet(vowels.indexOf(letter)\
    \ + \e[31m2\e[0m) + alphabet(vowels.indexOf(letter) + \e[31m3\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                              ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp33_vlpuw.scala:21:136 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels\e\
    [0m = messageWithVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowelsAndLettersTwoAheadOfVowels.map(\e\
    [36mletter\e[0m => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) +\
    \ alphabet(vowels.indexOf(letter) + \e[31m1\e[0m) + alphabet(vowels.indexOf(letter)\
    \ + \e[31m2\e[0m) + alphabet(vowels.indexOf(letter) + \e[31m3\e[0m) + alphabet(vowels.indexOf(letter)\
    \ + \e[31m4\e[0m))\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                            \
    \                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35m\n\e[31m   |\e[0m  messageW"
  stdout: ''
  timestamp: 1659793778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => letter match {\n    \
    \        case letter if letter != ' ' => alphabet(alphabet.indexOf(letter)+1)\n\
    \            case letter if letter != ' ' =>  alphabet(alphabet.indexOf(letter)-1)\n\
    \            case letter => letter\n        }).mkString(\"\")\n        val newMessageArray\
    \ = newMessage.split(\"\")\n        val newVowels = vowels.map(letter => letter\
    \ match {\n            case letter if letter != ' ' =>  alphabet(alphabet.indexOf(letter)+1)\n\
    \            case letter if letter != ' ' =>  alphabet(alphabet.indexOf(letter)-1)\n\
    \            case letter => letter\n        }).mkString(\"\")\n        newMessageArray.zip(newVowels).map(x\
    \ => x._1 match {\n            case letter if letter != ' ' =>  alphabet(alphabet.indexOf(x._2)+1)\n\
    \            case letter if letter != ' ' =>  alphabet(alphabet.indexOf(x._2)-1)\n\
    \            case letter => x._2\n        }).mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprdggw4nh.scala:19:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m letter \e[33mif\e[0m letter\
    \ != \e[31m' '\e[0m => alphabet(alphabet.indexOf(letter)+\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmprdggw4nh.scala:20:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m letter \e[33mif\e[0m letter\
    \ != \e[31m' '\e[0m =>  alphabet(alphabet.indexOf(letter)-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmprdggw4nh.scala:30:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mcase\e[0m letter \e[33mif\e[0m letter\
    \ != \e[31m' '\e[0m =>  alphabet(alphabet.indexOf(x._2)+\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmprdggw4nh.scala:31:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mcase\e[0m letter \e[33mif\e[0m letter\
    \ != \e[31m' '\e[0m =>  alphabet(alphabet.indexOf(x._2)-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types String and Char cannot be compared with == or !=\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.map(letter => vowels.indexOf(letter) + 2)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 3)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter.map(letter => vowels.indexOf(letter)\
    \ + 4)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 5)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 6)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 7)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 8)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4sp5xje9.scala:25:5\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage2 = newMessage.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        newMessage2.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter))\
    \ + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ishvlv0.scala:19:23\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        newMessage2.map(\e[36mletter\e\
    [0m => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Int]\n\e[31m   |\e[0m       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n\
    \        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n      \
    \  val messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n      \
    \  val messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore = messageWithVowelsAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n      \
    \  val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels.charAt(letter))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n      \
    \  val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n      \
    \  val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n      \
    \  val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLetters\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7e1m1no.scala:24:161 -----------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\e\
    [0m = messageWithVowelsAndTwoLettersAfterAndTwoLetters\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             Not found: messageWithVowelsAndTwoLettersAfterAndTwoLetters\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph7e1m1no.scala:25:5\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val newMessage = mutable.StringBuilder()\n       \
    \ val newMessageLength = messageLength\n        val newMessageLength = messageLength\n\
    \        val newMessageLength = messageLength\n        val newMessageLength =\
    \ messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val new\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe92kupfs.scala:78:12 ---------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe92kupfs.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewMessageLength\e[0m = messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageLength is already defined as \e[33mvalue\e[0m \e\
    [35mnewMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe92kupfs.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewMessageLength\e[0m =\
    \ messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageLength is already defined as \e[33mvalue\e[0m \e\
    [35mnewMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe92kupfs.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewMessageLength\e[0m =\
    \ messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageLength is already defined as \e[33mvalue\e[0m \e\
    [35mnewMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe92kupfs.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewMessageLength\e[0m =\
    \ messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageLength is already defined as \e[33mvalue\e[0m \e\
    [35mnewMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that ove"
  stdout: ''
  timestamp: 1659793778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val messageArrayLength = messageArray.length\n\
    \        val newMessageArray = Array.fill(messageArrayLength)(\"\")\n        val\
    \ newMessageArrayLength = newMessageArray.length\n        val newMessageArray2\
    \ = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray2Length =\
    \ newMessageArray2.length\n        val newMessageArray3 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray3Length = newMessageArray3.length\n        val\
    \ newMessageArray4 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray4Length\
    \ = newMessageArray4.length\n        val newMessageArray5 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray5Length = newMessageArray5.length\n        val\
    \ newMessageArray6 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray6Length\
    \ = newMessageArray6.length\n        val newMessageArray7 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray7Length = newMessageArray7.length\n        val\
    \ newMessageArray8 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray8Length\
    \ = newMessageArray8.length\n        val newMessageArray9 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray9Length = newMessageArray9.length\n        val\
    \ newMessageArray10 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray10Length\
    \ = newMessageArray10.length\n        val newMessageArray11 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray11Length = newMessageArray11.length\n        val\
    \ newMessageArray12 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray12Length\
    \ = newMessageArray12.length\n        val newMessageArray13 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray13Length = newMessageArray13.length\n        val\
    \ newMessageArray14 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray14Length\
    \ = newMessageArray14.length\n        val newMessageArray15 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray15Length = newMessageArray15.length\n        val\
    \ newMessageArray16 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray16Length\
    \ = newMessageArray16.length\n        val newMessageArray17 = Array.fill(messageArrayLength)(\"\
    \")\n        val newMessageArray17Length = newMessageArray17.length\n        val\
    \ newMessageArray18 = Array.fill(messageArrayLength)(\"\")\n        val newMessageArray18\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpctkjoxkt.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpctkjoxkt.scala:54:5 ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793779
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => \n            if (vowels.contains(letter))\
    \ letter else \n                alphabet.indexOf(alphabet.indexOf(letter) + 2).toChar)\n\
    \        newMessage.toString\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0tsspn2z.scala:23)\n\tat Problem.main(tmp0tsspn2z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageWithVowels = message.map(letter => vowels.contains(letter)\
    \ ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.map(letter => vowels.contains(letter) ? letter : letter.swapCase)\n\
    \        val messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersBefore.map(letter\
    \ => vowels.contains(letter) ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.contains(letter)\
    \ ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBefore.map(letter => vowels.contains(letter)\
    \ ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfter.map(letter\
    \ => vowels.contains(letter) ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore.map(letter\
    \ => vowels.contains(letter) ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter.map(letter\
    \ => vowels.contains(letter) ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore.map(letter\
    \ => vowels.contains(letter) ? letter : letter.swapCase)\n        val messageWithVowelsAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps63i8ppb.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps63i8ppb.scala:16:96\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmessageWithVowels\e[0m = message.map(\e[36mletter\e[0m => vowels.contains(letter)\
    \ ? letter : letter.swapCase)\n\e[31m\e[31m   |\e[0m                         \
    \                                                                ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   type swapCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps63i8ppb.scala:16:70\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e\
    [0m = message.map(\e[36mletter\e[0m => vowels.contains(letter) ? letter : letter.swapCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \             Found:    (letter : Char)\n\e[31m   |\e[0m                     \
    \                          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmps63i8ppb.scala:26:5 ---------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659793780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageArray = message.split(\"\")\n        val newMessage = messageArray.map(letter\
    \ => {\n            val vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex\
    \ != -1) {\n                val vowel = vowels(vowelIndex)\n                val\
    \ vowelIndex = vowels.indexOf(vowel)\n                val vowelIndex = vowelIndex\
    \ + 2\n                vowels(vowelIndex) == letter ? vowel : letter\n       \
    \     } else {\n                letter\n            }\n        }).mkString(\"\"\
    )\n        newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxgpufp70.scala:18:36 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(letter)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m   value indexOf is not a member of scala.collection.mutable.Set[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxgpufp70.scala:21:40 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowels.indexOf(vowel)\n\e[31m\e[31m   |\e[0m                             \
    \    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value indexOf is not a member of scala.collection.mutable.Set[String]\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxgpufp70.scala:21:48 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowels.indexOf(vowel)\n\e[31m\e[31m   |\e[0m                             \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \      Recursive \e[33mvalue\e[0m \e[35mvowel\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxgpufp70.scala:23:55 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                vowels(vowelIndex) == letter ? vowel\
    \ : \e[35mletter\e[0m\n\e[31m\e[31m   |\e[0m                                 \
    \                      ^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                        Not found: type letter\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpxgpufp70.scala:23:45 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                vowels(vowelIndex) == letter ? vowel\
    \ : \e[35mletter\e[0m\n\e[31m\e[31m   |\e[0m                                 \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                      value\
    \ ? is not a member of String\n5 errors found\n"
  stdout: ''
  timestamp: 1659793778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            letter match {\n                case 'a' => alphabet(0)\n \
    \               case 'b' => alphabet(1)\n                case 'c' => alphabet(2)\n\
    \                case 'd' => alphabet(3)\n                case 'e' => alphabet(4)\n\
    \                case 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n\
    \                case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n\
    \                case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n\
    \                case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage = messageArray.map(letter =>\
    \ \n            letter match {\n                case 'a' => vowels(0)\n      \
    \          case 'b' => vowels(1)\n                case 'c' => vowels(2)\n    \
    \            case 'd' => vowels(3)\n                case 'e' => vowels(4)\n  \
    \              case 'f' => vowels(5)\n                case 'g' => vowels(6)\n\
    \                case 'h' => vowels(7)\n                case 'i' => vowels(8)\n\
    \                case 'j' => vowels(9)\n                case 'k' => vowels(10)\n\
    \                case 'l' => vowels(11)\n                case 'm' => vowels(12)\n\
    \                case 'n' => vowels(13)\n                case 'o' => vowels(14)\n\
    \                case 'p' => vowels(15)\n                case 'q' => vowels(16)\n\
    \                case 'r' => vowels(17)\n                case 's' => vowels(18)\n\
    \                case 't' => vowels(19)\n                case 'u' => vowels(20)\n\
    \                case 'v' => vowels(21)\n                case 'w' => vowels(22)\n\
    \                case 'x' => vowels(23)\n                case 'y' => vowels(24)\n\
    \                case 'z' => vowels(25)\n                case letter => letter\n\
    \            }\n        )\n        val newMessageString = newMessageArray.toSeq.mkString(\"\
    \")\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpfs4fppqb.scala:81:11 ---------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpfs4fppqb.scala:20:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m'a'\e[0m => alphabet(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpfs4fppqb.scala:21:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m \e[31m'b'\e[0m => alphabet(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpfs4fppqb.scala:22:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m \e[31m'c'\e[0m => alphabet(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpfs4fppqb.scala:23:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m \e[31m'd'\e[0m => alphabet(\e\
    [31m3\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpfs4fppqb.scala:24:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e[0m \e[31m'e'\e[0m => alphabet(\e\
    [31m4\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpfs4fppqb.scala:25:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e[0m \e[31m'f'\e[0m => alphabet(\e\
    [31m5\e[0m)\n\e[31m\e[31m "
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => {\n            val index\
    \ = alphabet.indexOf(letter)\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            val nextLetter = alphabet(index+1)\n            val nextVowel = alphabet(vowelIndex+1)\n\
    \            val newLetter = if (index == vowelIndex) letter else nextLetter\n\
    \            val newVowel = if (vowelIndex == index) letter else nextVowel\n \
    \           val newLetterAndVowel = if (index == vowelIndex) letter else nextLetter\
    \ + nextVowel\n            val newVowelAndLetter = if (vowelIndex == index) letter\
    \ else nextVowel + nextLetter\n            newLetterAndVowel + newVowelAndLetter\n\
    \        }).mkString(\"\")\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe9zaw7k9.scala:27:30 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            newLetterAndVowel + newVowelAndLetter\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of Matchable, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpe9zaw7k9.scala:28:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        }).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No ClassTag available for B\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a type variable\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter))\n        val newMessage2 = newMessage.map(letter =>\
    \ alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage3\
    \ = newMessage2.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage4 = newMessage3.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter))\n        val newMessage5 = newMessage4.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage6\
    \ = newMessage5.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage7 = newMessage6.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter))\n        val newMessage8 = newMessage7.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage9\
    \ = newMessage8.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage10 = newMessage9.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter))\n        val newMessage11 = newMessage10.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage12\
    \ = newMessage11.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage13 = newMessage12.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter))\n        val newMessage14 = newMessage13.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage15\
    \ = newMessage14.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage16 = newMessage15.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter))\n        val newMessage17 = newMessage16.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage18\
    \ = newMessage17.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage19 = newMessage18.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter))\n        val newMessage20 = newMessage19.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage21\
    \ = newMessage20.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage22 = newMessage21.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter))\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp0pndybf3.scala:39:11 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0pndybf3.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageLength = message.length\n   \
    \     val encodedMessage = mutable.Buffer.empty[String]\n        var i = 0\n \
    \       while (i < messageLength) {\n            val currentChar = message.charAt(i)\n\
    \            val nextChar = message.charAt(i + 1)\n            val currentCharIndex\
    \ = alphabet.indexOf(currentChar)\n            val nextCharIndex = alphabet.indexOf(nextChar)\n\
    \            val currentCharVowelIndex = vowels.indexOf(currentChar)\n       \
    \     val nextCharVowelIndex = vowels.indexOf(nextChar)\n            val currentCharVowel\
    \ = vowels(currentCharIndex)\n            val nextCharVowel = vowels(nextCharIndex)\n\
    \            if (currentCharIndex == nextCharIndex) {\n                encodedMessage\
    \ += currentChar\n                i += 1\n            } else if (currentCharVowelIndex\
    \ == nextCharVowelIndex) {\n                encodedMessage += currentCharVowel\n\
    \                i += 1\n            } else if (currentCharVowelIndex < nextCharVowelIndex)\
    \ {\n                encodedMessage += alphabet(currentCharIndex + 2)\n      \
    \          i += 1\n            } else {\n                encodedMessage += alphabet(currentCharIndex\
    \ + 2)\n                i += 1\n            }\n        }\n        encodedMessage.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1kfuckjf.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mencodedMessage\e[0m = mutable.Buffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel.zip(vowel.tail).map { case (vowel1,\
    \ vowel2) => vowel1 -> vowel2 }\n            } else {\n                letter\
    \ -> letter\n            }\n        })\n        newMessageArray.toSeq.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3jy7ll7r.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                vowel.zip(vowel.tail).map { \e[33mcase\e\
    [0m (vowel1, vowel2) => vowel1 -> vowel2 }\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value zip is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3jy7ll7r.scala:22:32\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                vowel.zip(vowel.tail).map\
    \ { \e[33mcase\e[0m (vowel1, vowel2) => vowel1 -> vowel2 }\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \          value tail is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659793778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.foldLeft(\"\
    \")( (acc, elem) => {\n            val index = vowels.indexOf(elem)\n        \
    \    if (index != -1) {\n                val vowelIndex = index + 1\n        \
    \        val vowel = vowels(vowelIndex)\n                acc + (if (vowel == elem)\
    \ vowel else \"a\")\n            } else {\n                acc + elem\n      \
    \      }\n        })\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpor1ksvc8.scala:22:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                acc + (\e[33mif\e[0m (vowel == elem)\
    \ vowel \e[33melse\e[0m \e[31m\"a\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char\
    \ and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659793778
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) vowels(index - 1) else letter\n        }).mkString(\"\")\n        encodedMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6pni_w0d.scala:24)\n\tat Problem.main(tmp6pni_w0d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map(letter => vowels.indexOf(letter)\
    \ + 1).mkString(\"\")\n        val newMessageArray = newMessage.split(\"\")\n\
    \        val newMessageArrayLength = newMessageArray.length\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = new\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp192seyz6.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp192seyz6.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewMessageArrayLength\e[0m = newMessageArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp192seyz6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArrayLength\e\
    [0m = newMessageArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp192seyz6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArrayLength\e\
    [0m = newMessageArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp192seyz6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArrayLength\e\
    [0m = newMessageArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageArrayLength is alread"
  stdout: ''
  timestamp: 1659793778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.replaceAll(vowels, vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.replaceAll(\"[aeiou]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.replaceAll(\"[aeiou]\", \"$0$2\")\n \
    \       val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter.replaceAll(\"[aeiou]\"\
    , \"$0$2\")\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfter.replaceAll(\"\
    [aeiou]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter.replaceAll(\"\
    [aeiou]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter.replaceAll(\"\
    [aeiou]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter.replaceAll(\"\
    [aeiou]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\
    \ = messageWithVowelsAndTwo\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpajl5coaf.scala:16:72\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e\
    [0m = message.replaceAll(vowels, vowels.charAt(\e[31m2\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                           ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpajl5coaf.scala:24:177\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mmessageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfterAndTwoLettersAfter\e\
    [0m = messageWithVowelsAndTwo\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \                                                                            ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: messageWithVowelsAndTwo\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpajl5coaf.scala:25:5\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793778
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val replacement = vowels(index) + vowel\n\
    \                replacement\n            } else {\n                letter\n \
    \           }\n        }).mkString\n        encodedMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdyxthobk.scala:31)\n\tat Problem.main(tmpdyxthobk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793779
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(x\
    \ => alphabet(alphabet.indexOf(x) + 1))\n        val newVowels = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 -> x._2).mkString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmn937_gt.scala:22)\n\tat Problem.main(tmpmn937_gt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val newMessage\
    \ = message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptwyttr71.scala:18:64\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newMessage.map(\e[36mletter\e\
    [0m => vowels.indexOf(letter) + \e[31m1\e[0m).map(\e[36mletter\e[0m => alphabet(alphabet.indexOf(letter)\
    \ + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[String]\n\e[31m   |\e[0m    \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val vowelIndexes = vowels.toList.map(letter\
    \ => letters.indexOf(letter))\n        val vowelIndexes2 = vowels.toList.map(letter\
    \ => letters.indexOf(letter) + 2)\n        val messageList = message.split(\"\"\
    )\n        val newMessage = messageList.map(letter => {\n            if (vowelIndexes.contains(letter))\
    \ {\n                letter\n            } else if (vowelIndexes2.contains(letter))\
    \ {\n                letter\n            } else {\n                letter.toUpperCase\n\
    \            }\n        }).mkString(\"\")\n        newMessage\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpogyvbjo1.scala:32)\n\tat Problem.main(tmpogyvbjo1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793780
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map {\n  \
    \          char =>\n                if (vowels.contains(char))\n             \
    \       char\n                else\n                    vowels.indexOf(char) +\
    \ 2\n        }\n        val newMessage = messageArray.toList.mkString(\"\")\n\
    \        newMessageArray.toList.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr61m6w_v.scala:28)\n\tat Problem.main(tmpr61m6w_v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\" \").toList\n        val newMessage = messageList.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(letter\
    \ - 1) + vowels(letter)\n                case 2 => vowels(letter - 1) + vowels(letter\
    \ - 1)\n            }\n        ).mkString(\"\")\n        val newMessageList =\
    \ newMessage.split(\" \").toList\n        val newMessageList2 = newMessageList.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(letter\
    \ - 1) + vowels(letter)\n                case 2 => vowels(letter - 1) + vowels(letter\
    \ - 1)\n            }\n        ).mkString(\"\")\n        val newMessageList3 =\
    \ newMessageList2.split(\" \").toList\n        val newMessageList4 = newMessageList3.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(letter\
    \ - 1) + vowels(letter)\n                case 2 => vowels(letter - 1) + vowels(letter\
    \ - 1)\n            }\n        ).mkString(\"\")\n        val newMessageList5 =\
    \ newMessageList4.split(\" \").toList\n        val newMessageList6 = newMessageList5.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(letter\
    \ - 1) + vowels(letter)\n                case 2 => vowels(letter - 1) + vowels(letter\
    \ - 1)\n            }\n        ).mkString(\"\")\n        val newMessageList7 =\
    \ newMessageList6.split(\" \").toList\n        val newMessageList8 = newMessageList7.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(letter\
    \ - 1) + vowels(letter)\n                case 2 => vowels(letter - 1) + vowels(letter\
    \ - 1)\n            }\n        ).mkString(\"\")\n        val newMessageList9 =\
    \ newMessageList8.split(\" \").toList\n        val newMessageList10 = newMessageList9.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(letter\
    \ - 1) + vowels(letter)\n                case 2 => vowels(letter - 1) + vowels(letter\
    \ - 1)\n            }\n        ).mkString(\"\")\n        val newMessageList11\
    \ = newMessageList10.split(\" \").toList\n        val newMessageList12 = newMessageList11.map(letter\
    \ => \n            vowels.indexOf(letter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn5squ_oo.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn5squ_oo.scala:21:40\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e\
    [0m \e[31m1\e[0m => vowels(letter - \e[31m1\e[0m) + vowels(letter)\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ - is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpn5squ_oo.scala:21:54 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m \e[31m1\e[0m => vowels(letter\
    \ - \e[31m1\e[0m) + vowels(letter)\n\e[31m\e[31m   |\e[0m                    \
    \                                  ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                               Found:    (letter : String)\n\e[31m   |\e[0m \
    \                                            Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpn5squ_oo.scala:22:40 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m \e[31m2\e[0m => vowels(letter\
    \ - \e[31m1\e[0m) + vowels(letter - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                            ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member\
    \ of String, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m"
  stdout: ''
  timestamp: 1659793793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(vowels.indexOf(letter)\
    \ + 1)\n            })\n        val newMessage = newMessageArray.toList\n    \
    \    val newMessageString = newMessage.toString\n        newMessageString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 6 (of class java.lang.Integer)\n\tat Problem$.$anonfun$1(tmp0jrj4j4v.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.encode(tmp0jrj4j4v.scala:22)\n\
    \tat Problem$.main(tmp0jrj4j4v.scala:28)\n\tat Problem.main(tmp0jrj4j4v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        val newMessage = messageArray.map { c =>\n  \
    \          if (vowels(c) == vowels(messageArray(c+2)) && vowels(c) != vowels(messageArray(c+1)))\
    \ {\n                vowels(c) + vowels(messageArray(c+2))\n            } else\
    \ {\n                c\n            }\n        }\n        newMessage.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 84 out of bounds for length\
    \ 10\n\tat Problem$.$anonfun$1(tmpp_w810b3.scala:18)\n\tat Problem$.$anonfun$adapted$1(tmpp_w810b3.scala:22)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:934)\n\tat Problem$.encode(tmpp_w810b3.scala:23)\n\
    \tat Problem$.main(tmpp_w810b3.scala:27)\n\tat Problem.main(tmpp_w810b3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        val newMessage = new Array[Char](messageArray.length)\n\
    \        var i = 0\n        while (i < messageArray.length) {\n            val\
    \ currentChar = messageArray(i)\n            val nextChar = messageArray(i + 1)\n\
    \            if (vowels(currentChar) == vowels(nextChar)) {\n                newMessage(i)\
    \ = vowels(currentChar)\n                newMessage(i + 1) = vowels(nextChar)\n\
    \                i += 2\n            } else {\n                newMessage(i) =\
    \ vowels(currentChar)\n                newMessage(i + 1) = vowels(nextChar)\n\
    \                i += 1\n            }\n        }\n        new String(newMessage)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 84 out of bounds for length\
    \ 10\n\tat Problem$.encode(tmpp1_4urbz.scala:22)\n\tat Problem$.main(tmpp1_4urbz.scala:35)\n\
    \tat Problem.main(tmpp1_4urbz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val replacement = vowels(index)\n    \
    \            letter match {\n                    case \"a\" => replacement\n \
    \                   case \"e\" => replacement\n                    case \"i\"\
    \ => replacement\n                    case \"o\" => replacement\n            \
    \        case \"u\" => replacement\n                    case \"A\" => replacement\n\
    \                    case \"E\" => replacement\n                    case \"I\"\
    \ => replacement\n                    case \"O\" => replacement\n            \
    \        case \"U\" => replacement\n                    case _ => letter\n   \
    \             }\n            } else {\n                letter\n            }\n\
    \        })\n        val newMessage = String.join(\"\", newMessageArray)\n   \
    \     newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpwi_lq9ez.scala:40:32 -----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = String.join(\e\
    [31m\"\"\e[0m, newMessageArray)\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35mjoin\e[0m in \e[33mobject\e[0m \e[35mString\e[0m with types\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: Iterable[? <: CharSequence]): String\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence*): String\n\e[31m   |\e\
    [0mmatch arguments ((\e[32m\"\"\e[0m : String), (newMessageArray : Array[Matchable]))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageWithVowels = message.map(letter => vowels.contains(letter)\
    \ ? letter : vowels.find(letter => letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && letter\
    \ != letter && letter != letter && letter != letter && letter != letter && \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5zdl8j3c.scala:16:100 --------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m =\
    \ message.map(\e[36mletter\e[0m => vowels.contains(letter) ? letter : vowels.find(letter\
    \ => letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter && letter != letter && letter != letter\
    \ && letter != letter && letter != letter &"
  stdout: ''
  timestamp: 1659793789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val newMessageList = messageList.map(letter =>\
    \ \n            if (vowels.contains(letter)) letter else \n                vowels.indexOf(letter)\
    \ + vowels.indexOf(vowels.charAt(vowels.indexOf(letter) + 1))\n        )\n   \
    \     val newMessage = newMessageList.toList\n        val newMessageString = newMessage.toString.toUpperCase\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringBuilder\
    \ = new StringBuilder(newMessageStringLength)\n        var i = 0\n        while\
    \ (i < newMessageStringLength) {\n            if (newMessageString(i) == newMessageString(i\
    \ + 1))\n                newMessageStringBuilder.append(newMessageString(i))\n\
    \            else\n                newMessageStringBuilder.append(newMessageString(i))\n\
    \            i += 1\n        }\n        return newMessageStringBuilder.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 19\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.encode(tmpncaj3g2f.scala:27)\n\
    \tat Problem$.main(tmpncaj3g2f.scala:36)\n\tat Problem.main(tmpncaj3g2f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val newMessage =\
    \ message.map(letter => vowels.indexOf(letter) match {\n            case -1 =>\
    \ letter\n            case i => vowels(i + 2)\n        })\n        val newMessageString\
    \ = newMessage.toList\n        newMessageString.reverse.mkString(\"\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3bprvgei.scala:24)\n\tat Problem.main(tmp3bprvgei.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val newMessage = messageArray.map(letter => {\n            val index\
    \ = alphabet.indexOf(letter)\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            val nextVowelIndex = vowelIndex + 2\n            val nextLetter =\
    \ alphabet(nextVowelIndex)\n            val nextVowel = vowels(nextVowelIndex)\n\
    \            letter match {\n                case letter if index >= 0 && index\
    \ < vowels.length => letter\n                case letter if index >= vowelIndex\
    \ && index < vowels.length => nextLetter\n                case letter if index\
    \ >= vowelIndex && index >= vowels.length => nextVowel\n                case letter\
    \ => letter\n            }\n        }).mkString\n        newMessage\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkvoiyg72.scala:34)\n\tat Problem.main(tmpkvoiyg72.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val result = new StringBuilder\n        for (i <- 0 until messageList.length)\
    \ {\n            val currentChar = messageList(i)\n            val nextChar =\
    \ messageList(i+1)\n            val currentCharIndex = alphabet.indexOf(currentChar)\n\
    \            val nextCharIndex = alphabet.indexOf(nextChar)\n            val currentCharVowel\
    \ = vowels.contains(currentChar)\n            val nextCharVowel = vowels.contains(nextChar)\n\
    \            if (currentCharIndex < nextCharIndex) {\n                if (currentCharVowel\
    \ && nextCharVowel) {\n                    result.append(alphabet(currentCharIndex\
    \ + 2))\n                    result.append(alphabet(currentCharIndex + 1))\n \
    \                   result.append(alphabet(nextCharIndex + 1))\n             \
    \       result.append(alphabet(nextCharIndex + 2))\n                } else {\n\
    \                    result.append(alphabet(currentCharIndex + 1))\n         \
    \           result.append(alphabet(nextCharIndex + 1))\n                }\n  \
    \          } else {\n                if (currentCharVowel && nextCharVowel) {\n\
    \                    result.append(alphabet(currentCharIndex + 2))\n         \
    \           result.append(alphabet(nextCharIndex + 2))\n                } else\
    \ {\n                    result.append(alphabet(currentCharIndex + 1))\n     \
    \               result.append(alphabet(nextCharIndex + 1))\n                }\n\
    \            }\n        }\n        result.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat Problem$.encode$$anonfun$1(tmprlkrn0xg.scala:21)\n\tat Problem$.encode$$anonfun$adapted$1(tmprlkrn0xg.scala:45)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encode(tmprlkrn0xg.scala:45)\n\
    \tat Problem$.main(tmprlkrn0xg.scala:49)\n\tat Problem.main(tmprlkrn0xg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageList = message.split(\"\")\n        val encodedMessage =\
    \ messageList.foldLeft(\"\")( (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n\
    \            val nextIndex = index + 1\n            val nextElem = alphabet(nextIndex)\n\
    \            val nextChar = if (nextIndex < alphabet.length) nextElem else elem\n\
    \            acc + (if (vowels.contains(elem)) elem.toUpperCase else elem.toLowerCase)\
    \ + nextChar\n        })\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wciur98.scala:28)\n\tat Problem.main(tmp0wciur98.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels((index + 2) % vowels.length)\n        }).mkString\n\
    \        encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg4rs3vg_.scala:24)\n\tat Problem.main(tmpg4rs3vg_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                if (vowelIndex\
    \ < vowels.length) vowels(vowelIndex) else letter\n            } else {\n    \
    \            letter\n            }\n        })\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString\n        val newMessageArray2\
    \ = newMessageString.split(\"\")\n        val newMessageArray3 = newMessageArray2.map(letter\
    \ => {\n            if (vowels.indexOf(letter) != -1) {\n                vowels.indexOf(letter)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage2 = newMessageArray3.toList\n        val newMessageString2\
    \ = newMessage2.toString\n        val newMessageArray4 = newMessageString2.split(\"\
    \")\n        val newMessageArray5 = newMessageArray4.map(letter => {\n       \
    \     if (vowels.indexOf(letter) != -1) {\n                vowels.indexOf(letter)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage3 = newMessageArray5.toList\n        val newMessageString3\
    \ = newMessage3.toString\n        val newMessageArray6 = newMessageString3.split(\"\
    \")\n        val newMessageArray7 = newMessageArray6.map(letter => {\n       \
    \     if (vowels.indexOf(letter) != -1) {\n                vowels.indexOf(letter)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage4 = newMessageArray7.toList\n        val newMessageString4\
    \ = newMessage4.toString\n        val newMessageArray8 = newMessageString4.split(\"\
    \")\n        val newMessageArray9 = newMessageArray8.map(letter => {\n       \
    \     if (vowels.indexOf(letter) != -1) {\n                vowels.indexOf(letter)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage5 = newMessageArray9.toList\n        val newMessageString5\
    \ = newMessage5.toString\n        val newMessageArray10 = newMessageString5.split(\"\
    \")\n        val newMessageArray11 = newMessageArray10.map(letter => {\n     \
    \       if (vowels.indexOf(letter) != -1) {\n                vowels.indexOf(letter)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage6 = newMessageArray11.toList\n        val newMessageString6\
    \ = newMessage6.toString\n        val newMessageArray12 = newMessageString6.split(\"\
    \")\n        val newMessageArray13 = newMessageArray12.map(letter => {\n     \
    \       if (vowels.indexOf(letter) != -1) {\n                vowels.indexOf(letter)\n\
    \            } else {\n                letter\n            }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4q8njfj6.scala:86:4 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp4q8njfj6.scala:95:0 ----------------------------\e[0m\e[0m\n\e[31m95\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4q8njfj6.scala:94:1 ---------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val newMessageList = messageList.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList2 = newMessageList.map(x => vowels.indexOf(x) + 1)\n\
    \        val newMessageList3 = newMessageList2.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList4 = newMessageList3.map(x => vowels.indexOf(x) + 1)\n\
    \        val newMessageList5 = newMessageList4.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList6 = newMessageList5.map(x => vowels.indexOf(x) + 1)\n\
    \        val newMessageList7 = newMessageList6.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList8 = newMessageList7.map(x => vowels.indexOf(x) + 1)\n\
    \        val newMessageList9 = newMessageList8.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList10 = newMessageList9.map(x => vowels.indexOf(x) + 1)\n\
    \        val newMessageList11 = newMessageList10.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList12 = newMessageList11.map(x => vowels.indexOf(x) +\
    \ 1)\n        val newMessageList13 = newMessageList12.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList14 = newMessageList13.map(x => vowels.indexOf(x) +\
    \ 1)\n        val newMessageList15 = newMessageList14.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList16 = newMessageList15.map(x => vowels.indexOf(x) +\
    \ 1)\n        val newMessageList17 = newMessageList16.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList18 = newMessageList17.map(x => vowels.indexOf(x) +\
    \ 1)\n        val newMessageList19 = newMessageList18.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList20 = newMessageList19.map(x => vowels.indexOf(x) +\
    \ 1)\n        val newMessageList21 = newMessageList20.map(x => alphabet(x).toLowerCase)\n\
    \        val newMessageList22 = newMessageList21.map(x => vowels.indexOf(x) +\
    \ 1)\n        val newMessage\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp68vxg6oi.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp68vxg6oi.scala:18:59 --------------------\e[0m\e[0m\n\e[31m18 |\e[0m\
    \        \e[33mval\e[0m \e[36mnewMessageList\e[0m = messageList.map(\e[36mx\e\
    [0m => alphabet(x).toLowerCase)\n\e[31m\e[31m   |\e[0m                       \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                                 Found:    (x : String)\n\e[31m   |\e[0m    \
    \                                              Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp68vxg6oi.scala:18:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewMessageList\e[0m = messageList.map(\e\
    [36mx\e[0m => alphabet(x).toLowerCase)\n\e[31m\e[31m   |\e[0m                \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp68vxg6oi.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(0)) + 1)\n        val newMessage2 = newMessage.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(1)) + 1)\n      \
    \  val newMessage3 = newMessage2.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(2))\
    \ + 1)\n        val newMessage4 = newMessage3.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(3)) + 1)\n        val newMessage5 = newMessage4.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(4)) + 1)\n      \
    \  val newMessage6 = newMessage5.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(5))\
    \ + 1)\n        val newMessage7 = newMessage6.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(6)) + 1)\n        val newMessage8 = newMessage7.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(7)) + 1)\n      \
    \  val newMessage9 = newMessage8.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(8))\
    \ + 1)\n        val newMessage10 = newMessage9.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(9)) + 1)\n        val newMessage11 = newMessage10.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(10)) + 1)\n     \
    \   val newMessage12 = newMessage11.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(11))\
    \ + 1)\n        val newMessage13 = newMessage12.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(12)) + 1)\n        val newMessage14 = newMessage13.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(13)) + 1)\n     \
    \   val newMessage15 = newMessage14.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(14))\
    \ + 1)\n        val newMessage16 = newMessage15.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(15)) + 1)\n        val newMessage17 = newMessage16.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(16)) + 1)\n     \
    \   val newMessage18 = newMessage17.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(17))\
    \ + 1)\n        val newMessage19 = newMessage18.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpefl9xmbu.scala:35:96 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mnewMessage19\e[0m = newMessage18.map(\e\
    [36mletter\e[0m => letters.indexOf(letter) + letters.indexOf(\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \             expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpefl9xmbu.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.replaceAll(vowels, vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.replaceAll(\"[aeiou]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.replaceAll(\"[AEIOU]\", \"$0$2\")\n \
    \       val messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore = messageWithVowelsAndTwoLettersAfter.replaceAll(\"\
    [aeiouAEIOU]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\"\
    [AEIOUAEIOU]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\"\
    [AEIOUAEIOUAEIOU]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\"\
    [AEIOUAEIOUAEIOUAEIOU]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\"\
    [AEIOUAEIOUAEIOUAEIOUAEIOU]\", \"$0$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLetters\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpytexzubv.scala:16:72\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e\
    [0m = message.replaceAll(vowels, vowels.charAt(\e[31m2\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                           ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpytexzubv.scala:20:88\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore\e\
    [0m = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\e\
    [31m\"[AEIOUAEIOU]\"\e[0m, \e[31m\"$0$2\"\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmessageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpytexzubv.scala:21:107\
    \ --------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\e\
    [0m = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\e\
    [31m\"[AEIOUAEIOUAEIOU]\"\e[0m, \e[31m\"$0$2\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                             ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-"
  stdout: ''
  timestamp: 1659793791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map {\n  \
    \          letter =>\n                val index = alphabet.indexOf(letter)\n \
    \               if (index != -1) {\n                    val nextLetter = alphabet(index+1)\n\
    \                    val nextIndex = alphabet.indexOf(nextLetter)\n          \
    \          if (nextIndex != -1) {\n                        val nextLetter2 = alphabet(nextIndex+1)\n\
    \                        alphabet(index) = nextLetter2\n                     \
    \   alphabet(nextIndex) = letter\n                    }\n                    else\
    \ {\n                        alphabet(index) = letter\n                    }\n\
    \                }\n                else {\n                    alphabet(alphabet.indexOf(letter))\
    \ = letter\n                }\n        }\n        val newMessage = alphabet(0)\
    \ +\n            newMessageArray.toList.mkString(\"\") +\n            alphabet(alphabet.size\
    \ - 1)\n        newMessage\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp40w1ogke.scala:26:24 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                        alphabet(index) = nextLetter2\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ update is not a member of List[Char] - did you mean alphabet.updated?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp40w1ogke.scala:27:24 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                        alphabet(nextIndex) = letter\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ update is not a member of List[Char] - did you mean alphabet.updated?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp40w1ogke.scala:30:24 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                        alphabet(index) = letter\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ update is not a member of List[Char] - did you mean alphabet.updated?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp40w1ogke.scala:34:20 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    alphabet(alphabet.indexOf(letter))\
    \ = letter\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue update is not a member of List[Char] - did you mean alphabet.updated?\n\
    \e[31m\e[31m-- Error: /tmp/tmp40w1ogke.scala:36:9 ------------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0m         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m         where:    B is a type variable\n5 errors found\n"
  stdout: ''
  timestamp: 1659793792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter))\
    \ + letter)\n        val messageWithVowelsAndVowelsTwoAheadOfVowel = messageWithVowels.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1))\n        val messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowel\
    \ = messageWithVowelsAndVowelsTwoAheadOfVowel.map(letter => vowels.indexOf(letter)\
    \ + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter) + 1) +\
    \ alphabet(vowels.indexOf(letter) + 2))\n        val messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowel\
    \ = messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowel.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1) + alphabet(vowels.indexOf(letter) + 2) + alphabet(vowels.indexOf(letter)\
    \ + 3))\n        val messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowel\
    \ = messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowel.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1) + alphabet(vowels.indexOf(letter) + 2) + alphabet(vowels.indexOf(letter)\
    \ + 3) + alphabet(vowels.indexOf(letter) + 4))\n        val messageWithVow\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv9pjut1t.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv9pjut1t.scala:21:128\
    \ --------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowel\e\
    [0m = messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowel.map(\e\
    [36mletter\e[0m => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) +\
    \ alphabet(vowels.indexOf(letter) + \e[31m1\e[0m) + alphabet(vowels.indexOf(letter)\
    \ + \e[31m2\e[0m) + alphabet(vowels.indexOf(letter) + \e[31m3\e[0m) + alphabet(vowels.indexOf(letter)\
    \ + \e[31m4\e[0m))\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                            \
    \                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowelAndVowelsTwoAheadOfVowel\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpv9pjut1t.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        val newMessage = new mutable.ArrayBuilder[Char]\n\
    \        var i = 0\n        while (i < messageArray.length) {\n            val\
    \ currentChar = messageArray(i)\n            val nextChar = messageArray(i + 1)\n\
    \            if (vowels.contains(currentChar) && vowels.contains(nextChar)) {\n\
    \                newMessage.append(vowels(vowels.indexOf(currentChar) + 1))\n\
    \                newMessage.append(vowels(vowels.indexOf(nextChar) + 1))\n   \
    \         } else {\n                newMessage.append(currentChar)\n         \
    \   }\n            i += 1\n        }\n        newMessage.toString.toUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0yf2yvs9.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuilder[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu2vlw53h.scala:22)\n\tat Problem.main(tmpu2vlw53h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val newMessage =\
    \ message.map(letter => vowels.indexOf(letter) match {\n            case -1 =>\
    \ letter\n            case 0 => letter.toUpperCase\n            case 1 => letter.toLowerCase\n\
    \            case 2 => letter.toUpperCase\n            case _ => letter\n    \
    \    })\n        val newMessage2 = newMessage.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter.toUpperCase\n\
    \            case 1 => letter.toLowerCase\n            case 2 => letter.toUpperCase\n\
    \            case _ => letter\n        })\n        val newMessage3 = newMessage2.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => letter.toUpperCase\n            case 1 => letter.toLowerCase\n \
    \           case 2 => letter.toUpperCase\n            case _ => letter\n     \
    \   })\n        val newMessage4 = newMessage3.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter.toUpperCase\n\
    \            case 1 => letter.toLowerCase\n            case 2 => letter.toUpperCase\n\
    \            case _ => letter\n        })\n        val newMessage5 = newMessage4.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => letter.toUpperCase\n            case 1 => letter.toLowerCase\n \
    \           case 2 => letter.toUpperCase\n            case _ => letter\n     \
    \   })\n        val newMessage6 = newMessage5.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter.toUpperCase\n\
    \            case 1 => letter.toLowerCase\n            case 2 => letter.toUpperCase\n\
    \            case _ => letter\n        })\n        val newMessage7 = newMessage6.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => letter.toUpperCase\n            case 1 => letter.toLowerCase\n \
    \           case 2 => letter.toUpperCase\n            case _ => letter\n     \
    \   })\n        val newMessage8 = newMessage7.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter.toUpperCase\n\
    \            case 1 => letter.toLowerCase\n            case 2 => letter.toUpperCase\n\
    \            case _ => letter\n        })\n        val newMessage9 = newMessage8.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => letter.toUpperCase\n            case 1 => letter.toLowerCase\n \
    \           case 2 => letter.toUpperCase\n            case _ => letter\n     \
    \   })\n        val newMessage10 = newMessage9.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter.toUpperCase\n\
    \            case 1 => letter.toLowerCase\n            case 2 => letter.toUpperCase\n\
    \            case _ => letter\n        })\n        val newMessage11 = newMessage10.map(letter\
    \ => vowels.indexOf(\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0m9o5uj3.scala:86:69 ---------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m        \e[33mval\e[0m \e[36mnewMessage11\e[0m = newMessage10.map(\e\
    [36mletter\e[0m => vowels.indexOf(\n\e[31m\e[31m   |\e[0m                    \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0m9o5uj3.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e\
    [0m \e[31m0\e[0m => letter.toUpperCase\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0m9o5uj3.scala:19:29\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e\
    [0m \e[31m1\e[0m => letter.toLowerCase\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value toLowerCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0m9o5uj3.scala:20:29\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m \e[31m2\e[0m => letter.toUpperCase\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0m9o5uj3.scala:25:29\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mcase\e\
    [0m \e[31m0\e[0m => letter.toUpperCase\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0m9o5uj3.scala:26:29\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mcase\e\
    [0m \e[31m1\e[0m => letter.toLowerCase\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value toLowerCase\
    \ is not a member of Char\n\e[31m\e[3"
  stdout: ''
  timestamp: 1659793794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = mutable.StringBuilder()\n   \
    \     val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        val vowelsCount =\
    \ message.count(vowels)\n        val vowelsPosition = vowels.toList.map(alphabet.indexOf(_))\n\
    \        val vowelsPositionCount = vowelsPosition.count(_ > 0)\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPosition = vowelsPosition.toList\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = vowelsPositionCount.toInt\n        val vowelsPositionCount = vowelsPositionCount.toInt\n\
    \        val vowelsPositionCount = vowelsPositionCount.toInt\n        val vowelsPositionCount\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpy2afb70d.scala:52:33 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsPositionCount\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy2afb70d.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsPositionCount\e[0m = vowelsPositionCount.toInt\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvowelsPositionCount is already defined as \e[33mvalue\e[0m \e[35mvowelsPositionCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy2afb70d.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsPositionCount\e[0m = vowelsPositionCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsPositionCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsPositionCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpy2afb70d.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsPosition\e[0m = vowelsPosition.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsPosition is already defined as \e[33mvalue\e[0m \e[35mvowelsPosition\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy2afb70d.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsPositionCount\e[0m = vowelsPositionCount.toInt\n\
    \e[31m\e[31m   |\e[0m  "
  stdout: ''
  timestamp: 1659793794
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels\
    \ = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.zip(newVowels).map(x\
    \ => x.swap).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpilqpydip.scala:22)\n\tat Problem.main(tmpilqpydip.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu2vlw53h.scala:22)\n\tat Problem.main(tmpu2vlw53h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.map(letter => vowels.indexOf(letter) + 2)\n        val messageWithVowelsAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBefore = messageWithVowelsAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBefore.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfter.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd_de0fsz.scala:25:173 -----------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\e\
    [0m = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetter\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetter\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd_de0fsz.scala:26:5\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageArray = message.split(\"\")\n        val newMessageArray =\
    \ messageArray.map(letter => \n            vowels.contains(letter) ? vowels.find(vowel\
    \ => vowel == letter)\n                .getOrElse(letter) : letter)\n        val\
    \ newMessage = messageArray.toList.mkString(\"\")\n        val newMessageArray2\
    \ = newMessageArray.toList.map(letter => \n            vowels.contains(letter)\
    \ ? vowels.find(vowel => vowel == letter)\n                .getOrElse(letter)\
    \ : letter)\n        val newMessage2 = newMessageArray2.toList.mkString(\"\")\n\
    \        val newMessageArray3 = newMessage2.split(\"\").map(letter => \n     \
    \       vowels.contains(letter) ? vowels.find(vowel => vowel == letter)\n    \
    \            .getOrElse(letter) : letter)\n        val newMessage3 = newMessageArray3.toList.mkString(\"\
    \")\n        val newMessageArray4 = newMessage3.split(\"\").map(letter => \n \
    \           vowels.contains(letter) ? vowels.find(vowel => vowel == letter)\n\
    \                .getOrElse(letter) : letter)\n        val newMessage4 = newMessageArray4.toList.mkString(\"\
    \")\n        val newMessageArray5 = newMessage4.split(\"\").map(letter => \n \
    \           vowels.contains(letter) ? vowels.find(vowel => vowel == letter)\n\
    \                .getOrElse(letter) : letter)\n        val newMessage5 = newMessageArray5.toList.mkString(\"\
    \")\n        val newMessageArray6 = newMessage5.split(\"\").map(letter => \n \
    \           vowels.contains(letter) ? vowels.find(vowel => vowel == letter)\n\
    \                .getOrElse(letter) : letter)\n        val newMessage6 = newMessageArray6.toList.mkString(\"\
    \")\n        val newMessageArray7 = newMessage6.split(\"\").map(letter => \n \
    \           vowels.contains(letter) ? vowels.find(vowel => vowel == letter)\n\
    \                .getOrElse(letter) : letter)\n        val newMessage7 = newMessageArray7.toList.mkString(\"\
    \")\n        val newMessageArray8 = newMessage7.split(\"\").map(letter => \n \
    \           vowels.contains(letter) ? vowels.find(vowel => vowel == letter)\n\
    \                .getOrElse(letter) : letter)\n        val newMessage8 = newMessageArray8.toList.mkString(\"\
    \")\n        val newMessageArray9 = newMessage8.split(\"\").map(letter => \n \
    \           vowels.contains(letter) ? vowels.find(vowel => vowel == \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvs_csrlz.scala:50:67 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m            vowels.contains(letter) ? vowels.find(\e\
    [36mvowel\e[0m => vowel == \n\e[31m\e[31m   |\e[0m                           \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                          expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvs_csrlz.scala:19:37 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                .getOrElse(letter) : letter)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: type letter\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvs_csrlz.scala:18:36 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            vowels.contains(letter) ? vowels.find(\e\
    [36mvowel\e[0m => vowel == letter)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value ? is not a member of Boolean\n\e[31m\e[31m--\
    \ Error: /tmp/tmpvs_csrlz.scala:19:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                .getOrElse(letter) : letter)\n\e[31m\e\
    [31m   |\e[0m                                            ^\e[0m\n\e[31m   |\e\
    [0m                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvs_csrlz.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659793801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) vowels(index - 1) else letter\n        })\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageStringArray = newMessageString.split(\"\")\n\
    \        val newMessageStringArrayLength = newMessageStringArray.length\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength + 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength + 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength + 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength + 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength + 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength + 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ + 1\n        val newMessageStringArrayLength = newMessageStringArrayLength +\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength + 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength + 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength + 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength + 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength + 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength + 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength + 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength + 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength + 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength + 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength + 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength + 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ + 1\n        val newMessageStringArrayLength = newMessageStringArrayLength +\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength + 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength + 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength + 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength + 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength + 1\n    \
    \    val newMessageStringArrayLength = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp16a819rb.scala:53:41 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp16a819rb.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewMessageStringArrayLength\e[0m = newMessageStringArrayLength - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp16a819rb.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp16a819rb.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e"
  stdout: ''
  timestamp: 1659793800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(0)) + 2)\n        newMessage.map(letter => letters.charAt(letter))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplwzbad03.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newMessage.map(\e[36mletter\e\
    [0m => letters.charAt(letter))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Char]\n\e[31m   |\e[0m      \
    \  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val messageArrayLength = messageArray.length\n\
    \        val newMessageArray = messageArray.map(x => x.toUpperCase)\n        val\
    \ newMessageArrayLength = newMessageArray.length\n        val newMessageArray2\
    \ = newMessageArray.map(x => vowels.indexOf(x) + 2)\n        val newMessageArray2Length\
    \ = newMessageArray2.length\n        val newMessageArray3 = newMessageArray2.map(x\
    \ => vowels.indexOf(x) + 1)\n        val newMessageArray3Length = newMessageArray3.length\n\
    \        val newMessageArray4 = newMessageArray3.map(x => vowels.indexOf(x))\n\
    \        val newMessageArray4Length = newMessageArray4.length\n        val newMessageArray5\
    \ = newMessageArray4.map(x => vowels.indexOf(x) + 1)\n        val newMessageArray5Length\
    \ = newMessageArray5.length\n        val newMessageArray6 = newMessageArray5.map(x\
    \ => vowels.indexOf(x) + 2)\n        val newMessageArray6Length = newMessageArray6.length\n\
    \        val newMessageArray7 = newMessageArray6.map(x => vowels.indexOf(x))\n\
    \        val newMessageArray7Length = newMessageArray7.length\n        val newMessageArray8\
    \ = newMessageArray7.map(x => vowels.indexOf(x) + 1)\n        val newMessageArray8Length\
    \ = newMessageArray8.length\n        val newMessageArray9 = newMessageArray8.map(x\
    \ => vowels.indexOf(x) + 2)\n        val newMessageArray9Length = newMessageArray9.length\n\
    \        val newMessageArray10 = newMessageArray9.map(x => vowels.indexOf(x))\n\
    \        val newMessageArray10Length = newMessageArray10.length\n        val newMessageArray11\
    \ = newMessageArray10.map(x => vowels.indexOf(x) + 1)\n        val newMessageArray11Length\
    \ = newMessageArray11.length\n        val newMessageArray12 = newMessageArray11.map(x\
    \ => vowels.indexOf(x) + 2)\n        val newMessageArray12Length = newMessageArray12.length\n\
    \        val newMessageArray13 = newMessageArray12.map(x => vowels.indexOf(x))\n\
    \        val newMessageArray13Length = newMessageArray13.length\n        val newMessageArray14\
    \ = newMessageArray13.map(x => vowels.indexOf(x) + 1)\n        val newMessageArray14Length\
    \ = newMessageArray14.length\n        val newMessageArray15 = newMessageArray14.map(x\
    \ => vowels.indexOf(x) + 2)\n        val newMessageArray15Length = newMessageArray15.length\n\
    \        val new\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpb227q67e.scala:48:12 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb227q67e.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val encodedMessage = messageArray.map(letter => {\n            if (vowels.contains(letter))\
    \ {\n                val vowelIndex = letters.indexOf(letter)\n              \
    \  val vowelIndex2 = vowelIndex + 1\n                letters.charAt(vowelIndex2)\
    \ \n            } else {\n                letter\n            }\n        }).mkString\n\
    \        encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0n65p84m.scala:30)\n\tat Problem.main(tmp0n65p84m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val newMessage = messageArray.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.charAt(messageArray.indexOf(letter))) + 1).mkString\n\
    \        newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfmtf0ivy.scala:22)\n\tat Problem.main(tmpfmtf0ivy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + letter)\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.map(letter => vowels.indexOf(letter) + letter + letter)\n\
    \        val messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + letter)\n        messageWithVowelsAndTwoLettersAfter.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptjgwsj1c.scala:18:50 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoLettersAfter\e\
    [0m = messageWithVowelsAndTwoLettersAfter.map(\e[36mletter\e[0m => vowels.indexOf(letter)\
    \ + letter)\n\e[31m\e[31m   |\e[0m                                           \
    \       ^\e[0m\n\e[31m   |\e[0m          Recursive \e[33mvalue\e[0m \e[35mmessageWithVowelsAndTwoLettersAfter\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageList = message.split(\"\")\n\
    \        val newMessage = messageList.map(letter => {\n            val index =\
    \ alphabet.indexOf(letter)\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            val nextVowelIndex = vowelIndex + 2\n            val nextVowel =\
    \ vowels(nextVowelIndex)\n            if (vowelIndex < 0) letter else nextVowel\n\
    \        }).mkString\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9ejsm8y_.scala:28)\n\tat Problem.main(tmp9ejsm8y_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = scala.collection.mutable.List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val newMessage = message.map(letter => letter\
    \ match {\n            case vowel => vowels.indexOf(vowel) + alphabet(vowels.indexOf(vowel)\
    \ + 1)\n            case letter => alphabet(alphabet.indexOf(letter) + 1)\n  \
    \      })\n        val newMessageString = newMessage.toList\n        newMessageString.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjn6r8ktv.scala:16:48 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36malphabet\e[0m = scala.collection.mutable.List(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \e[31m\"k\"\e[0m, \e[31m\"l\"\e[0m, \e[31m\"m\"\e[0m, \e\
    [31m\"n\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"p\"\e[0m, \e[31m\"q\"\e[0m, \e[31m\"\
    r\"\e[0m, \e[31m\"s\"\e[0m, \e[31m\"t\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"v\"\e\
    [0m, \e[31m\"w\"\e[0m, \e[31m\"x\"\e[0m, \e[31m\"y\"\e[0m, \e[31m\"z\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue List is not a member of scala.collection.mutable - did you\
    \ mean mutable.ListMap?\n1 error found\n"
  stdout: ''
  timestamp: 1659793801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index - 2\n                vowels(vowelIndex)\
    \ + letter + vowels(vowelIndex + 1)\n            } else {\n                letter\n\
    \            }\n        }).mkString\n        encodedMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvs2a9aaz.scala:29)\n\tat Problem.main(tmpvs2a9aaz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + letter)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + letter)\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        messageWithVowelsReversedWithVowelsReplacedReversed.mkString(\"\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxqp76gs.scala:23)\n\tat Problem.main(tmpgxqp76gs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)\
    \ + 1))\n        val messageWithVowelsAndLettersSwappedCase = messageWithVowels.map(letter\
    \ => letter.toUpperCase())\n        val messageWithVowelsAndLettersSwappedCaseAndVowelsReplaced\
    \ = messageWithVowelsAndLettersSwappedCase.map(letter => vowels.indexOf(letter)\
    \ + alphabet(vowels.indexOf(letter) + 1))\n        val messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplaced\
    \ = messageWithVowelsAndLettersSwappedCaseAndVowelsReplaced.map(letter => letter.toUpperCase())\n\
    \        val messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplacedAndVowelsReplaced\
    \ = messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplaced.map(letter\
    \ => letter.toUpperCase())\n        val messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplacedAndVowelsReplacedAndVowelsReplaced\
    \ = messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplacedAndVowelsReplacedAndVowelsReplaced.map(letter\
    \ => letter.toUpperCase())\n        val messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplacedAndVowelsReplacedAndVowelsReplacedAndVowelsReplaced\
    \ = messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplacedAndVowelsReplacedAndVowelsReplacedAndVowelsReplaced.map(letter\
    \ => letter.toUpperCase())\n        val messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplacedAndVow\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpitvqe224.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpitvqe224.scala:18:92\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmessageWithVowelsAndLettersSwappedCase\e[0m = messageWithVowels.map(\e[36mletter\e\
    [0m => letter.toUpperCase())\n\e[31m\e[31m   |\e[0m                          \
    \                                                           ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value toUpperCase is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpitvqe224.scala:20:164\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmessageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplaced\e\
    [0m = messageWithVowelsAndLettersSwappedCaseAndVowelsReplaced.map(\e[36mletter\e\
    [0m => letter.toUpperCase())\n\e[31m\e[31m   |\e[0m                          \
    \                                                                            \
    \                                                       ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value toUpperCase is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpitvqe224.scala:21:198\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmessageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplacedAndVowelsReplaced\e\
    [0m = messageWithVowelsAndLettersSwappedCaseAndVowelsReplacedAndVowelsReplaced.map(\e\
    [36mletter\e[0m => letter.toUpperCase())\n\e[31m\e[31m   |\e[0m              \
    \                                                                            \
    \                                                                            \
    \                         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 value toUpperCase is not a member of Nothing\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpitvqe224.scala:22:121 --------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                vowels(index - 1) + vowels(index)\n\
    \            } else {\n                letter\n            }\n        }).mkString\n\
    \        encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcco_dsvc.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mindex\e[0m = vowels.indexOf(letter)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m   value indexOf is not a member of scala.collection.mutable.Set[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpcco_dsvc.scala:20:34 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                vowels(index - \e[31m1\e[0m) + vowels(index)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of Boolean, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => alphabet(vowels.indexOf(letter) + 1)\n            case 1 => alphabet(vowels.indexOf(letter)\
    \ + 2)\n            case 2 => alphabet(vowels.indexOf(letter) + 3)\n         \
    \   case 3 => alphabet(vowels.indexOf(letter) + 4)\n            case 4 => alphabet(vowels.indexOf(letter)\
    \ + 5)\n            case 5 => alphabet(vowels.indexOf(letter) + 6)\n         \
    \   case 6 => alphabet(vowels.indexOf(letter) + 7)\n            case 7 => alphabet(vowels.indexOf(letter)\
    \ + 8)\n            case 8 => alphabet(vowels.indexOf(letter) + 9)\n         \
    \   case _ => letter\n        })\n        val newMessageString = newMessage.toList\n\
    \        newMessageString.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph2uq_y31.scala:34)\n\tat Problem.main(tmph2uq_y31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageLength = message.length\n   \
    \     val encodedMessage = mutable.Buffer.empty[String]\n        val messageLetters\
    \ = message.map(_.toLower)\n        val vowelLetters = messageLetters.map(letter\
    \ => vowels.indexOf(letter))\n        val vowelLettersCount = vowelLetters.map(_.toInt)\n\
    \        val vowelLettersCountMap = vowelLettersCount.toMap\n        val vowelLettersCountMapKeys\
    \ = vowelLettersCountMap.keys\n        val vowelLettersCountMapValues = vowelLettersCountMap.values.toList\n\
    \        val vowelLettersCountMapValuesCount = vowelLettersCountMapValues.size\n\
    \        val vowelLettersCountMapValuesCount2 = vowelLettersCountMapValuesCount\
    \ * 2\n        val vowelLettersCountMapValuesCount3 = vowelLettersCountMapValuesCount\
    \ * 3\n        val vowelLettersCountMapValuesCount4 = vowelLettersCountMapValuesCount\
    \ * 4\n        val vowelLettersCountMapValuesCount5 = vowelLettersCountMapValuesCount\
    \ * 5\n        val vowelLettersCountMapValuesCount6 = vowelLettersCountMapValuesCount\
    \ * 6\n        val vowelLettersCountMapValuesCount7 = vowelLettersCountMapValuesCount\
    \ * 7\n        val vowelLettersCountMapValuesCount8 = vowelLettersCountMapValuesCount\
    \ * 8\n        val vowelLettersCountMapValuesCount9 = vowelLettersCountMapValuesCount\
    \ * 9\n        val vowelLettersCountMapValuesCount10 = vowelLettersCountMapValuesCount\
    \ * 10\n        val vowelLettersCountMapValuesCount11 = vowelLettersCountMapValuesCount\
    \ * 11\n        val vowelLettersCountMapValuesCount12 = vowelLettersCountMapValuesCount\
    \ * 12\n        val vowelLettersCountMapValuesCount13 = vowelLettersCountMapValuesCount\
    \ * 13\n        val vowelLettersCountMapValuesCount14 = vowelLettersCountMapValuesCount\
    \ * 14\n        val vowelLettersCountMapValuesCount15 = vowelLettersCountMapValuesCount\
    \ * 15\n        val vowelLettersCountMapValuesCount16 = vowelLettersCountMapValuesCount\
    \ * 16\n        val vowelLettersCountMapValuesCount17 = vowelLettersCountMapValuesCount\
    \ * 17\n        val vowelLettersCountMapValuesCount18 = vowelLettersCountMapValuesCount\
    \ * 18\n        val vowelLettersCountMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjrbwixo9.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjrbwixo9.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mencodedMessage\e[0m = mutable.Buffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpjrbwixo9.scala:22:58 -----------------------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelLettersCountMap\e[0m = vowelLettersCount.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                        Cannot prove\
    \ that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                      \
    \                  where:    K is a type variable\n\e[31m   |\e[0m           \
    \                                       V is a type variable\n\e[31m   |\e[0m\
    \                                        .\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjrbwixo9.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.replaceAllIn(vowels, vowels.charAt(2))\n        val messageWithVowelsAndLetters\
    \ = messageWithVowels.replaceAllIn(\"AEIOU\", \"AE\")\n        val messageWithVowelsAndLettersAndLetters\
    \ = messageWithVowelsAndLetters.replaceAllIn(\"AE\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLetters.replaceAllIn(\"A\", \"A\")\n       \
    \ val messageWithVowelsAndLettersAndLettersAndLettersAndLetters = messageWithVowelsAndLettersAndLettersAndLetters.replaceAllIn(\"\
    A\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLetters.replaceAllIn(\"\
    A\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAllIn(\"\
    A\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAllIn(\"\
    A\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAllIn(\"\
    A\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAllIn(\"\
    A\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAllIn(\"\
    A\", \"A\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyfrba6hv.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\e\
    [0m = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAllIn(\e\
    [31m\"A\"\e[0m, \e[31m\"A\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmessageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpyfrba6hv.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\e\
    [0m = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetter\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmessageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded method"
  stdout: ''
  timestamp: 1659793803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.map(letter => {\n\
    \            if (vowels.contains(letter)) {\n                val index = vowels.indexOf(letter)\n\
    \                val nextVowel = vowels(index + 1)\n                val nextLetter\
    \ = vowels(index + 2)\n                letter.replace(letter, nextLetter)\n  \
    \          }\n            else {\n                letter\n            }\n    \
    \    }).mkString(\"\")\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpa_uys80p.scala:22:23 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                letter.replace(letter, nextLetter)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mreplace\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence):\
    \ String\n\e[31m   |\e[0m (x$0: Char, x$1: Char): String\n\e[31m   |\e[0mmatch\
    \ arguments ((letter : String), (nextLetter : Char))\n1 error found\n"
  stdout: ''
  timestamp: 1659793801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageList = message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\
    \")( (acc, elem) => {\n            val index = vowels.indexOf(elem)\n        \
    \    if (index != -1) {\n                val vowelIndex = index - 2\n        \
    \        val vowel = vowels(vowelIndex)\n                acc + (if (vowelIndex\
    \ == 0) elem.toUpperCase else elem.toLowerCase) + vowel\n            } else {\n\
    \                acc + elem\n            }\n        })\n        encodedMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3gzy2m3m.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mindex\e[0m = vowels.indexOf(elem)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m   value indexOf is not a member of scala.collection.mutable.Set[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val result = new StringBuilder(messageLength)\n  \
    \      val vowelsCount = message.count(vowels)\n        var i = 0\n        while\
    \ (i < messageLength) {\n            val currentChar = message.charAt(i)\n   \
    \         val nextChar = message.charAt(i + 1)\n            val nextCharCount\
    \ = message.count(nextChar)\n            if (vowels.contains(currentChar)) {\n\
    \                if (nextCharCount > vowelsCount) {\n                    result.append(currentChar)\n\
    \                    i += 2\n                } else {\n                    result.append(nextChar)\n\
    \                    i += 2\n                }\n            } else {\n       \
    \         result.append(currentChar)\n                i += 1\n            }\n\
    \        }\n        result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3tc6bclj.scala:18:40\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e\
    [0m = message.count(vowels)\n\e[31m\e[31m   |\e[0m                           \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \     Found:    (vowels : String)\n\e[31m   |\e[0m                           \
    \             Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp3tc6bclj.scala:23:46 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mnextCharCount\e[0m = message.count(nextChar)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (nextChar\
    \ : Char)\n\e[31m   |\e[0m                                             Required:\
    \ Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val newMessage =\
    \ message\n        val newMessageList = newMessage.split(\"\")\n        val newMessageList2\
    \ = newMessageList.map(letter => \n            if (vowels.contains(letter)) letter\
    \ else \n                vowels.indexOf(letter) + 2)\n        newMessageList2.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqff61bb0.scala:24)\n\tat Problem.main(tmpqff61bb0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793806
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val messageWithVowels\
    \ = message.replaceAllIn(vowels, vowels.toChar).replaceAllIn(\"aeiou\", \"A\"\
    )\n        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.replaceAllIn(\"\
    A\", vowels.toChar)\n        val messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersBefore.replaceAllIn(\"\
    A\", vowels.toChar)\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfter.replaceAllIn(\"A\", vowels.toChar)\n \
    \       val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore.replaceAllIn(\"A\"\
    , vowels.toChar)\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(\"\
    A\", vowels.toChar)\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(\"\
    A\", vowels.toChar)\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(\"\
    A\", vowels.toChar)\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(\"\
    A\", vowels.toChar\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqq4ch88v.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqq4ch88v.scala:16:40\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmessageWithVowels\e[0m = message.replaceAllIn(vowels, vowels.toChar).replaceAllIn(\e\
    [31m\"aeiou\"\e[0m, \e[31m\"A\"\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue replaceAllIn is\
    \ not a member of String - did you mean message.replaceAll?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpqq4ch88v.scala:16:68 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m = message.replaceAllIn(vowels,\
    \ vowels.toChar).replaceAllIn(\e[31m\"aeiou\"\e[0m, \e[31m\"A\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                             ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqq4ch88v.scala:23:145\
    \ --------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\e\
    [0m = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(\e\
    [31m\"A\"\e[0m, vowels.toChar)\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpqq4ch88v.scala:24:183 ----------------"
  stdout: ''
  timestamp: 1659793806
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val encodedMessage = messageArray.map { letter =>\n            val index\
    \ = letters.indexOf(letter)\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            val vowelIndex2 = vowels.indexOf(letter, index + 1)\n           \
    \ val vowelIndex3 = vowels.indexOf(letter, index + 2)\n            val vowelIndex4\
    \ = vowels.indexOf(letter, index + 3)\n            val vowelIndex5 = vowels.indexOf(letter,\
    \ index + 4)\n            val vowelIndex6 = vowels.indexOf(letter, index + 5)\n\
    \            val vowelIndex7 = vowels.indexOf(letter, index + 6)\n           \
    \ val vowelIndex8 = vowels.indexOf(letter, index + 7)\n            val vowelIndex9\
    \ = vowels.indexOf(letter, index + 8)\n            val vowelIndex10 = vowels.indexOf(letter,\
    \ index + 9)\n            val vowelIndex11 = vowels.indexOf(letter, index + 10)\n\
    \            val vowelIndex12 = vowels.indexOf(letter, index + 11)\n         \
    \   val vowelIndex13 = vowels.indexOf(letter, index + 12)\n            val vowelIndex14\
    \ = vowels.indexOf(letter, index + 13)\n            val vowelIndex15 = vowels.indexOf(letter,\
    \ index + 14)\n            val vowelIndex16 = vowels.indexOf(letter, index + 15)\n\
    \            val vowelIndex17 = vowels.indexOf(letter, index + 16)\n         \
    \   val vowelIndex18 = vowels.indexOf(letter, index + 17)\n            val vowelIndex19\
    \ = vowels.indexOf(letter, index + 18)\n            val vowelIndex20 = vowels.indexOf(letter,\
    \ index + 19)\n            val vowelIndex21 = vowels.indexOf(letter, index + 20)\n\
    \            val vowelIndex22 = vowels.indexOf(letter, index + 21)\n         \
    \   val vowelIndex23 = vowels.indexOf(letter, index + 22)\n            val vowelIndex24\
    \ = vowels.indexOf(letter, index + 23)\n            val vowelIndex25 = vowels.indexOf(letter,\
    \ index + 24)\n            val vowelIndex26 = vowels.indexOf(letter, index + 25)\n\
    \            val vowelIndex27 = vowels.indexOf(letter, index + 26)\n         \
    \   val vowelIndex28 = vowels.indexOf(letter, index + 27)\n            val vowelIndex29\
    \ = vowels.indexOf(letter, index + 28)\n            val vowelIndex30 = vowels.indexOf(letter,\
    \ index + 29)\n            val vowelIndex31 = vowels.indexOf(letter, index + 30)\n\
    \            val vowelIndex32 = vowels.indexOf(letter, index + 31)\n         \
    \   val vowelIndex33 = vowels.indexOf(letter, index + 32)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprnaotr35.scala:64:0 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprnaotr35.scala:63:1\
    \ ---------------------\e[0m\e[0m\n\e[31m63 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmprnaotr35.scala:55:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m55 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            letter match {\n                case 'a' => alphabet(0)\n \
    \               case 'b' => alphabet(1)\n                case 'c' => alphabet(2)\n\
    \                case 'd' => alphabet(3)\n                case 'e' => alphabet(4)\n\
    \                case 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n\
    \                case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n\
    \                case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n\
    \                case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage = messageArray.map(letter =>\
    \ \n            letter match {\n                case 'a' => vowels(0)\n      \
    \          case 'b' => vowels(1)\n                case 'c' => vowels(2)\n    \
    \            case 'd' => vowels(3)\n                case 'e' => vowels(4)\n  \
    \              case 'f' => vowels(5)\n                case 'g' => vowels(6)\n\
    \                case 'h' => vowels(7)\n                case 'i' => vowels(8)\n\
    \                case 'j' => vowels(9)\n                case 'k' => vowels(10)\n\
    \                case 'l' => vowels(11)\n                case 'm' => vowels(12)\n\
    \                case 'n' => vowels(13)\n                case 'o' => vowels(14)\n\
    \                case 'p' => vowels(15)\n                case 'q' => vowels(16)\n\
    \                case 'r' => vowels(17)\n                case 's' => vowels(18)\n\
    \                case 't' => vowels(19)\n                case 'u' => vowels(20)\n\
    \                case 'v' => vowels(21)\n                case 'w' => vowels(22)\n\
    \                case 'x' => vowels(23)\n                case 'y' => vowels(24)\n\
    \                case 'z' => vowels(25)\n                case letter => letter\n\
    \            }\n        ).mkString(\"\")\n        newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzv3ve7qs.scala:20:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m'a'\e[0m => alphabet(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpzv3ve7qs.scala:21:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m \e[31m'b'\e[0m => alphabet(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpzv3ve7qs.scala:22:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m \e[31m'c'\e[0m => alphabet(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpzv3ve7qs.scala:23:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m \e[31m'd'\e[0m => alphabet(\e\
    [31m3\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpzv3ve7qs.scala:24:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e[0m \e[31m'e'\e[0m => alphabet(\e\
    [31m4\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpzv3ve7qs.scala:25:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e[0m \e[31m'f'\e[0m => alphabet(\e\
    [31m5\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpzv3ve7qs.scala:26:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e[0m \e[31m'g'\e[0m => alphabet(\e\
    [31m6\e[0"
  stdout: ''
  timestamp: 1659793816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = mutable.StringBuilder()\n   \
    \     val messageArray = message.split(\"\")\n        val vowelArray = vowels.split(\"\
    \")\n        val vowelCounts = messageArray.map(x => vowelArray.indexOf(x))\n\
    \        val vowelCountMap = vowelCounts.toMap\n        val vowelCountArray =\
    \ vowelCounts.toArray\n        val vowelCountMapArray = vowelCountMap.toArray\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMapArray.length\n\
    \        val vowelCountMapArrayLength = vowelCountMapArray.length\n        val\
    \ vowelCountMapArrayLength = vowelCountMapArray.length\n        val vowelCountMapArrayLength\
    \ = vowelCountMapArray.length\n        val vowelCountMapArrayLength = vowelCountMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_xnpxt86.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCountMapArrayLength\e\
    [0m = vowelCountMapArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCountMapArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelCountMapArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_xnpxt86.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelCountMapArrayLength\e\
    [0m = vowelCountMapArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCountMapArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelCountMapArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_xnpxt86.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelCountMapArrayLength\e\
    [0m = vowelCountMapArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCountMapArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelCountMapArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_xnpxt86.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelCountMapArrayLength\e\
    [0m = vowelCountMapArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCountMapArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelCountMapArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m--"
  stdout: ''
  timestamp: 1659793812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageArray = message.toCharArray\n        val encodedMessage =\
    \ messageArray.map { c =>\n            val index = vowels.indexOf(c)\n       \
    \     if (index != -1) {\n                val vowelIndex = index + 1\n       \
    \         val vowel = vowels(vowelIndex)\n                vowels.contains(c) ?\
    \ vowel : c\n            } else {\n                c\n            }\n        }\n\
    \        new String(encodedMessage)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpos13eacy.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mindex\e[0m = vowels.indexOf(c)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m   value indexOf is not a member of scala.collection.mutable.Set[String]\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpos13eacy.scala:22:45 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                vowels.contains(c) ? vowel : \e[35mc\e\
    [0m\n\e[31m\e[31m   |\e[0m                                             ^\e[0m\n\
    \e[31m   |\e[0m                                             Not found: type c\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpos13eacy.scala:22:32\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                vowels.contains(c)\
    \ ? vowel : \e[35mc\e[0m\n\e[31m\e[31m   |\e[0m                              \
    \  ^\e[0m\n\e[31m   |\e[0m                                Found:    (c : Char)\n\
    \e[31m   |\e[0m                                Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.map(letter => {\n\
    \            val index = vowels.indexOf(letter)\n            if (index >= 0) {\n\
    \                val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowels.indexOf(vowel, vowelIndex) + letter\n            } else\
    \ {\n                letter\n            }\n        }).mkString(\"\")\n      \
    \  newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp042f7_zw.scala:30)\n\tat Problem.main(tmp042f7_zw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793814
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        val result = new StringBuilder\n        var i\
    \ = 0\n        while (i < messageArray.length) {\n            val currentChar\
    \ = messageArray(i)\n            if (vowels(i) == currentChar) {\n           \
    \     val nextChar = messageArray(i + 1)\n                if (vowels(i + 1) ==\
    \ nextChar) {\n                    result.append(vowels(i))\n                \
    \    i += 1\n                } else {\n                    result.append(vowels(i))\n\
    \                    i += 1\n                }\n            } else {\n       \
    \         result.append(currentChar)\n                i += 1\n            }\n\
    \        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe2wrpqf8.scala:38)\n\tat Problem.main(tmpe2wrpqf8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(x => alphabet(alphabet.indexOf(x) + 1))\n        val newVowels =\
    \ vowels.map(x => alphabet(alphabet.indexOf(x) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ubh1ter.scala:19:37\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        newMessage.zip(newVowels).map(\e\
    [36mx\e[0m => x._1 + x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Int]\n\e[31m   |\e[0m       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.map(letter => {\n\
    \            val index = vowels.indexOf(letter)\n            if (index != -1)\
    \ vowels(index - 1) else letter\n        }).mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newVowels = vowels.map(letter => {\n \
    \           val index = newMessageList.indexOf(letter)\n            if (index\
    \ != -1) newMessageList(index - 1) else letter\n        }).mkString(\"\")\n  \
    \      newVowels + newMessageList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0iunp_57.scala:23:47\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e\
    [36mindex\e[0m = newMessageList.indexOf(letter)\n\e[31m\e[31m   |\e[0m       \
    \                                        ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                       Found:    (letter : Char)\n\e[31m   |\e\
    [0m                                               Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.replaceAllIn(vowels, vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.replaceAllIn(vowels, vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.replaceAllIn(vowels, vowels.charAt(2))\n\
    \        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore = messageWithVowelsAndTwoLettersAfter.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe4dqn9tg.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe4dqn9tg.scala:16:40\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmessageWithVowels\e[0m = message.replaceAllIn(vowels, vowels.charAt(\e[31m2\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue replaceAllIn is not a member of String - did you mean\
    \ message.replaceAll?\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe4dqn9tg.scala:23:145\
    \ --------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\e\
    [0m = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpe4dqn9tg.scala:24:164 --------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\e\
    [0m = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \       "
  stdout: ''
  timestamp: 1659793813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val vowelsMap = Map(vowels -> letters.indexOf(\"\
    a\"))\n        val lettersMap = Map(letters -> letters.indexOf(\"a\"))\n     \
    \   val messageList = message.split(\"\")\n        val newMessage = messageList.map(letter\
    \ => {\n            val vowelIndex = vowelsMap(letter)\n            val letterIndex\
    \ = lettersMap(letter)\n            if (vowelIndex != letterIndex) {\n       \
    \         letter\n            } else {\n                letters.charAt(letterIndex\
    \ + 2)\n            }\n        }).mkString\n        newMessage\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: T\n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.$anonfun$1(tmpw3e2e96b.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.encode(tmpw3e2e96b.scala:28)\n\
    \tat Problem$.main(tmpw3e2e96b.scala:32)\n\tat Problem.main(tmpw3e2e96b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.toLowerCase.map(letter => vowels.indexOf(letter) + 1).map(letter =>\
    \ vowels(letter))\n        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ 1).map(letter => vowels(letter))\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfter.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfter\
    \ = messageWithVowelsAndTwoLettersAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBeforeAndOneLetterAfterAndOneLetterBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpx79vcpv7.scala:25:11 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx79vcpv7.scala:26:5 ---------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val newMessageList = messageList.map(letter =>\
    \ {\n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowel.charAt(0) + letter.charAt(0)\n\
    \                vowel.charAt(0) = newLetter\n                letter\n       \
    \     } else {\n                letter\n            }\n        })\n        newMessageList.toString.toUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp33wthtel.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m) + letter.charAt(\e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        value charAt is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp33wthtel.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                vowel.charAt(\e[31m0\e[0m) = newLetter\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          value charAt is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659793815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \ \")\n        val newMessage = messageList.map(x => x.toLowerCase).map(x => x.toUpperCase).map(x\
    \ => x.replaceAll(vowels,alphabet(alphabet.indexOf(x) + 2)))\n        newMessage.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0wf31ph9.scala:18:107\
    \ -------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e\
    [0m = messageList.map(\e[36mx\e[0m => x.toLowerCase).map(\e[36mx\e[0m => x.toUpperCase).map(\e\
    [36mx\e[0m => x.replaceAll(vowels,alphabet(alphabet.indexOf(x) + \e[31m2\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                         Found:    (vowels : List[Char])\n\e\
    [31m   |\e[0m                                         Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0wf31ph9.scala:18:122 -------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = messageList.map(\e\
    [36mx\e[0m => x.toLowerCase).map(\e[36mx\e[0m => x.toUpperCase).map(\e[36mx\e\
    [0m => x.replaceAll(vowels,alphabet(alphabet.indexOf(x) + \e[31m2\e[0m)))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val nextVowel = vowels(index + 1)\n              \
    \  val nextIndex = vowels.indexOf(nextVowel)\n                if (nextIndex !=\
    \ -1) {\n                    val nextLetter = vowels(nextIndex + 1)\n        \
    \            val nextIndex2 = vowels.indexOf(nextLetter)\n                   \
    \ if (nextIndex2 != -1) {\n                        val nextLetter2 = vowels(nextIndex2\
    \ + 1)\n                        val nextIndex3 = vowels.indexOf(nextLetter2)\n\
    \                        if (nextIndex3 != -1) {\n                           \
    \ val nextLetter3 = vowels(nextIndex3 + 1)\n                            val nextIndex4\
    \ = vowels.indexOf(nextLetter3)\n                            if (nextIndex4 !=\
    \ -1) {\n                                val nextLetter4 = vowels(nextIndex4 +\
    \ 1)\n                                val nextIndex5 = vowels.indexOf(nextLetter4)\n\
    \                                if (nextIndex5 != -1) {\n                   \
    \                 val nextLetter5 = vowels(nextIndex5 + 1)\n                 \
    \                   val nextIndex6 = vowels.indexOf(nextLetter5)\n           \
    \                         if (nextIndex6 != -1) {\n                          \
    \              val nextLetter6 = vowels(nextIndex6 + 1)\n                    \
    \                    val nextIndex7 = vowels.indexOf(nextLetter6)\n          \
    \                              if (nextIndex7 != -1) {\n                     \
    \                       val nextLetter7 = vowels(nextIndex7 + 1)\n           \
    \                                 val nextIndex8 = vowels.indexOf(nextLetter7)\n\
    \                                            if (nextIndex8 != -1) {\n       \
    \                                         val nextLetter8 = vowels(nextIndex8\
    \ + 1)\n                                                val nextIndex9 = vowels.indexOf(nextLetter8)\n\
    \                                                if (nextIndex9 != -1) {\n   \
    \                                                 val nextLetter9 = vowels(nextIndex9\
    \ + 1)\n                                                    val nextIndex10 =\
    \ vowels.indexOf(nextLetter9)\n                                              \
    \      if (nextIndex10 != -1) {\n                                            \
    \            val nextLetter10 = vowels(nextIndex10 + 1)\n                    \
    \                                    val nextIndex11 = vowels.indexOf(nextLetter10)\n\
    \                                                        if (nextIndex11 != -1)\
    \ {\n                                                            val nextLetter11\
    \ = vowels(nextIndex11 + 1)\n                                                \
    \            val nextIndex12 = vowels.indexOf(nextLetter11)\n                \
    \                                            if (nextIndex12 != -1) {\n      \
    \                                                          val nextLetter12 =\
    \ vowels(nextIndex12 + 1)\n                                                  \
    \              val nextIndex13 = vowels.indexOf(nextLetter12)\n              \
    \                                                  if (nextIndex13 != -1) {\n\
    \                                                                    val nextLetter13\
    \ = vowels(nextIndex13 + 1)\n                                                \
    \                    val nextIndex14 = vowels.indexOf(nextLetter13)\n        \
    \                                                            if (nextIndex14 !=\
    \ -1) {\n                                                                    \
    \    val nextLetter14 = vowels(nextIndex14 + 1)\n                            \
    \                                            \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf6f8al0a.scala:74:0 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf6f8al0a.scala:73:1\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpf6f8al0a.scala:65:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m65 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659793815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val letters = Set(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val messageArray\
    \ = message.toCharArray\n        val newMessage = new StringBuilder\n        var\
    \ i = 0\n        while (i < messageArray.length) {\n            val currentChar\
    \ = messageArray(i)\n            if (vowels.contains(currentChar)) {\n       \
    \         val nextChar = messageArray(i + 1)\n                if (vowels.contains(nextChar))\
    \ {\n                    newMessage.append(letters.find(letter => letter == nextChar).orElse(currentChar))\n\
    \                    i += 1\n                }\n                else {\n     \
    \               newMessage.append(currentChar)\n                    i += 1\n \
    \               }\n            }\n            else {\n                newMessage.append(currentChar)\n\
    \                i += 1\n            }\n        }\n        newMessage.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppdzpcf7m.scala:22:32\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (vowels.contains(currentChar))\
    \ {\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                Found:    (currentChar : Char)\n\e\
    [31m   |\e[0m                                Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppdzpcf7m.scala:24:36 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m (vowels.contains(nextChar))\
    \ {\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    Found:    (nextChar : Char)\n\
    \e[31m   |\e[0m                                    Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmppdzpcf7m.scala:25:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    newMessage.append(letters.find(\e\
    [36mletter\e[0m => letter == nextChar).orElse(currentChar))\n\e[31m\e[31m   |\e\
    [0m                                                             ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppdzpcf7m.scala:25:88\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    newMessage.append(letters.find(\e\
    [36mletter\e[0m => letter == nextChar).orElse(currentChar))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \             Found:    (currentChar : Char)\n\e[31m   |\e[0m                \
    \                          Required: Option[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val newMessage = mutable.StringBuilder()\n       \
    \ var i = 0\n        while (i < messageLength) {\n            val letter = message.charAt(i)\n\
    \            val nextLetter = message.charAt(i + 1)\n            if (vowels.contains(letter))\
    \ {\n                val index = vowels.indexOf(letter)\n                val nextIndex\
    \ = vowels.indexOf(nextLetter)\n                if (index != nextIndex) {\n  \
    \                  newMessage.append(vowels(index))\n                    newMessage.append(vowels(nextIndex))\n\
    \                } else {\n                    newMessage.append(letter)\n   \
    \             }\n            } else {\n                newMessage.append(letter)\n\
    \            }\n            i += 1\n        }\n        newMessage.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi9yka18o.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val nextVowel = vowels(index + 1)\n              \
    \  val nextVowelIndex = vowels.indexOf(nextVowel)\n                if (nextVowelIndex\
    \ != -1) {\n                    val nextVowelIndex = nextVowelIndex + 1\n    \
    \                vowels(index) = vowels(nextVowelIndex)\n                    vowels(nextVowelIndex)\
    \ = letter\n                } else {\n                    vowels(index) = letter\n\
    \                }\n            } else {\n                vowels(0) = letter\n\
    \            }\n        })\n        newMessageArray.toString.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbu5d4rzu.scala:23:41 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mval\e[0m \e[36mnextVowelIndex\e\
    [0m = nextVowelIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \                      ^\e[0m\n\e[31m   |\e[0m                               Recursive\
    \ \e[33mvalue\e[0m \e[35mnextVowelIndex\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbu5d4rzu.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    vowels(index) = vowels(nextVowelIndex)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \            value update is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpbu5d4rzu.scala:25:20 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m                    vowels(nextVowelIndex) = letter\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ value update is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbu5d4rzu.scala:27:20 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m                    vowels(index) = letter\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    value update is not\
    \ a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbu5d4rzu.scala:30:16\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                vowels(\e\
    [31m0\e[0m) = letter\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value update is not a member of String\n\e[31m\e[31m--\
    \ Error: /tmp/tmpbu5d4rzu.scala:32:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m          where:    B is a type variable\n6 errors found\n"
  stdout: ''
  timestamp: 1659793815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = mutable.StringBuilder(messageLength)\n\
    \        val vowelIndex = new mutable.HashMap[String, Int]()\n        vowelIndex.put(\"\
    a\", 0)\n        vowelIndex.put(\"e\", 1)\n        vowelIndex.put(\"i\", 2)\n\
    \        vowelIndex.put(\"o\", 3)\n        vowelIndex.put(\"u\", 4)\n        vowelIndex.put(\"\
    A\", 0)\n        vowelIndex.put(\"E\", 1)\n        vowelIndex.put(\"I\", 2)\n\
    \        vowelIndex.put(\"O\", 3)\n        vowelIndex.put(\"U\", 4)\n        for(i\
    \ <- 0 until messageLength) {\n            val currentChar = message.charAt(i)\n\
    \            val currentCharIndex = vowelIndex.get(currentChar)\n            if(currentCharIndex\
    \ != -1) {\n                val vowelIndex = currentCharIndex\n              \
    \  val vowel = vowels(vowelIndex)\n                val nextCharIndex = vowelIndex\
    \ + 2\n                val nextChar = vowels(nextCharIndex)\n                val\
    \ nextCharIndex = vowelIndex + 3\n                val nextChar = vowels(nextCharIndex)\n\
    \                val nextCharIndex = vowelIndex + 4\n                val nextChar\
    \ = vowels(nextCharIndex)\n                val nextCharIndex = vowelIndex + 5\n\
    \                val nextChar = vowels(nextCharIndex)\n                val nextCharIndex\
    \ = vowelIndex + 6\n                val nextChar = vowels(nextCharIndex)\n   \
    \             val nextCharIndex = vowelIndex + 7\n                val nextChar\
    \ = vowels(nextCharIndex)\n                val nextCharIndex = vowelIndex + 8\n\
    \                val nextChar = vowels(nextCharIndex)\n                val nextCharIndex\
    \ = vowelIndex + 9\n                val nextChar = vowels(nextCharIndex)\n   \
    \             val nextCharIndex = vowelIndex + 10\n                val nextChar\
    \ = vowels(nextCharIndex)\n                val nextCharIndex = vowelIndex + 11\n\
    \                val nextChar = vowels(nextCharIndex)\n                val nextCharIndex\
    \ = vowelIndex + 12\n                val nextChar = vowels(nextCharIndex)\n  \
    \              val nextCharIndex = vowelIndex + 13\n                val nextChar\
    \ = vowels(nextCharIndex)\n                val nextCharIndex = vowelIndex + 14\n\
    \                val nextChar = vowels(nextCharIndex)\n                val nextCharIndex\
    \ = vowelIndex + 15\n                val nextChar = vowels(nextCharIndex)\n  \
    \              val nextCharIndex = vowelIndex + 16\n                val nextChar\
    \ = vowels(nextCharIndex)\n\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpacs71fek.scala:76:0 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpacs71fek.scala:17:29\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mencodedMessage\e[0m = mutable.StringBuilder(messageLength)\n\e[31m\e[31m \
    \  |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpacs71fek.scala:18:29 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelIndex\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpacs71fek.scala:38:20 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m                \e[33mval\e[0m \e[36mnextChar\e[0m = vowels(nextCharIndex)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnextChar is already defined as \e[33mvalue\e[0m \e[35mnextChar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpacs71fek.scala:40:20 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m                \e[33mval\e[0m \e[36mnextChar\e[0m = vowels(nextCharIndex)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnextChar is already defined as \e[33mvalue\e[0m \e[35mnextChar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpacs71fek.scala:42:20 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m                \e[33mva"
  stdout: ''
  timestamp: 1659793812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels\
    \ = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 -> x._2).mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp46528e7p.scala:22)\n\tat Problem.main(tmp46528e7p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map { letter =>\n\
    \            if (vowels.contains(letter)) {\n                val vowelIndex =\
    \ vowels.indexOf(letter)\n                val vowel2Index = vowels.indexOf(vowels.charAt(vowelIndex\
    \ + 1))\n                val newLetter = vowels.charAt(vowelIndex + 2)\n     \
    \           vowels.charAt(vowel2Index) = newLetter\n                newLetter\n\
    \            } else {\n                letter\n            }\n        }.mkString(\"\
    \")\n        newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoko4nbtj.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                vowels.charAt(vowel2Index) = newLetter\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           value update is not a member of Int => Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels\
    \ = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2).mkString\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpszfyz3h8.scala:22)\n\tat Problem.main(tmpszfyz3h8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793817
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel\n            } else {\n        \
    \        letter\n            }\n        })\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessageArray.map(letter => {\n        \
    \    val index = vowels.indexOf(letter)\n            if (index != -1) {\n    \
    \            val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowel\n            } else {\n                letter\n       \
    \     }\n        })\n        newMessageArray2.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu1ejw2im.scala:41)\n\tat Problem.main(tmpu1ejw2im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.zip(vowels).map\
    \ { case (letter, vowel) => vowel match {\n            case vowel => letter\n\
    \            case _ => vowel\n        }}\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcyuxj5ep.scala:18:35\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newMessage.zip(vowels).map\
    \ { \e[33mcase\e[0m (letter, vowel) => vowel \e[33mmatch\e[0m {\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Char]\n\e\
    [31m   |\e[0m        Required: String\n\e[31m19 |\e[0m            \e[33mcase\e\
    [0m vowel => letter\n\e[31m20 |\e[0m            \e[33mcase\e[0m _ => vowel\n\e\
    [31m21 |\e[0m        }}\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + letter)\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.map(letter => letter + letter)\n        val messageWithVowelsAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => letter + letter)\n     \
    \   val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter = messageWithVowelsAndTwoLettersBefore.map(letter\
    \ => letter + letter)\n        messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl0wm_ong.scala:18:50 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoLettersAfter\e\
    [0m = messageWithVowelsAndTwoLettersAfter.map(\e[36mletter\e[0m => letter + letter)\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m          Recursive \e[33mvalue\e[0m \e[35mmessageWithVowelsAndTwoLettersAfter\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793817
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(1)) + letters.indexOf(vowels.charAt(2)) + letters.indexOf(vowels.charAt(3))\
    \ + letters.indexOf(vowels.charAt(4)) + letters.indexOf(vowels.charAt(5)) + letters.indexOf(vowels.charAt(6))\
    \ + letters.indexOf(vowels.charAt(7)) + letters.indexOf(vowels.charAt(8)) + letters.indexOf(vowels.charAt(9))\
    \ + letters.indexOf(vowels.charAt(10)) + letters.indexOf(vowels.charAt(11)) +\
    \ letters.indexOf(vowels.charAt(12)) + letters.indexOf(vowels.charAt(13)) + letters.indexOf(vowels.charAt(14))\
    \ + letters.indexOf(vowels.charAt(15)))\n        newMessage.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 5\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.$anonfun$1(tmpax4r5hcv.scala:17)\n\tat Problem$.$anonfun$adapted$1(tmpax4r5hcv.scala:17)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encode(tmpax4r5hcv.scala:17)\n\
    \tat Problem$.main(tmpax4r5hcv.scala:21)\n\tat Problem.main(tmpax4r5hcv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = scala.collection.mutable.List(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\")\n\
    \        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => alphabet(alphabet.indexOf(vowels(1))\
    \ + 1)\n            case 1 => alphabet(alphabet.indexOf(vowels(0)) + 1)\n    \
    \        case _ => alphabet(alphabet.indexOf(vowels(0)) + 1)\n        })\n   \
    \     val messageWithVowelsAndVowelsBefore = messageWithVowels.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => alphabet(alphabet.indexOf(vowels(1))\
    \ + 1)\n            case 1 => alphabet(alphabet.indexOf(vowels(0)) + 1)\n    \
    \        case _ => alphabet(alphabet.indexOf(vowels(0)) + 1)\n        })\n   \
    \     val messageWithVowelsAndVowelsAfter = messageWithVowels.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => alphabet(alphabet.indexOf(vowels(1))\
    \ + 1)\n            case 1 => alphabet(alphabet.indexOf(vowels(0)) + 1)\n    \
    \        case _ => alphabet(alphabet.indexOf(vowels(0)) + 1)\n        })\n   \
    \     val messageWithVowelsAndVowelsBeforeAndAfter = messageWithVowelsAndVowelsBefore.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => alphabet(alphabet.indexOf(vowels(1)) + 1)\n            case 1 =>\
    \ alphabet(alphabet.indexOf(vowels(0)) + 1)\n            case _ => alphabet(alphabet.indexOf(vowels(0))\
    \ + 1)\n        })\n        val messageWithVowelsAndVowelsBeforeAndAfterAndVowelsAfter\
    \ = messageWithVowelsAndVowelsBeforeAndAfter.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => alphabet(alphabet.indexOf(vowels(1))\
    \ + 1)\n            case 1 => alphabet(alphabet.indexOf(vowels(0)) + 1)\n    \
    \        case _ => alphabet(alphabet.indexOf(vowels(0)) + 1)\n        })\n   \
    \     val messageWithVowelsAndVowelsBeforeAndAfterAndVowelsAfterAndV\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkkz_1orq.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkkz_1orq.scala:16:48\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36malphabet\e[0m = scala.collection.mutable.List(\e[31m\"a\"\e[0m,\e[31m\"b\"\
    \e[0m,\e[31m\"c\"\e[0m,\e[31m\"d\"\e[0m,\e[31m\"e\"\e[0m,\e[31m\"f\"\e[0m,\e[31m\"\
    g\"\e[0m,\e[31m\"h\"\e[0m,\e[31m\"i\"\e[0m,\e[31m\"j\"\e[0m,\e[31m\"k\"\e[0m,\e\
    [31m\"l\"\e[0m,\e[31m\"m\"\e[0m,\e[31m\"n\"\e[0m,\e[31m\"o\"\e[0m,\e[31m\"p\"\e\
    [0m,\e[31m\"q\"\e[0m,\e[31m\"r\"\e[0m,\e[31m\"s\"\e[0m,\e[31m\"t\"\e[0m,\e[31m\"\
    u\"\e[0m,\e[31m\"v\"\e[0m,\e[31m\"w\"\e[0m,\e[31m\"x\"\e[0m,\e[31m\"y\"\e[0m,\e\
    [31m\"z\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue List is not a member of scala.collection.mutable - did\
    \ you mean mutable.ListMap?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkkz_1orq.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => {\n            val index\
    \ = vowels.indexOf(letter)\n            if (index != -1) {\n                val\
    \ vowelIndex = vowels.indexOf(vowels(index + 1))\n                if (vowelIndex\
    \ != -1) {\n                    vowels(index) = vowels(vowelIndex + 1)\n     \
    \           }\n                else {\n                    vowels(index) = letter\n\
    \                }\n            }\n            else {\n                vowels(0)\
    \ = letter\n            }\n        }).mkString(\"\")\n        newMessage\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfrad0lpo.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    vowels(index) = vowels(vowelIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    value update is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpfrad0lpo.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    vowels(index) = letter\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    value update is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpfrad0lpo.scala:29:16 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m                vowels(\e[31m0\e[0m) = letter\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m                value update is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpfrad0lpo.scala:31:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        }).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No ClassTag available for B\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a type variable\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map { x =>\n\
    \            val index = alphabet.indexOf(x)\n            if (index != -1) alphabet(index)\
    \ else x\n        }.mkString(\"\")\n        val vowelsArray = vowels.map(x =>\
    \ alphabet.indexOf(x)).distinct\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val vowelsArrayIndexes = vowelsArray.zipWithIndex.map { case (v, i) =>\
    \ (v - i) % vowelsArrayLength }\n        val vowelsArrayIndexesLength = vowelsArrayIndexes.length\n\
    \        val vowelsArrayIndexesIndexes = vowelsArrayIndexes.zipWithIndex.map {\
    \ case (v, i) => (v - i) % vowelsArrayIndexesLength }\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArrayIndexesIndexesLength\
    \ = vowelsArrayIndexesIndexes.length\n        val vowelsArray\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpskxyhxsl.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpskxyhxsl.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsArrayIndexesIndexesLength\e[0m = vowelsArrayIndexesIndexes.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayIndexesIndexesLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsArrayIndexesIndexesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpskxyhxsl.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsArrayIndexesIndexesLength\e[0m = vowelsArrayIndexesIndexes.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayIndexesIndexesLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsArrayIndexesIndexesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpskxyhxsl.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsArrayIndexesIndexesLength\e[0m = vowelsArrayIndexesIndexes.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayIndexesIndexesLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsArrayIndexesIndexesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpskxyhxsl.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsArrayIndexesIndexesLength\e[0m = vowelsArrayIndexesIndexes.le"
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) {\n                val vowelIndex = index + 1\n                val newLetter\
    \ = vowels(vowelIndex)\n                println(s\"$letter -> $newLetter\")\n\
    \                newLetter\n            } else {\n                letter\n   \
    \         }\n        })\n        val newMessage = newMessageArray.toList\n   \
    \     val newMessageString = newMessage.toString\n        newMessageString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpagzvvyvg.scala:33)\n\tat Problem.main(tmpagzvvyvg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: 'E -> I

    '
  timestamp: 1659793825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageLength = message.length\n        val encodedMessage = mutable.StringBuilder(messageLength)\n\
    \        var i = 0\n        while (i < messageLength) {\n            val currentChar\
    \ = message.charAt(i)\n            val currentCharIndex = alphabet.indexOf(currentChar)\n\
    \            val nextCharIndex = currentCharIndex + 2\n            val nextChar\
    \ = alphabet.charAt(nextCharIndex)\n            encodedMessage.append(nextChar)\n\
    \            i += 1\n        }\n        encodedMessage.toString()\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3cdp_4uk.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mencodedMessage\e[0m = mutable.StringBuilder(messageLength)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => \n            if (vowels.contains(letter)) letter else \n               \
    \ if (alphabet.contains(letter)) alphabet(alphabet.indexOf(letter) + 1) else letter)\n\
    \        newMessage.toString.replaceAll(\"[aeiou]\", \"$0\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdgv5ruwt.scala:23)\n\tat Problem.main(tmpdgv5ruwt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val newMessage = mutable.StringBuilder()\n       \
    \ val newMessageLength = messageLength\n        val newMessageLength = messageLength\n\
    \        val newMessageLength = messageLength\n        val newMessageLength =\
    \ messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val newMessageLength = messageLength\n        val newMessageLength\
    \ = messageLength\n        val new\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe92kupfs.scala:78:12 ---------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe92kupfs.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewMessageLength\e[0m = messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageLength is already defined as \e[33mvalue\e[0m \e\
    [35mnewMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe92kupfs.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewMessageLength\e[0m =\
    \ messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageLength is already defined as \e[33mvalue\e[0m \e\
    [35mnewMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe92kupfs.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewMessageLength\e[0m =\
    \ messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageLength is already defined as \e[33mvalue\e[0m \e\
    [35mnewMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe92kupfs.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewMessageLength\e[0m =\
    \ messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageLength is already defined as \e[33mvalue\e[0m \e\
    [35mnewMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that ove"
  stdout: ''
  timestamp: 1659793778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.replaceAll(vowels, vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.replaceAll(\"([aeiou])([aeiou])\", \"$1$2\".charAt(2))\n\
    \        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter = messageWithVowelsAndTwoLettersBefore.replaceAll(\"\
    ([aeiou])([aeiou])([aeiou])\", \"$1$2$3\".charAt(2))\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter.replaceAll(\"([aeiou])([aeiou])([aeiou])([aeiou])\"\
    , \"$1$2$3$4\".charAt(2))\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore.replaceAll(\"\
    ([aeiou])([aeiou])([aeiou])([aeiou])([aeiou])\", \"$1$2$3$4$5\".charAt(2))\n \
    \       val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter.replaceAll(\"\
    ([aeiou])([aeiou])([aeiou])([aeiou])([aeiou])([aeiou])\", \"$1$2$3$4$5$6\".charAt(2))\n\
    \        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore.replaceAll(\"\
    ([aeiou])([aeiou])([aeiou])([aeiou])([aeiou])([aeiou])([aeiou])\", \"$1$2$3$4$5$6$7\"\
    .charAt(2))\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqbocyse6.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqbocyse6.scala:16:72 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m = message.replaceAll(vowels,\
    \ vowels.charAt(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \                                   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                                     Found:    Char\n\e[31m \
    \  |\e[0m                                                        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqbocyse6.scala:17:115\
    \ -------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoLettersBefore\e\
    [0m = messageWithVowels.replaceAll(\e[31m\"([aeiou])([aeiou])\"\e[0m, \e[31m\"\
    $1$2\"\e[0m.charAt(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \                       Found:    Char\n\e[31m   |\e[0m                      \
    \                                  Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpqbocyse6.scala:18:163 -------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter\e\
    [0m = messageWithVowelsAndTwoLettersBefore.replaceAll(\e[31m\"([aeiou])([aeiou])([aeiou])\"\
    \e[0m, \e[31m\"$1$2$3\"\e[0m.charAt(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                                                                    ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659793826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + 1)\n        newMessage.map(letter => letters.charAt(letter))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr2nj6fak.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newMessage.map(\e[36mletter\e\
    [0m => letters.charAt(letter))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Char]\n\e[31m   |\e[0m      \
    \  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) match {\n            case -1\
    \ => letter\n            case i => vowels(i + 2)\n        })\n        val messageWithVowelsAndVowelsTwoAhead\
    \ = (messageWithVowels zip vowels).map {\n            case (letter, vowel) =>\
    \ letter + vowel\n        }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAhead zip vowels).map {\n            case (letter,\
    \ vowel) => letter + vowel\n        }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead zip vowels).map {\n \
    \           case (letter, vowel) => letter + vowel\n        }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead zip\
    \ vowels).map {\n            case (letter, vowel) => letter + vowel\n        }\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ zip vowels).map {\n            case (letter, vowel) => letter + vowel\n    \
    \    }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsitra213.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsitra213.scala:32:118\
    \ --------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\e\
    [0m = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ zip vowels).map {\n\e[31m\e[31m   |\e[0m                                   \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsitra213.scala:35:135 -----------------------\e[0m\e[0m\n\e[31m35 |\e\
    [0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\e\
    [0m = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowel\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowel\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsitra213.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Re"
  stdout: ''
  timestamp: 1659793825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        val newMessage = mutable.StringBuilder()\n  \
    \      var i = 0\n        while (i < messageArray.length) {\n            val currentChar\
    \ = messageArray(i)\n            if (vowels(i) == currentChar) {\n           \
    \     newMessage.append(currentChar)\n            } else {\n                newMessage.append(vowels(i))\n\
    \                newMessage.append(vowels(i + 1))\n            }\n           \
    \ i += 1\n        }\n        newMessage.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmoegh_bb.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(letter\
    \ - 1) + letter\n                case 2 => vowels(letter - 1) + vowels(letter\
    \ - 1) + letter\n            }\n        )\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString\n        val newMessageStringArray\
    \ = newMessageString.split(\"\")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprh9f54_1.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprh9f54_1.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprh9f54_1.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprh9f54_1.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0"
  stdout: ''
  timestamp: 1659793828
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel\n            } else {\n        \
    \        letter\n            }\n        })\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        newMessageString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqe75b21o.scala:32)\n\tat Problem.main(tmpqe75b21o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793828
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = List(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\")\n\
    \        val messageList = message.split(\" \").toList\n        val encodedMessage\
    \ = messageList.foldLeft(\"\")( (acc, elem) => {\n            val letter = elem.toUpperCase\n\
    \            val vowelIndex = alphabet.indexOf(vowels)\n            val vowel2Index\
    \ = alphabet.indexOf(elem.toUpperCase)\n            val letterIndex = alphabet.indexOf(letter)\n\
    \            val letter2Index = alphabet.indexOf(elem.toUpperCase)\n         \
    \   val newLetter = if (letterIndex == vowelIndex) letter else elem.toUpperCase\n\
    \            val newLetter2 = if (letter2Index == vowel2Index) letter else elem.toUpperCase\n\
    \            acc + (if (letterIndex == vowelIndex) newLetter else newLetter2)\n\
    \        })\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsrc8ppi5.scala:31)\n\tat Problem.main(tmpsrc8ppi5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => alphabet.charAt(i)\n        })\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) match {\n \
    \           case -1 => letter\n            case i => alphabet.charAt(i)\n    \
    \    })\n        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => alphabet.charAt(i)\n\
    \        })\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp122non00.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp122non00.scala:32:118\
    \ --------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\e\
    [0m = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp122non00.scala:33:170 --------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\e\
    [0m = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp122non00.scala:35:5 ----------------"
  stdout: ''
  timestamp: 1659793826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(0)) + 1)\n        val newMessage2 = newMessage.map(letter\
    \ => letters.charAt(letter))\n        val newMessage3 = newMessage2.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0)) + 1)\n      \
    \  val newMessage4 = newMessage3.map(letter => letters.charAt(letter))\n     \
    \   val newMessage5 = newMessage4.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + 1)\n        val newMessage6 = newMessage5.map(letter => letters.charAt(letter))\n\
    \        val newMessage7 = newMessage6.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.charAt(0)) + 1)\n        val newMessage8 = newMessage7.map(letter\
    \ => letters.charAt(letter))\n        val newMessage9 = newMessage8.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0)) + 1)\n      \
    \  val newMessage10 = newMessage9.map(letter => letters.charAt(letter))\n    \
    \    val newMessage11 = newMessage10.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + 1)\n        val newMessage12 = newMessage11.map(letter => letters.charAt(letter))\n\
    \        val newMessage13 = newMessage12.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(0)) + 1)\n        val newMessage14 = newMessage13.map(letter\
    \ => letters.charAt(letter))\n        val newMessage15 = newMessage14.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0)) + 1)\n      \
    \  val newMessage16 = newMessage15.map(letter => letters.charAt(letter))\n   \
    \     val newMessage17 = newMessage16.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.charAt(0)) + 1)\n        val newMessage18 = newMessage17.map(letter\
    \ => letters.charAt(letter))\n        val newMessage19 = newMessage18.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0)) + 1)\n      \
    \  val newMessage20 = newMessage19.map(letter => letters.charAt(letter))\n   \
    \     val newMessage21 = newMessage20.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.charAt(0)) + 1)\n        val newMessage22 = newMessage21.map(letter\
    \ => letters.charAt(letter))\n        val newMessage23 = newMessage22.map(letter\
    \ => letters.\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphnu6diwm.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphnu6diwm.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793828
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(0)) + 1).map(letter => letters.charAt(letter))\n\
    \        val newMessageString = newMessage.toList.toString\n        newMessageString.toUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp9kuu_su.scala:22)\n\tat Problem.main(tmpp9kuu_su.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newMessage = newMessageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessage.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage2 = newMessageArray2.toList.mkString(\"\")\n  \
    \      val newMessage3 = newMessage2.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage4 = newMessage3.toList.mkString(\"\")\n       \
    \ val newMessage5 = newMessage4.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage6 = newMessage5.toList.mkString(\"\")\n       \
    \ val newMessage7 = newMessage6.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage8 = newMessage7.toList.mkString(\"\")\n       \
    \ val newMessage9 = newMessage8.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage10 = newMessage9.toList.mkString(\"\")\n      \
    \  val newMessage11 = newMessage10.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage12 = newMessage11.toList.mkString(\"\")\n     \
    \   val newMessage13 = newMessage12.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage14 = newMessage13.toList.mkString(\"\")\n     \
    \   val newMessage15 = newMessage14.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage16 = newMessage15.toList.mkString(\"\")\n     \
    \   val newMessage17 = newMessage16.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage18 = newMessage17.toList.mkString(\"\")\n     \
    \   val newMessage19 = newMessage18.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val newMessage20 = newMessage19.toList.mkString(\"\")\n     \
    \   val newMessage21 = newMessage20.split(\"\").map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpxyaaux69.scala:41:11 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxyaaux69.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val nextVowel = vowels(index + 1)\n              \
    \  val nextIndex = vowels.indexOf(nextVowel)\n                if (nextIndex !=\
    \ -1) {\n                    val nextVowelIndex = vowels.indexOf(nextVowel, index\
    \ + 1)\n                    if (nextVowelIndex != -1) {\n                    \
    \    val nextVowelIndex = vowels.indexOf(nextVowel, nextIndex + 1)\n         \
    \               if (nextVowelIndex != -1) {\n                            val nextVowelIndex\
    \ = vowels.indexOf(nextVowel, nextVowelIndex + 1)\n                          \
    \  if (nextVowelIndex != -1) {\n                                nextVowel\n  \
    \                          } else {\n                                letter\n\
    \                            }\n                        } else {\n           \
    \                 letter\n                        }\n                    } else\
    \ {\n                        letter\n                    }\n                }\
    \ else {\n                    letter\n                }\n            } else {\n\
    \                letter\n            }\n        }).mkString(\"\")\n        encodedMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe8q4p3un.scala:27:75 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                            \e[33mval\e[0m \e[36mnextVowelIndex\e\
    [0m = vowels.indexOf(nextVowel, nextVowelIndex + \e[31m1\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \       ^\e[0m\n\e[31m   |\e[0m                               Recursive \e[33mvalue\e\
    [0m \e[35mnextVowelIndex\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter)) + vowels(vowels.indexOf(letter)) + alphabet(alphabet.indexOf(letter)\
    \ + 1))\n        newMessage.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpqjqeuy3t.scala:17)\n\tat Problem$.$anonfun$adapted$1(tmpqjqeuy3t.scala:17)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encode(tmpqjqeuy3t.scala:17)\n\
    \tat Problem$.main(tmpqjqeuy3t.scala:21)\n\tat Problem.main(tmpqjqeuy3t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793831
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: -3\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.$anonfun$1(tmp99sne5jf.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.encode(tmp99sne5jf.scala:20)\n\
    \tat Problem$.main(tmp99sne5jf.scala:25)\n\tat Problem.main(tmp99sne5jf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.replaceAllIn(vowels, vowels.charAt(2))\n        val messageWithVowelsAndVowelsTwoAhead\
    \ = (messageWithVowels +: messageWithVowels.split(vowels.charAt(2))).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead = (messageWithVowelsAndVowelsTwoAhead\
    \ +: messageWithVowelsAndVowelsTwoAhead.split(vowels.charAt(2))).mkString\n  \
    \      val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead +: messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead.split(vowels.charAt(2))).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ +: messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwk50po7i.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwk50po7i.scala:16:40\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmessageWithVowels\e[0m = message.replaceAllIn(vowels, vowels.charAt(\e[31m2\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue replaceAllIn is not a member of String - did you mean\
    \ message.replaceAll?\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwk50po7i.scala:20:190\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\e\
    [0m = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ +: messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwk50po7i.scala:21:135 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\e\
    [0m = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \   ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val encodedMessage = messageArray.map(letter => {\n            val vowelIndex\
    \ = letters.indexOf(letter)\n            val vowel2Index = vowels.indexOf(letter)\n\
    \            val vowel2Index = if (vowelIndex == -1) letters.length else vowelIndex\
    \ + 2\n            val letterIndex = letters.indexOf(letter)\n            val\
    \ letter2Index = letters.indexOf(letter)\n            val letter2Index = if (letterIndex\
    \ == -1) letters.length else letterIndex + 2\n            val letter2Index = if\
    \ (letter2Index == -1) letters.length else letter2Index + 2\n            val letter2Index\
    \ = if (letter2Index == -1) letters.length else letter2Index + 2\n           \
    \ val letter2Index = if (letter2Index == -1) letters.length else letter2Index\
    \ + 2\n            val letter2Index = if (letter2Index == -1) letters.length else\
    \ letter2Index + 2\n            val letter2Index = if (letter2Index == -1) letters.length\
    \ else letter2Index + 2\n            val letter2Index = if (letter2Index == -1)\
    \ letters.length else letter2Index + 2\n            val letter2Index = if (letter2Index\
    \ == -1) letters.length else letter2Index + 2\n            val letter2Index =\
    \ if (letter2Index == -1) letters.length else letter2Index + 2\n            val\
    \ letter2Index = if (letter2Index == -1) letters.length else letter2Index + 2\n\
    \            val letter2Index = if (letter2Index == -1) letters.length else letter2Index\
    \ + 2\n            val letter2Index = if (letter2Index == -1) letters.length else\
    \ letter2Index + 2\n            val letter2Index = if (letter2Index == -1) letters.length\
    \ else letter2Index + 2\n            val letter2Index = if (letter2Index == -1)\
    \ letters.length else letter2Index + 2\n            val letter2Index = if (letter2Index\
    \ == -1) letters.length else letter2Index + 2\n            val letter2Index =\
    \ if (letter2Index == -1) letters.length else letter2Index + 2\n            val\
    \ letter2Index = if (letter2Index == -1) letters.length else letter2Index + 2\n\
    \            val letter2Index = if (letter2Index == -1) letters.length else letter2Index\
    \ + 2\n            val letter2Index = if (letter2Index == -1) letters.length else\
    \ letter2Index + 2\n            val letter2Index = if (letter2Index == -1) letters.length\
    \ else letter2Index + 2\n            val letter2Index = if (\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpepydqpv6.scala:44:35 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m            \e[33mval\e[0m \e[36mletter2Index\e[0m =\
    \ \e[33mif\e[0m (\n\e[31m\e[31m   |\e[0m                                   ^\e\
    [0m\n\e[31m   |\e[0m                                   expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpepydqpv6.scala:46:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m46 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpepydqpv6.scala:55:0 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpepydqpv6.scala:21:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mvowel2Index\e[0m = \e[33mif\e[0m (vowelIndex == -\e[31m1\e[0m) letters.length\
    \ \e[33melse\e[0m vowelIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowel2Index is already defined as \e[33mvalue\e[0m \e[35mvowel2Index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpepydqpv6.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mletter2Index\e[0m = \e[33mif\e[0m\
    \ (letterIndex == -\e[31m1\e[0m) letters.length \e[33melse\e[0m letterIndex +\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mletter2Index is already defined as \e[33mvalue\e[0m \e[35mletter2Index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpepydqpv6."
  stdout: ''
  timestamp: 1659793832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.foldLeft(\"\
    \") { (result, currentChar) =>\n            val vowelIndex = vowels.indexOf(currentChar)\n\
    \            if (vowelIndex != -1) {\n                val vowel = vowels(vowelIndex)\n\
    \                val vowelIndex = vowels.indexOf(vowel)\n                val vowelIndex\
    \ = vowelIndex + 2\n                val letter = vowels(vowelIndex)\n        \
    \        result + letter\n            } else {\n                result + currentChar\n\
    \            }\n        }\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc6ysx897.scala:22:20 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowelIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpc6ysx897.scala:21:48 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m                                        Recursive \e[33mvalue\e[0m\
    \ \e[35mvowel\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val nextLetter = vowels(index + 1)\n             \
    \   val newLetter = if (letter != nextLetter) letter else nextLetter\n       \
    \         nextLetter -> newLetter\n            } else {\n                letter\
    \ -> letter\n            }\n        })\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        newMessageArray.toList.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpn3805ez1.scala:21:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ \e[33mif\e[0m (letter != nextLetter) letter \e[33melse\e[0m nextLetter\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types String and Char cannot be compared with ==\
    \ or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659793832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.replaceAllIn(vowels, vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.replaceAllIn(vowels, vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.replaceAllIn(vowels, vowels.charAt(2))\n\
    \        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore = messageWithVowelsAndTwoLettersAfter.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe4dqn9tg.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe4dqn9tg.scala:16:40\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmessageWithVowels\e[0m = message.replaceAllIn(vowels, vowels.charAt(\e[31m2\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue replaceAllIn is not a member of String - did you mean\
    \ message.replaceAll?\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe4dqn9tg.scala:23:145\
    \ --------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\e\
    [0m = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpe4dqn9tg.scala:24:164 --------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\e\
    [0m = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAllIn(vowels,\
    \ vowels.charAt(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \       "
  stdout: ''
  timestamp: 1659793813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','i','o','u')\n        val newMessage = message\n\
    \        val newMessageList = newMessage.split(\"\")\n        val newMessageList2\
    \ = newMessageList.map(x => alphabet(alphabet.indexOf(x) + 1))\n        val newMessageList3\
    \ = newMessageList2.map(x => vowels(vowels.indexOf(x) + 1))\n        newMessageList3.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ne0z4my.scala:24)\n\tat Problem.main(tmp_ne0z4my.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + letter)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + letter)\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        messageWithVowelsReversedWithVowelsReplacedReversed.mkString(\"\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxqp76gs.scala:23)\n\tat Problem.main(tmpgxqp76gs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map { x =>\n\
    \            val index = vowels.indexOf(x)\n            if (index != -1) {\n \
    \               val vowel = vowels(index)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val nextVowel = vowels(vowelIndex + 1)\n                val nextVowelIndex\
    \ = vowels.indexOf(nextVowel)\n                val nextVowelIndex = if (nextVowelIndex\
    \ == -1) vowels.length else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) vowels.length\
    \ else nextVowelIndex\n                val nextVow\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyl0l1uwl.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyl0l1uwl.scala:56:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m56 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyl0l1uwl.scala:24:20 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m                \e[33mval\e[0m \e[36mnextVowelIndex\e[0m = \e[33mif\e\
    [0m (nextVowelIndex == -\e[31m1\e[0m) vowels.length \e[33melse\e[0m nextVowelIndex\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextVowelIndex is already defined as \e[33mvalue\e[0m \e[35mnextVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyl0l1uwl.scala:25:20 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m                \e[33mval\e[0m \e[36mnextVowel\e[0m = vowels(nextVowelIndex)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextVowel is already defined as \e[33mvalue\e[0m \e[35mnextVowel\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyl0l1uwl.scala:26:20 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m                \e[33mval\e[0m \e[36mnextVowelIndex\e[0m = \e[33mif\e\
    [0m (nextVowelIndex == -\e[31m1\e[0m) vowels.length \e[33melse\e[0m nextVowelIndex\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextVowelIndex is already defined as \e[33mvalue\e[0m \e[35mnextVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyl0l1uwl.scala:27:"
  stdout: ''
  timestamp: 1659793836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','a','i','o','u')\n        val newMessage = message\n\
    \        val newMessageList = newMessage.split(\"\")\n        val newMessageList2\
    \ = newMessageList.map(x => alphabet(alphabet.indexOf(x) + 1))\n        val newMessageList3\
    \ = newMessageList2.map(x => vowels(vowels.indexOf(x) + 1))\n        val newMessageList4\
    \ = newMessageList3.map(x => alphabet(alphabet.indexOf(x) + 1))\n        val newMessageList5\
    \ = newMessageList4.map(x => vowels(vowels.indexOf(x) + 1))\n        newMessageList5.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdhj9_6d2.scala:26)\n\tat Problem.main(tmpdhj9_6d2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowels.indexOf(vowel, vowelIndex) + 1\n\
    \            } else {\n                vowels.indexOf(letter) + 1\n          \
    \  }\n        }).foldLeft(\"\")(_ + _)\n        encodedMessage\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl4g7032r.scala:30)\n\tat Problem.main(tmpl4g7032r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val messageArray = message.toCharArray\n\
    \        val newMessageArray = Array.ofDim[Char](messageArray.length)\n      \
    \  var i = 0\n        while (i < messageArray.length) {\n            val currentChar\
    \ = messageArray(i)\n            if (vowels.contains(currentChar)) {\n       \
    \         val nextChar = messageArray(i + 1)\n                if (vowels.contains(nextChar))\
    \ {\n                    newMessageArray(i) = vowels(0) + vowels(1)\n        \
    \            newMessageArray(i + 1) = vowels(0)\n                    i += 2\n\
    \                } else {\n                    newMessageArray(i) = vowels(0)\n\
    \                    newMessageArray(i + 1) = vowels(0)\n                    i\
    \ += 1\n                }\n            } else {\n                newMessageArray(i)\
    \ = currentChar\n                i += 1\n            }\n        }\n        new\
    \ String(newMessageArray)\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp35jqx6vq.scala:24:41\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    newMessageArray(i)\
    \ = vowels(\e[31m0\e[0m) + vowels(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                  ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                         Found:    Int\n\e[31m   |\e[0m     \
    \                                    Required: Char\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.toLowerCase.map(letter => vowels.indexOf(letter) match {\n       \
    \     case -1 => letter\n            case 0 => letter\n            case 1 => vowels(letter\
    \ - 2)\n            case 2 => vowels(letter - 3)\n            case 3 => vowels(letter\
    \ - 4)\n            case 4 => vowels(letter - 5)\n            case 5 => vowels(letter\
    \ - 6)\n            case 6 => vowels(letter - 7)\n            case 7 => vowels(letter\
    \ - 8)\n            case 8 => vowels(letter - 9)\n            case 9 => vowels(letter\
    \ - 10)\n            case 10 => vowels(letter - 11)\n            case 11 => vowels(letter\
    \ - 12)\n            case 12 => vowels(letter - 13)\n            case 13 => vowels(letter\
    \ - 14)\n            case 14 => vowels(letter - 15)\n            case 15 => vowels(letter\
    \ - 16)\n            case 16 => vowels(letter - 17)\n            case 17 => vowels(letter\
    \ - 18)\n            case 18 => vowels(letter - 19)\n            case 19 => vowels(letter\
    \ - 20)\n            case 20 => vowels(letter - 21)\n            case 21 => vowels(letter\
    \ - 22)\n            case 22 => vowels(letter - 23)\n            case 23 => vowels(letter\
    \ - 24)\n            case 24 => vowels(letter - 25)\n            case 25 => vowels(letter\
    \ - 26)\n            case 26 => vowels(letter - 27)\n            case 27 => vowels(letter\
    \ - 28)\n            case 28 => vowels(letter - 29)\n            case 29 => vowels(letter\
    \ - 30)\n            case 30 => vowels(letter - 31)\n            case 31 => vowels(letter\
    \ - 32)\n            case 32 => vowels(letter - 33)\n            case 33 => vowels(letter\
    \ - 34)\n            case 34 => vowels(letter - 35)\n            case 35 => vowels(letter\
    \ - 36)\n            case 36 => vowels(letter - 37)\n            case 37 => vowels(letter\
    \ - 38)\n            case 38 => vowels(letter - 39)\n            case 39 => vowels(letter\
    \ - 40)\n            case 40 => vowels(letter - 41)\n            case 41 => vowels(letter\
    \ - 42)\n            case 42 => vowels(letter - 43)\n            case 43 => vowels(letter\
    \ - 44)\n            case 44 => vowels(letter - 45)\n            case 45 => vowels(letter\
    \ - 46)\n            case 46 => vowels(letter - 47)\n            case 47 => vowels(letter\
    \ - 48)\n            case 48 => vowels(letter - 49)\n            case 49 => vowels(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1efa8yi9.scala:67:30 ---------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m            \e[33mcase\e[0m \e[31m49\e[0m => vowels(\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1efa8yi9.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp1efa8yi9.scala:78:0 ----------------------------\e[0m\e[0m\n\e[31m78\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1efa8yi9.scala:77:1 ---------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','a','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowelsMap = vowels.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val newVowelsMap2 = vowels.zipWithIndex.map(x => (x._1,\
    \ x._2))\n        val newVowelsMap3 = vowels.zipWithIndex.map(x => (x._1, x._2))\n\
    \        val newVowelsMap4 = vowels.zipWithIndex.map(x => (x._1, x._2))\n    \
    \    val newVowelsMap5 = vowels.zipWithIndex.map(x => (x._1, x._2))\n        val\
    \ newVowelsMap6 = vowels.zipWithIndex.map(x => (x._1, x._2))\n        val newVowelsMap7\
    \ = vowels.zipWithIndex.map(x => (x._1, x._2))\n        val newVowelsMap8 = vowels.zipWithIndex.map(x\
    \ => (x._1, x._2))\n        val newVowelsMap9 = vowels.zipWithIndex.map(x => (x._1,\
    \ x._2))\n        val newVowelsMap10 = vowels.zipWithIndex.map(x => (x._1, x._2))\n\
    \        val newVowelsMap11 = vowels.zipWithIndex.map(x => (x._1, x._2))\n   \
    \     val newVowelsMap12 = vowels.zipWithIndex.map(x => (x._1, x._2))\n      \
    \  val newVowelsMap13 = vowels.zipWithIndex.map(x => (x._1, x._2))\n        val\
    \ newVowelsMap14 = vowels.zipWithIndex.map(x => (x._1, x._2))\n        val newVowelsMap15\
    \ = vowels.zipWithIndex.map(x => (x._1, x._2))\n        val newVowelsMap16 = vowels.zipWithIndex.map(x\
    \ => (x._\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmvqfbedb.scala:34:61 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnewVowelsMap16\e[0m = vowels.zipWithIndex.map(\e\
    [36mx\e[0m => (x._\n\e[31m\e[31m   |\e[0m                                    \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \       an identifier expected, but '_' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpmvqfbedb.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            letter match {\n                case 'a' => alphabet(0)\n \
    \               case 'b' => alphabet(1)\n                case 'c' => alphabet(2)\n\
    \                case 'd' => alphabet(3)\n                case 'e' => alphabet(4)\n\
    \                case 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n\
    \                case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n\
    \                case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n\
    \                case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case _ => letter\n\
    \            }\n        )\n        val newMessage = messageArray.map(letter =>\
    \ \n            letter match {\n                case 'a' => vowels(0)\n      \
    \          case 'b' => vowels(1)\n                case 'c' => vowels(2)\n    \
    \            case 'd' => vowels(3)\n                case 'e' => vowels(4)\n  \
    \              case 'f' => vowels(5)\n                case 'g' => vowels(6)\n\
    \                case 'h' => vowels(7)\n                case 'i' => vowels(8)\n\
    \                case 'j' => vowels(9)\n                case 'k' => vowels(10)\n\
    \                case 'l' => vowels(11)\n                case 'm' => vowels(12)\n\
    \                case 'n' => vowels(13)\n                case 'o' => vowels(14)\n\
    \                case 'p' => vowels(15)\n                case 'q' => vowels(16)\n\
    \                case 'r' => vowels(17)\n                case 's' => vowels(18)\n\
    \                case 't' => vowels(19)\n                case 'u' => vowels(20)\n\
    \                case 'v' => vowels(21)\n                case 'w' => vowels(22)\n\
    \                case 'x' => vowels(23)\n                case 'y' => vowels(24)\n\
    \                case 'z' => vowels(25)\n                case _ => letter\n  \
    \          }\n        ).mkString(\"\")\n        val newMessageArray2 = newMessageArray.map(letter\
    \ => \n            \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxh35t2c6.scala:80:60 ---------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArray2\e[0m =\
    \ newMessageArray.map(\e[36mletter\e[0m => \n\e[31m\e[31m   |\e[0m           \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpxh35t2c6.scala:20:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m'a'\e[0m => alphabet(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpxh35t2c6.scala:21:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m \e[31m'b'\e[0m => alphabet(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpxh35t2c6.scala:22:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m \e[31m'c'\e[0m => alphabet(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpxh35t2c6.scala:23:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m \e[31m'd'\e[0m => alphabet(\e\
    [31m3\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpxh35t2c6.scala:24:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e[0m \e[31m'e'\e[0m => alphabet(\e\
    [31m4\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: "
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter))\n        val newMessage2\
    \ = newMessage.map(letter => alphabet.indexOf(letter) + 2)\n        val newMessage3\
    \ = newMessage2.map(letter => alphabet.indexOf(letter) + 1)\n        newMessage3.map(letter\
    \ => alphabet.indexOf(letter))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxgzic4au.scala:20:23\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        newMessage3.map(\e[36mletter\e\
    [0m => alphabet.indexOf(letter))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Int]\n\e[31m   |\e[0m       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(0)) + 1)\n        val newMessage2 = newMessage.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(1)) + 1)\n      \
    \  val newMessage3 = newMessage2.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(2))\
    \ + 1)\n        val newMessage4 = newMessage3.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(3)) + 1)\n        val newMessage5 = newMessage4.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(4)) + 1)\n      \
    \  val newMessage6 = newMessage5.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(5))\
    \ + 1)\n        val newMessage7 = newMessage6.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(6)) + 1)\n        val newMessage8 = newMessage7.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(7)) + 1)\n      \
    \  val newMessage9 = newMessage8.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(8))\
    \ + 1)\n        val newMessage10 = newMessage9.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(9)) + 1)\n        val newMessage11 = newMessage10.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(10)) + 1)\n     \
    \   val newMessage12 = newMessage11.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(11))\
    \ + 1)\n        val newMessage13 = newMessage12.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(12)) + 1)\n        val newMessage14 = newMessage13.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(13)) + 1)\n     \
    \   val newMessage15 = newMessage14.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(14))\
    \ + 1)\n        val newMessage16 = newMessage15.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(15)) + 1)\n        val newMessage17 = newMessage16.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(16)) + 1)\n     \
    \   val newMessage18 = newMessage17.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(17))\
    \ + 1)\n        val newMessage19 = newMessage18.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpefl9xmbu.scala:35:96 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mnewMessage19\e[0m = newMessage18.map(\e\
    [36mletter\e[0m => letters.indexOf(letter) + letters.indexOf(\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \             expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpefl9xmbu.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter)) + alphabet(alphabet.indexOf(letter)\
    \ + 1))\n        val newVowels = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 1))\n        newMessage.zip(newVowels).map(x => x._1 + x._2).mkString(\"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmputrm8c7p.scala:17)\n\tat Problem$.$anonfun$adapted$1(tmputrm8c7p.scala:17)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encode(tmputrm8c7p.scala:17)\n\
    \tat Problem$.main(tmputrm8c7p.scala:22)\n\tat Problem.main(tmputrm8c7p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel\n            } else {\n        \
    \        letter\n            }\n        })\n        val newMessage = newMessageArray.toList\n\
    \        newMessage.foldLeft(\"\") {\n            case (acc, letter) => acc +\
    \ letter.toUpperCase\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3plqlpdq.scala:29:47 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mcase\e[0m (acc, letter) => acc + letter.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value toUpperCase is not a member\
    \ of Matchable\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + letter)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + letter)\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        messageWithVowelsReversedWithVowelsReplacedReversed\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0oxiw03n.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        messageWithVowelsReversedWithVowelsReplacedReversed\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mFound:    (messageWithVowelsReversedWithVowelsReplacedReversed\
    \ : IndexedSeq[Int])\n\e[31m   |\e[0mRequired: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val vowelIndexes = vowels.toList.map(letters.indexOf(_))\n\
    \        val messageLength = message.length\n        val encodedMessage = message.map(letter\
    \ => letters.indexOf(letter) match {\n            case -1 => letter\n        \
    \    case i => letters.indexOf(letter, i + 1)\n        }).mkString\n        val\
    \ encodedMessageLength = encodedMessage.length\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength + messageLength\n   \
    \     val encodedMessageLength = encodedMessageLength + messageLength\n      \
    \  val encodedMessageLength = encodedMessageLength + messageLength\n        val\
    \ encodedMessageLength = encodedMessageLength + messageLength\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength + messageLength\n   \
    \     val encodedMessageLength = encodedMessageLength + messageLength\n      \
    \  val encodedMessageLength = encodedMessageLength + messageLength\n        val\
    \ encodedMessageLength = encodedMessageLength + messageLength\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength + messageLength\n   \
    \     val encodedMessageLength = encodedMessageLength + messageLength\n      \
    \  val encodedMessageLength = encodedMessageLength + messageLength\n        val\
    \ encodedMessageLength = encodedMessageLength + messageLength\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength + messageLength\n   \
    \     val encodedMessageLength = encodedMessageLength + messageLength\n      \
    \  val encodedMessageLength = encodedMessageLength + messageLength\n        val\
    \ encodedMessageLength = encodedMessageLength + messageLength\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength + messageLength\n   \
    \     val encodedMessageLength = encodedMessageLength + messageLength\n      \
    \  val encodedMessageLength = encodedMessageLength + messageLength\n        val\
    \ encodedMessageLength = encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa9lm7d7_.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpa9lm7d7_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength + messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpa9lm7d7_.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength + messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpa9lm7d7_.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength + messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[3"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val newMessage\
    \ = message.map(letter => alphabet.indexOf(letter) + alphabet.indexOf(letter)\
    \ + 1)\n        newMessage.map(letter => vowels.indexOf(letter) + vowels.indexOf(letter)\
    \ + 1).map(letter => alphabet(letter))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9kjcc76j.scala:18:89\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newMessage.map(\e[36mletter\e\
    [0m => vowels.indexOf(letter) + vowels.indexOf(letter) + \e[31m1\e[0m).map(\e\
    [36mletter\e[0m => alphabet(letter))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[String]\n\e[31m   |\e[0m    \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = mutable.Buffer.empty[Char]\n\
    \        val vowelsCount = message.count(vowels)\n        val vowelsIndex = message.indexOf(vowels)\n\
    \        val vowelsIndex2 = message.indexOf(vowels, vowelsIndex + 1)\n       \
    \ val vowelsIndex3 = message.indexOf(vowels, vowelsIndex + 2)\n        val vowelsIndex4\
    \ = message.indexOf(vowels, vowelsIndex + 3)\n        val vowelsIndex5 = message.indexOf(vowels,\
    \ vowelsIndex + 4)\n        val vowelsIndex6 = message.indexOf(vowels, vowelsIndex\
    \ + 5)\n        val vowelsIndex7 = message.indexOf(vowels, vowelsIndex + 6)\n\
    \        val vowelsIndex8 = message.indexOf(vowels, vowelsIndex + 7)\n       \
    \ val vowelsIndex9 = message.indexOf(vowels, vowelsIndex + 8)\n        val vowelsIndex10\
    \ = message.indexOf(vowels, vowelsIndex + 9)\n        val vowelsIndex11 = message.indexOf(vowels,\
    \ vowelsIndex + 10)\n        val vowelsIndex12 = message.indexOf(vowels, vowelsIndex\
    \ + 11)\n        val vowelsIndex13 = message.indexOf(vowels, vowelsIndex + 12)\n\
    \        val vowelsIndex14 = message.indexOf(vowels, vowelsIndex + 13)\n     \
    \   val vowelsIndex15 = message.indexOf(vowels, vowelsIndex + 14)\n        val\
    \ vowelsIndex16 = message.indexOf(vowels, vowelsIndex + 15)\n        val vowelsIndex17\
    \ = message.indexOf(vowels, vowelsIndex + 16)\n        val vowelsIndex18 = message.indexOf(vowels,\
    \ vowelsIndex + 17)\n        val vowelsIndex19 = message.indexOf(vowels, vowelsIndex\
    \ + 18)\n        val vowelsIndex20 = message.indexOf(vowels, vowelsIndex + 19)\n\
    \        val vowelsIndex21 = message.indexOf(vowels, vowelsIndex + 20)\n     \
    \   val vowelsIndex22 = message.indexOf(vowels, vowelsIndex + 21)\n        val\
    \ vowelsIndex23 = message.indexOf(vowels, vowelsIndex + 22)\n        val vowelsIndex24\
    \ = message.indexOf(vowels, vowelsIndex + 23)\n        val vowelsIndex25 = message.indexOf(vowels,\
    \ vowelsIndex + 24)\n        val vowelsIndex26 = message.indexOf(vowels, vowelsIndex\
    \ + 25)\n        val vowelsIndex27 = message.indexOf(vowels, vowelsIndex + 26)\n\
    \        val vowelsIndex28 = message.indexOf(vowels, vowelsIndex + 27)\n     \
    \   val vowelsIndex29 = message.indexOf(vowel\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7cdk1_i8.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7cdk1_i8.scala:17:29\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mencodedMessage\e[0m = mutable.Buffer.empty[\e[35mChar\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7cdk1_i8.scala:18:40 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = message.count(vowels)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    (vowels : String)\n\
    \e[31m   |\e[0m                                        Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7cdk1_i8.scala:47:44\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsIndex29\e[0m = message.indexOf(vowel\n\e[31m\e[31m   |\e[0m        \
    \                                    ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                               Not found: vowel\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7cdk1_i8.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + 1)\n    \
    \    val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ + 1).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxqrt8yyq.scala:23)\n\tat Problem.main(tmpxqrt8yyq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793841
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val encodedMessage = messageArray.map(letter => {\n            if (vowels.contains(letter))\
    \ {\n                val index = vowels.indexOf(letter)\n                val nextLetter\
    \ = letters.charAt(index + 1)\n                val nextIndex = letters.indexOf(nextLetter)\n\
    \                letters.charAt(index) + letters.charAt(nextIndex)\n         \
    \   } else {\n                letter\n            }\n        }).mkString(\"\"\
    )\n        encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpomqlkwp2.scala:31)\n\tat Problem.main(tmpomqlkwp2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val newMessage =\
    \ message\n        val newMessageList = newMessage.split(\"\")\n        val newMessageList2\
    \ = newMessageList.map(x => if (vowels.contains(x)) x.toUpperCase else x)\n  \
    \      val newMessageList3 = newMessageList2.map(x => if (vowels.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList4 = newMessageList3.map(x =>\
    \ if (vowels.contains(x)) x.toUpperCase else x)\n        val newMessageList5 =\
    \ newMessageList4.map(x => if (vowels.contains(x)) x.toUpperCase else x)\n   \
    \     val newMessageList6 = newMessageList5.map(x => if (vowels.contains(x)) x.toUpperCase\
    \ else x)\n        val newMessageList7 = newMessageList6.map(x => if (vowels.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList8 = newMessageList7.map(x =>\
    \ if (vowels.contains(x)) x.toUpperCase else x)\n        val newMessageList9 =\
    \ newMessageList8.map(x => if (vowels.contains(x)) x.toUpperCase else x)\n   \
    \     val newMessageList10 = newMessageList9.map(x => if (vowels.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList11 = newMessageList10.map(x\
    \ => if (vowels.contains(x)) x.toUpperCase else x)\n        val newMessageList12\
    \ = newMessageList11.map(x => if (vowels.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList13 = newMessageList12.map(x => if (vowels.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList14 = newMessageList13.map(x\
    \ => if (vowels.contains(x)) x.toUpperCase else x)\n        val newMessageList15\
    \ = newMessageList14.map(x => if (vowels.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList16 = newMessageList15.map(x => if (vowels.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList17 = newMessageList16.map(x\
    \ => if (vowels.contains(x)) x.toUpperCase else x)\n        val newMessageList18\
    \ = newMessageList17.map(x => if (vowels.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList19 = newMessageList18.map(x => if (vowels.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList20 = newMessageList19.map(x\
    \ => if (vowels.contains(\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3cp7cf12.scala:36:77 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mnewMessageList20\e[0m =\
    \ newMessageList19.map(\e[36mx\e[0m => \e[33mif\e[0m (vowels.contains(\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3cp7cf12.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel.zip(vowel.tail).map { case (vowel1,\
    \ vowel2) => vowel1 + vowel2 }\n            } else {\n                letter\n\
    \            }\n        })\n        newMessageArray.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpljcn417h.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                vowel.zip(vowel.tail).map { \e[33mcase\e\
    [0m (vowel1, vowel2) => vowel1 + vowel2 }\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value zip is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpljcn417h.scala:22:32 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                vowel.zip(vowel.tail).map { \e[33mcase\e\
    [0m (vowel1, vowel2) => vowel1 + vowel2 }\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value\
    \ tail is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659793841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.foldLeft(\"\
    \"){ (result, current) => {\n            val currentChar = current.toLowerCase\
    \ \n            val currentCharIndex = alphabet.indexOf(currentChar)\n       \
    \     val currentCharVowelIndex = vowels.indexOf(currentChar)\n            val\
    \ currentCharVowelIndex2 = vowels.indexOf(currentChar + currentChar)\n       \
    \     val currentCharVowelIndex3 = vowels.indexOf(currentChar + currentChar +\
    \ currentChar)\n            val currentCharVowelIndex4 = vowels.indexOf(currentChar\
    \ + currentChar + currentChar + currentChar)\n            val currentCharVowelIndex5\
    \ = vowels.indexOf(currentChar + currentChar + currentChar + currentChar + currentChar)\n\
    \            val currentCharVowelIndex6 = vowels.indexOf(currentChar + currentChar\
    \ + currentChar + currentChar + currentChar + currentChar)\n            val currentCharVowelIndex7\
    \ = vowels.indexOf(currentChar + currentChar + currentChar + currentChar + currentChar\
    \ + currentChar + currentChar)\n            val currentCharVowelIndex8 = vowels.indexOf(currentChar\
    \ + currentChar + currentChar + currentChar + currentChar + currentChar + currentChar\
    \ + currentChar)\n            val currentCharVowelIndex9 = vowels.indexOf(currentChar\
    \ + currentChar + currentChar + currentChar + currentChar + currentChar + currentChar\
    \ + currentChar + currentChar)\n            val currentCharVowelIndex10 = vowels.indexOf(currentChar\
    \ + currentChar + currentChar + currentChar + currentChar + currentChar + currentChar\
    \ + currentChar + currentChar + currentChar)\n            val currentCharVowelIndex11\
    \ = vowels.indexOf(currentChar + currentChar + currentChar + currentChar + currentChar\
    \ + currentChar + currentChar + currentChar + currentChar + currentChar + currentChar)\n\
    \            val currentCharVowelIndex12 = vowels.indexOf(currentChar + currentChar\
    \ + currentChar + currentChar + currentChar + currentChar + currentChar + currentChar\
    \ + currentChar + currentChar + currentChar + currentChar)\n            \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsxicw7v.scala:44:0 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprsxicw7v.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprsxicw7v.scala:43:1\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\"){ (acc,\
    \ elem) =>\n            val index = vowels.indexOf(elem)\n            if (index\
    \ != -1) {\n                val newElem = vowels(index - 1) + vowels(index)\n\
    \                acc + (if (acc.length == 0) newElem else newElem + acc)\n   \
    \         } else {\n                acc + (if (acc.length == 0) elem.toUpperCase\
    \ else elem.toUpperCase + acc)\n            }\n        }\n        newMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp56hpum3.scala:29)\n\tat Problem.main(tmpp56hpum3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(x => alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newMessage = \"\"\n        val vowelsArray = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 1))\n        val vowelsArray2 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 2))\n        val vowelsArray3 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 3))\n        val vowelsArray4 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 4))\n        val vowelsArray5 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 5))\n        val vowelsArray6 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 6))\n        val vowelsArray7 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 7))\n        val vowelsArray8 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 8))\n        val vowelsArray9 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 9))\n        val vowelsArray10 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 10))\n        val vowelsArray11 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 11))\n        val vowelsArray12 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 12))\n        val vowelsArray13 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 13))\n        val vowelsArray14 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 14))\n        val vowelsArray15 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 15))\n        val vowelsArray16 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 16))\n        val vowelsArray17 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 17))\n        val vowelsArray18 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 18))\n        val vowelsArray19 = vowels.map(x\
    \ => alphabet(alphabet.indexOf(x) + 19))\n        val vowelsArray20 = vowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbrsivq6n.scala:39:28 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mvowelsArray20\e[0m = vowel\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: vowel\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbrsivq6n.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessage = messageArray.map\
    \ { x =>\n            val index = alphabet.indexOf(x)\n            if (vowels.contains(x))\
    \ {\n                val nextVowel = alphabet.charAt(index + 1)\n            \
    \    alphabet(index) + nextVowel\n            } else {\n                x\n  \
    \          }\n        }.mkString(\"\")\n        newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppml6v3el.scala:30)\n\tat Problem.main(tmppml6v3el.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            if (vowels.contains(letter)) letter else \n               \
    \ vowels.indexOf(letter) + 2)\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessageArray.map(letter => \n         \
    \   if (vowels.contains(letter)) letter else \n                vowels.indexOf(letter)\
    \ + 1)\n        newMessageArray2.toList.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnvrbw1zc.scala:27)\n\tat Problem.main(tmpnvrbw1zc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val letters = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\")\n        val messageList = message.split(\"\")\n        val\
    \ newMessageList = messageList.map(letter => letters.find(letter => letter !=\
    \ letter).map(_ => letter).getOrElse(letter))\n        val newMessage = messageList.mkString(\"\
    \")\n        val newMessageList = newMessage.split(\"\")\n        val newVowels\
    \ = vowels.map(letter => letters.find(letter => letter != letter).map(_ => letter).getOrElse(letter))\n\
    \        val newVowelsList = newVowels.mkString(\"\")\n        val newVowelsSet\
    \ = newVowels.toSet\n        val newVowelsSetList = newVowelsSet.toList\n    \
    \    val newVowelsSetList = newVowelsSetList.map(letter => letters.find(letter\
    \ => letter != letter).map(_ => letter).getOrElse(letter))\n        val newVowelsSetList\
    \ = newVowelsSetList.mkString(\"\")\n        val newVowelsSetSet = newVowelsSet.toSet\n\
    \        val newVowelsSetSetList = newVowelsSetSet.toList\n        val newVowelsSetSetList\
    \ = newVowelsSetSetList.map(letter => letters.find(letter => letter != letter).map(_\
    \ => letter).getOrElse(letter))\n        val newVowelsSetSetList = newVowelsSetSetList.mkString(\"\
    \")\n        val newVowelsSetSetSet = newVowelsSetSet.toSet\n        val newVowelsSetSetSetList\
    \ = newVowelsSetSetSet.toList\n        val newVowelsSetSetSetList = newVowelsSetSetSetList.map(letter\
    \ => letters.find(letter => letter != letter).map(_ => letter).getOrElse(letter))\n\
    \        val newVowelsSetSetSetList = newVowelsSetSetSetList.mkString(\"\")\n\
    \        val newVowelsSetSetSet = newVowelsSetSetSet.toSet\n        val newVowelsSetSetSetList\
    \ = newVow\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3hu8187_.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewMessageList\e[0m = newMessage.split(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageList is already defined as \e[33mvalue\e[0m \e[35mnewMessageList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3hu8187_.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnewVowelsSetList\e[0m = newVowelsSetList.map(\e\
    [36mletter\e[0m => letters.find(\e[36mletter\e[0m => letter != letter).map(_ =>\
    \ letter).getOrElse(letter))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewVowelsSetList is already defined as \e[33mvalue\e[0m \e\
    [35mnewVowelsSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3hu8187_.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnewVowelsSetList\e[0m =\
    \ newVowelsSetList.mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewVowelsSetList is already defined as \e[33mvalue\e[0m \e\
    [35mnewVowelsSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3hu8187_.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnewVowelsSetSetList\e[0m\
    \ = newVowelsSetSetList.map(\e[36mletter\e[0m => letters.find(\e[36mletter\e[0m\
    \ => letter != letter).map(_ => letter).getOrElse(letter))\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\" \")\n        val newMessage = messageList.map(x => x.toUpperCase).mkString(\"\
    \")\n        val newMessageList = newMessage.split(\"\")\n        val newMessageList2\
    \ = newMessageList.map(x => x.toUpperCase).mkString(\"\")\n        val newMessageList3\
    \ = newMessageList2.split(\"\")\n        val newMessageList4 = newMessageList3.map(x\
    \ => x.toUpperCase).mkString(\"\")\n        val newMessageList5 = newMessageList4.split(\"\
    \")\n        val newMessageList6 = newMessageList5.map(x => x.toUpperCase).mkString(\"\
    \")\n        val newMessageList7 = newMessageList6.split(\"\")\n        val newMessageList8\
    \ = newMessageList7.map(x => x.toUpperCase).mkString(\"\")\n        val newMessageList9\
    \ = newMessageList8.split(\"\")\n        val newMessageList10 = newMessageList9.map(x\
    \ => x.toUpperCase).mkString(\"\")\n        val newMessageList11 = newMessageList10.split(\"\
    \")\n        val newMessageList12 = newMessageList11.map(x => x.toUpperCase).mkString(\"\
    \")\n        val newMessageList13 = newMessageList12.split(\"\")\n        val\
    \ newMessageList14 = newMessageList13.map(x => x.toUpperCase).mkString(\"\")\n\
    \        val newMessageList15 = newMessageList14.split(\"\")\n        val newMessageList16\
    \ = newMessageList15.map(x => x.toUpperCase).mkString(\"\")\n        val newMessageList17\
    \ = newMessageList16.split(\"\")\n        val newMessageList18 = newMessageList17.map(x\
    \ => x.toUpperCase).mkString(\"\")\n        val newMessageList19 = newMessageList18.split(\"\
    \")\n        val newMessageList20 = newMessageList19.map(x => x.toUpperCase).mkString(\"\
    \")\n        val newMessageList21 = newMessageList20.split(\"\")\n        val\
    \ newMessageList22 = newMessageList21.map(x => x.toUpperCase).mkString(\"\")\n\
    \        val newMessageList23 = newMessageList22.split(\"\")\n        val newMessageList24\
    \ = newMessageList23.map(x => x.toUpperCase).mkString(\"\")\n        val newMessageList25\
    \ = newMessageList\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2zs2psyf.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793848
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map { letter\
    \ =>\n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) vowels(index - 1) + letter\n            else letter\n        }\n       \
    \ encodedMessage.toString.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb4fog1zd.scala:25)\n\tat Problem.main(tmpb4fog1zd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val messageArrayLength = messageArray.length\n\
    \        val encodedMessageArray = messageArray.map(letter => {\n            val\
    \ vowelIndex = vowels.indexOf(letter)\n            val vowelPosition = vowelIndex\
    \ + 2\n            val letterIndex = vowels.indexOf(messageArray(vowelIndex))\n\
    \            val letterPosition = letterIndex + 2\n            val letter = messageArray(letterIndex)\n\
    \            if (vowelPosition == letterPosition) {\n                letter\n\
    \            } else {\n                letter.toUpperCase\n            }\n   \
    \     })\n        val encodedMessage = encodedMessageArray.toList\n        encodedMessage.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdownul7r.scala:21:58 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mletterIndex\e[0m = vowels.indexOf(messageArray(vowelIndex))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                   Recursive \e[33mvalue\e\
    [0m \e[35mvowelIndex\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpdownul7r.scala:21:57 ---------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mletterIndex\e[0m = vowels.indexOf(messageArray(vowelIndex))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^\e[0m\n\e[31m   |\e[0m                                   Recursive \e[33mvalue\e\
    [0m \e[35mvowelIndex\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.foldLeft(\"\")( (acc, letter) =>\
    \ acc + (if (vowels.contains(letter)) letter else alphabet(alphabet.indexOf(letter)\
    \ + 2)))\n        encodedMessage\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpriny5kop.scala:22)\n\tat Problem.main(tmpriny5kop.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index >= 0) {\n            \
    \    val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowels.indexOf(vowel)\n            } else {\n               \
    \ letter\n            }\n        })\n        val newMessage = String.join(\"\"\
    , newMessageArray)\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmph081_aky.scala:27:32 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = String.join(\e\
    [31m\"\"\e[0m, newMessageArray)\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35mjoin\e[0m in \e[33mobject\e[0m \e[35mString\e[0m with types\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: Iterable[? <: CharSequence]): String\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence*): String\n\e[31m   |\e\
    [0mmatch arguments ((\e[32m\"\"\e[0m : String), (newMessageArray : Array[Matchable]))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.toLowerCase.map(letter => vowels.indexOf(letter) match {\n       \
    \     case -1 => letter\n            case i => vowels(i + 2)\n        })\n   \
    \     val messageWithVowelsReversed = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) match {\n \
    \           case -1 => letter\n            case i => vowels(i + 2)\n        })\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => vowels(i + 2)\n\
    \        })\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => vowels(i + 2)\n        })\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplaced\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3zn6b482.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\" \").toList\n        val newMessage = messageList.foldLeft(\"\
    \")( (acc, elem) => {\n            val vowelIndex = elem.indexOf(vowels)\n   \
    \         val vowel = elem.substring(vowelIndex, vowelIndex + 2)\n           \
    \ val newElem = elem.substring(0, vowelIndex) + vowel + elem.substring(vowelIndex\
    \ + 2)\n            acc + newElem\n        })\n        newMessage\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin -1, end 1, length 4\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.$anonfun$1(tmpgzb4joaw.scala:19)\n\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:169)\n\
    \tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:165)\n\tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\
    \tat Problem$.encode(tmpgzb4joaw.scala:22)\n\tat Problem$.main(tmpgzb4joaw.scala:26)\n\
    \tat Problem.main(tmpgzb4joaw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + 1).map(letter => letters.charAt(letter))\n        newMessage.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7qrfptla.scala:21)\n\tat Problem.main(tmp7qrfptla.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels\
    \ = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnnyg4x33.scala:22)\n\tat Problem.main(tmpnnyg4x33.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageLength = message.length\n        var encodedMessage = \"\"\
    \n        var currentLetter = \"\"\n        var currentVowel = \"\"\n        var\
    \ currentVowelPosition = 0\n        var currentLetterPosition = 0\n        for(i\
    \ <- 0 until messageLength) {\n            currentLetter = message.charAt(i)\n\
    \            currentVowel = vowels.indexOf(currentLetter)\n            currentVowelPosition\
    \ = currentVowel + 1\n            currentLetterPosition = letters.indexOf(currentLetter)\n\
    \            encodedMessage += letters.charAt(currentLetterPosition)\n       \
    \     if(currentVowelPosition == 2) {\n                encodedMessage += letters.charAt(currentVowelPosition)\n\
    \            }\n        }\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpup6mh7q2.scala:24:42\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            currentLetter = message.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Found:    Char\n\e[31m   |\e[0m        \
    \                    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpup6mh7q2.scala:25:41 --------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            currentVowel = vowels.indexOf(currentLetter)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    Int\n\e[31m   |\e[0m\
    \                           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpup6mh7q2.scala:26:35 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            currentVowelPosition = currentVowel + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    String\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message + vowels\n        val messageWithVowelsArray = messageWithVowels.toCharArray\n\
    \        val vowelsArray = vowels.toCharArray\n        val result = new StringBuilder\n\
    \        var i = 0\n        while (i < messageWithVowelsArray.length) {\n    \
    \        val currentChar = messageWithVowelsArray(i)\n            val nextChar\
    \ = messageWithVowelsArray(i + 1)\n            if (vowelsArray.contains(currentChar))\
    \ {\n                val currentIndex = vowelsArray.indexOf(currentChar)\n   \
    \             val nextIndex = vowelsArray.indexOf(nextChar)\n                val\
    \ currentVowel = vowelsArray(currentIndex)\n                val nextVowel = vowelsArray(nextIndex)\n\
    \                val currentVowelIndex = vowelsArray.indexOf(currentVowel)\n \
    \               val nextVowelIndex = vowelsArray.indexOf(nextVowel)\n        \
    \        val currentVowelIndex = currentVowelIndex + 1\n                val nextVowelIndex\
    \ = nextVowelIndex - 1\n                val currentVowelIndex = currentVowelIndex\
    \ - 1\n                val nextVowelIndex = nextVowelIndex + 1\n             \
    \   val currentVowelIndex = currentVowelIndex + 1\n                val nextVowelIndex\
    \ = nextVowelIndex - 1\n                val currentVowelIndex = currentVowelIndex\
    \ - 1\n                val nextVowelIndex = nextVowelIndex + 1\n             \
    \   val currentVowelIndex = currentVowelIndex + 1\n                val nextVowelIndex\
    \ = nextVowelIndex - 1\n                val currentVowelIndex = currentVowelIndex\
    \ - 1\n                val nextVowelIndex = nextVowelIndex + 1\n             \
    \   val currentVowelIndex = currentVowelIndex + 1\n                val nextVowelIndex\
    \ = nextVowelIndex - 1\n                val currentVowelIndex = currentVowelIndex\
    \ - 1\n                val nextVowelIndex = nextVowelIndex + 1\n             \
    \   val currentVowelIndex = currentVowelIndex + 1\n                val nextVowelIndex\
    \ = nextVowelIndex - 1\n                val currentVowelIndex = currentVowelIndex\
    \ - 1\n                val nextVowelIndex = nextVowelIndex + 1\n             \
    \   val currentVowelIndex = currentVowelIndex + 1\n                val nextVowelIndex\
    \ = nextVowelIndex - 1\n                val currentVow\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiqc88r_u.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiqc88r_u.scala:64:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiqc88r_u.scala:31:20 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m                \e[33mval\e[0m \e[36mcurrentVowelIndex\e[0m = currentVowelIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentVowelIndex is already defined as \e[33mvalue\e[0m \e\
    [35mcurrentVowelIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiqc88r_u.scala:32:20 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                \e[33mval\e[0m \e[36mnextVowelIndex\e\
    [0m = nextVowelIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextVowelIndex is already defined as \e[33mvalue\e[0m \e[35mnextVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiqc88r_u.scala:33:20 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m                \e[33mval\e[0m \e[36mcurrentVowelIndex\e[0m = currentVowelIndex\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentVowelIndex is already defined as \e[33mvalue\e[0m \e\
    [35mcurrentVowelIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiqc88r_u.scala:34:20 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                \e[33mval\e[0m \e[36mnextVowelIndex\e\
    [0m = nextVowelIndex + \e[31m1\e[0m\n\e[31m\e[3"
  stdout: ''
  timestamp: 1659793847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.replaceAllIn(vowels, vowels.charAt(2))\n        val messageWithVowelsAndTwoLettersAfterVowel\
    \ = messageWithVowels.replaceAllIn(vowels.charAt(2), vowels.charAt(3))\n     \
    \   val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowel = messageWithVowelsAndTwoLettersAfterVowel.replaceAllIn(vowels.charAt(3),\
    \ vowels.charAt(4))\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowel.replaceAllIn(vowels.charAt(4),\
    \ vowels.charAt(5))\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.replaceAllIn(vowels.charAt(5),\
    \ vowels.charAt(6))\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.replaceAllIn(vowels.charAt(6),\
    \ vowels.charAt(7))\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.replaceAllIn(vowels.charAt(7),\
    \ vowels.charAt(8))\n        val messageWithVowelsAndTwoLettersAfter\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpad03usye.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpad03usye.scala:16:40\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmessageWithVowels\e[0m = message.replaceAllIn(vowels, vowels.charAt(\e[31m2\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue replaceAllIn is not a member of String - did you mean\
    \ message.replaceAll?\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpad03usye.scala:20:124\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\e\
    [0m = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.replaceAllIn(vowels.charAt(\e\
    [31m5\e[0m), vowels.charAt(\e[31m6\e[0m))\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpad03usye.scala:21:147 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\e\
    [0m = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.replaceAllIn(vowels.charAt(\e\
    [31m6\e[0m), vowels.charAt(\e[31m7\e[0m))\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                      "
  stdout: ''
  timestamp: 1659793850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.toCharArray\n        val newMessageArray = Array.ofDim[Char](messageArray.length)\n\
    \        var i = 0\n        while (i < messageArray.length) {\n            val\
    \ currentChar = messageArray(i)\n            val currentCharIndex = vowels.indexOf(currentChar)\n\
    \            if (currentCharIndex == -1) {\n                newMessageArray(i)\
    \ = currentChar\n            } else {\n                val nextCharIndex = currentCharIndex\
    \ + 1\n                val nextChar = vowels(nextCharIndex)\n                newMessageArray(i)\
    \ = nextChar\n            }\n            i += 1\n        }\n        new String(newMessageArray)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzg6ynvrk.scala:34)\n\tat Problem.main(tmpzg6ynvrk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        val result = new StringBuilder\n        var i\
    \ = 0\n        while (i < messageArray.length) {\n            val currentChar\
    \ = messageArray(i)\n            val nextChar = messageArray(i + 1)\n        \
    \    if (vowels.contains(currentChar) && vowels.contains(nextChar)) {\n      \
    \          val index = vowels.indexOf(currentChar)\n                val nextIndex\
    \ = vowels.indexOf(nextChar)\n                result.append(vowels(index - 1))\n\
    \                result.append(vowels(nextIndex + 1))\n            } else {\n\
    \                result.append(currentChar)\n            }\n            i += 1\n\
    \        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat Problem$.encode(tmpbdsujcky.scala:21)\n\tat Problem$.main(tmpbdsujcky.scala:35)\n\
    \tat Problem.main(tmpbdsujcky.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = mutable.StringBuilder()\n   \
    \     val vowelsCount = message.count(vowels)\n        val vowelsIndex = 0\n \
    \       val vowelsIndex2 = 0\n        val vowelsIndex3 = 0\n        val vowelsIndex4\
    \ = 0\n        val vowelsIndex5 = 0\n        val vowelsIndex6 = 0\n        val\
    \ vowelsIndex7 = 0\n        val vowelsIndex8 = 0\n        val vowelsIndex9 = 0\n\
    \        val vowelsIndex10 = 0\n        val vowelsIndex11 = 0\n        val vowelsIndex12\
    \ = 0\n        val vowelsIndex13 = 0\n        val vowelsIndex14 = 0\n        val\
    \ vowelsIndex15 = 0\n        val vowelsIndex16 = 0\n        val vowelsIndex17\
    \ = 0\n        val vowelsIndex18 = 0\n        val vowelsIndex19 = 0\n        val\
    \ vowelsIndex20 = 0\n        val vowelsIndex21 = 0\n        val vowelsIndex22\
    \ = 0\n        val vowelsIndex23 = 0\n        val vowelsIndex24 = 0\n        val\
    \ vowelsIndex25 = 0\n        val vowelsIndex26 = 0\n        val vowelsIndex27\
    \ = 0\n        val vowelsIndex28 = 0\n        val vowelsIndex29 = 0\n        val\
    \ vowelsIndex30 = 0\n        val vowelsIndex31 = 0\n        val vowelsIndex32\
    \ = 0\n        val vowelsIndex33 = 0\n        val vowelsIndex34 = 0\n        val\
    \ vowelsIndex35 = 0\n        val vowelsIndex36 = 0\n        val vowelsIndex37\
    \ = 0\n        val vowelsIndex38 = 0\n        val vowelsIndex39 = 0\n        val\
    \ vowelsIndex40 = 0\n        val vowelsIndex41 = 0\n        val vowelsIndex42\
    \ = 0\n        val vowelsIndex43 = 0\n        val vowelsIndex44 = 0\n        val\
    \ vowelsIndex45 = 0\n        val vowelsIndex46 = 0\n        val vowelsIndex47\
    \ = 0\n        val vowelsIndex48 = 0\n        val vowelsIndex49 = 0\n        val\
    \ vowelsIndex50 = 0\n        val vowelsIndex51 = 0\n        val vowelsIndex52\
    \ = 0\n        val vowelsIndex53 = 0\n        val vowelsIndex54 = 0\n        val\
    \ vowelsIndex55 = 0\n        val vowelsIndex56 = 0\n        val vowelsIndex57\
    \ = 0\n        val vowelsIndex58 = 0\n        val vowelsIndex59 = 0\n        val\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp6vslyia8.scala:78:11 ---------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6vslyia8.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mencodedMessage\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp6vslyia8.scala:18:40 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = message.count(vowels)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    (vowels : String)\n\
    \e[31m   |\e[0m                                        Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6vslyia8.scala:79:5\
    \ ---------------------\e[0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(vowels.indexOf(vowels.tail)\
    \ + 1)\n            })\n        val newMessage = newMessageArray.toList\n    \
    \    val newMessageString = newMessage.toString.reverse.mkString\n        val\
    \ newMessageStringArray = newMessageString.split(\"\")\n        val newMessageStringArrayLength\
    \ = newMessageStringArray.length\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0l47jjwo.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0l47jjwo.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewMessageStringArrayLength\e[0m = newMessageStringArrayLength - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0l47jjwo.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0l47jjwo.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0l47jjwo.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659793851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\") { (result,\
    \ current) => {\n            val currentLetter = current.toLowerCase\n       \
    \     val currentLetterIndex = alphabet.indexOf(currentLetter)\n            val\
    \ currentVowelIndex = vowels.indexOf(currentLetter)\n            val currentVowelIndex2\
    \ = vowels.indexOf(currentLetter.charAt(currentVowelIndex + 1))\n            val\
    \ currentVowelIndex3 = vowels.indexOf(currentLetter.charAt(currentVowelIndex +\
    \ 2))\n            val currentVowelIndex4 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 3))\n            val currentVowelIndex5 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 4))\n            val currentVowelIndex6 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 5))\n            val currentVowelIndex7 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 6))\n            val currentVowelIndex8 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 7))\n            val currentVowelIndex9 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 8))\n            val currentVowelIndex10 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 9))\n            val currentVowelIndex11 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 10))\n            val currentVowelIndex12 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 11))\n            val currentVowelIndex13 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 12))\n            val currentVowelIndex14 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 13))\n            val currentVowelIndex15 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 14))\n            val currentVowelIndex16 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 15))\n            val currentVowelIndex17 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 16))\n\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyrsh3mvv.scala:49:0 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyrsh3mvv.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyrsh3mvv.scala:48:1\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val newLetter\
    \ = vowels(vowelIndex)\n                vowels(index) = newLetter\n          \
    \      vowels(vowelIndex) = letter\n                newLetter\n            } else\
    \ {\n                letter\n            }\n        })\n        val newMessage\
    \ = messageArray.join(\"\")\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg4jkw9tg.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                vowels(index) = newLetter\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value update\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg4jkw9tg.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                vowels(vowelIndex)\
    \ = letter\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value update is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpg4jkw9tg.scala:29:38 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = messageArray.join(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue join is not a member of Array[String] - did you mean\
    \ messageArray.wait?\n3 errors found\n"
  stdout: ''
  timestamp: 1659793855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + 1)\n    \
    \    val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        messageWithVowelsReversedWithVowelsReplacedReversed.foldLeft(\"\")( (acc,\
    \ letter) => acc + letter)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv1pect34.scala:23)\n\tat Problem.main(tmpv1pect34.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + 1)\n    \
    \    val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowels\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq7m652eb.scala:23:144 --------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\e\
    [0m = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.map(\e\
    [36mletter\e[0m => vowels.indexOf(letter) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpq7m652eb.scala:24:196 -----------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmessageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\e\
    [0m = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowels\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowels\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch "
  stdout: ''
  timestamp: 1659793854
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','i','o','u')\n        val newMessage = message.map(letter\
    \ => \n            letter match {\n                case 'a' => alphabet(0)\n \
    \               case 'b' => alphabet(1)\n                case 'c' => alphabet(2)\n\
    \                case 'd' => alphabet(3)\n                case 'e' => alphabet(4)\n\
    \                case 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n\
    \                case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n\
    \                case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n\
    \                case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n            }\n        )\n        newMessage.map(letter => \n        \
    \    letter match {\n                case 'a' => vowels(0)\n                case\
    \ 'b' => vowels(1)\n                case 'c' => vowels(2)\n                case\
    \ 'd' => vowels(3)\n                case 'e' => vowels(4)\n                case\
    \ 'f' => vowels(5)\n                case 'g' => vowels(6)\n                case\
    \ 'h' => vowels(7)\n                case 'i' => vowels(8)\n                case\
    \ 'j' => vowels(9)\n                case 'k' => vowels(10)\n                case\
    \ 'l' => vowels(11)\n                case 'm' => vowels(12)\n                case\
    \ 'n' => vowels(13)\n                case 'o' => vowels(14)\n                case\
    \ 'p' => vowels(15)\n                case 'q' => vowels(16)\n                case\
    \ 'r' => vowels(17)\n                case 's' => vowels(18)\n                case\
    \ 't' => vowels(19)\n                case 'u' => vowels(20)\n                case\
    \ 'v' => vowels(21)\n                case 'w' => vowels(22)\n                case\
    \ 'x' => vowels(23)\n                case 'y' => vowels(24)\n                case\
    \ 'z' => vowels(25)\n                case letter => vowels(vowels.indexOf(letter)\
    \ + 2)\n            }\n        ).mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpurv_5fji.scala:81)\n\tat Problem.main(tmpurv_5fji.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) match {\n            case -1\
    \ => letter\n            case 0 => letter\n            case 1 => vowels.charAt(letter\
    \ - 1) + letter\n            case 2 => vowels.charAt(letter - 1) + vowels.charAt(letter\
    \ - 2)\n            case _ => letter\n        })\n        val messageWithVowelsSortedByVowel\
    \ = messageWithVowels.sorted\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVowel.length\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVowelLength - 1\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVowelLength - 1\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVowelLength - 1\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVowelLength - 1\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVowelLength - 1\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVowelLength - 1\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVowelLength - 1\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVowelLength - 1\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVowelLength - 1\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVowelLength - 1\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVowelLength - 1\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVowelLength - 1\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVowelLength - 1\n        val messageWithVowelsSortedByVowelLength\
    \ = messageWithVowelsSortedByVow\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz0og57cb.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsSortedByVowelLength\e\
    [0m = messageWithVowelsSortedByVowelLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmessageWithVowelsSortedByVowelLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mmessageWithVowelsSortedByVowelLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz0og57cb.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsSortedByVowelLength\e[0m = messageWithVowelsSortedByVowelLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmessageWithVowelsSortedByVowelLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mmessageWithVowelsSortedByVowelLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz0og57cb.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsSortedByVowelLength\e[0m = messageWithVowelsSortedByVowelLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmessageWithVowelsSortedByVowelLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mmessageWithVowelsSortedByVowelLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz0og57cb.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsSortedByVowelLength\e[0m = messageWithVowelsSortedByVowelLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^"
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.foldLeft(\"\")( (acc, elem) => {\n\
    \            val index = alphabet.indexOf(elem)\n            val nextIndex = index\
    \ + 2\n            val nextChar = alphabet(nextIndex)\n            acc + (if (vowels.contains(elem))\
    \ elem else nextChar)\n        })\n        encodedMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzuddnect.scala:27)\n\tat Problem.main(tmpzuddnect.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val messageChars = message.map(_.toUpperCase)\n  \
    \      val messageCharsLength = messageChars.length\n        val encodedMessage\
    \ = messageChars.map(c => {\n            val index = vowels.indexOf(c)\n     \
    \       if (index >= 0) {\n                val vowelIndex = index\n          \
    \      val vowelChar = vowels(vowelIndex + 1)\n                val vowelCharIndex\
    \ = vowels.indexOf(vowelChar)\n                val vowelCharIndex = vowelIndex\
    \ + 2\n                val vowelCharIndex = vowelIndex + 3\n                val\
    \ vowelCharIndex = vowelIndex + 4\n                val vowelCharIndex = vowelIndex\
    \ + 5\n                val vowelCharIndex = vowelIndex + 6\n                val\
    \ vowelCharIndex = vowelIndex + 7\n                val vowelCharIndex = vowelIndex\
    \ + 8\n                val vowelCharIndex = vowelIndex + 9\n                val\
    \ vowelCharIndex = vowelIndex + 10\n                val vowelCharIndex = vowelIndex\
    \ + 11\n                val vowelCharIndex = vowelIndex + 12\n               \
    \ val vowelCharIndex = vowelIndex + 13\n                val vowelCharIndex = vowelIndex\
    \ + 14\n                val vowelCharIndex = vowelIndex + 15\n               \
    \ val vowelCharIndex = vowelIndex + 16\n                val vowelCharIndex = vowelIndex\
    \ + 17\n                val vowelCharIndex = vowelIndex + 18\n               \
    \ val vowelCharIndex = vowelIndex + 19\n                val vowelCharIndex = vowelIndex\
    \ + 20\n                val vowelCharIndex = vowelIndex + 21\n               \
    \ val vowelCharIndex = vowelIndex + 22\n                val vowelCharIndex = vowelIndex\
    \ + 23\n                val vowelCharIndex = vowelIndex + 24\n               \
    \ val vowelCharIndex = vowelIndex + 25\n                val vowelCharIndex = vowelIndex\
    \ + 26\n                val vowelCharIndex = vowelIndex + 27\n               \
    \ val vowelCharIndex = vowelIndex + 28\n                val vowelCharIndex = vowelIndex\
    \ + 29\n                val vowelCharIndex = vowelIndex + 30\n               \
    \ val vowelCharIndex = vowelIndex + 31\n                val vowelCharIndex = vowelIndex\
    \ + 32\n                val vowelCharIndex = vowelIndex + 33\n               \
    \ val vowelCharIndex = vowelIndex + 34\n                val vowelCharIndex = vowelIndex\
    \ + 35\n                val vowelCharIndex = vowelIndex + 36\n               \
    \ val vowelCharIndex = vowelIndex + 37\n                val vowelCharIndex = vowelIndex\
    \ + 38\n                val vowelCharIndex = vowelIndex + 39\n               \
    \ val vowelCharIndex = vowelIndex + 40\n                val vowelCharIndex = vowelIndex\
    \ + 41\n                val vowelCharIndex = vowelIndex + 42\n               \
    \ val vowelCharIndex = vowelIndex + \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7wqg28xt.scala:66:49 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m                \e[33mval\e[0m \e[36mvowelCharIndex\e\
    [0m = vowelIndex + \n\e[31m\e[31m   |\e[0m                                   \
    \              ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp7wqg28xt.scala:77:0 ----------------------------\e[0m\e[0m\n\e[31m77\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7wqg28xt.scala:17:41 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageChars\e[0m = message.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7wqg28xt.scala:76:1\
    \ ---------------------\e[0m\e[0m\n\e[31m76 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp7wqg28xt.scala:68:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m68 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) match {\n            case -1\
    \ => letter\n            case i => vowels(i + 2)\n        })\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) match {\n \
    \           case -1 => letter\n            case i => vowels(i + 2)\n        })\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        messageWithVowelsReversedWithVowelsReplacedReversed\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 10\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.$anonfun$2(tmpbvq8n77j.scala:23)\n\
    \tat Problem$.$anonfun$adapted$2(tmpbvq8n77j.scala:24)\n\tat scala.collection.StringOps$.map$extension(StringOps.scala:223)\n\
    \tat Problem$.encode(tmpbvq8n77j.scala:24)\n\tat Problem$.main(tmpbvq8n77j.scala:29)\n\
    \tat Problem.main(tmpbvq8n77j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val vowelIndex = vowels.indexOf(letter)\n            val vowel2Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 1))\n            val vowel3Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 2))\n            val vowel4Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 3))\n            val vowel5Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 4))\n            val vowel6Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 5))\n            val vowel7Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 6))\n            val vowel8Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 7))\n            val vowel9Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 8))\n            val vowel10Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 9))\n            val vowel11Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 10))\n            val vowel12Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 11))\n            val vowel13Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 12))\n            val vowel14Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 13))\n            val vowel15Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 14))\n            val vowel16Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 15))\n            val vowel17Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 16))\n            val vowel18Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 17))\n            val vowel19Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 18))\n            val vowel20Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 19))\n            val vowel21Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 20))\n            val vowel22Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 21))\n            val vowel23Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 22))\n            val vowel24Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 23))\n            val vowel25Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 24))\n            val vowel26Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 25))\n            val vowel27Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 26))\n            val vowel28Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 27))\n            val vowel29Index\
    \ = vowels.indexOf(vowels.charAt(vowelIndex + 28))\n            val vowel30Index\
    \ = vowel\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvn05x16c.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpvn05x16c.scala:58:0 ----------------------------\e[0m\e[0m\n\e[31m58\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvn05x16c.scala:47:31 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m            \e[33mval\e[0m \e[36mvowel30Index\e[0m =\
    \ vowel\n\e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: vowel\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvn05x16c.scala:57:1 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.foldLeft(\"\"){ (acc, elem) => \n  \
    \          val index = alphabet.indexOf(elem)\n            val nextVowel = alphabet(index+2)\n\
    \            val nextLetter = alphabet(index+1)\n            acc + (if (vowels.contains(elem))\
    \ nextVowel else nextLetter) + elem\n        }\n        newMessage\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8xt_0dn8.scala:27)\n\tat Problem.main(tmp8xt_0dn8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val newMessageList = messageList.map(x => \n            x match {\n\
    \                case 'a' -> alphabet(0)\n                case 'b' -> alphabet(1)\n\
    \                case 'c' -> alphabet(2)\n                case 'd' -> alphabet(3)\n\
    \                case 'e' -> alphabet(4)\n                case 'f' -> alphabet(5)\n\
    \                case 'g' -> alphabet(6)\n                case 'h' -> alphabet(7)\n\
    \                case 'i' -> alphabet(8)\n                case 'j' -> alphabet(9)\n\
    \                case 'k' -> alphabet(10)\n                case 'l' -> alphabet(11)\n\
    \                case 'm' -> alphabet(12)\n                case 'n' -> alphabet(13)\n\
    \                case 'o' -> alphabet(14)\n                case 'p' -> alphabet(15)\n\
    \                case 'q' -> alphabet(16)\n                case 'r' -> alphabet(17)\n\
    \                case 's' -> alphabet(18)\n                case 't' -> alphabet(19)\n\
    \                case 'u' -> alphabet(20)\n                case 'v' -> alphabet(21)\n\
    \                case 'w' -> alphabet(22)\n                case 'x' -> alphabet(23)\n\
    \                case 'y' -> alphabet(24)\n                case 'z' -> alphabet(25)\n\
    \                case _ -> x\n            }\n        )\n        val newMessage\
    \ = messageList.map(x => \n            x match {\n                case 'a' ->\
    \ vowels(0)\n                case 'b' -> vowels(1)\n                case 'c' ->\
    \ vowels(2)\n                case 'd' -> vowels(3)\n                case 'e' ->\
    \ vowels(4)\n                case 'f' -> vowels(5)\n                case 'g' ->\
    \ vowels(6)\n                case 'h' -> vowels(7)\n                case 'i' ->\
    \ vowels(8)\n                case 'j' -> vowels(9)\n                case 'k' ->\
    \ vowels(10)\n                case 'l' -> vowels(11)\n                case 'm'\
    \ -> vowels(12)\n                case 'n' -> vowels(13)\n                case\
    \ 'o' -> vowels(14)\n                case 'p' -> vowels(15)\n                case\
    \ 'q' -> vowels(16)\n                case 'r' -> vowels(17)\n                case\
    \ 's' -> vowels(18)\n                case 't' -> vowels(19)\n                case\
    \ 'u' -> vowels(20)\n                case 'v' -> vowels(21)\n                case\
    \ 'w' -> vowels(22)\n                case '\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgnd08hwc.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m \e[31m'b'\e[0m -> alphabet(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m \
    \               '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpgnd08hwc.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m                \e[33mcase\e[0m \e[31m'd'\e[0m -> alphabet(\e[31m3\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m        \
    \        '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpgnd08hwc.scala:25:16 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                \e[33mcase\e[0m \e[31m'f'\e[0m -> alphabet(\e[31m5\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgnd08hwc.scala:27:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mcase\e\
    [0m \e[31m'h'\e[0m -> alphabet(\e[31m7\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^\e[0m\n\e[31m   |\e[0m                '=>' expected, but 'case' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgnd08hwc.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mcase\e[0m \e[31m'j'\e[0m -> alphabet(\e\
    [31m9\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m \
    \               '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpgnd08hwc.scala:31:16 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m                \e[33mcase\e[0m \e[31m'l'\e[0m -> alphabet(\e[31m11\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m        \
    \        '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpgnd08hwc.scala:33:16 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m                \e[33mcase\e[0m \e[31m'n'\e[0m -> alphabet(\e[31m13\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m        \
    \        '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpgnd08hwc.scala:35:16 --"
  stdout: ''
  timestamp: 1659793861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val vowelsMap = Map(\"a\" -> \"A\", \"e\"\
    \ -> \"E\", \"i\" -> \"I\", \"o\" -> \"O\", \"u\" -> \"U\")\n        val lettersMap\
    \ = Map(\"a\" -> \"b\", \"e\" -> \"c\", \"i\" -> \"d\", \"o\" -> \"f\", \"u\"\
    \ -> \"g\")\n        val newMessage = message.map(letter => lettersMap(letter))\n\
    \        val newMessage2 = newMessage.map(letter => vowelsMap(letter))\n     \
    \   val newMessage3 = newMessage2.map(letter => lettersMap(letter))\n        val\
    \ newMessage4 = newMessage3.map(letter => vowelsMap(letter))\n        val newMessage5\
    \ = newMessage4.map(letter => lettersMap(letter))\n        val newMessage6 = newMessage5.map(letter\
    \ => vowelsMap(letter))\n        val newMessage7 = newMessage6.map(letter => lettersMap(letter))\n\
    \        val newMessage8 = newMessage7.map(letter => vowelsMap(letter))\n    \
    \    val newMessage9 = newMessage8.map(letter => lettersMap(letter))\n       \
    \ val newMessage10 = newMessage9.map(letter => vowelsMap(letter))\n        val\
    \ newMessage11 = newMessage10.map(letter => lettersMap(letter))\n        val newMessage12\
    \ = newMessage11.map(letter => vowelsMap(letter))\n        val newMessage13 =\
    \ newMessage12.map(letter => lettersMap(letter))\n        val newMessage14 = newMessage13.map(letter\
    \ => vowelsMap(letter))\n        val newMessage15 = newMessage14.map(letter =>\
    \ lettersMap(letter))\n        val newMessage16 = newMessage15.map(letter => vowelsMap(letter))\n\
    \        val newMessage17 = newMessage16.map(letter => lettersMap(letter))\n \
    \       val newMessage18 = newMessage17.map(letter => vowelsMap(letter))\n   \
    \     val newMessage19 = newMessage18.map(letter => lettersMap(letter))\n    \
    \    val newMessage20 = newMessage19.map(letter => vowelsMap(letter))\n      \
    \  val newMessage21 = newMessage20.map(letter => lettersMap(letter))\n       \
    \ val newMessage22 = newMessage21.map(letter => vowelsMap(letter))\n        val\
    \ newMessage23 = newMessage22.map(letter => lettersMap(letter))\n        val newMessage24\
    \ = newMessage23.map(letter => vowelsMap(letter))\n        val newMessage25 =\
    \ newMessage24.map(letter => lettersMap(letter))\n        val new\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpkog38z1y.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkog38z1y.scala:19:58\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e\
    [0m = message.map(\e[36mletter\e[0m => lettersMap(letter))\n\e[31m\e[31m   |\e\
    [0m                                                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                               Found:    (letter : Char)\n\
    \e[31m   |\e[0m                                               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkog38z1y.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val newLetter\
    \ = vowels(vowelIndex)\n                vowels(index) = newLetter\n          \
    \      newLetter\n            } else {\n                letter\n            }\n\
    \        })\n        val newMessage = newMessageArray.toList\n        newMessage.toString.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu6smh2gh.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                vowels(index) = newLetter\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value update\
    \ is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659793860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.replaceAll(vowels, vowels.toUpperCase)\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.replaceAll(\"([aeiou])([aeiou])\", \"$1$2$2\")\n       \
    \ val messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersBefore.replaceAll(\"\
    ([aeiou])([aeiou])\", \"$1$2$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfter.replaceAll(\"([aeiou])([aeiou])\", \"\
    $1$2$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBefore.replaceAll(\"([aeiou])([aeiou])\"\
    , \"$1$2$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\"\
    ([aeiou])([aeiou])\", \"$1$2$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\"\
    ([aeiou])([aeiou])\", \"$1$2$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore.replaceAll(\"\
    ([aeiou])([aeiou])\", \"$1$2$2\")\n        val messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsoiltzcp.scala:24:164 -----------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBefore\e\
    [0m = messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAnd\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: messageWithVowelsAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAndTwoLettersBeforeAnd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsoiltzcp.scala:25:5\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageArray = message.split(\"\")\n        val messageArrayLength\
    \ = messageArray.length\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel\n            } else {\n        \
    \        letter\n            }\n        })\n        val newMessageArrayLength\
    \ = newMessageArray.length\n        val newMessage = newMessageArray.join\n  \
    \      val newMessageLength = newMessage.length\n        val newMessageArrayLength\
    \ = newMessageArrayLength\n        val newMessageArray = newMessageArray\n   \
    \     val newMessageArrayLength = newMessageArrayLength\n        val newMessageArray\
    \ = newMessageArray\n        val newMessageArrayLength = newMessageArrayLength\n\
    \        val newMessageArray = newMessageArray\n        val newMessageArrayLength\
    \ = newMessageArrayLength\n        val newMessageArray = newMessageArray\n   \
    \     val newMessageArrayLength = newMessageArrayLength\n        val newMessageArray\
    \ = newMessageArray\n        val newMessageArrayLength = newMessageArrayLength\n\
    \        val newMessageArray = newMessageArray\n        val newMessageArrayLength\
    \ = newMessageArrayLength\n        val newMessageArray = newMessageArray\n   \
    \     val newMessageArrayLength = newMessageArrayLength\n        val newMessageArray\
    \ = newMessageArray\n        val newMessageArrayLength = newMessageArrayLength\n\
    \        val newMessageArray = newMessageArray\n        val newMessageArrayLength\
    \ = newMessageArrayLength\n        val newMessageArray = newMessageArray\n   \
    \     val newMessageArrayLength = newMessageArrayLength\n        val newMessageArray\
    \ = newMessageArray\n        val newMessageArrayLength = newMessageArrayLength\n\
    \        val newMessageArray = newMessageArray\n        val newMessageArrayLength\
    \ = newMessageArrayLength\n        val newMessageArray = newMessageArray\n   \
    \     val newMessageArrayLength = newMessageArrayLength\n        val newMessageArray\
    \ = newMessageArray\n        val newMessageArrayLength = newMessageArrayLength\n\
    \        val newMessageArray = newMessageArray\n        val newMessageArrayLength\
    \ = newMessageArrayLength\n        val newMessageArray = newMessageArray\n   \
    \     val newMessageArrayLength = newMessageArrayLength\n        val newMessageArray\
    \ = newMessageArray\n        val newMessageArrayLength = newMessageArrayLength\n\
    \        val newMessageArray = newMessageArray\n        val newMessageArrayLength\
    \ = newMessageArrayLength\n        val newMessageArray = newMessageArray\n   \
    \     val newMessageArrayLength = newMessageArrayLength\n        val newMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6juy9_1a.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6juy9_1a.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewMessageArrayLength\e[0m = newMessageArrayLength\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnewMessageArrayLength is already defined as \e[33mvalue\e[0m \e[35mnewMessageArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6juy9_1a.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArray\e[0m = newMessageArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnewMessageArray is already defined as \e[33mvalue\e[0m \e[35mnewMessageArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6juy9_1a.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArrayLength\e[0m = newMessageArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6juy9_1a.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArray\e[0m = newMessageArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnewMessageArray is already defined as \e[33mvalue\e[0m \e[35mnewMessageArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same gro"
  stdout: ''
  timestamp: 1659793861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val encodedMessage = messageArray.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(0)) + 1).mkString(\"\")\n        encodedMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8cubepzp.scala:22)\n\tat Problem.main(tmp8cubepzp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map(letter => {\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            if(vowelIndex != -1){\n                val vowel = vowels(vowelIndex)\n\
    \                val vowelIndex = vowels.indexOf(vowel)\n                val nextVowel\
    \ = vowels(vowelIndex + 1)\n                letter match {\n                 \
    \   case \"a\" => nextVowel\n                    case \"e\" => vowel\n       \
    \             case \"i\" => vowel\n                    case \"o\" => vowel\n \
    \                   case \"u\" => vowel\n                    case _ => letter\n\
    \                }\n            }\n            else{\n                letter\n\
    \            }\n        }).mkString(\"\")\n        encodedMessage\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi985ra2h.scala:18:36 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(letter)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m   value indexOf is not a member of scala.collection.mutable.Set[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi985ra2h.scala:21:40 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowels.indexOf(vowel)\n\e[31m\e[31m   |\e[0m                             \
    \    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value indexOf is not a member of scala.collection.mutable.Set[String]\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi985ra2h.scala:21:48 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowels.indexOf(vowel)\n\e[31m\e[31m   |\e[0m                             \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \      Recursive \e[33mvalue\e[0m \e[35mvowel\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            vowels.indexOf(letter) + vowels.indexOf(letter) + 1)\n    \
    \    val newMessage = messageArray.toList.mkString(\"\")\n        val newMessageArray2\
    \ = newMessage.split(\"\")\n        newMessageArray2.map(letter => \n        \
    \    vowels.indexOf(letter) + vowels.indexOf(letter) + 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnm_e5umb.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        newMessageArray2.map(\e\
    [36mletter\e[0m => \n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Array[Int]\n\e[31m   |\e[0m        Required: String\n\e[31m22 |\e\
    [0m            vowels.indexOf(letter) + vowels.indexOf(letter) + \e[31m1\e[0m)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val newMessage =\
    \ message.map(letter => vowels.indexOf(letter) + 2)\n        val newMessage2 =\
    \ newMessage.map(letter => vowels.indexOf(letter) + 1)\n        newMessage2.zip(newMessage).map(x\
    \ => x.swap).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprd29ymsn.scala:21)\n\tat Problem.main(tmprd29ymsn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.toCharArray\n        val newMessage = mutable.Buffer.empty[Char]\n\
    \        val vowelsArray = vowels.toCharArray\n        val vowelsArrayLength =\
    \ vowelsArray.length\n        val messageArrayLength = messageArray.length\n \
    \       val newMessageArray = mutable.Buffer.empty[Char]\n        val newMessageArrayLength\
    \ = newMessageArray.length\n        val newMessageArrayIndex = 0\n        val\
    \ newMessageArrayIndexLength = 0\n        val newMessageArrayIndexLength2 = newMessageArrayIndexLength\
    \ * 2\n        val newMessageArrayIndexLength3 = newMessageArrayIndexLength *\
    \ 3\n        val newMessageArrayIndexLength4 = newMessageArrayIndexLength * 4\n\
    \        val newMessageArrayIndexLength5 = newMessageArrayIndexLength * 5\n  \
    \      val newMessageArrayIndexLength6 = newMessageArrayIndexLength * 6\n    \
    \    val newMessageArrayIndexLength7 = newMessageArrayIndexLength * 7\n      \
    \  val newMessageArrayIndexLength8 = newMessageArrayIndexLength * 8\n        val\
    \ newMessageArrayIndexLength9 = newMessageArrayIndexLength * 9\n        val newMessageArrayIndexLength10\
    \ = newMessageArrayIndexLength * 10\n        val newMessageArrayIndexLength11\
    \ = newMessageArrayIndexLength * 11\n        val newMessageArrayIndexLength12\
    \ = newMessageArrayIndexLength * 12\n        val newMessageArrayIndexLength13\
    \ = newMessageArrayIndexLength * 13\n        val newMessageArrayIndexLength14\
    \ = newMessageArrayIndexLength * 14\n        val newMessageArrayIndexLength15\
    \ = newMessageArrayIndexLength * 15\n        val newMessageArrayIndexLength16\
    \ = newMessageArrayIndexLength * 16\n        val newMessageArrayIndexLength17\
    \ = newMessageArrayIndexLength * 17\n        val newMessageArrayIndexLength18\
    \ = newMessageArrayIndexLength * 18\n        val newMessageArrayIndexLength19\
    \ = newMessageArrayIndexLength * 19\n        val newMessageArrayIndexLength20\
    \ = newMessageArrayIndexLength * 20\n        val newMessageArrayIndexLength21\
    \ = newMessageArrayIndexLength * 21\n        val newMessageArrayIndexLength22\
    \ = newMessageArrayIndexLength * 22\n        val newMessageArrayIndexLength23\
    \ = newMessageArrayIndexLength * 23\n        val newMessageArrayIndexLength24\
    \ = newMessageArrayIndexLength * 24\n        val newMessageArrayIndexLength25\
    \ = newMessageArrayIndexLength * 25\n        val newMessageArrayIndexLength26\
    \ = newMessageArrayIndexLength * 26\n        val new\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdrtoqzvq.scala:50:12 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrtoqzvq.scala:17:25\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mnewMessage\e[0m = mutable.Buffer.empty[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdrtoqzvq.scala:21:30 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mnewMessageArray\e[0m = mutable.Buffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdrtoqzvq.scala:51:5 ---------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659793862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case i => vowels(i+2)\n            }\n        )\n  \
    \      val newMessage = messageArray.toList.mkString(\"\")\n        val newMessageArray2\
    \ = newMessageArray.map(letter => \n            vowels.indexOf(letter) match {\n\
    \                case -1 => letter\n                case i => vowels(i+2)\n  \
    \          }\n        )\n        val newMessage2 = newMessageArray2.toList.mkString(\"\
    \")\n        val newMessageArray3 = newMessage2.split(\"\").map(letter => \n \
    \           vowels.indexOf(letter) match {\n                case -1 => letter\n\
    \                case i => vowels(i+2)\n            }\n        )\n        val\
    \ newMessage3 = newMessageArray3.toList.mkString(\"\")\n        val newMessageArray4\
    \ = newMessage3.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case i => vowels(i+2)\n\
    \            }\n        )\n        val newMessage4 = newMessageArray4.toList.mkString(\"\
    \")\n        val newMessageArray5 = newMessage4.split(\"\").map(letter => \n \
    \           vowels.indexOf(letter) match {\n                case -1 => letter\n\
    \                case i => vowels(i+2)\n            }\n        )\n        val\
    \ newMessage5 = newMessageArray5.toList.mkString(\"\")\n        val newMessageArray6\
    \ = newMessage5.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case i => vowels(i+2)\n\
    \            }\n        )\n        val newMessage6 = newMessageArray6.toList.mkString(\"\
    \")\n        val newMessageArray7 = newMessage6.split(\"\").map(letter => \n \
    \           vowels.indexOf(letter) match {\n                case -1 => letter\n\
    \                case i => vowels(i+2)\n            }\n        )\n        val\
    \ newMessage7 = newMessageArray7.toList.mkString(\"\")\n        val newMessageArray8\
    \ = newMessage7.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case i => vowels(i+2)\n\
    \            }\n        )\n        val newMessage8 = newMessageArray8.toList.mkString(\"\
    \")\n        val newMessageArray9 = newMessage8.split(\"\").map(letter => \n \
    \           vowels.indexOf(letter) match {\n                case -1 => letter\n\
    \                case i => vowels(i+2)\n            }\n        )\n        val\
    \ new\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpjc069ro9.scala:79:12 ---------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjc069ro9.scala:80:5\
    \ ---------------------\e[0m\e[0m\n\e[31m80 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)))\n\
    \        val messageWithVowelsReversed = messageWithVowels.reverse\n        val\
    \ messageWithVowelsReversedWithVowelsReplaced = messageWithVowelsReversed.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)))\n        messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuhak3ye9.scala:20:52\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Int]\n\e[31m   |\e[0m       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    ){ (acc, c) =>\n            val index = vowels.indexOf(c)\n            if (index\
    \ != -1) {\n                val vowel = vowels(index)\n                val vowelIndex\
    \ = vowels.indexOf(vowel)\n                val vowel2 = vowels(vowelIndex + 1)\n\
    \                acc + (if (vowelIndex == 0) c else vowel) + vowel2\n        \
    \    } else {\n                acc + c\n            }\n        }\n        encodedMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfou56awd.scala:31)\n\tat Problem.main(tmpfou56awd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + 1)\n    \
    \    val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ + 1).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl2a2anbl.scala:23)\n\tat Problem.main(tmpl2a2anbl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(0)) + 1)\n        val newMessage2 = message.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(1)) + 1)\n      \
    \  newMessage.zip(newMessage2).map(x => x.swap).mkString(\"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0k9xaxt9.scala:22)\n\tat Problem.main(tmp0k9xaxt9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val nextVowel = vowels(index + 1)\n              \
    \  val newLetter = if (letter != nextVowel) letter else nextVowel\n          \
    \      nextVowel\n            } else {\n                letter\n            }\n\
    \        })\n        val newMessage = newMessageArray.toList\n        newMessage.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpef1cn8zq.scala:21:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ \e[33mif\e[0m (letter != nextVowel) letter \e[33melse\e[0m nextVowel\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types String and Char cannot be compared with ==\
    \ or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659793866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => vowels(i + 2)\n\
    \        }).mkString(\"\")\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoeqv85c7.scala:24)\n\tat Problem.main(tmpoeqv85c7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ == -1) {\n                letter\n            } else {\n                vowels(index\
    \ - 1) + vowels(index)\n            }\n        }).mkString(\"\")\n        encodedMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1g1rv7t1.scala:28)\n\tat Problem.main(tmp1g1rv7t1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsCount = vowels.toList.map(letter => letter.toString.length).sum\n\
    \        val lettersCount = letters.toList.map(letter => letter.toString.length).sum\n\
    \        val messageLength = message.length\n        val encodedMessage = message.map(letter\
    \ => letter.toString.toUpperCase).map(letter => letters.indexOf(letter) + lettersCount\
    \ * vowels.indexOf(letter))\n        val encodedMessageLength = encodedMessage.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toString.length\n\
    \        val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmvmibwgf.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmvmibwgf.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmvmibwgf.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength + messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmvmibwgf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength.toString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161"
  stdout: ''
  timestamp: 1659793867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(0)) + 1)\n        newMessage.toString.replaceAll(\"\
    [aeiouAEIOU]\", vowels.charAt(0))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplwha1t03.scala:18:68\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newMessage.toString.replaceAll(\e\
    [31m\"[aeiouAEIOU]\"\e[0m, vowels.charAt(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                       ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                       Found: \
    \   Char\n\e[31m   |\e[0m                                                    \
    \   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowel.charAt(0).toUpperCase\
    \ + vowel.substring(1)\n                val newIndex = messageArray.indexOf(newLetter)\n\
    \                if (newIndex != -1) {\n                    messageArray(newIndex)\n\
    \                } else {\n                    letter\n                }\n   \
    \         } else {\n                letter\n            }\n        })\n      \
    \  newMessageArray.toString.replace(\"[\", \"\").replace(\"]\", \"\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptphgoczl.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m).toUpperCase + vowel.substring(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                value charAt is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageWithVowels = message.map(letter => vowels.contains(letter)\
    \ ? letter : letter.swapCase)\n        val messageWithVowelsAndTwoLettersAfterVowel\
    \ = messageWithVowels.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowel.map(letter => vowels.indexOf(letter)\
    \ + 2)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowel.map(letter\
    \ => vowels.indexOf(letter) + 3)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.map(letter\
    \ => vowels.indexOf(letter) + 4)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.map(letter\
    \ => vowels.indexOf(letter) + 5)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterV\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf3zqdn5a.scala:16:96 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m =\
    \ message.map(\e[36mletter\e[0m => vowels.contains(letter) ? letter : letter.swapCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                             type swapCase is not a member of Char\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpf3zqdn5a.scala:16:70 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m =\
    \ message.map(\e[36mletter\e[0m => vowels.contains(letter) ? letter : letter.swapCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \             Found:    (letter : Char)\n\e[31m   |\e[0m                     \
    \                          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpf3zqdn5a.scala:20:124 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\e\
    [0m = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.map(\e\
    [36mletter\e[0m => vowels.indexOf(letter) + \e[31m4\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                  ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpf3zqdn5a.scala:21:147 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36"
  stdout: ''
  timestamp: 1659793868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message + vowels\n        val messageWithVowelsArray = messageWithVowels.toCharArray\n\
    \        val vowelsArray = vowels.toCharArray\n        val messageWithVowelsArrayLength\
    \ = messageWithVowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + vowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength * 2\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\
    \        val messageWithVowelsArrayLength = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxin8vo14.scala:38:42 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsArrayLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxin8vo14.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsArrayLength\e[0m = messageWithVowelsArrayLength + vowelsArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmessageWithVowelsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mmessageWithVowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxin8vo14.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsArrayLength\e\
    [0m = messageWithVowelsArrayLength * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmessageWithVowelsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mmessageWithVowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxin8vo14.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsArrayLength\e\
    [0m = messageWithVowelsArrayLength + messageWithVowelsArrayLength\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmessageWithVowelsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mmessageWithVowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote"
  stdout: ''
  timestamp: 1659793867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.toLowerCase.map(letter => vowels.indexOf(letter) > -1 ? letter : vowels.charAt(vowels.indexOf(letter)\
    \ + 1))\n        val messageWithVowelsAndTwoAheadLetters = messageWithVowels.map(letter\
    \ => vowels.indexOf(letter) > -1 ? letter : vowels.charAt(vowels.indexOf(letter)\
    \ + 2))\n        val messageWithVowelsAndTwoAheadLettersAndTwoAheadLetters = messageWithVowelsAndTwoAheadLetters.map(letter\
    \ => vowels.indexOf(letter) > -1 ? letter : vowels.charAt(vowels.indexOf(letter)\
    \ + 3))\n        val messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters\
    \ = messageWithVowelsAndTwoAheadLettersAndTwoAheadLetters.map(letter => vowels.indexOf(letter)\
    \ > -1 ? letter : vowels.charAt(vowels.indexOf(letter) + 4))\n        val messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters\
    \ = messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters.map(letter\
    \ => vowels.indexOf(letter) > -1 ? letter : vowels.charAt(vowels.indexOf(letter)\
    \ + 5))\n        val messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters\
    \ = messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters.map(letter\
    \ => vowels.indexOf(letter) > -1 ? letter : vowels.charAt(vowels.indexOf(letter)\
    \ + 6))\n        val messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters\
    \ = messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters.map(letter\
    \ => vowels.indexOf(letter) > -1 ? letter : vowels.charAt(vowels.indexOf(letter)\
    \ + 7))\n        val messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters\
    \ = messageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLettersAndTwoAhead\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoheefrc_.scala:16:118 --------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m =\
    \ message.toLowerCase.map(\e[36mletter\e[0m => vowels.indexOf(letter) > -\e[31m1\e\
    [0m ? letter : vowels.charAt(vowels.indexOf(letter) + \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                             ')' expected, but '(' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpoheefrc_.scala:17:134 --------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoAheadLetters\e\
    [0m = messageWithVowels.map(\e[36mletter\e[0m => vowels.indexOf(letter) > -\e\
    [31m1\e[0m ? letter : vowels.charAt(vowels.indexOf(letter) + \e[31m2\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            ^\e\
    [0m\n\e[31m   |\e[0m                                             ')' expected,\
    \ but '(' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoheefrc_.scala:18:170\
    \ --------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndTwoAheadLettersAndTwoAheadLetters\e[0m = messageWithVowelsAndTwoAheadLetters.map(\e\
    [36mletter\e[0m => vowels.indexOf(letter) > -\e[31m1\e[0m ? letter : vowels.charAt(vowels.indexOf(letter)\
    \ + \e[31m3\e[0m))\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                            \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                             ')' expected, but '(' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpoheefrc_.scala:19:206 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoAheadLettersAndTwoAheadLettersAndTwoAheadLetters\e\
    [0m = messageWithVowelsAndTwoAheadLettersAndTwoAheadLetters.map(\e[36mletter\e\
    [0m => vowels.indexOf(lette"
  stdout: ''
  timestamp: 1659793868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            letter match {\n                case vowel => vowel.charAt(2)\n\
    \                case _ => letter\n            }\n        )\n        val newMessage\
    \ = messageArray.toList.mkString(\"\")\n        val newMessageArray2 = newMessageArray.toList.map(letter\
    \ => \n            letter match {\n                case vowel => vowel.charAt(2)\n\
    \                case _ => letter\n            }\n        )\n        val newMessage2\
    \ = newMessageArray2.toList.mkString(\"\")\n        val newMessageArray3 = newMessage2.split(\"\
    \").map(letter => \n            letter match {\n                case vowel =>\
    \ vowel.charAt(2)\n                case _ => letter\n            }\n        )\n\
    \        val newMessage3 = newMessageArray3.toList.mkString(\"\")\n        val\
    \ newMessageArray4 = newMessage3.split(\"\").map(letter => \n            letter\
    \ match {\n                case vowel => vowel.charAt(2)\n                case\
    \ _ => letter\n            }\n        )\n        val newMessage4 = newMessageArray4.toList.mkString(\"\
    \")\n        val newMessageArray5 = newMessage4.split(\"\").map(letter => \n \
    \           letter match {\n                case vowel => vowel.charAt(2)\n  \
    \              case _ => letter\n            }\n        )\n        val newMessage5\
    \ = newMessageArray5.toList.mkString(\"\")\n        val newMessageArray6 = newMessage5.split(\"\
    \").map(letter => \n            letter match {\n                case vowel =>\
    \ vowel.charAt(2)\n                case _ => letter\n            }\n        )\n\
    \        val newMessage6 = newMessageArray6.toList.mkString(\"\")\n        val\
    \ newMessageArray7 = newMessage6.split(\"\").map(letter => \n            letter\
    \ match {\n                case vowel => vowel.charAt(2)\n                case\
    \ _ => letter\n            }\n        )\n        val newMessage7 = newMessageArray7.toList.mkString(\"\
    \")\n        val newMessageArray8 = newMessage7.split(\"\").map(letter => \n \
    \           letter match {\n                case vowel => vowel.charAt(2)\n  \
    \              case _ => letter\n            }\n        )\n        val newMessage8\
    \ = newMessageArray8.toList.mkString(\"\")\n        val newMessageArray9 = newMessage8.split(\"\
    \").map(letter => \n            letter match {\n                case vowel =>\
    \ vowel.charAt(2)\n                case _ => letter\n            }\n        )\n\
    \        val newMessage9 = newMessageArray9.toList.mkString(\"\")\n        val\
    \ newMessageArray10 = newMessage9.split(\"\").map(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpq10vb6w8.scala:80:58 ---------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArray10\e[0m =\
    \ newMessage9.split(\e[31m\"\"\e[0m).map(\n\e[31m\e[31m   |\e[0m             \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10vb6w8.scala:26:36\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e\
    [0m vowel => vowel.charAt(\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \   value charAt is not a member of Matchable\n\e[31m\e[31m-- Error: /tmp/tmpq10vb6w8.scala:81:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m81 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m    No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m    where:    B is a type variable\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpq10vb6w8.scala:81:5 ---------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659793868
