name: HumanEval_145_order_by_points
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function which sorts the given list of integers\n    // in ascending\
  \ order according to the sum of their digits.\n    // Note: if there are several\
  \ items with similar sum of their digits,\n    // order them based on their index\
  \ in original list.\n    // For example:\n    // >>> orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong)))\n    // (List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))\n    // >>> orderByPoints((List[Long]()))\n\
  \    // (List[Long]())\n    def orderByPoints(nums : List[Long]) : List[Long] =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong,\
  \ 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong,\
  \ 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong,\
  \ 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n\
  \    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong,\
  \ -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n\
  \    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong,\
  \ 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong,\
  \ 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong,\
  \ -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n   \
  \ }\n\n}\n"
completions: ["        val sums = nums.map(_.toString.toInt).map(_.toInt)\n      \
    \  val sorted = sums.sortBy(_._1).reverse\n        val result = sorted.map(x =>\
    \ nums.indexOf(x)).map(x => nums(x))\n        result", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong > y.toString.toLong + x.toString.toLong)',
  "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong\
    \ > y.toString.toLong)\n        val numsSortedWithIndex = numsSorted.zipWithIndex.sortWith((x,\
    \ y) => x._1.toString.toLong + y._1.toString.toLong > y._1.toString.toLong)\n\
    \        numsSortedWithIndex.map(_._1).reverse", "        val numsCopy = nums.toList\n\
    \        numsCopy.sortWith( (a,b) => a.toString.toLong + b.toString.toLong - a.toString.toLong\
    \ - b.toString.toLong)", "        val numsMap = nums.groupBy(x => x.toString.toInt)\n\
    \        val numsMapSorted = numsMap.sortBy(x => x._2.map(_._2).sum)\n       \
    \ numsMapSorted.map(_._1).reverse", "        val numsMap = nums.groupBy(x => x.toString.toInt)\n\
    \        val sortedNums = numsMap.mapValues(_.toList).sortBy(x => x.sum).mapValues(_.toList)\n\
    \        sortedNums.map(_._1).distinct", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.toList)\n        numsMap.sortBy(x => x._2.map(_.toString.toInt).sum).mapValues(_.flatten).map(_.reverse).flatten",
  "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong - b.toString.toLong)\n\
    \        numsSorted.reverse.filterNot(x => nums.contains(x))", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong > y.toString.toLong + x.toString.toLong)',
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        numsMap.map{case (k, v) => v.sortWith(_ < _)}", "        val numsMap\
    \ = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted\
    \ = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse", " \
    \       val numsSorted = nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong\
    \ > 0)\n        numsSorted.reverse", "        val numsMap = nums.groupBy(x =>\
    \ x.toString.toInt).mapValues(_.toList)\n        numsMap.map{ case (k, v) => v.sortWith(_\
    \ < _) }.flatten.toList", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val sortedNums = numsMap.mapValues(x => x.toLong).sortBy(x => x).map(_._2)\n\
    \        nums.map(x => sortedNums(x))", '        nums.sortWith((x, y) => x.toString.toLong
    + y.toString.toLong - x.toString.toLong - y.toString.toLong)', "        val numsMap\
    \ = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted\
    \ = numsMap.sortBy(_._2).mapValues(_.toList)\n        numsMapSorted.map(_._1).distinct",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).mapValues(_._1)\n        numsMapSorted.toList.sortBy(_._1)",
  "        val numsSorted = nums.sortWith((x, y) => x.toLong + y.toLong)\n       \
    \ val numsSortedWithIndex = numsSorted.zipWithIndex.sortWith((x, y) => x._1 +\
    \ y._1)\n        numsSortedWithIndex.map(_._2).reverse", "        val numsSorted\
    \ = nums.sortWith((x, y) => x.toLong + y.toLong > 0)\n        numsSorted.reverse",
  "        val numsSorted = nums.sortWith((x, y) => x.toLong + y.toLong > 0)\n   \
    \     numsSorted.reverse", "        val numsMap : Map[Long, Int] = nums.foldLeft(Map[Long,\
    \ Int]()){\n            case (acc, x) => acc + (x -> (nums.count(y => y == x)\
    \ + 1))\n        }\n        nums.sortWith((x, y) => numsMap.get(y) - numsMap.get(x))",
  "        val numsSorted = nums.sortWith( (a, b) => math.abs(a.toDouble - b.toDouble)\
    \ )\n        val sums = numsSorted.map(_.toString.toDouble).map(math.pow)\n  \
    \      val maxSum = sums.max\n        numsSorted.map(_.toString.toDouble).map(math.pow).map(_.toInt).sortWith(\
    \ (a, b) => math.abs(a - b) ).map(_.toInt).filter(_ == maxSum)", "        val\
    \ numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val\
    \ numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong\
    \ > 0)\n        numsSorted.toList", "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n\
    \        nums.sortBy(_.toString.toInt).sortBy(sums.compare(_))", "        val\
    \ numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val\
    \ numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList",
  "        val sums = nums.map(_.toString.toInt).map(_.toLong).sum\n        nums.sortBy(_.toString.toInt).sortBy(_.toLong)",
  "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        val sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.map(nums.indexOf(_)).filter(_\
    \ != -1).sortBy(_)", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val sortedNums = numsMap.mapValues(x => x.toLong).sortBy(x => x).mapValues(x\
    \ => x.toLong)\n        val sortedNumsMap = sortedNums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val sortedNumsMapReverse = sortedNumsMap.mapValues(x => x.toLong).sortBy(x\
    \ => x).mapValues(x => x.toLong).reverse\n        val sortedNumsMapReverseMap\
    \ = sortedNumsMapReverse.groupBy(x => x.toString.toInt).mapValues(_.size)\n  \
    \      val sortedNumsMapReverseMapReverse = sortedNumsMapReverseMap.mapValues(x\
    \ => x.toLong).sortBy(x => x).mapValues(x => x.toLong).reverse\n        val sortedNumsMapReverseMapReverseMap\
    \ = sortedNumsMapReverseMapReverse.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val sortedNumsMapReverseMapReverseMapReverse = sortedNumsMapReverseMapReverseMap.mapValues(x\
    \ => x.toLong).sortBy(x => x).mapValues(x => x.toLong).reverse\n        val sortedNumsMapReverseMapReverseMapReverseMap\
    \ = sortedNumsMapReverseMapReverseMapReverse.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val sortedNumsMapReverseMapReverseMapReverseMapReverse = sortedNumsMapReverseMapReverseMapReverseMap.mapValues(x\
    \ => x.toLong).sortBy(x => x).mapValues(x => x.toLong).reverse\n        val sortedNumsMapReverseMapReverseMapReverseMapReverseMap\
    \ = sortedNumsMapReverseMapReverseMapReverseMapReverse.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val sortedNumsMapReverseMapReverseMapReverseMapReverseMapReverse = sortedNumsMapReverseMapReverseMapReverseMapReverseMap.mapValues(x\
    \ => x.toLong).sortBy(x => x).mapValues(x => x.toLong).reverse\n        val sortedNumsMapReverseMapReverseMapReverseMapReverseMapReverse\
    \ = sortedNumsMapReverseMapReverseMapReverseMapReverseMapReverse.groupBy(x =>\
    \ x.toString.toInt).mapValues(_.size)\n        val sortedNumsMapReverseMapReverseMapReverseMapReverseMapReverseMap\
    \ = sortedNumsMapReverseMapReverseMapReverseMapReverseMapReverseMap.mapValues(x\
    \ => x.to", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        nums.sortWith(compareBySum(numsMap))", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.toList)\n        val numsMapSorted = numsMap.sortBy(x\
    \ => x._2.sum)\n        numsMapSorted.map(_._1).reverse", "        val numsSorted\
    \ = nums.sortBy(_.toString.toInt)\n        numsSorted.reverse.sortWith(_.toString.toInt\
    \ < _.toString.toInt)", "        val numsCopy = nums.toList\n        numsCopy.sortWith(\
    \ (a,b) => a.toString.toLong + b.toString.toLong <=> b.toString.toLong + a.toString.toLong\
    \ )", "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n        val\
    \ sorted = sums.sortBy(_._1).reverse\n        val result = sorted.map(nums.indexOf(_))\n\
    \        result", "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong\
    \ - b.toString.toLong)\n        val numsSortedWithIndex = numsSorted.zipWithIndex.sortWith((a,\
    \ b) => a._1 - b._1).map(_._2)\n        numsSortedWithIndex.map(_._1).reverse",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        val numsMapSorted = numsMap.sortBy(x => x._2.sum)\n        numsMapSorted.map(_._1).reverse",
  '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong > 0)', " \
    \       val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val sortedNums = numsMap.sortBy(_._2).map(_._1)\n        sortedNums",
  "        val numsSorted = nums.sortWith( (a,b) => a.toString.toLong - b.toString.toLong\
    \ )\n        numsSorted.reverse", "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n\
    \        val sumsSorted = sums.sortWith(_ < _)\n        sumsSorted.map(_.toLong)",
  "        val numsMap = nums.toMap\n        val numsSorted = nums.sortWith( (a,b)\
    \ => numsMap(a).zip(numsMap(b)).map{ case (sum, a) => (sum, a) }.map{ case (sum,\
    \ b) => (sum, b) }.map{ case (sum, (a, b)) => b }.toList)\n        numsSorted",
  "        val numsMap : Map[Long, Int] = nums.foldLeft(Map[Long, Int]()){\n     \
    \       case (acc, x) => acc + (x -> (acc.getOrElse(x, 0) + x.toString.toInt))\n\
    \        }\n        nums.sortWith((x, y) => numsMap.get(x) - numsMap.get(y))",
  '        nums.sortWith( (a,b) => a.toString.toLong + b.toString.toLong > b.toString.toLong
    + a.toString.toLong )', "        val numsSorted = nums.toList.sortWith((x, y)\
    \ => x.toLong + y.toLong > 0)\n        numsSorted.toList", "        val numsMap\
    \ = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted\
    \ = numsMap.sortBy(_._2).mapValues(_._1)\n        numsMapSorted.toList.sortBy(_._1)",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList",
  "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong - b.toString.toLong)\n\
    \        val numsSortedWithIndex = numsSorted.zipWithIndex\n        val numsSortedWithIndexSorted\
    \ = numsSortedWithIndex.sortWith((a, b) => a._1 - b._1)\n        numsSortedWithIndexSorted.map(_._2).reverse",
  "        val sums = nums.map(_.toString.toInt).map(_.toLong).sum\n        nums.sortBy(_.toString.toInt).map(_.toLong).sortBy(sums)",
  "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n        val sorted\
    \ = sums.sortWith((x, y) => x.toLong > y.toLong)\n        sorted.map(_.toLong)",
  '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong == x.toString.toLong
    + y.toString.toLong)', "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2.sum)\n        numsMapSorted.map(_._1).reverse",
  "        val numsSorted = nums.sortBy(_.toString.toInt)\n        numsSorted.reverse.sortBy(_.toString.toInt)",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val sortedNums = nums.sortBy(x => numsMap.getOrElse(x.toString.toInt,\
    \ 0))\n        sortedNums", "        val numsSorted = nums.sortWith((x, y) =>\
    \ x.toString.toLong + y.toString.toLong - x.toString.toLong - y.toString.toLong)\n\
    \        numsSorted.toList", '        nums.sortWith((a, b) => a.toString.toLong
    + b.toString.toLong - a.toString.toLong - b.toString.toLong)', '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong > y.toString.toLong + x.toString.toLong)',
  "        val numsSorted = nums.sortBy(_.toString.toInt)\n        numsSorted.sortWith((x,\
    \ y) => x.toString.toInt - y.toString.toInt)", '        nums.sortWith((x, y) =>
    x.toString.toLong + y.toString.toLong > 0)', "        val sums = nums.map(_.toString.toInt).map(_.toLong).sum\n\
    \        nums.sortBy(_.toString.toInt).sortBy(_.toLong)", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong - x.toString.toLong - y.toString.toLong)',
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        val numsMapSorted = numsMap.sortBy(x => x._2.sum).mapValues(_.map(_._1))\n\
    \        numsMapSorted.map(_._2).flatten", "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n\
    \        val sumsMap = sums.toMap\n        val sortedSums = sums.sortBy(_._1).reverse\n\
    \        val sortedSumsMap = sortedSums.toMap\n        val sortedNums = nums.sortBy(_._1).reverse\n\
    \        val sortedNumsMap = sortedNums.toMap\n        val sortedNumsMapWithSum\
    \ = sortedNumsMap.map{case (k, v) => k -> sortedSumsMap.get(k)}\n        val sortedNumsMapWithSumMap\
    \ = sortedNumsMapWithSum.toMap\n        val sortedNumsMapWithSumMapWithSum = sortedNumsMapWithSumMap.map{case\
    \ (k, v) => k -> sortedSumsMapWithSum.get(k)}\n        val sortedNumsMapWithSumMapWithSumMap\
    \ = sortedNumsMapWithSumMapWithSum.toMap\n        val sortedNumsMapWithSumMapWithSumMapWithSum\
    \ = sortedNumsMapWithSumMapWithSumMapWithSum.toMap\n        val sortedNumsMapWithSumMapWithSumMapWithSumMapWithSum\
    \ = sortedNumsMapWithSumMapWithSumMapWithSumMapWithSum.toMap\n        val sortedNumsMapWithSumMapWithSumMapWithSumMapWithSumMapWithSum\
    \ = sortedNumsMapWithSumMapWithSumMapWithSumMapWithSumMapWithSum.toMap\n     \
    \   val sortedNumsMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSum\
    \ = sortedNumsMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSum.toMap\n\
    \        val sortedNumsMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSum\
    \ = sortedNumsMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSum.toMap\n\
    \        val sortedNumsMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSum\
    \ = sortedNumsMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSum.toMap\n\
    \        val sortedNumsMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWithSum\
    \ = sortedNumsMapWithSumMapWithSumMapWithSumMapWithSumMapWithSumMapWith", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong > 0)', "        val numsSorted = nums.sortWith((x,\
    \ y) => x.toString.toLong + y.toString.toLong > 0)\n        numsSorted.reverse",
  "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        val sorted = sums.toSeq.sortBy(-_._1).map(_._2)\n        sorted.toList.sortWith(_\
    \ < _)", '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong
    > y.toString.toLong + x.toString.toLong)', '        nums.sortWith((x, y) => x.toString.toLong
    + y.toString.toLong - x.toString.toLong - y.toString.toLong)', "        val numsMap\
    \ = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted\
    \ = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse", " \
    \       val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt).map(_.toInt).sum\n \
    \       nums.sortBy(_.toString.toInt).map(_.toInt).map(_.toInt).zip(sums).map\
    \ {\n            case (index, sum) => (index, sum)\n        }.sortWith(_._2 <\
    \ _._2).map(_._1)", "        val numsSorted = nums.sortWith( (a,b) => a.toString.toLong\
    \ - b.toString.toLong )\n        val numsSortedWithIndex = numsSorted.zipWithIndex.sortWith(\
    \ (a,b) => a._1 - b._1 )\n        numsSortedWithIndex.map(_._2).reverse", "  \
    \      val sums = nums.map(_.toString.toInt).map(_.toLong)\n        val sorted\
    \ = sums.sortWith((x, y) => x.toLong - y.toLong)\n        val result = sorted.map(x\
    \ => nums.indexOf(x))\n        result", "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sorted = sums.toSeq.sortBy(_._1).reverse\n        sorted.map(_.toLong).toList",
  "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val sorted =\
    \ sums.toList.sortWith(_ < _)\n        sorted.map(_.toLong)", "        val numsMap\
    \ = nums.toMap\n        val numsSortedBySum = numsMap.sortWith((x, y) => x._1\
    \ + y._1 < x._1 + y._2)\n        numsSortedBySum.map(_._1).reverse", "       \
    \ val numsSorted = nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong\
    \ > 0)\n        val numsSortedWithIndex = numsSorted.zipWithIndex.sortWith((x,\
    \ y) => x._1.toString.toLong + y._1.toString.toLong > 0)\n        numsSortedWithIndex.map(_._1).reverse",
  "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong - b.toString.toLong)\n\
    \        val sums = numsSorted.map(_.toString.toLong).map(_.sum)\n        numsSorted.zip(sums).sortBy(_._1).map(_._2)",
  "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong\
    \ > 0)\n        numsSorted.reverse", "        val numsMap = nums.groupBy(x =>\
    \ x.toString.toInt).mapValues(_.size)\n        val numsMapSorted = numsMap.sortBy(_._2).mapValues(_.toList)\n\
    \        numsMapSorted.map(_._1).distinct", "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n\
    \        val sorted = sums.sortWith(_ < _)\n        val result = sorted.map(nums.indexOf(_))\n\
    \        result", "        val numsCopy = nums.toList\n        numsCopy.sortWith((x,\
    \ y) => x.toLong + y.toLong > 0)", '        nums.sortWith((x, y) => x.toString.toLong
    + y.toString.toLong == x.toString.toLong + y.toString.toLong)', "        val numsMap\
    \ = nums.groupBy(x => x.toString.map(_.toInt).sum).mapValues(_.toList)\n     \
    \   numsMap.map{ case (sum, nums) => nums.sortBy(x => x.toString.map(_.toInt).sum).reverse\
    \ }.flatten.toList", "        val numsSorted = nums.sortWith((x, y) => x.toLong\
    \ + y.toLong)\n        numsSorted.reverse", '        nums.sortWith((a, b) => a.toString.toLong
    + b.toString.toLong - a.toString.toLong - b.toString.toLong)', "        val numsCopy\
    \ = nums.toList\n        numsCopy.sortWith((x, y) => x.toString.toLong + y.toString.toLong\
    \ - x.toString.toLong - y.toString.toLong)", '        nums.sortWith((a, b) =>
    a.toString.toLong + b.toString.toLong - a.toString.toLong - b.toString.toLong)',
  "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n        numsSorted.reverse.sortBy(x\
    \ => x.toString.toInt)", '        nums.sortWith((x, y) => x.toString.toLong +
    y.toString.toLong - x.toString.toLong - y.toString.toLong)', '        nums.sortWith((x,
    y) => x.toLong + y.toLong > 0)', "        val numsSorted = nums.sortWith((a, b)\
    \ => a.toString.toLong - b.toString.toLong)\n        val sums = numsSorted.map(_.toString.toLong).map(_.sum)\n\
    \        val maxSum = sums.max\n        numsSorted.filter(_.toString.toLong ==\
    \ maxSum)", "        val numsSorted = nums.sortBy(_.toString.toInt)\n        numsSorted.map(_.toLong)",
  '        nums.sortWith((a, b) => a.toString.toLong + b.toString.toLong > b.toString.toLong
    + a.toString.toLong)', "        val numsMap = nums.groupBy(x => x.toString.toInt)\n\
    \        val numsMapSorted = numsMap.sortBy(x => x._2.map(_.toString.toInt).sum)\n\
    \        numsMapSorted.map(_._1).distinct", "        val numsCopy = nums.toList\n\
    \        numsCopy.sortWith((x, y) => x.toLong + y.toLong > 0)", "        val numsMap\
    \ = nums.map(_.toInt).groupBy(x => x.toInt).mapValues(_.toList)\n        numsMap.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ x._2)", '        nums.sortWith((a, b) => a.toString.toLong + b.toString.toLong
    == a.toString.toLong + b.toString.toLong)', "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.sortBy(_)\n        val result = sorted.map(nums.indexOf(_))\n\
    \        result", "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n\
    \        val sorted = sums.sortBy(_._1).sortBy(_._2)\n        sorted.map(nums.indexOf(_))",
  "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n\
    \        numsSorted.reverse", "        val numsMap = nums.toMap\n        val numsSortedBySum\
    \ = nums.sortWith((x, y) => x.toLong + y.toLong)\n        val numsSortedByIndex\
    \ = numsSortedBySum.zipWithIndex.toMap\n        numsSortedByIndex.map(_._2).sortWith((x,\
    \ y) => x - y).map(_._1)", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList",
  "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n        val sorted\
    \ = sums.sortWith((a, b) => a.toLong > b.toLong)\n        val result = sorted.map(_.toLong)\n\
    \        result", '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong
    == x.toString.toLong + y.toString.toLong)', "        val sums = nums.map(_.toString.toInt).map(_.toLong).sum\n\
    \        nums.sortBy(_.toString.toInt).sortBy(_.toLong).map(_.toLong)", "    \
    \    val sums = nums.map(_.toString.toInt).map(_.toLong).sum\n        nums.sortBy(_.toString.toInt).sortWith(_._1\
    \ > _._1)", "        val numsMap : Map[Long, Int] = nums.groupBy(x => x.toInt).mapValues(_.size)\n\
    \        val numsMapSorted : Map[Long, Int] = numsMap.sortBy(_._2).reverse\n \
    \       numsMapSorted.map(_._1).reverse", "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n\
    \        val sumsMap = sums.toMap\n        val sortedSums = sums.sortBy(_._1).reverse\n\
    \        val sortedSumsMap = sortedSums.toMap\n        val sortedNums = nums.sortBy(_._1).reverse\n\
    \        val sortedNumsMap = sortedNums.toMap\n        val sortedNumsMapWithIndex\
    \ = sortedNums.zipWithIndex.sortBy(_._1).reverse\n        val sortedNumsMapWithIndexMap\
    \ = sortedNumsMapWithIndex.toMap\n        val sortedNumsMapWithIndexMapWithIndex\
    \ = sortedNumsMapWithIndex.zipWithIndex.sortBy(_._1).reverse\n        val sortedNumsMapWithIndexMapWithIndexMap\
    \ = sortedNumsMapWithIndexMapWithIndex.toMap\n        val sortedNumsMapWithIndexMapWithIndexMapWithIndex\
    \ = sortedNumsMapWithIndexMapWithIndex.zipWithIndex.sortBy(_._1).reverse\n   \
    \     val sortedNumsMapWithIndexMapWithIndexMapWithIndexMap = sortedNumsMapWithIndexMapWithIndexMapWithIndex.toMap\n\
    \        val sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndex = sortedNumsMapWithIndexMapWithIndexMapWithIndex.zipWithIndex.sortBy(_._1).reverse\n\
    \        val sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndexMap = sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndex.toMap\n\
    \        val sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndex\
    \ = sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndex.zipWithIndex.sortBy(_._1).reverse\n\
    \        val sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndexMap\
    \ = sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndex.toMap\n\
    \        val sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndex\
    \ = sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndex.zipWithIndex.sortBy(_._1).reverse\n\
    \        val sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndexMap\
    \ = sortedNumsMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndexMapWithIndex.toMap\n\
    \        val sortedNumsMap", "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n\
    \        val sorted = sums.sortWith(_ < _)\n        val result = sorted.map(nums.indexOf(_))\n\
    \        result", "        val numsMap : Map[Long, Int] = nums.foldLeft(Map[Long,\
    \ Int]())((map, num) => {\n            val digits = num.toString.reverse.grouped(2).map(_.toInt)\n\
    \            val sum = digits.foldLeft(0)((sum, digit) => sum + digit)\n     \
    \       val key = sum\n            map + (key -> (map.getOrElse(key, 0) + 1))\n\
    \        })\n        numsMap.sortBy(_._2).map(_._1)", "        val sums = nums.map(_.toString.toInt).map(_.toLong).sum\n\
    \        nums.sortBy(_.toString.toInt).sortWith((x, y) => sums - x.toString.toInt\
    \ - y.toString.toInt)", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsSortedBySum = numsMap.sortBy(_._2).reverse\n        numsSortedBySum.map(_._1).reverse",
  '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong - x.toString.toLong
    - y.toString.toLong)', "        val numsSorted = nums.sortWith( (a,b) => a.toString.toLong\
    \ - b.toString.toLong )\n        numsSorted.reverse", "        val numsMap = nums.map(x\
    \ => (x.toString.toLong, x)).toMap\n        val sortedNums = nums.sortWith((x,\
    \ y) => numsMap(x)._2 > numsMap(y)._2)\n        sortedNums.map(numsMap(_)._1)",
  "        val numsSorted = nums.sortWith((x, y) => x.toLong + y.toLong > 0)\n   \
    \     numsSorted.reverse", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList).toMap\n\
    \        nums.map(x => numsMap.getOrElse(x.toString.toInt, 0)).sortWith((x, y)\
    \ => x.toString.toInt - y.toString.toInt)", "        val numsMap = nums.groupBy(x\
    \ => x.toString.map(_.toInt).sum)\n        val sortedNums = numsMap.mapValues(_.toList).sortBy(_._1).map(_._2)\n\
    \        sortedNums.toList", "        val numsSorted = nums.sortWith( (a,b) =>\
    \ a.toString.toLong - b.toString.toLong )\n        val sums = numsSorted.map(_.toString.toLong).map(_.sum)\n\
    \        val numsSortedBySum = numsSorted.zip(sums)\n        numsSortedBySum.sortWith(\
    \ (a,b) => a._2 - b._2 )", "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n\
    \        val sorted = sums.sortWith(_ < _)\n        sorted.map(_.toLong)", " \
    \       val sums = nums.map(_.toString.toInt).map(_.toLong)\n        val sorted\
    \ = sums.sortBy(_._1).reverse\n        val result = sorted.map(nums.indexOf(_))\n\
    \        result", "        val numsSorted = nums.sortWith((x, y) => x.toLong +\
    \ y.toLong > 0)\n        numsSorted.reverse", "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n\
    \        val sorted = sums.sortBy(_._1).reverse\n        val result = sorted.map(nums.indexOf(_))\n\
    \        result", "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong\
    \ - y.toString.toLong)\n        numsSorted.reverse", "        val numsSorted =\
    \ nums.sortBy(_.toString.toInt)\n        val numsSortedWithIndex = numsSorted.zipWithIndex\n\
    \        numsSortedWithIndex.sortBy(_._2.toString.toInt).map(_._1)", '        nums.sortWith((x,
    y) => x.toLong + y.toLong == 0)', "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong > y.toString.toLong
    + x.toString.toLong)', "        val sums = nums.map(_.toString.toInt).groupBy(_\
    \ % 10).mapValues(_.size)\n        val sorted = sums.toSeq.sortBy(_._1).reverse\n\
    \        sorted.map(_.toLong).distinct", '        nums.sortWith((x, y) => x.toLong
    + y.toLong > 0)', "        val numsSorted = nums.sortBy(_.toString.toInt)\n  \
    \      numsSorted.reverse.sortBy(_.toString.toInt)", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.map(_._1)).toMap\n        nums.map(x => numsMap.getOrElse(x.toString.toInt,\
    \ 0)).sortWith(_ < _)", '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong
    > 0)', "        val numsMap = nums.groupBy(x => x.toString.toInt)\n        val\
    \ numsMapSorted = numsMap.sortBy(x => x._2.map(_.toString.toInt).sum)\n      \
    \  numsMapSorted.map(_._1).distinct", "        val numsSorted = nums.sortWith(\
    \ (a,b) => a.toString.toLong + b.toString.toLong - a.toString.toLong - b.toString.toLong)\n\
    \        numsSorted.reverse", "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1).sum)\n\
    \        sums.toList.sortWith( (a,b) => a.toLong - b.toLong)", "        val numsSorted\
    \ = nums.sortWith((a, b) => a.toLong + b.toLong)\n        numsSorted.reverse",
  '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong > 0)', " \
    \       val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sumsMap\
    \ = sums.toMap\n        val sortedNums = nums.sortBy(_.toString.toInt).sortWith(_\
    \ < _)\n        val sortedSums = sortedNums.map(_.toString.toInt).map(sumsMap.get(_))\n\
    \        sortedSums.toList", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        numsMap.mapValues(_.sortWith(_ < _)).toList.flatten", "        val numsCopy\
    \ = nums.toList\n        numsCopy.sortWith((x, y) => x.toString.toLong + y.toString.toLong\
    \ > 0)", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList",
  "        val sums = nums.map(_.toString.toInt).groupBy(_._1).mapValues(_.map(_._2)).mapValues(_.sum)\n\
    \        sums.toList.sortBy(_._1).map(_._2)", "        val numsSorted = nums.sortBy(x\
    \ => x.toString.toInt)\n        val sums = numsSorted.map(_.toString.toInt).map(x\
    \ => x.toInt).sum\n        numsSorted.map(x => sums - x).sortBy(x => x).reverse",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n        nums.sortBy(_.toString.toInt).map(_.toLong).sortBy(sums)",
  "        val numsMap : Map[Long, Long] = nums.map(x => (x.toLong, x)).toMap\n  \
    \      nums.sortWith((x, y) => numsMap(x) + numsMap(y))", "        val numsMap\
    \ = nums.toMap\n        val numsSortedBySum = nums.sortWith( (a,b) => a.toString.toLong\
    \ + b.toString.toLong - numsMap.getOrElse(b.toString.toLong, 0l).toLong)\n   \
    \     numsSortedBySum.map(_.toLong)", "        val numsMap = nums.groupBy(x =>\
    \ x.toString.toInt).mapValues(_.size)\n        val numsMapSorted = numsMap.sortBy(_._2).mapValues(_.map(_._1))\n\
    \        numsMapSorted.map(_._1).toList", '        nums.sortWith((x, y) => x.toString.toLong
    + y.toString.toLong - x.toString.toLong - y.toString.toLong)', "        val numsSorted\
    \ = nums.toList.sortWith((x, y) => x.toString.toLong + y.toString.toLong == 0)\n\
    \        numsSorted.reverse", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.map(_._1)).toMap\n\
    \        val numsMapSorted = numsMap.sortBy(_._2.sum)\n        numsMapSorted.map(_._1).reverse",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  "        val numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum)\n        val\
    \ numsMapSorted = numsMap.sortBy(_._1).map(_._2)\n        numsMapSorted.toList",
  '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong > 0)', " \
    \       val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList).mapValues(_.sortBy(_.toString.toInt).reverse).mapValues(_.map(_._2))\n\
    \        numsMap.map(_._1).reverse", "        val numsSorted = nums.toList.sortWith(\
    \ (a,b) => a.toString.toLong - b.toString.toLong )\n        numsSorted.reverse",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  "        val numsMap = nums.toMap\n        val numsSorted = nums.sortWith((a, b)\
    \ => a.toLong + b.toLong)\n        val numsSortedMap = numsSorted.toMap\n    \
    \    val numsSortedSortedMap = numsSorted.sortWith((a, b) => a.toLong + b.toLong).toMap\n\
    \        numsSortedSortedMap.map{ case (k, v) => numsSortedMap(k) }.toList", " \
    \       val numsSorted = nums.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n\
    \        val sums = numsSorted.map(_.toString.toLong).map(x => x.digits.sum)\n\
    \        numsSorted.zip(sums).sortBy(_._1).map(_._2)", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong > y.toString.toLong + x.toString.toLong)',
  "        val numsSorted = nums.toList.sortWith((x, y) => x.toString.toLong + y.toString.toLong\
    \ > 0)\n        numsSorted.toList", '        nums.sortWith( (a,b) => a.toString.toLong
    + b.toString.toLong > b.toString.toLong + a.toString.toLong )', "        val numsMap\
    \ = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val sortedNums\
    \ = numsMap.sortBy(_._2).map(_._1)\n        sortedNums", "        val numsMap\
    \ = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted\
    \ = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList", "        val\
    \ numsSorted = nums.sortWith((x, y) => x.toLong + y.toLong > 0)\n        val numsSortedWithIndex\
    \ = numsSorted.zipWithIndex.sortWith((x, y) => x._1 + y._1 > 0)\n        numsSortedWithIndex.map(_._2).reverse",
  "        val numsMap = nums.toMap\n        val numsSorted = nums.sortWith((x, y)\
    \ => numsMap(x) + numsMap(y) < 0)\n        numsSorted.toList", "        val numsMap\
    \ = nums.map(_.toInt).groupBy(_ % 10).mapValues(_.map(_ / 10).sum).toMap\n   \
    \     nums.sortWith((a, b) => numsMap(a) - numsMap(b))", "        val numsMap\
    \ = nums.groupBy(x => x.toString.map(_.toInt).sum)\n        val numsMapSorted\
    \ = numsMap.sortBy(_._1).map(_._2)\n        numsMapSorted.toList", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong > y.toString.toLong + x.toString.toLong)',
  "        val sums = nums.map(_.toString.toInt).map(_.toLong).sum\n        nums.sortBy(_.toString.toInt).sortBy(_.toLong).map(_.toLong)",
  "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong\
    \ > y.toString.toLong)\n        numsSorted.reverse", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.size)\n        val numsSortedBySum = numsMap.sortBy(_._2).reverse\n\
    \        numsSortedBySum.map(_._1).reverse", "        val sums = nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val sorted = sums.sortBy(_._1).map(_._2)\n        sorted.toList", " \
    \       val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).mapValues(_.toList)\n      \
    \  numsMapSorted.map(_._1).reverse", "        val numsSorted = nums.sortBy(_.toString.toInt)\n\
    \        numsSorted.reverse.sortBy(_.toString.toInt)", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong > 0)', "        val numsCopy = nums.toList\n\
    \        val numsCopySorted = numsCopy.sortWith((x, y) => x.toLong + y.toLong\
    \ == 0)\n        numsCopySorted.toList", "        val numsSorted = nums.sortWith(\
    \ (a,b) => a.toString.toLong - b.toString.toLong )\n        numsSorted.reverse",
  "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n        val sorted\
    \ = sums.sortBy(_._1).reverse\n        val result = sorted.map(x => nums.indexWhere(y\
    \ => y == x))\n        result", "        val numsCopy = nums.toList\n        val\
    \ sums = numsCopy.map(_.toString.toInt).sum\n        numsCopy.sortWith((x, y)\
    \ => sums - x + y)", "        val numsMap = nums.map(n => (n % 10, n)).toMap\n\
    \        val numsSorted = nums.sortWith((a, b) => numsMap(b)._2 - numsMap(a)._2)\n\
    \        numsSorted.map(numsMap(_))", "        val numsMap = nums.groupBy(x =>\
    \ x.toString.map(_.toInt).sum)\n        val numsMapSorted = numsMap.sortBy(_._1).reverse\n\
    \        numsMapSorted.map(_._2).reverse", '        nums.sortWith( (a,b) => a.toString.toLong
    + b.toString.toLong compare _)', "        val numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum)\n\
    \        val numsMapSorted = numsMap.sortBy(_._1).map(_._2)\n        numsMapSorted.toList",
  "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n\
    \        val sums = numsSorted.map(_.toString.toLong).groupBy(x => x.toString.toLong).mapValues(_.size)\n\
    \        val sortedSums = sums.sortBy(x => x._2).reverse\n        val sortedNums\
    \ = numsSorted.sortBy(x => x.toString.toLong)\n        sortedNums.zip(sortedSums).map(x\
    \ => x._1 + x._2)", '        nums.sortWith( (a,b) => a.toString.toLong + b.toString.toLong
    > b.toString.toLong + a.toString.toLong )', '        nums.sortWith((x, y) => x.toString.toLong
    + y.toString.toLong > 0)', "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        nums.sortWith((x, y) => numsMap(x).compareTo(numsMap(y))).map(x => x.toLong)",
  "        val numsCopy = nums.toList\n        numsCopy.sortWith((x, y) => x.toString.toLong\
    \ + y.toString.toLong > y.toString.toLong + x.toString.toLong)", "        val\
    \ sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted = sums.sortBy(_._1).reverse\n\
    \        val result = sorted.map(nums.indexOf(_))\n        result", "        val\
    \ numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum)\n        val sortedNums\
    \ = numsMap.mapValues(_.toList).values.sortBy(_.sum)\n        sortedNums.map(_.sum).distinct",
  "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong - b.toString.toLong)\n\
    \        numsSorted.reverse", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList).toMap\n\
    \        nums.sortWith((x, y) => numsMap(x).zip(numsMap(y)).map(_._1 + _._2).sum\
    \ < 0)", "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong -\
    \ b.toString.toLong)\n        numsSorted.reverse", "        val numsSorted = nums.sortWith((x,\
    \ y) => x.toString.toLong + y.toString.toLong > 0)\n        val sums = numsSorted.map(_.toString.toLong).sum\n\
    \        numsSorted.map(x => sums - x.toString.toLong).sortWith((x, y) => x <\
    \ y)", '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong
    > 0)', "        val sums = nums.map(_.toString.toInt).map(_.sum)\n        val\
    \ sorted = sums.toList.sortWith((a, b) => a < b)\n        val result = nums.filter(_.toString.toInt\
    \ == sorted.head).toList\n        result", '        nums.sortWith((x, y) => x.toString.toLong
    + y.toString.toLong > y.toString.toLong + x.toString.toLong)', "        val numsSorted\
    \ = nums.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n        numsSorted.reverse",
  "        val numsSorted = nums.sortWith((x, y) => x.toLong + y.toLong > 0)\n   \
    \     numsSorted.toList"]
stop_tokens:
- "\n    }\n"
