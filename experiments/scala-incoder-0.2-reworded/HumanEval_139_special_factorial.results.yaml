language: scala
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvww78l8b.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvww78l8b.scala:50:8 -------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        while\
    \ (n > 1) {\n            factorial *= n\n            factorials += factorial\n\
    \            n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86y5n5nw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp86y5n5nw.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp86y5n5nw.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpebe93ek0.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpebe93ek0.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpebe93ek0.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * (n-1) * (n-2) * ... * 1\n        factorials.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsn1r1rrc.scala:15:42 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorials += n * (n-\e[31m1\e[0m) * (n-\e[31m2\e\
    [0m) * ... * \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                             \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsn1r1rrc.scala:13:25 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpebe93ek0.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpebe93ek0.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpebe93ek0.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n - 1)\n        factorials += factorials(n - 2)\n        factorials\
    \ += factorials(n - 3)\n        factorials += factorials(n - 4)\n        factorials\
    \ += factorials(n - 5)\n        factorials += factorials(n - 6)\n        factorials\
    \ += factorials(n - 7)\n        factorials += factorials(n - 8)\n        factorials\
    \ += factorials(n - 9)\n        factorials += factorials(n - 10)\n        factorials\
    \ += factorials(n - 11)\n        factorials += factorials(n - 12)\n        factorials\
    \ += factorials(n - 13)\n        factorials += factorials(n - 14)\n        factorials\
    \ += factorials(n - 15)\n        factorials += factorials(n - 16)\n        factorials\
    \ += factorials(n - 17)\n        factorials += factorials(n - 18)\n        factorials\
    \ += factorials(n - 19)\n        factorials += factorials(n - 20)\n        factorials\
    \ += factorials(n - 21)\n        factorials += factorials(n - 22)\n        factorials\
    \ += factorials(n - 23)\n        factorials += factorials(n - 24)\n        factorials\
    \ += factorials(n - 25)\n        factorials += factorials(n - 26)\n        factorials\
    \ += factorials(n - 27)\n        factorials += factorials(n - 28)\n        factorials\
    \ += factorials(n - 29)\n        factorials += factorials(n - 30)\n        factorials\
    \ += factorials(n - 31)\n        factorials += factorials(n - 32)\n        factorials\
    \ += factorials(n - 33)\n        factorials += factorials(n - 34)\n        factorials\
    \ += factorials(n - 35)\n        factorials += factorials(n - 36)\n        factorials\
    \ += factorials(n - 37)\n        factorials += factorials(n - 38)\n        factorials\
    \ += factorials(n - 39)\n        factorials += factorials(n - 40)\n        factorials\
    \ += factorials(n - 41)\n        factorials += factorials(n - 42)\n        factorials\
    \ += factorials(n - 43)\n        factorials += factorials(n - 44)\n        factorials\
    \ += factorials(n - 45)\n        factorials += factorials(n - 46)\n        factorials\
    \ += factorials(n - 47)\n        factori\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9sapxjo5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9sapxjo5.scala:62:8 -------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkdorwo_d.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvww78l8b.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvww78l8b.scala:50:8 -------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        while\
    \ (n > 1) {\n            factorial *= n\n            factorials += factorial\n\
    \            n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86y5n5nw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp86y5n5nw.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp86y5n5nw.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkdorwo_d.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkdorwo_d.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkdorwo_d.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkdorwo_d.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0L)\
    \ 1L\n        else n * specialFactorial(n-1L)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqbk_fgo1.scala:17)\n\tat Problem.main(tmpqbk_fgo1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = 1\n        var factorial5 = 1\n        var factorial6 = 1\n        var factorial7\
    \ = 1\n        var factorial8 = 1\n        var factorial9 = 1\n        var factorial10\
    \ = 1\n        var factorial11 = 1\n        var factorial12 = 1\n        var factorial13\
    \ = 1\n        var factorial14 = 1\n        var factorial15 = 1\n        var factorial16\
    \ = 1\n        var factorial17 = 1\n        var factorial18 = 1\n        var factorial19\
    \ = 1\n        var factorial20 = 1\n        var factorial21 = 1\n        var factorial22\
    \ = 1\n        var factorial23 = 1\n        var factorial24 = 1\n        var factorial25\
    \ = 1\n        var factorial26 = 1\n        var factorial27 = 1\n        var factorial28\
    \ = 1\n        var factorial29 = 1\n        var factorial30 = 1\n        var factorial31\
    \ = 1\n        var factorial32 = 1\n        var factorial33 = 1\n        var factorial34\
    \ = 1\n        var factorial35 = 1\n        var factorial36 = 1\n        var factorial37\
    \ = 1\n        var factorial38 = 1\n        var factorial39 = 1\n        var factorial40\
    \ = 1\n        var factorial41 = 1\n        var factorial42 = 1\n        var factorial43\
    \ = 1\n        var factorial44 = 1\n        var factorial45 = 1\n        var factorial46\
    \ = 1\n        var factorial47 = 1\n        var factorial48 = 1\n        var factorial49\
    \ = 1\n        var factorial50 = 1\n        var factorial51 = 1\n        var factorial52\
    \ = 1\n        var factorial53 = 1\n        var factorial54 = 1\n        var factorial55\
    \ = 1\n        var factorial56 = 1\n        var factorial57 = 1\n        var factorial58\
    \ = 1\n        var factorial59 = 1\n        var factorial60 = 1\n        var factorial61\
    \ = 1\n        var factorial62 = 1\n        var factorial63 = 1\n        var factorial64\
    \ = 1\n        var factorial65 = 1\n        var factorial66 = 1\n        var factorial67\
    \ = 1\n        var factorial68 = 1\n        var factorial69 = 1\n        var factorial70\
    \ = 1\n        var factorial71 = 1\n        var factorial72 = 1\n        var factorial73\
    \ = 1\n        var factorial74 = 1\n        var factorial75 = 1\n        var factorial76\
    \ = 1\n        var factorial77 = 1\n        var factorial78 = 1\n        var factorial79\
    \ = 1\n        var factorial80 = 1\n        var factorial81 = 1\n        var factorial82\
    \ = 1\n        var factori\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprpn97dfh.scala:96:4 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprpn97dfh.scala:96:5 ---------------------\e[0m\e[0m\n\e[31m96 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 1l)\
    \ 1l\n        else n * specialFactorial(n-1l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5owurzl.scala:17)\n\tat Problem.main(tmpw5owurzl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while (factorial4 > 1) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0ona_p05.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * (n-1) * ... * 1\n        factorials.reduceLeft(_ * _)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp07t451gu.scala:15:34 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorials += n * (n-\e[31m1\e[0m) * ... * \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e\
    [31m   |\e[0m                                  expression expected but \e[31m'.'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp07t451gu.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for(i <- 0 until n) {\n            result *= i\n       \
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_kf6djuh.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var counter = 1\n        while (counter <= n) {\n            factorial\
    \ *= counter\n            counter += 1\n        }\n        return factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbr122n31.scala:22)\n\tat Problem.main(tmpbr122n31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        var i\
    \ = 1\n        while (i <= n) {\n            factorial *= i\n            factorials\
    \ += factorial\n            i += 1\n        }\n        factorials.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvjks0x0v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while (factorial4 > 1) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0ona_p05.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        while(n\
    \ > 1) {\n            factorial *= n\n            factorials += factorial\n  \
    \          n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp05828fim.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp05828fim.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp05828fim.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.Stack[Long]()\n        factorial.push(n)\n        factorial += n\n\
    \        factorial += n-1\n        factorial += n-2\n        factorial += n-3\n\
    \        factorial += n-4\n        factorial += n-5\n        factorial += n-6\n\
    \        factorial += n-7\n        factorial += n-8\n        factorial += n-9\n\
    \        factorial += n-10\n        factorial += n-11\n        factorial += n-12\n\
    \        factorial += n-13\n        factorial += n-14\n        factorial += n-15\n\
    \        factorial += n-16\n        factorial += n-17\n        factorial += n-18\n\
    \        factorial += n-19\n        factorial += n-20\n        factorial += n-21\n\
    \        factorial += n-22\n        factorial += n-23\n        factorial += n-24\n\
    \        factorial += n-25\n        factorial += n-26\n        factorial += n-27\n\
    \        factorial += n-28\n        factorial += n-29\n        factorial += n-30\n\
    \        factorial += n-31\n        factorial += n-32\n        factorial += n-33\n\
    \        factorial += n-34\n        factorial += n-35\n        factorial += n-36\n\
    \        factorial += n-37\n        factorial += n-38\n        factorial += n-39\n\
    \        factorial += n-40\n        factorial += n-41\n        factorial += n-42\n\
    \        factorial += n-43\n        factorial += n-44\n        factorial += n-45\n\
    \        factorial += n-46\n        factorial += n-47\n        factorial += n-48\n\
    \        factorial += n-49\n        factorial += n-50\n        factorial += n-51\n\
    \        factorial += n-52\n        factorial += n-53\n        factorial += n-54\n\
    \        factorial += n-55\n        factorial += n-56\n        factorial += n-57\n\
    \        factorial += n-58\n        factorial += n-59\n        factorial += n-60\n\
    \        factorial += n-61\n        factorial += n-62\n        factorial += n-63\n\
    \        factorial += n-64\n        factorial += n-65\n        factorial += n-66\n\
    \        factorial += n-67\n        factorial += n-68\n        factorial += n-69\n\
    \        factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptz8_47_q.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptz8_47_q.scala:85:8 -------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorial += n\n        factorial\
    \ += n-1\n        factorial += n-2\n        factorial += n-3\n        factorial\
    \ += n-4\n        factorial += n-5\n        factorial += n-6\n        factorial\
    \ += n-7\n        factorial += n-8\n        factorial += n-9\n        factorial\
    \ += n-10\n        factorial += n-11\n        factorial += n-12\n        factorial\
    \ += n-13\n        factorial += n-14\n        factorial += n-15\n        factorial\
    \ += n-16\n        factorial += n-17\n        factorial += n-18\n        factorial\
    \ += n-19\n        factorial += n-20\n        factorial += n-21\n        factorial\
    \ += n-22\n        factorial += n-23\n        factorial += n-24\n        factorial\
    \ += n-25\n        factorial += n-26\n        factorial += n-27\n        factorial\
    \ += n-28\n        factorial += n-29\n        factorial += n-30\n        factorial\
    \ += n-31\n        factorial += n-32\n        factorial += n-33\n        factorial\
    \ += n-34\n        factorial += n-35\n        factorial += n-36\n        factorial\
    \ += n-37\n        factorial += n-38\n        factorial += n-39\n        factorial\
    \ += n-40\n        factorial += n-41\n        factorial += n-42\n        factorial\
    \ += n-43\n        factorial += n-44\n        factorial += n-45\n        factorial\
    \ += n-46\n        factorial += n-47\n        factorial += n-48\n        factorial\
    \ += n-49\n        factorial += n-50\n        factorial += n-51\n        factorial\
    \ += n-52\n        factorial += n-53\n        factorial += n-54\n        factorial\
    \ += n-55\n        factorial += n-56\n        factorial += n-57\n        factorial\
    \ += n-58\n        factorial += n-59\n        factorial += n-60\n        factorial\
    \ += n-61\n        factorial += n-62\n        factorial += n-63\n        factorial\
    \ += n-64\n        factorial += n-65\n        factorial += n-66\n        factorial\
    \ += n-67\n        factorial += n-68\n        factorial += n-69\n        factorial\
    \ += n-70\n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_krj9t8d.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        while\
    \ (n > 1) {\n            factorials += factorial\n            factorial *= n\n\
    \            n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2n_0xuvu.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2n_0xuvu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2n_0xuvu.scala:18:14 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = 1 // the factorial of n!\n        var factorial5 = 1 // the factorial of (n-1)!\n\
    \        var factorial6 = 1 // the factorial of (n-2)!\n        var factorial7\
    \ = 1 // the factorial of (n-3)!\n        var factorial8 = 1 // the factorial\
    \ of (n-4)!\n        var factorial9 = 1 // the factorial of (n-5)!\n        var\
    \ factorial10 = 1 // the factorial of (n-6)!\n        var factorial11 = 1 // the\
    \ factorial of (n-7)!\n        var factorial12 = 1 // the factorial of (n-8)!\n\
    \        var factorial13 = 1 // the factorial of (n-9)!\n        var factorial14\
    \ = 1 // the factorial of (n-10)!\n        var factorial15 = 1 // the factorial\
    \ of (n-11)!\n        var factorial16 = 1 // the factorial of (n-12)!\n      \
    \  var factorial17 = 1 // the factorial of (n-13)!\n        var factorial18 =\
    \ 1 // the factorial of (n-14)!\n        var factorial19 = 1 // the factorial\
    \ of (n-15)!\n        var factorial20 = 1 // the factorial of (n-16)!\n      \
    \  var factorial21 = 1 // the factorial of (n-17)!\n        var factorial22 =\
    \ 1 // the factorial of (n-18)!\n        var factorial23 = 1 // the factorial\
    \ of (n-19)!\n        var factorial24 = 1 // the factorial of (n-20)!\n      \
    \  var factorial25 = 1 // the factorial of (n-21)!\n        var factorial26 =\
    \ 1 // the factorial of (n-22)!\n        var factorial27 = 1 // the factorial\
    \ of (n-23)!\n        var factorial28 = 1 // the factorial of (n-24)!\n      \
    \  var factorial29 = 1 // the factorial of (n-25)!\n        var factorial30 =\
    \ 1 // the factorial of (n-26)!\n        var factorial31 = 1 // the factorial\
    \ of (n-27)!\n        var factorial32 = 1 // the factorial of (n-28)!\n      \
    \  var factorial33 = 1 // the factorial of (n-29)!\n        var factorial34 =\
    \ 1 // the factorial of (n-30)!\n        var factorial35 = 1 // the factorial\
    \ of (n-31)!\n        var factorial36 = 1 // the factorial of (n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ic86ljj.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += n\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz_xesmbv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for (i <- 1 to n) {\n            factorial *= i\n        }\n  \
    \      return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwfkm1gqt.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp53hv6_98.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp53hv6_98.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp53hv6_98.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while (factorial4 > 0) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcrdh73fb.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpcrdh73fb.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcrdh73fb.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.Stack[Long]()\n        factorial.push(n)\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hw53x8j.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8bj6qgy7.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8bj6qgy7.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8bj6qgy7.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8bj6qgy7.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8bj6qgy7.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8bj6qgy7.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while (factorial4 > 1) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0ona_p05.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.ListBuffer[Long]()\n        factorial.append(1)\n        factorial.append(n\
    \ * (factorial(n-1) * factorial(n-2)))\n        factorial.append(n * (factorial(n-1)\
    \ * factorial(n-2)))\n        factorial.append(n * (factorial(n-1) * factorial(n-2)))\n\
    \        factorial.append(n * (factorial(n-1) * factorial(n-2)))\n        factorial.append(n\
    \ * (factorial(n-1) * factorial(n-2)))\n        factorial.append(n * (factorial(n-1)\
    \ * factorial(n-2)))\n        factorial.append(n * (factorial(n-1) * factorial(n-2)))\n\
    \        factorial.append(n * (factorial(n-1) * factorial(n-2)))\n        factorial.append(n\
    \ * (factorial(n-1) * factorial(n-2)))\n        factorial.append(n * (factorial(n-1)\
    \ * factorial(n-2)))\n        factorial.append(n * (factorial(n-1) * factorial(n-2)))\n\
    \        factorial.append(n * (factorial(n-1) * factorial(n-2)))\n        factorial.append(n\
    \ * (factorial(n-1) * factorial(n-2)))\n        factorial.append(n * (factorial(n-1)\
    \ * factorial(n-2)))\n        factorial.append(n * (factorial(n-1) * factorial(n-2)))\n\
    \        factorial.append(n * (factorial(n-1) * factorial(n-2)))\n        factorial.append(n\
    \ * (factorial(n-1) * factorial(n-2)))\n        factorial.append(n * (factorial(n-1)\
    \ * factorial(n-2)))\n        factorial.append(n * (factorial(n-1) * factorial(n-2)))\n\
    \        factorial.append(n * (factorial(n-1) * factorial(n-2)))\n        factorial.append(n\
    \ * (factorial(n-1) * factorial(n-2)))\n        factorial.append(n * (factorial(n-1)\
    \ * factorial(n-2)))\n        factorial.append(n * (factorial(n-1) * factorial(n-2)))\n\
    \        factorial.append(n * (factorial(n-1) * factorial(n-2)))\n        factorial.append(n\
    \ * (factorial(n-1) * factorial(n-2)))\n        factorial.append(n * (factorial(n-1)\
    \ * factorial(n-2)))\n        factorial.append(n * (factorial(n-1) * factorial(n-2)))\n\
    \        factorial.append(n * (factorial(n-1) * factorial(n-2)))\n        factorial.append(n\
    \ * (factorial(n-1) * factorial(n-2)))\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpshnvak3p.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = (n-1l) match {\n\
    \            case 0 => 1l\n            case _ => n * factorial(n-1)\n        }\n\
    \        factorials += factorial\n        factorials\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmskhvzp9.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmskhvzp9.scala:16:26 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m _ => n * factorial(n-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m \
    \                         Recursive \e[33mvalue\e[0m \e[35mfactorial\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val factorial = factorials.foldLeft(1L)\
    \ { (acc, i) => acc * i}\n        factorials += factorial\n        factorials.takeWhile(x\
    \ => x < n).last\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsigr7_qo.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp53hv6_98.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp53hv6_98.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp53hv6_98.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorial += n\n        factorial\
    \ += n-1\n        factorial += n-2\n        factorial += n-3\n        factorial\
    \ += n-4\n        factorial += n-5\n        factorial += n-6\n        factorial\
    \ += n-7\n        factorial += n-8\n        factorial += n-9\n        factorial\
    \ += n-10\n        factorial += n-11\n        factorial += n-12\n        factorial\
    \ += n-13\n        factorial += n-14\n        factorial += n-15\n        factorial\
    \ += n-16\n        factorial += n-17\n        factorial += n-18\n        factorial\
    \ += n-19\n        factorial += n-20\n        factorial += n-21\n        factorial\
    \ += n-22\n        factorial += n-23\n        factorial += n-24\n        factorial\
    \ += n-25\n        factorial += n-26\n        factorial += n-27\n        factorial\
    \ += n-28\n        factorial += n-29\n        factorial += n-30\n        factorial\
    \ += n-31\n        factorial += n-32\n        factorial += n-33\n        factorial\
    \ += n-34\n        factorial += n-35\n        factorial += n-36\n        factorial\
    \ += n-37\n        factorial += n-38\n        factorial += n-39\n        factorial\
    \ += n-40\n        factorial += n-41\n        factorial += n-42\n        factorial\
    \ += n-43\n        factorial += n-44\n        factorial += n-45\n        factorial\
    \ += n-46\n        factorial += n-47\n        factorial += n-48\n        factorial\
    \ += n-49\n        factorial += n-50\n        factorial += n-51\n        factorial\
    \ += n-52\n        factorial += n-53\n        factorial += n-54\n        factorial\
    \ += n-55\n        factorial += n-56\n        factorial += n-57\n        factorial\
    \ += n-58\n        factorial += n-59\n        factorial += n-60\n        factorial\
    \ += n-61\n        factorial += n-62\n        factorial += n-63\n        factorial\
    \ += n-64\n        factorial += n-65\n        factorial += n-66\n        factorial\
    \ += n-67\n        factorial += n-68\n        factorial += n-69\n        factorial\
    \ += n-70\n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_krj9t8d.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfv7sw0e.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplfv7sw0e.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplfv7sw0e.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0k4hqak_.scala:17)\n\tat Problem.main(tmp0k4hqak_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe59tn825.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe59tn825.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe59tn825.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += n\n        factorials +=\
    \ factorials(0) * factorials(1) * factorials(2) * factorials(3) * factorials(4)\n\
    \        factorials.sum\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_6t3n15.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 1l)\
    \ 1l\n        else n * specialFactorial(n-1l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5owurzl.scala:17)\n\tat Problem.main(tmpw5owurzl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpebe93ek0.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpebe93ek0.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpebe93ek0.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8bj6qgy7.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8bj6qgy7.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8bj6qgy7.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8bj6qgy7.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8bj6qgy7.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8bj6qgy7.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0k4hqak_.scala:17)\n\tat Problem.main(tmp0k4hqak_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var fact =\
    \ 1\n        var i = 2\n        while (i <= n) {\n            fact *= i\n    \
    \        i += 1\n        }\n        fact\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy2bzn4ne.scala:22)\n\tat Problem.main(tmpy2bzn4ne.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n) {\n            factorial *= i\n        }\n\
    \        return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgubp03l6.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0k4hqak_.scala:17)\n\tat Problem.main(tmp0k4hqak_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8bj6qgy7.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8bj6qgy7.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8bj6qgy7.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8bj6qgy7.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8bj6qgy7.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8bj6qgy7.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n - 1)\n        factorials += factorials(n - 2)\n        factorials\
    \ += factorials(n - 3)\n        factorials += factorials(n - 4)\n        factorials\
    \ += factorials(n - 5)\n        factorials += factorials(n - 6)\n        factorials\
    \ += factorials(n - 7)\n        factorials += factorials(n - 8)\n        factorials\
    \ += factorials(n - 9)\n        factorials += factorials(n - 10)\n        factorials\
    \ += factorials(n - 11)\n        factorials += factorials(n - 12)\n        factorials\
    \ += factorials(n - 13)\n        factorials += factorials(n - 14)\n        factorials\
    \ += factorials(n - 15)\n        factorials += factorials(n - 16)\n        factorials\
    \ += factorials(n - 17)\n        factorials += factorials(n - 18)\n        factorials\
    \ += factorials(n - 19)\n        factorials += factorials(n - 20)\n        factorials\
    \ += factorials(n - 21)\n        factorials += factorials(n - 22)\n        factorials\
    \ += factorials(n - 23)\n        factorials += factorials(n - 24)\n        factorials\
    \ += factorials(n - 25)\n        factorials += factorials(n - 26)\n        factorials\
    \ += factorials(n - 27)\n        factorials += factorials(n - 28)\n        factorials\
    \ += factorials(n - 29)\n        factorials += factorials(n - 30)\n        factorials\
    \ += factorials(n - 31)\n        factorials += factorials(n - 32)\n        factorials\
    \ += factorials(n - 33)\n        factorials += factorials(n - 34)\n        factorials\
    \ += factorials(n - 35)\n        factorials += factorials(n - 36)\n        factorials\
    \ += factorials(n - 37)\n        factorials += factorials(n - 38)\n        factorials\
    \ += factorials(n - 39)\n        factorials += factorials(n - 40)\n        factorials\
    \ += factorials(n - 41)\n        factorials += factorials(n - 42)\n        factorials\
    \ += factorials(n - 43)\n        factorials += factorials(n - 44)\n        factorials\
    \ += factorials(n - 45)\n        factorials += factorials(n - 46)\n        factorials\
    \ += factorials(n - 47)\n        factori\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9sapxjo5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9sapxjo5.scala:62:8 -------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorial *= i\n        }\n \
    \       return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp846a1goh.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.Stack[Long]()\n        factorial.push(n)\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hw53x8j.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8bj6qgy7.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8bj6qgy7.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8bj6qgy7.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8bj6qgy7.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8bj6qgy7.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8bj6qgy7.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkdorwo_d.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5n06xwns.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5n06xwns.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5n06xwns.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * (n-1) * (n-2) * ... * 1\n        factorials.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsn1r1rrc.scala:15:42 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorials += n * (n-\e[31m1\e[0m) * (n-\e[31m2\e\
    [0m) * ... * \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                             \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsn1r1rrc.scala:13:25 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpebe93ek0.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpebe93ek0.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpebe93ek0.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        while(n\
    \ > 1) {\n            factorial *= n\n            factorials += factorial\n  \
    \          n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp05828fim.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp05828fim.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp05828fim.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        var i\
    \ = 0\n        while (i <= n) {\n            factorials += factorial\n       \
    \     factorial *= i\n            i += 1\n        }\n        factorials.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpngqkaes_.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n        }\n    \
    \    return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiask6pju.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6zers1rl.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6zers1rl.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_g162gt5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_g162gt5.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794376
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0k4hqak_.scala:17)\n\tat Problem.main(tmp0k4hqak_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = (n : Long) => {\n\
    \            if (n == 1l) 1l\n            else {\n                factorials +=\
    \ n\n                factorial(n-1l)\n            }\n        }\n        factorial(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74ouk_io.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp74ouk_io.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                factorial(n-\e[31m1l\e[0m)\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mfactorial\e[0m needs type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while(factorial4 > 1) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2q6i1egb.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2q6i1egb.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2q6i1egb.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while (factorial4 > 1) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0ona_p05.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n) {\n            factorial *= i\n        }\n\
    \        return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgubp03l6.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        while\
    \ (n > 1) {\n            factorial *= n\n            factorials += factorial\n\
    \            n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86y5n5nw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp86y5n5nw.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp86y5n5nw.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial5\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial6\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial7\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial8\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial9\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial10\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial11\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial12\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial13\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial14\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial15\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial16\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial17\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial18\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial19\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial20\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial21\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial22\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial23\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial24\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial25\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial26\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial27\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial28\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial29\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial30\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial31\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial32\
    \ = 1 // We will use this to calculate the factorial of n!\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphm734fdc.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvww78l8b.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvww78l8b.scala:50:8 -------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while (factorial4 > 1) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0ona_p05.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorials += factorial\n            factorial *= i\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5vykqvsx.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5vykqvsx.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5vykqvsx.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while (factorial4 > 1) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0ona_p05.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n        }\n   \
    \     return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx9s2_npg.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = 1 \n        var factorial5 = 1 \n        var factorial6 = 1 \n        var\
    \ factorial7 = 1 \n        var factorial8 = 1 \n        var factorial9 = 1 \n\
    \        var factorial10 = 1 \n        var factorial11 = 1 \n        var factorial12\
    \ = 1 \n        var factorial13 = 1 \n        var factorial14 = 1 \n        var\
    \ factorial15 = 1 \n        var factorial16 = 1 \n        var factorial17 = 1\
    \ \n        var factorial18 = 1 \n        var factorial19 = 1 \n        var factorial20\
    \ = 1 \n        var factorial21 = 1 \n        var factorial22 = 1 \n        var\
    \ factorial23 = 1 \n        var factorial24 = 1 \n        var factorial25 = 1\
    \ \n        var factorial26 = 1 \n        var factorial27 = 1 \n        var factorial28\
    \ = 1 \n        var factorial29 = 1 \n        var factorial30 = 1 \n        var\
    \ factorial31 = 1 \n        var factorial32 = 1 \n        var factorial33 = 1\
    \ \n        var factorial34 = 1 \n        var factorial35 = 1 \n        var factorial36\
    \ = 1 \n        var factorial37 = 1 \n        var factorial38 = 1 \n        var\
    \ factorial39 = 1 \n        var factorial40 = 1 \n        var factorial41 = 1\
    \ \n        var factorial42 = 1 \n        var factorial43 = 1 \n        var factorial44\
    \ = 1 \n        var factorial45 = 1 \n        var factorial46 = 1 \n        var\
    \ factorial47 = 1 \n        var factorial48 = 1 \n        var factorial49 = 1\
    \ \n        var factorial50 = 1 \n        var factorial51 = 1 \n        var factorial52\
    \ = 1 \n        var factorial53 = 1 \n        var factorial54 = 1 \n        var\
    \ factorial55 = 1 \n        var factorial56 = 1 \n        var factorial57 = 1\
    \ \n        var factorial58 = 1 \n        var factorial59 = 1 \n        var factorial60\
    \ = 1 \n        var factorial61 = 1 \n        var factorial62 = 1 \n        var\
    \ factorial63 = 1 \n        var factorial64 = 1 \n        var factorial65 = 1\
    \ \n        var factorial66 = 1 \n        var factorial67 = 1 \n        var factorial68\
    \ = 1 \n        var factorial69 = 1 \n        var factorial70 = 1 \n        var\
    \ factorial71 = 1 \n        var factorial72 = 1 \n        var factorial73 = 1\
    \ \n        var factorial74 = 1 \n        var factorial75 = 1 \n        var factorial76\
    \ = 1 \n        var factorial77 = 1 \n        var factorial78 = 1 \n        var\
    \ factorial79 = 1 \n        var factorial80 = 1 \n        var factorial81 = 1\
    \ \n        var factorial82 = 1 \n        var factori\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptbjiu71z.scala:96:4 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptbjiu71z.scala:96:5 ---------------------\e[0m\e[0m\n\e[31m96 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpebe93ek0.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpebe93ek0.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpebe93ek0.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n        }\n    \
    \    return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiask6pju.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpebe93ek0.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpebe93ek0.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpebe93ek0.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = 1\n        var factorial5 = 1\n        var factorial6 = 1\n        var factorial7\
    \ = 1\n        var factorial8 = 1\n        var factorial9 = 1\n        var factorial10\
    \ = 1\n        var factorial11 = 1\n        var factorial12 = 1\n        var factorial13\
    \ = 1\n        var factorial14 = 1\n        var factorial15 = 1\n        var factorial16\
    \ = 1\n        var factorial17 = 1\n        var factorial18 = 1\n        var factorial19\
    \ = 1\n        var factorial20 = 1\n        var factorial21 = 1\n        var factorial22\
    \ = 1\n        var factorial23 = 1\n        var factorial24 = 1\n        var factorial25\
    \ = 1\n        var factorial26 = 1\n        var factorial27 = 1\n        var factorial28\
    \ = 1\n        var factorial29 = 1\n        var factorial30 = 1\n        var factorial31\
    \ = 1\n        var factorial32 = 1\n        var factorial33 = 1\n        var factorial34\
    \ = 1\n        var factorial35 = 1\n        var factorial36 = 1\n        var factorial37\
    \ = 1\n        var factorial38 = 1\n        var factorial39 = 1\n        var factorial40\
    \ = 1\n        var factorial41 = 1\n        var factorial42 = 1\n        var factorial43\
    \ = 1\n        var factorial44 = 1\n        var factorial45 = 1\n        var factorial46\
    \ = 1\n        var factorial47 = 1\n        var factorial48 = 1\n        var factorial49\
    \ = 1\n        var factorial50 = 1\n        var factorial51 = 1\n        var factorial52\
    \ = 1\n        var factorial53 = 1\n        var factorial54 = 1\n        var factorial55\
    \ = 1\n        var factorial56 = 1\n        var factorial57 = 1\n        var factorial58\
    \ = 1\n        var factorial59 = 1\n        var factorial60 = 1\n        var factorial61\
    \ = 1\n        var factorial62 = 1\n        var factorial63 = 1\n        var factorial64\
    \ = 1\n        var factorial65 = 1\n        var factorial66 = 1\n        var factorial67\
    \ = 1\n        var factorial68 = 1\n        var factorial69 = 1\n        var factorial70\
    \ = 1\n        var factorial71 = 1\n        var factorial72 = 1\n        var factorial73\
    \ = 1\n        var factorial74 = 1\n        var factorial75 = 1\n        var factorial76\
    \ = 1\n        var factorial77 = 1\n        var factorial78 = 1\n        var factorial79\
    \ = 1\n        var factorial80 = 1\n        var factorial81 = 1\n        var factorial82\
    \ = 1\n        var factori\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprpn97dfh.scala:96:4 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprpn97dfh.scala:96:5 ---------------------\e[0m\e[0m\n\e[31m96 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var fact =\
    \ 1\n        var i = 2\n        while (i <= n) {\n            fact *= i\n    \
    \        i += 1\n        }\n        return fact\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpez3d49fo.scala:22)\n\tat Problem.main(tmpez3d49fo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0k4hqak_.scala:17)\n\tat Problem.main(tmp0k4hqak_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorial += n\n        factorial\
    \ += n-1\n        factorial += n-2\n        factorial += n-3\n        factorial\
    \ += n-4\n        factorial += n-5\n        factorial += n-6\n        factorial\
    \ += n-7\n        factorial += n-8\n        factorial += n-9\n        factorial\
    \ += n-10\n        factorial += n-11\n        factorial += n-12\n        factorial\
    \ += n-13\n        factorial += n-14\n        factorial += n-15\n        factorial\
    \ += n-16\n        factorial += n-17\n        factorial += n-18\n        factorial\
    \ += n-19\n        factorial += n-20\n        factorial += n-21\n        factorial\
    \ += n-22\n        factorial += n-23\n        factorial += n-24\n        factorial\
    \ += n-25\n        factorial += n-26\n        factorial += n-27\n        factorial\
    \ += n-28\n        factorial += n-29\n        factorial += n-30\n        factorial\
    \ += n-31\n        factorial += n-32\n        factorial += n-33\n        factorial\
    \ += n-34\n        factorial += n-35\n        factorial += n-36\n        factorial\
    \ += n-37\n        factorial += n-38\n        factorial += n-39\n        factorial\
    \ += n-40\n        factorial += n-41\n        factorial += n-42\n        factorial\
    \ += n-43\n        factorial += n-44\n        factorial += n-45\n        factorial\
    \ += n-46\n        factorial += n-47\n        factorial += n-48\n        factorial\
    \ += n-49\n        factorial += n-50\n        factorial += n-51\n        factorial\
    \ += n-52\n        factorial += n-53\n        factorial += n-54\n        factorial\
    \ += n-55\n        factorial += n-56\n        factorial += n-57\n        factorial\
    \ += n-58\n        factorial += n-59\n        factorial += n-60\n        factorial\
    \ += n-61\n        factorial += n-62\n        factorial += n-63\n        factorial\
    \ += n-64\n        factorial += n-65\n        factorial += n-66\n        factorial\
    \ += n-67\n        factorial += n-68\n        factorial += n-69\n        factorial\
    \ += n-70\n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_krj9t8d.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        factorials\
    \ += factorial\n        val factorials = factorials.toList\n        factorials.reverse.foldLeft(factorial)((acc,\
    \ x) => acc * x)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdwfamzut.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = factorials.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpdwfamzut.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 1L)\
    \ {\n            return 1L\n        }\n        if (n == 0L) {\n            return\
    \ 0L\n        }\n        val factorial = (1L to n).foldLeft(1L) { (acc, x) =>\n\
    \            acc * x\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppa2ck2tf.scala:25)\n\tat Problem.main(tmppa2ck2tf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = 1 \n        var factorial5 = 1 \n        var factorial6 = 1 \n        var\
    \ factorial7 = 1 \n        var factorial8 = 1 \n        var factorial9 = 1 \n\
    \        var factorial10 = 1 \n        var factorial11 = 1 \n        var factorial12\
    \ = 1 \n        var factorial13 = 1 \n        var factorial14 = 1 \n        var\
    \ factorial15 = 1 \n        var factorial16 = 1 \n        var factorial17 = 1\
    \ \n        var factorial18 = 1 \n        var factorial19 = 1 \n        var factorial20\
    \ = 1 \n        var factorial21 = 1 \n        var factorial22 = 1 \n        var\
    \ factorial23 = 1 \n        var factorial24 = 1 \n        var factorial25 = 1\
    \ \n        var factorial26 = 1 \n        var factorial27 = 1 \n        var factorial28\
    \ = 1 \n        var factorial29 = 1 \n        var factorial30 = 1 \n        var\
    \ factorial31 = 1 \n        var factorial32 = 1 \n        var factorial33 = 1\
    \ \n        var factorial34 = 1 \n        var factorial35 = 1 \n        var factorial36\
    \ = 1 \n        var factorial37 = 1 \n        var factorial38 = 1 \n        var\
    \ factorial39 = 1 \n        var factorial40 = 1 \n        var factorial41 = 1\
    \ \n        var factorial42 = 1 \n        var factorial43 = 1 \n        var factorial44\
    \ = 1 \n        var factorial45 = 1 \n        var factorial46 = 1 \n        var\
    \ factorial47 = 1 \n        var factorial48 = 1 \n        var factorial49 = 1\
    \ \n        var factorial50 = 1 \n        var factorial51 = 1 \n        var factorial52\
    \ = 1 \n        var factorial53 = 1 \n        var factorial54 = 1 \n        var\
    \ factorial55 = 1 \n        var factorial56 = 1 \n        var factorial57 = 1\
    \ \n        var factorial58 = 1 \n        var factorial59 = 1 \n        var factorial60\
    \ = 1 \n        var factorial61 = 1 \n        var factorial62 = 1 \n        var\
    \ factorial63 = 1 \n        var factorial64 = 1 \n        var factorial65 = 1\
    \ \n        var factorial66 = 1 \n        var factorial67 = 1 \n        var factorial68\
    \ = 1 \n        var factorial69 = 1 \n        var factorial70 = 1 \n        var\
    \ factorial71 = 1 \n        var factorial72 = 1 \n        var factorial73 = 1\
    \ \n        var factorial74 = 1 \n        var factorial75 = 1 \n        var factorial76\
    \ = 1 \n        var factorial77 = 1 \n        var factorial78 = 1 \n        var\
    \ factorial79 = 1 \n        var factorial80 = 1 \n        var factorial81 = 1\
    \ \n        var factorial82 = 1 \n        var factori\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptbjiu71z.scala:96:4 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptbjiu71z.scala:96:5 ---------------------\e[0m\e[0m\n\e[31m96 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorials += factorial\n            factorial = factorial\
    \ * (i-1)\n        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzozln0od.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzozln0od.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpzozln0od.scala:17:22 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorial = factorial * (i-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m            Reassignment to val factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n) {\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgq2rz1oz.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgq2rz1oz.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgq2rz1oz.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        factorials\
    \ += factorial\n        factorials += factorial * (n - 1)\n        factorials\
    \ += factorial * (n - 2)\n        factorials += factorial * (n - 3)\n        factorials\
    \ += factorial * (n - 4)\n        factorials += factorial * (n - 5)\n        factorials\
    \ += factorial * (n - 6)\n        factorials += factorial * (n - 7)\n        factorials\
    \ += factorial * (n - 8)\n        factorials += factorial * (n - 9)\n        factorials\
    \ += factorial * (n - 10)\n        factorials += factorial * (n - 11)\n      \
    \  factorials += factorial * (n - 12)\n        factorials += factorial * (n -\
    \ 13)\n        factorials += factorial * (n - 14)\n        factorials += factorial\
    \ * (n - 15)\n        factorials += factorial * (n - 16)\n        factorials +=\
    \ factorial * (n - 17)\n        factorials += factorial * (n - 18)\n        factorials\
    \ += factorial * (n - 19)\n        factorials += factorial * (n - 20)\n      \
    \  factorials += factorial * (n - 21)\n        factorials += factorial * (n -\
    \ 22)\n        factorials += factorial * (n - 23)\n        factorials += factorial\
    \ * (n - 24)\n        factorials += factorial * (n - 25)\n        factorials +=\
    \ factorial * (n - 26)\n        factorials += factorial * (n - 27)\n        factorials\
    \ += factorial * (n - 28)\n        factorials += factorial * (n - 29)\n      \
    \  factorials += factorial * (n - 30)\n        factorials += factorial * (n -\
    \ 31)\n        factorials += factorial * (n - 32)\n        factorials += factorial\
    \ * (n - 33)\n        factorials += factorial * (n - 34)\n        factorials +=\
    \ factorial * (n - 35)\n        factorials += factorial * (n - 36)\n        factorials\
    \ += factorial * (n - 37)\n        factorials += factorial * (n - 38)\n      \
    \  factorials += factorial * (n - 39)\n        factorials += factorial * (n -\
    \ 40)\n        factorials += factorial * (n - 41)\n        factorials += factorial\
    \ * (n - 42)\n        factorials += factorial * (n - 43)\n        factorials +=\
    \ factorial * (n - 44)\n        factorials += factorial * (n - 45)\n        factorials\
    \ += factorial * (n - 46)\n        factorials += factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ijw1g1w.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n) {\n            factorial *= i\n        }\n\
    \        return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgubp03l6.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * (n-1) * (n-2) * ... * 1\n        factorials.reduceLeft(_ * _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgp2pcafl.scala:15:42 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorials += n * (n-\e[31m1\e[0m) * (n-\e[31m2\e\
    [0m) * ... * \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                             \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgp2pcafl.scala:13:25 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv26aby1v.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpv26aby1v.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv26aby1v.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpv26aby1v.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = (1l, n)\n       \
    \ while (factorial._2 > 0) {\n            factorials += factorial._1\n       \
    \     factorial._1 = factorial._2\n            factorial._2 = factorial._2-1\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyn4mz94s.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpyn4mz94s.scala:17:25 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorial._1 = factorial._2\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      Reassignment to val _1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpyn4mz94s.scala:18:25 -----------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            factorial._2 = factorial._2-\e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ Reassignment to val _2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5n06xwns.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5n06xwns.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5n06xwns.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        while(n\
    \ > 1) {\n            factorials += factorial\n            factorial *= n\n  \
    \          n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7m06b_x7.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7m06b_x7.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp7m06b_x7.scala:18:14 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv26aby1v.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpv26aby1v.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for(i <- 0 until n){\n            result *= i\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkqaaqrq8.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = 1\n        var factorial5 = 1\n        var factorial6 = 1\n        var factorial7\
    \ = 1\n        var factorial8 = 1\n        var factorial9 = 1\n        var factorial10\
    \ = 1\n        var factorial11 = 1\n        var factorial12 = 1\n        var factorial13\
    \ = 1\n        var factorial14 = 1\n        var factorial15 = 1\n        var factorial16\
    \ = 1\n        var factorial17 = 1\n        var factorial18 = 1\n        var factorial19\
    \ = 1\n        var factorial20 = 1\n        var factorial21 = 1\n        var factorial22\
    \ = 1\n        var factorial23 = 1\n        var factorial24 = 1\n        var factorial25\
    \ = 1\n        var factorial26 = 1\n        var factorial27 = 1\n        var factorial28\
    \ = 1\n        var factorial29 = 1\n        var factorial30 = 1\n        var factorial31\
    \ = 1\n        var factorial32 = 1\n        var factorial33 = 1\n        var factorial34\
    \ = 1\n        var factorial35 = 1\n        var factorial36 = 1\n        var factorial37\
    \ = 1\n        var factorial38 = 1\n        var factorial39 = 1\n        var factorial40\
    \ = 1\n        var factorial41 = 1\n        var factorial42 = 1\n        var factorial43\
    \ = 1\n        var factorial44 = 1\n        var factorial45 = 1\n        var factorial46\
    \ = 1\n        var factorial47 = 1\n        var factorial48 = 1\n        var factorial49\
    \ = 1\n        var factorial50 = 1\n        var factorial51 = 1\n        var factorial52\
    \ = 1\n        var factorial53 = 1\n        var factorial54 = 1\n        var factorial55\
    \ = 1\n        var factorial56 = 1\n        var factorial57 = 1\n        var factorial58\
    \ = 1\n        var factorial59 = 1\n        var factorial60 = 1\n        var factorial61\
    \ = 1\n        var factorial62 = 1\n        var factorial63 = 1\n        var factorial64\
    \ = 1\n        var factorial65 = 1\n        var factorial66 = 1\n        var factorial67\
    \ = 1\n        var factorial68 = 1\n        var factorial69 = 1\n        var factorial70\
    \ = 1\n        var factorial71 = 1\n        var factorial72 = 1\n        var factorial73\
    \ = 1\n        var factorial74 = 1\n        var factorial75 = 1\n        var factorial76\
    \ = 1\n        var factorial77 = 1\n        var factorial78 = 1\n        var factorial79\
    \ = 1\n        var factorial80 = 1\n        var factorial81 = 1\n        var factorial82\
    \ = 1\n        var factori\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprpn97dfh.scala:96:4 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprpn97dfh.scala:96:5 ---------------------\e[0m\e[0m\n\e[31m96 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += n\n        factorials +=\
    \ factorials(0l) * factorials(1l) * factorials(2l)\n        factorials += factorials(0l)\
    \ * factorials(1l) * factorials(2l) * factorials(3l)\n        factorials += factorials(0l)\
    \ * factorials(1l) * factorials(2l) * factorials(3l) * factorials(4l)\n      \
    \  factorials += factorials(0l) * factorials(1l) * factorials(2l) * factorials(3l)\
    \ * factorials(4l) * factorials(5l)\n        factorials += factorials(0l) * factorials(1l)\
    \ * factorials(2l) * factorials(3l) * factorials(4l) * factorials(5l) * factorials(6l)\n\
    \        factorials += factorials(0l) * factorials(1l) * factorials(2l) * factorials(3l)\
    \ * factorials(4l) * factorials(5l) * factorials(6l) * factorials(7l)\n      \
    \  factorials += factorials(0l) * factorials(1l) * factorials(2l) * factorials(3l)\
    \ * factorials(4l) * factorials(5l) * factorials(6l) * factorials(7l) * factorials(8l)\n\
    \        factorials += factorials(0l) * factorials(1l) * factorials(2l) * factorials(3l)\
    \ * factorials(4l) * factorials(5l) * factorials(6l) * factorials(7l) * factorials(8l)\
    \ * factorials(9l)\n        factorials += factorials(0l) * factorials(1l) * factorials(2l)\
    \ * factorials(3l) * factorials(4l) * factorials(5l) * factorials(6l) * factorials(7l)\
    \ * factorials(8l) * factorials(9l) * factorials(10l)\n        factorials += factorials(0l)\
    \ * factorials(1l) * factorials(2l) * factorials(3l) * factorials(4l) * factorials(5l)\
    \ * factorials(6l) * factorials(7l) * factorials(8l) * factorials(9l) * factorials(10l)\
    \ * factorials(11l)\n        factori\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpmumy9_.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpmumy9_.scala:25:8 -------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = (n) match {\n   \
    \         case 0 => 1\n            case 1 => n\n            case _ => {\n    \
    \            val factorial = (n-1) * specialFactorial(n-1)\n                factorials\
    \ += factorial\n                factorial\n            }\n        }\n        factorials\
    \ += factorial\n        factorials.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4k8hus57.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var counter = 1\n        while (counter <= n) {\n            factorial\
    \ *= counter\n            counter += 1\n        }\n        return factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbr122n31.scala:22)\n\tat Problem.main(tmpbr122n31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        while\
    \ (n > 1) {\n            factorials += factorial\n            factorial *= n\n\
    \            n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2n_0xuvu.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2n_0xuvu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2n_0xuvu.scala:18:14 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while (factorial4 > 1) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0ona_p05.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = 1\n        var factorial5 = 1\n        var factorial6 = 1\n        var factorial7\
    \ = 1\n        var factorial8 = 1\n        var factorial9 = 1\n        var factorial10\
    \ = 1\n        var factorial11 = 1\n        var factorial12 = 1\n        var factorial13\
    \ = 1\n        var factorial14 = 1\n        var factorial15 = 1\n        var factorial16\
    \ = 1\n        var factorial17 = 1\n        var factorial18 = 1\n        var factorial19\
    \ = 1\n        var factorial20 = 1\n        var factorial21 = 1\n        var factorial22\
    \ = 1\n        var factorial23 = 1\n        var factorial24 = 1\n        var factorial25\
    \ = 1\n        var factorial26 = 1\n        var factorial27 = 1\n        var factorial28\
    \ = 1\n        var factorial29 = 1\n        var factorial30 = 1\n        var factorial31\
    \ = 1\n        var factorial32 = 1\n        var factorial33 = 1\n        var factorial34\
    \ = 1\n        var factorial35 = 1\n        var factorial36 = 1\n        var factorial37\
    \ = 1\n        var factorial38 = 1\n        var factorial39 = 1\n        var factorial40\
    \ = 1\n        var factorial41 = 1\n        var factorial42 = 1\n        var factorial43\
    \ = 1\n        var factorial44 = 1\n        var factorial45 = 1\n        var factorial46\
    \ = 1\n        var factorial47 = 1\n        var factorial48 = 1\n        var factorial49\
    \ = 1\n        var factorial50 = 1\n        var factorial51 = 1\n        var factorial52\
    \ = 1\n        var factorial53 = 1\n        var factorial54 = 1\n        var factorial55\
    \ = 1\n        var factorial56 = 1\n        var factorial57 = 1\n        var factorial58\
    \ = 1\n        var factorial59 = 1\n        var factorial60 = 1\n        var factorial61\
    \ = 1\n        var factorial62 = 1\n        var factorial63 = 1\n        var factorial64\
    \ = 1\n        var factorial65 = 1\n        var factorial66 = 1\n        var factorial67\
    \ = 1\n        var factorial68 = 1\n        var factorial69 = 1\n        var factorial70\
    \ = 1\n        var factorial71 = 1\n        var factorial72 = 1\n        var factorial73\
    \ = 1\n        var factorial74 = 1\n        var factorial75 = 1\n        var factorial76\
    \ = 1\n        var factorial77 = 1\n        var factorial78 = 1\n        var factorial79\
    \ = 1\n        var factorial80 = 1\n        var factorial81 = 1\n        var factorial82\
    \ = 1\n        var factori\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprpn97dfh.scala:96:4 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprpn97dfh.scala:96:5 ---------------------\e[0m\e[0m\n\e[31m96 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvbdoih1w.scala:17)\n\tat Problem.main(tmpvbdoih1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp53hv6_98.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp53hv6_98.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp53hv6_98.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        for(i\
    \ <- 0 until n){\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj6wlu9mv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj6wlu9mv.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj6wlu9mv.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \      value *= is not a member of Long - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        factorials\
    \ += factorial\n        factorials += factorial * (n - 1l)\n        factorials\
    \ += factorial * (n - 2l)\n        factorials += factorial * (n - 3l)\n      \
    \  factorials += factorial * (n - 4l)\n        factorials += factorial * (n -\
    \ 5l)\n        factorials += factorial * (n - 6l)\n        factorials += factorial\
    \ * (n - 7l)\n        factorials += factorial * (n - 8l)\n        factorials +=\
    \ factorial * (n - 9l)\n        factorials += factorial * (n - 10l)\n        factorials\
    \ += factorial * (n - 11l)\n        factorials += factorial * (n - 12l)\n    \
    \    factorials += factorial * (n - 13l)\n        factorials += factorial * (n\
    \ - 14l)\n        factorials += factorial * (n - 15l)\n        factorials += factorial\
    \ * (n - 16l)\n        factorials += factorial * (n - 17l)\n        factorials\
    \ += factorial * (n - 18l)\n        factorials += factorial * (n - 19l)\n    \
    \    factorials += factorial * (n - 20l)\n        factorials += factorial * (n\
    \ - 21l)\n        factorials += factorial * (n - 22l)\n        factorials += factorial\
    \ * (n - 23l)\n        factorials += factorial * (n - 24l)\n        factorials\
    \ += factorial * (n - 25l)\n        factorials += factorial * (n - 26l)\n    \
    \    factorials += factorial * (n - 27l)\n        factorials += factorial * (n\
    \ - 28l)\n        factorials += factorial * (n - 29l)\n        factorials += factorial\
    \ * (n - 30l)\n        factorials += factorial * (n - 31l)\n        factorials\
    \ += factorial * (n - 32l)\n        factorials += factorial * (n - 33l)\n    \
    \    factorials += factorial * (n - 34l)\n        factorials += factorial * (n\
    \ - 35l)\n        factorials += factorial * (n - 36l)\n        factorials += factorial\
    \ * (n - 37l)\n        factorials += factorial * (n - 38l)\n        factorials\
    \ += factorial * (n - 39l)\n        factorials += factorial * (n - 40l)\n    \
    \    factorials += factorial * (n - 41l)\n        factorials += factorial * (n\
    \ - 42l)\n        factorials += factorial * (n - 43l)\n        factorials += factorial\
    \ * (n - 44l)\n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbtbve3ka.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0k4hqak_.scala:17)\n\tat Problem.main(tmp0k4hqak_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n) {\n            factorial *= i\n        }\n\
    \        return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgubp03l6.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.Array\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdmt1qp8.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdmt1qp8.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1l\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdmt1qp8.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdmt1qp8.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1l\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdmt1qp8.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e"
  stdout: ''
  timestamp: 1659794386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorial(0) = 1\n        factorial(1)\
    \ = 1\n        factorial(2) = 1\n        factorial(3) = 1\n        factorial(4)\
    \ = 1\n        factorial(5) = 1\n        factorial(6) = 1\n        factorial(7)\
    \ = 1\n        factorial(8) = 1\n        factorial(9) = 1\n        factorial(10)\
    \ = 1\n        factorial(11) = 1\n        factorial(12) = 1\n        factorial(13)\
    \ = 1\n        factorial(14) = 1\n        factorial(15) = 1\n        factorial(16)\
    \ = 1\n        factorial(17) = 1\n        factorial(18) = 1\n        factorial(19)\
    \ = 1\n        factorial(20) = 1\n        factorial(21) = 1\n        factorial(22)\
    \ = 1\n        factorial(23) = 1\n        factorial(24) = 1\n        factorial(25)\
    \ = 1\n        factorial(26) = 1\n        factorial(27) = 1\n        factorial(28)\
    \ = 1\n        factorial(29) = 1\n        factorial(30) = 1\n        factorial(31)\
    \ = 1\n        factorial(32) = 1\n        factorial(33) = 1\n        factorial(34)\
    \ = 1\n        factorial(35) = 1\n        factorial(36) = 1\n        factorial(37)\
    \ = 1\n        factorial(38) = 1\n        factorial(39) = 1\n        factorial(40)\
    \ = 1\n        factorial(41) = 1\n        factorial(42) = 1\n        factorial(43)\
    \ = 1\n        factorial(44) = 1\n        factorial(45) = 1\n        factorial(46)\
    \ = 1\n        factorial(47) = 1\n        factorial(48) = 1\n        factorial(49)\
    \ = 1\n        factorial(50) = 1\n        factorial(51) = 1\n        factorial(52)\
    \ = 1\n        factorial(53) = 1\n        factorial(54) = 1\n        factorial(55)\
    \ = 1\n        factorial(56) = 1\n        factorial(57) = 1\n        factorial(58)\
    \ = 1\n        factorial(59) = 1\n        factorial(60) = 1\n        factorial(61)\
    \ = 1\n        factorial(62) = 1\n        factorial(63) = 1\n        factorial(64)\
    \ = 1\n        factorial(65) = 1\n        factorial(66) = 1\n        factorial(67)\
    \ = 1\n        factorial(68) = 1\n        factorial(69) = 1\n        factorial(70)\
    \ = 1\n        factorial(71) = 1\n        factorial(72) = 1\n        factorial(73)\
    \ = 1\n        factorial(74) = 1\n        factorial(75) = 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4g_i0oq7.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = (n-1l) match {\n\
    \            case 0 => 1l\n            case _ => n * factorial(n-1)\n        }\n\
    \        factorials += factorial\n        factorials\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmskhvzp9.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmskhvzp9.scala:16:26 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m _ => n * factorial(n-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m \
    \                         Recursive \e[33mvalue\e[0m \e[35mfactorial\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val factorial = (1l, n)\n        while\
    \ (factorial.head < factorial.tail.head) {\n            factorials += factorial.head\n\
    \            factorial = (factorial.tail.tail, factorial.tail.head * factorial.head)\n\
    \        }\n        factorials.reverse.foldLeft(1l) { (acc, x) => acc * x }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp25p6baac.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp25p6baac.scala:17:25 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorial = (factorial.tail.tail, factorial.tail.head\
    \ * factorial.head)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Tuple.Tail[Long *: EmptyTuple.type]\n\
    \e[31m   |\e[0m                         Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp25p6baac.scala:17:46 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorial = (factorial.tail.tail, factorial.tail.head\
    \ * factorial.head)\n\e[31m\e[31m   |\e[0m                                   \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                       Found:    Float\n\e[31m   |\e[0m     \
    \                                         Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while (factorial4 > 1) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0ona_p05.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * (n-1) * ... * (n-1)\n        factorials.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppvvw6e9z.scala:15:34 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorials += n * (n-\e[31m1\e[0m) * ... * (n-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e\
    [31m   |\e[0m                                  expression expected but \e[31m'.'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppvvw6e9z.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n) {\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp257wsjfp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp257wsjfp.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp257wsjfp.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0k4hqak_.scala:17)\n\tat Problem.main(tmp0k4hqak_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 1l)\
    \ 1l\n        else n * specialFactorial(n-1l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw5owurzl.scala:17)\n\tat Problem.main(tmpw5owurzl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * (factorials(0) - 1)\n        factorials += n * (factorials(0) - 2)\n\
    \        factorials += n * (factorials(0) - 3)\n        factorials += n * (factorials(0)\
    \ - 4)\n        factorials += n * (factorials(0) - 5)\n        factorials += n\
    \ * (factorials(0) - 6)\n        factorials += n * (factorials(0) - 7)\n     \
    \   factorials += n * (factorials(0) - 8)\n        factorials += n * (factorials(0)\
    \ - 9)\n        factorials += n * (factorials(0) - 10)\n        factorials +=\
    \ n * (factorials(0) - 11)\n        factorials += n * (factorials(0) - 12)\n \
    \       factorials += n * (factorials(0) - 13)\n        factorials += n * (factorials(0)\
    \ - 14)\n        factorials += n * (factorials(0) - 15)\n        factorials +=\
    \ n * (factorials(0) - 16)\n        factorials += n * (factorials(0) - 17)\n \
    \       factorials += n * (factorials(0) - 18)\n        factorials += n * (factorials(0)\
    \ - 19)\n        factorials += n * (factorials(0) - 20)\n        factorials +=\
    \ n * (factorials(0) - 21)\n        factorials += n * (factorials(0) - 22)\n \
    \       factorials += n * (factorials(0) - 23)\n        factorials += n * (factorials(0)\
    \ - 24)\n        factorials += n * (factorials(0) - 25)\n        factorials +=\
    \ n * (factorials(0) - 26)\n        factorials += n * (factorials(0) - 27)\n \
    \       factorials += n * (factorials(0) - 28)\n        factorials += n * (factorials(0)\
    \ - 29)\n        factorials += n * (factorials(0) - 30)\n        factorials +=\
    \ n * (factorials(0) - 31)\n        factorials += n * (factorials(0) - 32)\n \
    \       factorials += n * (factorials(0) - 33)\n        factorials += n * (factorials(0)\
    \ - 34)\n        factorials += n * (factorials(0) - 35)\n        factorials +=\
    \ n * (factorials(0) - 36)\n        factorials += n * (factorials(0) - 37)\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw737uc4y.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for(i <- 0 until n) {\n            result *= i\n       \
    \ }\n        return result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn646279b.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorials += factorial\n            factorial *= i\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5vykqvsx.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5vykqvsx.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5vykqvsx.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvww78l8b.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvww78l8b.scala:50:8 -------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = 1\n        var factorial5 = 1\n        var factorial6 = 1\n        var factorial7\
    \ = 1\n        var factorial8 = 1\n        var factorial9 = 1\n        var factorial10\
    \ = 1\n        var factorial11 = 1\n        var factorial12 = 1\n        var factorial13\
    \ = 1\n        var factorial14 = 1\n        var factorial15 = 1\n        var factorial16\
    \ = 1\n        var factorial17 = 1\n        var factorial18 = 1\n        var factorial19\
    \ = 1\n        var factorial20 = 1\n        var factorial21 = 1\n        var factorial22\
    \ = 1\n        var factorial23 = 1\n        var factorial24 = 1\n        var factorial25\
    \ = 1\n        var factorial26 = 1\n        var factorial27 = 1\n        var factorial28\
    \ = 1\n        var factorial29 = 1\n        var factorial30 = 1\n        var factorial31\
    \ = 1\n        var factorial32 = 1\n        var factorial33 = 1\n        var factorial34\
    \ = 1\n        var factorial35 = 1\n        var factorial36 = 1\n        var factorial37\
    \ = 1\n        var factorial38 = 1\n        var factorial39 = 1\n        var factorial40\
    \ = 1\n        var factorial41 = 1\n        var factorial42 = 1\n        var factorial43\
    \ = 1\n        var factorial44 = 1\n        var factorial45 = 1\n        var factorial46\
    \ = 1\n        var factorial47 = 1\n        var factorial48 = 1\n        var factorial49\
    \ = 1\n        var factorial50 = 1\n        var factorial51 = 1\n        var factorial52\
    \ = 1\n        var factorial53 = 1\n        var factorial54 = 1\n        var factorial55\
    \ = 1\n        var factorial56 = 1\n        var factorial57 = 1\n        var factorial58\
    \ = 1\n        var factorial59 = 1\n        var factorial60 = 1\n        var factorial61\
    \ = 1\n        var factorial62 = 1\n        var factorial63 = 1\n        var factorial64\
    \ = 1\n        var factorial65 = 1\n        var factorial66 = 1\n        var factorial67\
    \ = 1\n        var factorial68 = 1\n        var factorial69 = 1\n        var factorial70\
    \ = 1\n        var factorial71 = 1\n        var factorial72 = 1\n        var factorial73\
    \ = 1\n        var factorial74 = 1\n        var factorial75 = 1\n        var factorial76\
    \ = 1\n        var factorial77 = 1\n        var factorial78 = 1\n        var factorial79\
    \ = 1\n        var factorial80 = 1\n        var factorial81 = 1\n        var factorial82\
    \ = 1\n        var factori\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprpn97dfh.scala:96:4 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprpn97dfh.scala:96:5 ---------------------\e[0m\e[0m\n\e[31m96 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while (factorial4 > 1) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0ona_p05.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfv7sw0e.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplfv7sw0e.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplfv7sw0e.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpebe93ek0.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpebe93ek0.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpebe93ek0.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while (factorial4 > 1) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0ona_p05.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ona_p05.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.Stack[Long]()\n        factorial.push(n)\n        while (factorial.nonEmpty)\
    \ {\n            val next = factorial.pop()\n            factorial.push(n * next)\n\
    \        }\n        factorial.head\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9yveav41.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        while\
    \ (n > 1) {\n            factorial *= n\n            factorials += factorial\n\
    \            n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86y5n5nw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp86y5n5nw.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp86y5n5nw.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ListBuffer[Long]()\n        var factorial = 1\n        while (n >\
    \ 1) {\n            factorial *= n\n            factorials += factorial\n    \
    \        n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgv4jfi_r.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpgv4jfi_r.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgv4jfi_r.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = (1l, n)\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsp_p05zr.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n - 1)\n        factorials += factorials(n - 2)\n        factorials\
    \ += factorials(n - 3)\n        factorials += factorials(n - 4)\n        factorials\
    \ += factorials(n - 5)\n        factorials += factorials(n - 6)\n        factorials\
    \ += factorials(n - 7)\n        factorials += factorials(n - 8)\n        factorials\
    \ += factorials(n - 9)\n        factorials += factorials(n - 10)\n        factorials\
    \ += factorials(n - 11)\n        factorials += factorials(n - 12)\n        factorials\
    \ += factorials(n - 13)\n        factorials += factorials(n - 14)\n        factorials\
    \ += factorials(n - 15)\n        factorials += factorials(n - 16)\n        factorials\
    \ += factorials(n - 17)\n        factorials += factorials(n - 18)\n        factorials\
    \ += factorials(n - 19)\n        factorials += factorials(n - 20)\n        factorials\
    \ += factorials(n - 21)\n        factorials += factorials(n - 22)\n        factorials\
    \ += factorials(n - 23)\n        factorials += factorials(n - 24)\n        factorials\
    \ += factorials(n - 25)\n        factorials += factorials(n - 26)\n        factorials\
    \ += factorials(n - 27)\n        factorials += factorials(n - 28)\n        factorials\
    \ += factorials(n - 29)\n        factorials += factorials(n - 30)\n        factorials\
    \ += factorials(n - 31)\n        factorials += factorials(n - 32)\n        factorials\
    \ += factorials(n - 33)\n        factorials += factorials(n - 34)\n        factorials\
    \ += factorials(n - 35)\n        factorials += factorials(n - 36)\n        factorials\
    \ += factorials(n - 37)\n        factorials += factorials(n - 38)\n        factorials\
    \ += factorials(n - 39)\n        factorials += factorials(n - 40)\n        factorials\
    \ += factorials(n - 41)\n        factorials += factorials(n - 42)\n        factorials\
    \ += factorials(n - 43)\n        factorials += factorials(n - 44)\n        factorials\
    \ += factorials(n - 45)\n        factorials += factorials(n - 46)\n        factorials\
    \ += factorials(n - 47)\n        factori\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9sapxjo5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9sapxjo5.scala:62:8 -------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        var factorialCounter\
    \ = 0\n        while (factorialCounter < n) {\n            factorials += factorial\n\
    \            factorialCounter = factorialCounter + 1\n            factorial =\
    \ factorial * (factorialCounter + 1)\n        }\n        factorials.last\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3a0ufzkr.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n - 1)\n        factorials += factorials(n - 2)\n        factorials\
    \ += factorials(n - 3)\n        factorials += factorials(n - 4)\n        factorials\
    \ += factorials(n - 5)\n        factorials += factorials(n - 6)\n        factorials\
    \ += factorials(n - 7)\n        factorials += factorials(n - 8)\n        factorials\
    \ += factorials(n - 9)\n        factorials += factorials(n - 10)\n        factorials\
    \ += factorials(n - 11)\n        factorials += factorials(n - 12)\n        factorials\
    \ += factorials(n - 13)\n        factorials += factorials(n - 14)\n        factorials\
    \ += factorials(n - 15)\n        factorials += factorials(n - 16)\n        factorials\
    \ += factorials(n - 17)\n        factorials += factorials(n - 18)\n        factorials\
    \ += factorials(n - 19)\n        factorials += factorials(n - 20)\n        factorials\
    \ += factorials(n - 21)\n        factorials += factorials(n - 22)\n        factorials\
    \ += factorials(n - 23)\n        factorials += factorials(n - 24)\n        factorials\
    \ += factorials(n - 25)\n        factorials += factorials(n - 26)\n        factorials\
    \ += factorials(n - 27)\n        factorials += factorials(n - 28)\n        factorials\
    \ += factorials(n - 29)\n        factorials += factorials(n - 30)\n        factorials\
    \ += factorials(n - 31)\n        factorials += factorials(n - 32)\n        factorials\
    \ += factorials(n - 33)\n        factorials += factorials(n - 34)\n        factorials\
    \ += factorials(n - 35)\n        factorials += factorials(n - 36)\n        factorials\
    \ += factorials(n - 37)\n        factorials += factorials(n - 38)\n        factorials\
    \ += factorials(n - 39)\n        factorials += factorials(n - 40)\n        factorials\
    \ += factorials(n - 41)\n        factorials += factorials(n - 42)\n        factorials\
    \ += factorials(n - 43)\n        factorials += factorials(n - 44)\n        factorials\
    \ += factorials(n - 45)\n        factorials += factorials(n - 46)\n        factorials\
    \ += factorials(n - 47)\n        factori\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9sapxjo5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9sapxjo5.scala:62:8 -------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n        }\n   \
    \     return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx9s2_npg.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        while\
    \ (n > 1) {\n            factorial *= n\n            factorials += factorial\n\
    \            n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86y5n5nw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp86y5n5nw.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp86y5n5nw.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorial *= i\n        }\n \
    \       return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp846a1goh.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn4uq8tc.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfn4uq8tc.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n        }\n    \
    \    return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiask6pju.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var i = 2\n        while (i <= n) {\n            factorial *= i\n\
    \            i += 1\n        }\n        return factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmped9h7h89.scala:22)\n\tat Problem.main(tmped9h7h89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * (n - 1)\n        factorials += n * (n - 1) * n\n        factorials +=\
    \ n * (n - 1) * n * n\n        factorials += n * (n - 1) * n * n * n\n       \
    \ factorials += n * (n - 1) * n * n * n * n\n        factorials += n * (n - 1)\
    \ * n * n * n * n * n\n        factorials += n * (n - 1) * n * n * n * n * n *\
    \ n\n        factorials += n * (n - 1) * n * n * n * n * n * n * n\n        factorials\
    \ += n * (n - 1) * n * n * n * n * n * n * n * n\n        factorials += n * (n\
    \ - 1) * n * n * n * n * n * n * n * n * n\n        factorials += n * (n - 1)\
    \ * n * n * n * n * n * n * n * n * n * n\n        factorials += n * (n - 1) *\
    \ n * n * n * n * n * n * n * n * n * n * n\n        factorials += n * (n - 1)\
    \ * n * n * n * n * n * n * n * n * n * n * n * n\n        factorials += n * (n\
    \ - 1) * n * n * n * n * n * n * n * n * n * n * n * n * n\n        factorials\
    \ += n * (n - 1) * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n\
    \        factorials += n * (n - 1) * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n\n        factorials += n * (n - 1) * n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n\n        factorials += n * (n\
    \ - 1) * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n \
    \       factorials += n * (n - 1) * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n\n        factorials += n * (n - 1) * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n        factorials\
    \ += n * (n - 1) * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n\n        factorials += n * (n - 1) * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n\n        factorials += n\
    \ * (n - 1) * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n\n        factorials += n * (n - 1) * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n        factori\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9n265w6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9n265w6.scala:39:8 -------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n) {\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp257wsjfp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp257wsjfp.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp257wsjfp.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n        }\n    \
    \    return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiask6pju.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var counter = 1\n        while (counter <= n) {\n            factorial\
    \ *= counter\n            counter += 1\n        }\n        return factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbr122n31.scala:22)\n\tat Problem.main(tmpbr122n31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorial += n\n        factorial\
    \ += n-1\n        factorial += n-2\n        factorial += n-3\n        factorial\
    \ += n-4\n        factorial += n-5\n        factorial += n-6\n        factorial\
    \ += n-7\n        factorial += n-8\n        factorial += n-9\n        factorial\
    \ += n-10\n        factorial += n-11\n        factorial += n-12\n        factorial\
    \ += n-13\n        factorial += n-14\n        factorial += n-15\n        factorial\
    \ += n-16\n        factorial += n-17\n        factorial += n-18\n        factorial\
    \ += n-19\n        factorial += n-20\n        factorial += n-21\n        factorial\
    \ += n-22\n        factorial += n-23\n        factorial += n-24\n        factorial\
    \ += n-25\n        factorial += n-26\n        factorial += n-27\n        factorial\
    \ += n-28\n        factorial += n-29\n        factorial += n-30\n        factorial\
    \ += n-31\n        factorial += n-32\n        factorial += n-33\n        factorial\
    \ += n-34\n        factorial += n-35\n        factorial += n-36\n        factorial\
    \ += n-37\n        factorial += n-38\n        factorial += n-39\n        factorial\
    \ += n-40\n        factorial += n-41\n        factorial += n-42\n        factorial\
    \ += n-43\n        factorial += n-44\n        factorial += n-45\n        factorial\
    \ += n-46\n        factorial += n-47\n        factorial += n-48\n        factorial\
    \ += n-49\n        factorial += n-50\n        factorial += n-51\n        factorial\
    \ += n-52\n        factorial += n-53\n        factorial += n-54\n        factorial\
    \ += n-55\n        factorial += n-56\n        factorial += n-57\n        factorial\
    \ += n-58\n        factorial += n-59\n        factorial += n-60\n        factorial\
    \ += n-61\n        factorial += n-62\n        factorial += n-63\n        factorial\
    \ += n-64\n        factorial += n-65\n        factorial += n-66\n        factorial\
    \ += n-67\n        factorial += n-68\n        factorial += n-69\n        factorial\
    \ += n-70\n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_krj9t8d.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var counter = 1\n        while (counter <= n) {\n            factorial\
    \ *= counter\n            counter += 1\n        }\n        return factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbr122n31.scala:22)\n\tat Problem.main(tmpbr122n31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0k4hqak_.scala:17)\n\tat Problem.main(tmp0k4hqak_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkdorwo_d.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n        }\n   \
    \     return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx9s2_npg.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794376
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        var i : Long = 1\n        while (i <= n) {\n           \
    \ result *= i\n            i += 1\n        }\n        return result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpupqtb25k.scala:22)\n\tat Problem.main(tmpupqtb25k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n        }\n    \
    \    return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiask6pju.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6zers1rl.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6zers1rl.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while (factorial4 > 1) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        return factorial\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd_szh9zb.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpd_szh9zb.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd_szh9zb.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial * (n - 1)\n        factorials += factorial * (n - 2)\n\
    \        factorials += factorial * (n - 3)\n        factorials += factorial *\
    \ (n - 4)\n        factorials += factorial * (n - 5)\n        factorials += factorial\
    \ * (n - 6)\n        factorials += factorial * (n - 7)\n        factorials +=\
    \ factorial * (n - 8)\n        factorials += factorial * (n - 9)\n        factorials\
    \ += factorial * (n - 10)\n        factorials += factorial * (n - 11)\n      \
    \  factorials += factorial * (n - 12)\n        factorials += factorial * (n -\
    \ 13)\n        factorials += factorial * (n - 14)\n        factorials += factorial\
    \ * (n - 15)\n        factorials += factorial * (n - 16)\n        factorials +=\
    \ factorial * (n - 17)\n        factorials += factorial * (n - 18)\n        factorials\
    \ += factorial * (n - 19)\n        factorials += factorial * (n - 20)\n      \
    \  factorials += factorial * (n - 21)\n        factorials += factorial * (n -\
    \ 22)\n        factorials += factorial * (n - 23)\n        factorials += factorial\
    \ * (n - 24)\n        factorials += factorial * (n - 25)\n        factorials +=\
    \ factorial * (n - 26)\n        factorials += factorial * (n - 27)\n        factorials\
    \ += factorial * (n - 28)\n        factorials += factorial * (n - 29)\n      \
    \  factorials += factorial * (n - 30)\n        factorials += factorial * (n -\
    \ 31)\n        factorials += factorial * (n - 32)\n        factorials += factorial\
    \ * (n - 33)\n        factorials += factorial * (n - 34)\n        factorials +=\
    \ factorial * (n - 35)\n        factorials += factorial * (n - 36)\n        factorials\
    \ += factorial * (n - 37)\n        factorials += factorial * (n - 38)\n      \
    \  factorials += factorial * (n - 39)\n        factorials += factorial * (n -\
    \ 40)\n        factorials += factorial * (n - 41)\n        factorials += factorial\
    \ * (n - 42)\n        factorials += factorial * (n - 43)\n        factorials +=\
    \ factorial * (n - 44)\n        factorials += factorial * (n - 45)\n        factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa2jy5f0x.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpa2jy5f0x.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 1l)\
    \ 1l\n        else {\n            val factorial = factorial(n-1l)\n          \
    \  factorial * factorial\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp67potbmz.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mfactorial\e[0m = factorial(n-\e\
    [31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m\
    \   |\e[0m                            Recursive \e[33mvalue\e[0m \e[35mfactorial\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5n06xwns.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5n06xwns.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5n06xwns.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val factorial = 1\n        while (n >\
    \ 1) {\n            factorials += factorial\n            factorial *= n\n    \
    \        n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp08vjodqp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp08vjodqp.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp08vjodqp.scala:18:14 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = (1l) :: factorials\n\
    \        val factorials = (1l) :: factorials\n        val factorials = (1l) ::\
    \ factorials\n        val factorials = (1l) :: factorials\n        val factorials\
    \ = (1l) :: factorials\n        val factorials = (1l) :: factorials\n        val\
    \ factorials = (1l) :: factorials\n        val factorials = (1l) :: factorials\n\
    \        val factorials = (1l) :: factorials\n        val factorials = (1l) ::\
    \ factorials\n        val factorials = (1l) :: factorials\n        val factorials\
    \ = (1l) :: factorials\n        val factorials = (1l) :: factorials\n        val\
    \ factorials = (1l) :: factorials\n        val factorials = (1l) :: factorials\n\
    \        val factorials = (1l) :: factorials\n        val factorials = (1l) ::\
    \ factorials\n        val factorials = (1l) :: factorials\n        val factorials\
    \ = (1l) :: factorials\n        val factorials = (1l) :: factorials\n        val\
    \ factorials = (1l) :: factorials\n        val factorials = (1l) :: factorials\n\
    \        val factorials = (1l) :: factorials\n        val factorials = (1l) ::\
    \ factorials\n        val factorials = (1l) :: factorials\n        val factorials\
    \ = (1l) :: factorials\n        val factorials = (1l) :: factorials\n        val\
    \ factorials = (1l) :: factorials\n        val factorials = (1l) :: factorials\n\
    \        val factorials = (1l) :: factorials\n        val factorials = (1l) ::\
    \ factorials\n        val factorials = (1l) :: factorials\n        val factorials\
    \ = (1l) :: factorials\n        val factorials = (1l) :: factorials\n        val\
    \ factorials = (1l) :: factorials\n        val factorials = (1l) :: factorials\n\
    \        val factorials = (1l) :: factorials\n        val factorials = (1l) ::\
    \ factorials\n        val factorials = (1l) :: factorials\n        val factorials\
    \ = (1l) :: factorials\n        val factorials = (1l) :: factorials\n        val\
    \ factorials = (1\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5nsg2rh6.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nsg2rh6.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = (\e[31m1l\e[0m) :: factorials\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorials is\
    \ already defined as \e[33mvalue\e[0m \e[35mfactorials\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nsg2rh6.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = (\e[31m1l\e[0m) :: factorials\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorials is\
    \ already defined as \e[33mvalue\e[0m \e[35mfactorials\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nsg2rh6.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = (\e[31m1l\e[0m) :: factorials\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorials is\
    \ already defined as \e[33mvalue\e[0m \e[35mfactorials\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nsg2rh6.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = (\e[31m1l\e[0m) :: factorials\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorials is\
    \ already defined as \e[33mvalue\e[0m \e[35mfactorials\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nsg2rh6.scala:19:12\
    \ --"
  stdout: ''
  timestamp: 1659794390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val factorial = (n-1l) match {\n     \
    \       case 0 => 1\n            case _ => n * factorial(n-1)\n        }\n   \
    \     factorials += factorial\n        factorials\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu03bkuqm.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu03bkuqm.scala:16:26 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m _ => n * factorial(n-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m \
    \                         Recursive \e[33mvalue\e[0m \e[35mfactorial\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ListBuffer[Long]()\n        var factorial = 1\n        factorials\
    \ += factorial\n        while(factorials.size < n){\n            factorial *=\
    \ factorials.last\n            factorials += factorial\n        }\n        factorials.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdfl7xil_.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n - 1)\n        factorials += factorials(n - 2)\n        factorials\
    \ += factorials(n - 3)\n        factorials += factorials(n - 4)\n        factorials\
    \ += factorials(n - 5)\n        factorials += factorials(n - 6)\n        factorials\
    \ += factorials(n - 7)\n        factorials += factorials(n - 8)\n        factorials\
    \ += factorials(n - 9)\n        factorials += factorials(n - 10)\n        factorials\
    \ += factorials(n - 11)\n        factorials += factorials(n - 12)\n        factorials\
    \ += factorials(n - 13)\n        factorials += factorials(n - 14)\n        factorials\
    \ += factorials(n - 15)\n        factorials += factorials(n - 16)\n        factorials\
    \ += factorials(n - 17)\n        factorials += factorials(n - 18)\n        factorials\
    \ += factorials(n - 19)\n        factorials += factorials(n - 20)\n        factorials\
    \ += factorials(n - 21)\n        factorials += factorials(n - 22)\n        factorials\
    \ += factorials(n - 23)\n        factorials += factorials(n - 24)\n        factorials\
    \ += factorials(n - 25)\n        factorials += factorials(n - 26)\n        factorials\
    \ += factorials(n - 27)\n        factorials += factorials(n - 28)\n        factorials\
    \ += factorials(n - 29)\n        factorials += factorials(n - 30)\n        factorials\
    \ += factorials(n - 31)\n        factorials += factorials(n - 32)\n        factorials\
    \ += factorials(n - 33)\n        factorials += factorials(n - 34)\n        factorials\
    \ += factorials(n - 35)\n        factorials += factorials(n - 36)\n        factorials\
    \ += factorials(n - 37)\n        factorials += factorials(n - 38)\n        factorials\
    \ += factorials(n - 39)\n        factorials += factorials(n - 40)\n        factorials\
    \ += factorials(n - 41)\n        factorials += factorials(n - 42)\n        factorials\
    \ += factorials(n - 43)\n        factorials += factorials(n - 44)\n        factorials\
    \ += factorials(n - 45)\n        factorials += factorials(n - 46)\n        factorials\
    \ += factorials(n - 47)\n        factori\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9sapxjo5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9sapxjo5.scala:62:8 -------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val factorial = n\n        factorials\
    \ += factorial\n        factorials += factorial * (factorial-1)\n        factorials\
    \ += factorial * (factorial-2) * factorial\n        factorials += factorial *\
    \ (factorial-3) * factorial * factorial\n        factorials += factorial * (factorial-4)\
    \ * factorial * factorial * factorial\n        factorials += factorial * (factorial-5)\
    \ * factorial * factorial * factorial * factorial\n        factorials += factorial\
    \ * (factorial-6) * factorial * factorial * factorial * factorial * factorial\n\
    \        factorials += factorial * (factorial-7) * factorial * factorial * factorial\
    \ * factorial * factorial * factorial\n        factorials += factorial * (factorial-8)\
    \ * factorial * factorial * factorial * factorial * factorial * factorial * factorial\n\
    \        factorials += factorial * (factorial-9) * factorial * factorial * factorial\
    \ * factorial * factorial * factorial * factorial * factorial * factorial\n  \
    \      factorials += factorial * (factorial-10) * factorial * factorial * factorial\
    \ * factorial * factorial * factorial * factorial * factorial * factorial * factorial\
    \ * factorial\n        factorials += factorial * (factorial-11) * factorial *\
    \ factorial * factorial * factorial * factorial * factorial * factorial * factorial\
    \ * factorial * factorial * factorial * factorial * factorial\n        factorials\
    \ += factorial * (factorial-12) * factorial * factorial * factorial * factorial\
    \ * factorial * factorial * factorial * factorial * factorial * factorial * factorial\
    \ * factorial * factorial * factorial * factorial * factorial\n        factorials\
    \ += factorial * (factorial-13) * factorial * factorial * factorial * factorial\
    \ * factorial * factorial * factorial * factorial * factorial * factorial * factorial\
    \ * factorial * factorial * factorial * factorial * factorial * factorial * factorial\
    \ * factorial * factorial\n        factorials += factorial * (factorial-14) *\
    \ factorial * factorial * factorial * factorial * factorial * factorial * factorial\
    \ * factorial * factorial * factorial * factorial * factorial * factorial * factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv525zk6v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n        val factorials\
    \ = mutable.Array\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdmt1qp8.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdmt1qp8.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1l\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdmt1qp8.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjdmt1qp8.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1l\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjdmt1qp8.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e"
  stdout: ''
  timestamp: 1659794386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        while(n\
    \ > 1) {\n            factorial *= n\n            factorials += factorial\n  \
    \          n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp05828fim.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp05828fim.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp05828fim.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        factorials\
    \ += factorial\n        while (factorials.size < n) factorials += factorial *\
    \ factorials.last\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2spayj58.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        while\
    \ (n > 1) {\n            factorial *= n\n            factorials += factorial\n\
    \            n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86y5n5nw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp86y5n5nw.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp86y5n5nw.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        while\
    \ (n > 1) {\n            factorials += factorial\n            factorial *= n\n\
    \            n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2n_0xuvu.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2n_0xuvu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2n_0xuvu.scala:18:14 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-1)\n        factorials\
    \ += factorials(n-1)\n        factori\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp82nwnjr8.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp82nwnjr8.scala:64:8 -------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val factorial = (n-1l) match {\n     \
    \       case 0 => 1l\n            case 1 => n\n            case _ => n * specialFactorial(n-1)\n\
    \        }\n        factorials += factorial\n        factorials\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9byyk4ez.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n) {\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp257wsjfp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp257wsjfp.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp257wsjfp.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvww78l8b.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvww78l8b.scala:50:8 -------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while (factorial4 > 0) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcrdh73fb.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpcrdh73fb.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcrdh73fb.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n        }\n   \
    \     return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx9s2_npg.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794376
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 1L)\
    \ 1L\n        else n * specialFactorial(n-1L)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxoql5rz_.scala:17)\n\tat Problem.main(tmpxoql5rz_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        while\
    \ (n > 1) {\n            factorial *= n\n            factorials += factorial\n\
    \            n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86y5n5nw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp86y5n5nw.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp86y5n5nw.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1ntfvyp.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794361
