name: HumanEval_29_filter_by_prefix
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Filter an input list of strings only for ones that start with a given prefix.\n\
  \    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
  \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\")),\
  \ (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
  \ : List[String], prefix : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
  \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
  xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
completions: ['        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix)
    )', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix)
    )', '        strings.filter(_ startsWith prefix)', '        stringList.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(_ startsWith prefix)', '        strings.filter(
    s => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  "        strings = strings.filter(_.startsWith(prefix))\n        if (strings.length\
    \ == 0) strings\n        else filterByPrefix(strings.tail, prefix)", "       \
    \ strings = strings.filter(_.startsWith(prefix))\n        if (strings.length ==\
    \ 0) strings\n        else filterByPrefix(strings.tail, prefix)", '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_ startsWith
    prefix)', '        strings.filter(s => s.startsWith(prefix))', '        stringList.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(_ startsWith prefix)', '        strings.filter(s => s.startsWith(prefix))',
  '        stringList.filter(s => s.startsWith(prefix))', '        strings.filter(_.startsWith(prefix))',
  '        stringList.filter(_.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(_ startsWith prefix)', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter( s
    => s.startsWith(prefix) )', '        strings.filter(_ startsWith prefix)', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        stringList.filter(_.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(_ startsWith prefix)', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix)
    )', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        stringList.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix) )',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix) )',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter( s
    => s.startsWith(prefix) )', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter( s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        stringList.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix) )',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter( s
    => s.startsWith(prefix) )', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        stringList.filter(s
    => s.startsWith(prefix))', '        stringList.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(_ startsWith prefix)', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_.startsWith(prefix))',
  '        strings.filter( s => s.startsWith(prefix) )', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        stringList.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        stringList.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', " \
    \       strings.length match {\n            case 0 => strings\n            case\
    \ _ => {\n                val prefixedStrings = strings.map(s => prefix + s)\n\
    \                val prefixedStringsSet = prefixedStrings.toSet\n            \
    \    strings.filter(s => prefixedStringsSet.contains(s))\n            }\n    \
    \    }", '        strings.filter(_ startsWith prefix)', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', "        strings = strings.filter( s => s.startsWith(prefix)\
    \ )\n        strings = strings.filter( s => !s.startsWith(prefix+\"_\") )\n  \
    \      strings = strings.filter( s => !s.startsWith(prefix+\"_\") )\n        strings\
    \ = strings.filter( s => !s.startsWith(prefix+\"_\") )\n        strings = strings.filter(\
    \ s => !s.startsWith(prefix+\"_\") )\n        strings = strings.filter( s => !s.startsWith(prefix+\"\
    _\") )\n        strings = strings.filter( s => !s.startsWith(prefix+\"_\") )\n\
    \        strings = strings.filter( s => !s.startsWith(prefix+\"_\") )\n      \
    \  strings = strings.filter( s => !s.startsWith(prefix+\"_\") )\n        strings\
    \ = strings.filter( s => !s.startsWith(prefix+\"_\") )\n        strings = strings.filter(\
    \ s => !s.startsWith(prefix+\"_\") )\n        strings = strings.filter( s => !s.startsWith(prefix+\"\
    _\") )\n        strings = strings.filter( s => !s.startsWith(prefix+\"_\") )\n\
    \        strings = strings.filter( s => !s.startsWith(prefix+\"_\") )\n      \
    \  strings = strings.filter( s => !s.startsWith(prefix+\"_\") )\n        strings\
    \ = strings.filter( s => !s.startsWith(prefix+\"_\") )\n        strings = strings.filter(\
    \ s => !s.startsWith(prefix+\"_\") )\n        strings = strings.filter( s => !s.startsWith(prefix+\"\
    _\") )\n        strings = strings.filter( s => !s.startsWith(prefix+\"_\") )\n\
    \        strings = strings.filter( s => !s.startsWith(prefix+\"_\") )\n      \
    \  strings = strings.filter( s => !s.startsWith(prefix+\"_\") )\n        strings\
    \ = strings.filter( s => !s.startsWith(prefix+\"_\") )\n        strings = strings.filter(\
    \ s => !s.startsWith(prefix+\"_\") )\n        strings = strings.filter( s => !s.startsWith(prefix+\"\
    _\") )\n        strings = strings.filter( s => !s.startsWith(prefix+\"_\") )\n\
    \        strings = strings.filter( s => !s.startsWith(prefix+\"_\") )\n      \
    \  strings = strings.filter( s => !s.startsWith(prefix+\"_\") )\n        strings\
    \ = strings.filter( s => !s.startsWith(prefix+\"_\") )\n        strings = strings.filter(\
    \ s => !s.startsWith(", '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(
    s => s.startsWith(prefix) )', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix)
    )', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix)
    )', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(
    s => s.startsWith(prefix) )', '        stringList.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        stringList.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix)
    )', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        string', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(_ startsWith prefix)', '        strings.filter(_ startsWith
    prefix)', '        stringList.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))']
stop_tokens:
- "\n    }\n"
