name: HumanEval_114_minSubArraySum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
  \    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
  \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    // (-6l)\n\
  \    def minSubArraySum(nums : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
  \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong, 10l.toLong,\
  \ 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n   \
  \ assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
  \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n  \
  \  assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
  \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) == (-1l));\n\
  \    }\n\n}\n"
completions: ["        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            if (num > 0) {\n                val newSum = sum\
    \ + num\n                if (newSum < minSum) newSum else minSum\n           \
    \ } else 0l\n        }\n        minSum", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSorted = nums.sortWith(_ < _)\n        val\
    \ sums = numsSorted.scanLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum > sum) newSum else sum\n        }\n        sums.min",
  "        val numsSet = nums.toSet\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        ", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.sortWith(_ < _)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ > 0)\n        val numsCopy4 = numsCopy3.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > 0) newSum else 0l\n        }\n        numsCopy4", "        val numsSorted\
    \ = nums.sortBy(_.toLong)\n        val minSum = numsSorted.head.toLong\n     \
    \   val minSumIndex = numsSorted.indexOf(minSum)\n        val minSumSubArray =\
    \ numsSorted.take(minSumIndex + 1)\n        val minSumSubArraySum = minSumSubArray.reduce((a,\
    \ b) => a + b)\n        minSumSubArraySum", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            if (num\
    \ > 0) sum + num\n            else sum\n        }\n        minSum", "        val\
    \ minSum = nums.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val numsSorted = nums.sortBy(_.toLong)\n        val numsSortedLength =\
    \ numsSorted.length\n        val numsSortedSum = numsSorted.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum > 0l) {\n\
    \                newSum\n            } else {\n                0l\n          \
    \  }\n        }\n        val numsSortedSumLength = numsSortedSum.length\n    \
    \    val numsSortedSumTot = numsSortedSum.foldLeft(0l) { (sum, num) =>\n     \
    \       val newSum = sum + num\n            if (newSum > 0l) {\n             \
    \   newSum\n            } else {\n                0l\n            }\n        }\n\
    \        val numsSortedSumTot = numsSortedSum.foldLeft(0l) { (sum, num) =>\n \
    \           val newSum = sum + num\n            if (newSum > 0l) {\n         \
    \       newSum\n            } else {\n                0l\n            }\n    \
    \    }\n        val numsSortedSumTot = numsSortedSum.foldLeft(0l) { (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum > 0l) {\n   \
    \             newSum\n            } else {\n                0l\n            }\n\
    \        }\n        val numsSortedSumTot = numsSortedSum.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum > 0l) {\n\
    \                newSum\n            } else {\n                0l\n          \
    \  }\n        }\n        val numsSortedSumTot = numsSortedSum.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum > 0l) {\n\
    \                newSum\n            } else {\n                0l\n          \
    \  }\n        }\n        val numsSortedSumTot = numsSortedSum.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum > 0l) {\n\
    \                newSum\n            } else {\n                0l\n          \
    \  }\n        }\n        val numsSortedSumTot = numsSortedSum.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum > 0l) {\n\
    \                newSum\n            } else {\n                0l\n          \
    \  }\n        }\n        val numsSortedSumTot = numsSortedSum.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num", "        val numsCopy = nums.toList\n\
    \        val numsCopySize = numsCopy.size\n        val numsCopyCopy = numsCopy.toList\n\
    \        val numsCopyCopySize = numsCopyCopy.size\n        val numsCopyCopyCopy\
    \ = numsCopyCopy.toList\n        val numsCopyCopyCopySize = numsCopyCopyCopy.size\n\
    \        val numsCopyCopyCopyCopy = numsCopyCopyCopy.toList\n        val numsCopyCopyCopyCopySize\
    \ = numsCopyCopyCopyCopy.size\n        val numsCopyCopyCopyCopyCopy = numsCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopySize = numsCopyCopyCopyCopyCopy.size\n  \
    \      val numsCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopy.toList\n  \
    \      val numsCopyCopyCopyCopyCopyCopySize = numsCopyCopyCopyCopyCopyCopy.size\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopySize = numsCopyCopyCopyCopyCopyCopyCopy.size\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopySize = numsCopyCopyCopyCopyCopyCopyCopy.size\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopySize = numsCopyCopyCopyCopyCopyCopyCopyCopyCopy.size\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopySize = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.size\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopySize = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.size\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopySize = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy",
  "        val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n    \
    \    val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize =\
    \ numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < minSum) newSum else minSum\n        }\n    \
    \    minSum", "        val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n\
    \        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize\
    \ = numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val minSum = nums.foldLeft(0l) { (sum, num) =>\n  \
    \          val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val sums = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < sum) newSum else sum\n        }\n    \
    \    sums", "        val numsCopy = nums.toList\n        var minSum = numsCopy(0)\n\
    \        var minSumIndex = 0\n        var minSumIndex2 = numsCopy.size - 1\n \
    \       var minSumIndex3 = numsCopy.size - 2\n        var minSumIndex4 = numsCopy.size\
    \ - 3\n        var minSumIndex5 = numsCopy.size - 4\n        var minSumIndex6\
    \ = numsCopy.size - 5\n        var minSumIndex7 = numsCopy.size - 6\n        var\
    \ minSumIndex8 = numsCopy.size - 7\n        var minSumIndex9 = numsCopy.size -\
    \ 8\n        var minSumIndex10 = numsCopy.size - 9\n        var minSumIndex11\
    \ = numsCopy.size - 10\n        var minSumIndex12 = numsCopy.size - 11\n     \
    \   var minSumIndex13 = numsCopy.size - 12\n        var minSumIndex14 = numsCopy.size\
    \ - 13\n        var minSumIndex15 = numsCopy.size - 14\n        var minSumIndex16\
    \ = numsCopy.size - 15\n        var minSumIndex17 = numsCopy.size - 16\n     \
    \   var minSumIndex18 = numsCopy.size - 17\n        var minSumIndex19 = numsCopy.size\
    \ - 18\n        var minSumIndex20 = numsCopy.size - 19\n        var minSumIndex21\
    \ = numsCopy.size - 20\n        var minSumIndex22 = numsCopy.size - 21\n     \
    \   var minSumIndex23 = numsCopy.size - 22\n        var minSumIndex24 = numsCopy.size\
    \ - 23\n        var minSumIndex25 = numsCopy.size - 24\n        var minSumIndex26\
    \ = numsCopy.size - 25\n        var minSumIndex27 = numsCopy.size - 26\n     \
    \   var minSumIndex28 = numsCopy.size - 27\n        var minSumIndex29 = numsCopy.size\
    \ - 28\n        var minSumIndex30 = numsCopy.size - 29\n        var minSumIndex31\
    \ = numsCopy.size - 30\n        var minSumIndex32 = numsCopy.size - 31\n     \
    \   var minSumIndex33 = numsCopy.size - 32\n        var minSumIndex34 = numsCopy.size\
    \ - 33\n        var minSumIndex35 = numsCopy.size - 34\n        var minSumIndex36\
    \ = numsCopy.size - 35\n        var minSumIndex37 = numsCopy.size - 36\n     \
    \   var minSumIndex38 = numsCopy.size - 37\n        var minSumIndex39 = numsCopy.size\
    \ - 38\n        var minSum", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            if (numsCopy.contains(num))\
    \ {\n                val newSum = sum + num\n                if (newSum < minSum)\
    \ newSum else minSum\n            } else {\n                sum\n            }\n\
    \        }\n        minSum", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < minSum) newSum else minSum\n        }\n    \
    \    minSum", "        val numsSorted = nums.sortWith(_ < _)\n        val sums\
    \ = numsSorted.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < 0l) {\n                newSum\n            } else {\n\
    \                newSum\n            }\n        }\n        sums", "        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val minSum = numsSorted.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val maxSum = numsCopy.foldRight(0l) { (sum,\
    \ num) => sum + num }\n        minSum + maxSum", "        val numsSet = nums.toSet\n\
    \        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorNext\
    \ = numsSetIterator.next\n        val numsSetIteratorNextNext = numsSetIteratorNext.next\n\
    \        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n    \
    \    val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext =\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n     \
    \   val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext =\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext =\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextNext", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        var minSum : Long = 0\n        var minSumIndex\
    \ : Int = 0\n        var currentSum : Long = 0\n        var currentSumIndex :\
    \ Int = 0\n        var currentSumIndex2 : Int = 0\n        var currentSumIndex3\
    \ : Int = 0\n        var currentSumIndex4 : Int = 0\n        var currentSumIndex5\
    \ : Int = 0\n        var currentSumIndex6 : Int = 0\n        var currentSumIndex7\
    \ : Int = 0\n        var currentSumIndex8 : Int = 0\n        var currentSumIndex9\
    \ : Int = 0\n        var currentSumIndex10 : Int = 0\n        var currentSumIndex11\
    \ : Int = 0\n        var currentSumIndex12 : Int = 0\n        var currentSumIndex13\
    \ : Int = 0\n        var currentSumIndex14 : Int = 0\n        var currentSumIndex15\
    \ : Int = 0\n        var currentSumIndex16 : Int = 0\n        var currentSumIndex17\
    \ : Int = 0\n        var currentSumIndex18 : Int = 0\n        var currentSumIndex19\
    \ : Int = 0\n        var currentSumIndex20 : Int = 0\n        var currentSumIndex21\
    \ : Int = 0\n        var currentSumIndex22 : Int = 0\n        var currentSumIndex23\
    \ : Int = 0\n        var currentSumIndex24 : Int = 0\n        var currentSumIndex25\
    \ : Int = 0\n        var currentSumIndex26 : Int = 0\n        var currentSumIndex27\
    \ : Int = 0\n        var currentSumIndex28 : Int = 0\n        var currentSumIndex29\
    \ : Int = 0\n        var currentSumIndex30 : Int = 0\n        var currentSumIndex31\
    \ : Int = 0\n        var currentSumIndex32 : Int = 0\n        var currentSumIndex33\
    \ : Int = 0\n        var currentSumIndex34 : Int = 0\n        var currentSumIndex35\
    \ : Int = 0\n        var currentSumIndex36 : Int = 0\n        var currentSumIndex37\
    \ : Int = 0\n        var currentSumIndex38 : Int = 0\n        var currentSumIndex39\
    \ : Int = 0\n        var currentSumIndex40 : Int = 0\n        var currentSumIndex41\
    \ : Int = 0\n        var currentSumIndex42 : Int = 0\n        var currentSumIndex43\
    \ : Int = 0\n        var currentSumIndex44 : Int = 0\n        var currentSumIndex45\
    \ : Int = 0\n        var currentSumIndex46 : Int = 0\n        var currentSumIndex47\
    \ : Int = 0\n        var currentSumIndex48 : Int = 0\n        var currentSumIndex49\
    \ : Int = 0\n        var currentSumIndex50 : Int = 0\n        var currentSumIndex51\
    \ : Int = 0\n        var currentSumIndex52 : Int = 0\n        var currentSumIndex53\
    \ : Int = 0", "        val numsSorted = nums.sortWith(_ < _)\n        val sums\
    \ = numsSorted.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum > sum) newSum else sum\n        }\n        sums", "  \
    \      val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            if (numsCopy.contains(num)) {\n                val newSum = sum +\
    \ num\n                if (newSum < minSum) {\n                    minSum = newSum\n\
    \                }\n            }\n            sum\n        }\n        minSum",
  "        val numsSorted = nums.sortBy(_.toLong)\n        val sums = numsSorted.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < 0) newSum\n            else newSum\n        }\n        sums.toLong", "   \
    \     val numsSorted = nums.sortWith(_ < _)\n        val sums = numsSorted.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > sum) newSum else sum\n        }\n        sums", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            if (numsCopy.contains(num))\
    \ {\n                val newSum = sum + num\n                if (newSum < minSum)\
    \ newSum else minSum\n            } else {\n                sum\n            }\n\
    \        }\n        minSum", "        val numsCopy = nums.toList\n        val\
    \ numsCopy2 = numsCopy.sortWith(_ < _)\n        val numsCopy3 = numsCopy2.filter(_\
    \ > 0)\n        val numsCopy4 = numsCopy3.foldLeft(0l) { (sum, num) =>\n     \
    \       val newSum = sum + num\n            if (newSum < sum) newSum else sum\n\
    \        }\n        numsCopy4", "        val numsSet = nums.toSet\n        val\
    \ numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val minSum = nums.reduceLeft((a,\
    \ b) => if (a > b) a else b)\n        val maxSum = nums.reduceLeft((a, b) => if\
    \ (a < b) a else b)\n        val minSumOfSubArray = nums.foldLeft(0l) { (sum,\
    \ num) => sum + num }\n        val maxSumOfSubArray = nums.foldLeft(0l) { (sum,\
    \ num) => sum + num }\n        val minSumOfSubArraySum = minSumOfSubArray + maxSumOfSubArray\n\
    \        val maxSumOfSubArraySum = maxSumOfSubArray + minSumOfSubArray\n     \
    \   if (minSumOfSubArraySum < maxSumOfSubArraySum) {\n            minSumOfSubArraySum\n\
    \        } else {\n            maxSumOfSubArraySum\n        }", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSorted = nums.sortWith(_ < _)\n        val\
    \ numsSortedLength = numsSorted.length\n        val numsSortedSum = numsSorted.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > 0l) {\n                newSum\n            } else {\n                0l\n\
    \            }\n        }\n        val numsSortedSumLength = numsSortedSum.length\n\
    \        val numsSortedSumLastIndex = numsSortedSumLength - 1\n        val numsSortedSumLast\
    \ = numsSortedSum(numsSortedSumLastIndex)\n        val numsSortedSumLastLength\
    \ = numsSortedSumLast.length\n        val numsSortedSumLastLastIndex = numsSortedSumLastLength\
    \ - 1\n        val numsSortedSumLastLast = numsSortedSumLast(numsSortedSumLastLastIndex)\n\
    \        val numsSortedSumLastLastLength = numsSortedSumLastLast.length\n    \
    \    val numsSortedSumLastLastLastIndex = numsSortedSumLastLastLength - 1\n  \
    \      val numsSortedSumLastLastLast = numsSortedSumLastLast(numsSortedSumLastLastLastIndex)\n\
    \        val numsSortedSumLastLastLastLength = numsSortedSumLastLastLast.length\n\
    \        val numsSortedSumLastLastLastLastIndex = numsSortedSumLastLastLastLength\
    \ - 1\n        val numsSortedSumLastLastLastLast = numsSortedSumLastLastLast(numsSortedSumLastLastLastLastIndex)\n\
    \        val numsSortedSumLastLastLastLastLength = numsSortedSumLastLastLastLast.length\n\
    \        val numsSortedSumLastLastLastLastLastIndex = numsSortedSumLastLastLastLastLength\
    \ - 1\n        val numsSortedSumLastLastLastLastLast = numsSortedSumLastLastLastLast(numsSortedSumLastLastLastLastLastIndex)\n\
    \        val numsSortedSumLastLastLastLastLastLength = numsSortedSumLastLastLastLastLastLast.length\n\
    \        val numsSortedSumLastLastLastLastLastLastIndex = numsSortedSumLastLastLastLastLastLastLength\
    \ - 1\n        val numsSortedSumLastLastLastLastLastLast = numsSortedSumLastLastLastLastLast(numsSortedSumLastLastLastLastLastLastIndex)\n\
    \        val numsSortedSumLastLastLastLastLastLength = numsSortedSumLastLastLastLastLastLastLength.length\n\
    \        val numsSortedSumLastLastLastLastLastLastIndex = numsSortedSum", "  \
    \      val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            if (numsCopy.contains(num)) {\n               \
    \ val newSum = sum + num\n                if (newSum < minSum) newSum else minSum\n\
    \            } else {\n                sum\n            }\n        }\n       \
    \ minSum", "        val numsSorted = nums.sortWith(_ < _)\n        val sum = 0\n\
    \        var minSum = Long.MaxValue\n        var minSumIndex = 0\n        var\
    \ i = 0\n        while (i < numsSorted.length) {\n            val currentSum =\
    \ numsSorted(i) + sum\n            if (currentSum < minSum) {\n              \
    \  minSum = currentSum\n                minSumIndex = i\n            }\n     \
    \       i += 1\n        }\n        minSum", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        var minSum = numsCopy(0)\n\
    \        var minSumIndex = 0\n        var minSumIndex2 = 0\n        var minSumIndex3\
    \ = 0\n        var minSumIndex4 = 0\n        var minSumIndex5 = 0\n        var\
    \ minSumIndex6 = 0\n        var minSumIndex7 = 0\n        var minSumIndex8 = 0\n\
    \        var minSumIndex9 = 0\n        var minSumIndex10 = 0\n        var minSumIndex11\
    \ = 0\n        var minSumIndex12 = 0\n        var minSumIndex13 = 0\n        var\
    \ minSumIndex14 = 0\n        var minSumIndex15 = 0\n        var minSumIndex16\
    \ = 0\n        var minSumIndex17 = 0\n        var minSumIndex18 = 0\n        var\
    \ minSumIndex19 = 0\n        var minSumIndex20 = 0\n        var minSumIndex21\
    \ = 0\n        var minSumIndex22 = 0\n        var minSumIndex23 = 0\n        var\
    \ minSumIndex24 = 0\n        var minSumIndex25 = 0\n        var minSumIndex26\
    \ = 0\n        var minSumIndex27 = 0\n        var minSumIndex28 = 0\n        var\
    \ minSumIndex29 = 0\n        var minSumIndex30 = 0\n        var minSumIndex31\
    \ = 0\n        var minSumIndex32 = 0\n        var minSumIndex33 = 0\n        var\
    \ minSumIndex34 = 0\n        var minSumIndex35 = 0\n        var minSumIndex36\
    \ = 0\n        var minSumIndex37 = 0\n        var minSumIndex38 = 0\n        var\
    \ minSumIndex39 = 0\n        var minSumIndex40 = 0\n        var minSumIndex41\
    \ = 0\n        var minSumIndex42 = 0\n        var minSumIndex43 = 0\n        var\
    \ minSumIndex44 = 0\n        var minSumIndex45 = 0\n        var minSumIndex46\
    \ = 0\n        var minSumIndex47 = 0\n        var minSumIndex48 = 0\n        var\
    \ minSumIndex49 = 0\n        var minSumIndex50 = 0\n        var minSumIndex51\
    \ = 0\n        var minSumIndex52 = 0\n        var minSumIndex53 = 0\n        var\
    \ minSumIndex54 = 0\n        var minSumIndex55 = 0\n        var minSumIndex56\
    \ = 0\n        var minSumIndex57 = 0\n        var minSumIndex58 = 0\n        var\
    \ minSumIndex59 = 0\n        var minSumIndex60 = 0\n        var minSumIndex61\
    \ = 0\n        var minSumIndex62 = 0\n        var minSumIndex63 = 0\n        var\
    \ minSumIndex64 = 0\n        var minSumIndex65 = 0\n        var minSumIndex66\
    \ = 0\n        var minSumIndex67 = 0\n        var minSumIndex68 = 0\n        var\
    \ minSumIndex69 = 0\n        var minSumIndex70 = 0\n        var minSum", "   \
    \     val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l) {\
    \ (sum, num) => sum + num }\n        val subArray = numsCopy.filter(_ > minSum)\n\
    \        minSubArraySum(subArray)", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val minSum = numsSorted.head\n        val minSumIndex = numsSorted.indexOf(minSum)\n\
    \        val minSumSubArray = numsSorted.take(minSumIndex + 1)\n        val minSumSubArraySum\
    \ = minSumSubArray.sum\n        if (minSumSubArraySum > minSum) {\n          \
    \  minSum\n        } else {\n            minSubArraySum(numsSorted)\n        }",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val maxSum = numsCopy.foldRight(0l) { (sum,\
    \ num) => sum + num }\n        val minSumInRange = minSum - maxSum\n        val\
    \ minSumInRangeInRange = minSumInRange / 2\n        val minSumInRangeInRangeInRange\
    \ = minSumInRangeInRange / 2\n        val minSumInRangeInRangeInRangeInRange =\
    \ minSumInRangeInRangeInRange / 2\n        val minSumInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRange / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRange / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRange / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n     \
    \   val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n\
    \        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange",
  "        val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n    \
    \    val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize =\
    \ numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) => sum + num }\n        val minSums\
    \ = numsCopy.foldLeft(List[Long]()) { (sums, num) => sums.updated(sums.indexOf(sum)\
    \ + 1, num) }\n        minSums.min.min", "        val numsSet = nums.toSet\n \
    \       val numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < minSum) newSum else minSum\n        }\n    \
    \    minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val minSum = nums.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val maxSum = nums.foldRight(0l) { (sum,\
    \ num) => sum + num }\n        minSum < maxSum ? minSum : maxSum", "        val\
    \ numsSet = nums.toSet\n        val minSum = nums.foldLeft(0l) { (sum, num) =>\n\
    \            if (numsSet.contains(num)) {\n                val newSum = sum +\
    \ num\n                if (newSum < minSum) newSum else minSum\n            }\
    \ else sum\n        }\n        minSum", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val minSum = numsSorted.head\n        val minSumIndex = numsSorted.indexOf(minSum)\n\
    \        val minSumCount = numsSorted.length - minSumIndex\n        val minSumSubArray\
    \ = numsSorted.take(minSumIndex).drop(minSumIndex + 1)\n        minSumSubArray.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) {\n                minSum = newSum\n                minSumIndex =\
    \ numsSorted.indexOf(newSum)\n                minSumCount = numsSorted.length\
    \ - minSumIndex\n                minSumSubArray = numsSorted.take(minSumIndex).drop(minSumIndex\
    \ + 1)\n            }\n            newSum\n        }", "        val numsCopy =\
    \ nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n  \
    \          if (numsCopy.contains(num)) {\n                val newSum = sum + num\n\
    \                if (newSum < minSum) {\n                    minSum = newSum\n\
    \                }\n            }\n            sum\n        }\n        minSum",
  "        val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n    \
    \    val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize =\
    \ numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val sums = mutable.HashMap[Long, Long]()\n        val minSum = Long.MaxValue\n\
    \        val minSumIndex = -1\n        for (i <- 0 until numsCopy.size) {\n  \
    \          val curSum = numsCopy(i) + sums.getOrElse(numsCopy(i), 0L)\n      \
    \      sums.put(numsCopy(i), curSum)\n            if (curSum < minSum) {\n   \
    \             minSum = curSum\n                minSumIndex = i\n            }\n\
    \        }\n        minSum", "        val numsCopy = nums.toList\n        var\
    \ minSum = numsCopy.head\n        var minSumIndex = 0\n        var minSumIndex2\
    \ = numsCopy.head\n        var minSumIndex3 = numsCopy.head\n        var minSumIndex4\
    \ = numsCopy.head\n        var minSumIndex5 = numsCopy.head\n        var minSumIndex6\
    \ = numsCopy.head\n        var minSumIndex7 = numsCopy.head\n        var minSumIndex8\
    \ = numsCopy.head\n        var minSumIndex9 = numsCopy.head\n        var minSumIndex10\
    \ = numsCopy.head\n        var minSumIndex11 = numsCopy.head\n        var minSumIndex12\
    \ = numsCopy.head\n        var minSumIndex13 = numsCopy.head\n        var minSumIndex14\
    \ = numsCopy.head\n        var minSumIndex15 = numsCopy.head\n        var minSumIndex16\
    \ = numsCopy.head\n        var minSumIndex17 = numsCopy.head\n        var minSumIndex18\
    \ = numsCopy.head\n        var minSumIndex19 = numsCopy.head\n        var minSumIndex20\
    \ = numsCopy.head\n        var minSumIndex21 = numsCopy.head\n        var minSumIndex22\
    \ = numsCopy.head\n        var minSumIndex23 = numsCopy.head\n        var minSumIndex24\
    \ = numsCopy.head\n        var minSumIndex25 = numsCopy.head\n        var minSumIndex26\
    \ = numsCopy.head\n        var minSumIndex27 = numsCopy.head\n        var minSumIndex28\
    \ = numsCopy.head\n        var minSumIndex29 = numsCopy.head\n        var minSumIndex30\
    \ = numsCopy.head\n        var minSumIndex31 = numsCopy.head\n        var minSumIndex32\
    \ = numsCopy.head\n        var minSumIndex33 = numsCopy.head\n        var minSumIndex34\
    \ = numsCopy.head\n        var minSumIndex35 = numsCopy.head\n        var minSumIndex36\
    \ = numsCopy.head\n        var minSumIndex37 = numsCopy.head\n        var minSumIndex38\
    \ = numsCopy.head\n        var minSumIndex39 = numsCopy.head\n        var minSumIndex40\
    \ = numsCopy.head\n        var minSumIndex41 = numsCopy.head\n        var minSumIndex42\
    \ = numsCopy.head\n        var minSumIndex", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.sortWith(_ < _)\n        val numsCopy3 = numsCopy2.filter(_\
    \ > 0)\n        val numsCopy4 = numsCopy3.foldLeft((0l, 0l)) { (acc, elem) =>\n\
    \            val newAcc = acc.getOrElse(elem, 0l) + elem\n            (newAcc,\
    \ newAcc)\n        }\n        numsCopy4._1", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSet = nums.toSet\n        val numsSetSize =\
    \ numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize\
    \ = numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val minSum = nums.foldLeft(0l)\
    \ { (sum, num) =>\n            if (num > sum) num else sum\n        }\n      \
    \  minSum", "        val numsSet = nums.toSet\n        val minSum = nums.foldLeft(0l)\
    \ { (sum, num) =>\n            if (numsSet.contains(num)) sum + num\n        \
    \    else sum\n        }\n        minSum", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val sum = 0\n        val minSum = Long.MaxValue\n        val minSumIndex\
    \ = -1\n        val numsLength = nums.length\n        for (i<- 0 until numsLength)\
    \ {\n            val currentSum = numsSorted.take(i).sum\n            if (currentSum\
    \ < minSum) {\n                minSum = currentSum\n                minSumIndex\
    \ = i\n            }\n        }\n        minSum", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSet = nums.toSet\n        val numsLen = nums.size\n\
    \        val numsSetLen = numsSet.size\n        val numsSetSum = numsSet.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsLenSum = numsLen.foldLeft(0l) {\
    \ (sum, num) => sum + num }\n        val numsSetLenSum = numsSetLen.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsSetSumLen = numsSetSum.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsSetSumLenSum = numsSetSumLen.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsSetSumLenSumSum = numsSetSumLenSum.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsSetSumLenSumSum = numsSetSumLenSum.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsSetSumLenSumSum = numsSetSumLenSum.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsSetSumLenSumSum = numsSetSumLenSum.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsSetSumLenSumSum = numsSetSumLenSum.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsSetSumLenSumSum = numsSetSumLenSum.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsSetSumLenSumSum = numsSetSumLenSum.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsSetSumLenSumSum = numsSetSumLenSum.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsSetSumLenSumSum = numsSetSumLenSum.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsSetSumLenSumSum = numsSetSumLenSum.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsSetSumLenSum", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n\
    \        sums.min", "        val minSum = nums.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0L) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSorted = nums.sortWith(_ < _)\n        val\
    \ sums = numsSorted.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum > sum) newSum else sum\n        }\n        sums",
  "        val minSum = nums.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSet = nums.toSet\n        val numsLen = nums.size\n\
    \        val numsLenSet = numsLen.toSet\n        val numsLenLen = numsLenSet.size\n\
    \        val numsLenLenSet = numsLenLen.toSet\n        val numsLenLenLen = numsLenLenSet.size\n\
    \        val numsLenLenLenSet = numsLenLenLen.toSet\n        val numsLenLenLenLen\
    \ = numsLenLenLenSet.size\n        val numsLenLenLenLenSet = numsLenLenLenLen.toSet\n\
    \        val numsLenLenLenLenLen = numsLenLenLenLenSet.size\n        val numsLenLenLenLenLenSet\
    \ = numsLenLenLenLenLen.toSet\n        val numsLenLenLenLenLenLen = numsLenLenLenLenLenSet.size\n\
    \        val numsLenLenLenLenLenLenSet = numsLenLenLenLenLenLen.toSet\n      \
    \  val numsLenLenLenLenLenLenLen = numsLenLenLenLenLenLenSet.size\n        val\
    \ numsLenLenLenLenLenLenLenSet = numsLenLenLenLenLenLenLen.toSet\n        val\
    \ numsLenLenLenLenLenLenLenLen = numsLenLenLenLenLenLenLenSet.size\n        val\
    \ numsLenLenLenLenLenLenLenLenSet = numsLenLenLenLenLenLenLen.toSet\n        val\
    \ numsLenLenLenLenLenLenLenLenLen = numsLenLenLenLenLenLenLenLenSet.size\n   \
    \     val numsLenLenLenLenLenLenLenLenLenSet = numsLenLenLenLenLenLenLenLenLen.toSet\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = numsLenLenLenLenLenLenLenLenLenLenSet.size\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenSet = numsLenLenLenLenLenLenLenLenLenLen.toSet\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenSet = numsLenLenLenLenLenLenLenLenLenLenLen.toSet\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenSet = numsLenLenLenLenLenLenLenLenLenLenLenLen.toSet\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) {\n                minSum = newSum\n\
    \            }\n            newSum\n        }\n        minSum", "        val numsSorted\
    \ = nums.sortBy(_.toLong)\n        val minSum = numsSorted.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum < minSum)\
    \ newSum else minSum\n        }\n        minSum", "        val numsSet = nums.toSet\n\
    \        val minSum = nums.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (numsSet.contains(newSum))\n                newSum\n\
    \            else\n                sum\n        }\n        minSum", "        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val sums = numsSorted.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > sum) newSum else sum\n        }\n        sums", "        val numsSorted =\
    \ nums.sortWith(_ < _)\n        val minSum = numsSorted.head\n        val minSumIndex\
    \ = numsSorted.indexOf(minSum)\n        val minSumSubList = numsSorted.take(minSumIndex\
    \ + 1)\n        minSumSubList.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) {\n                minSum = newSum\n\
    \                minSumIndex\n            } else {\n                minSumIndex\n\
    \            }\n        }", "        val numsSorted = nums.sortWith(_ < _)\n \
    \       val sum = 0l\n        var minSum = -1l\n        var minSumIndex = 0\n\
    \        var minSumIndex2 = 0\n        var minSumIndex3 = 0\n        var minSumIndex4\
    \ = 0\n        var minSumIndex5 = 0\n        var minSumIndex6 = 0\n        var\
    \ minSumIndex7 = 0\n        var minSumIndex8 = 0\n        var minSumIndex9 = 0\n\
    \        var minSumIndex10 = 0\n        var minSumIndex11 = 0\n        var minSumIndex12\
    \ = 0\n        var minSumIndex13 = 0\n        var minSumIndex14 = 0\n        var\
    \ minSumIndex15 = 0\n        var minSumIndex16 = 0\n        var minSumIndex17\
    \ = 0\n        var minSumIndex18 = 0\n        var minSumIndex19 = 0\n        var\
    \ minSumIndex20 = 0\n        var minSumIndex21 = 0\n        var minSumIndex22\
    \ = 0\n        var minSumIndex23 = 0\n        var minSumIndex24 = 0\n        var\
    \ minSumIndex25 = 0\n        var minSumIndex26 = 0\n        var minSumIndex27\
    \ = 0\n        var minSumIndex28 = 0\n        var minSumIndex29 = 0\n        var\
    \ minSumIndex30 = 0\n        var minSumIndex31 = 0\n        var minSumIndex32\
    \ = 0\n        var minSumIndex33 = 0\n        var minSumIndex34 = 0\n        var\
    \ minSumIndex35 = 0\n        var minSumIndex36 = 0\n        var minSumIndex37\
    \ = 0\n        var minSumIndex38 = 0\n        var minSumIndex39 = 0\n        var\
    \ minSumIndex40 = 0\n        var minSumIndex41 = 0\n        var minSumIndex42\
    \ = 0\n        var minSumIndex43 = 0\n        var minSumIndex44 = 0\n        var\
    \ minSumIndex45 = 0\n        var minSumIndex46 = 0\n        var minSumIndex47\
    \ = 0\n        var minSumIndex48 = 0\n        var minSumIndex49 = 0\n        var\
    \ minSumIndex50 = 0\n        var minSumIndex51 = 0\n        var minSumIndex52\
    \ = 0\n        var minSumIndex53 = 0\n        var minSumIndex54 = 0\n        var\
    \ minSumIndex55 = 0\n        var minSumIndex56 = 0\n        var minSumIndex57\
    \ = 0\n        var minSumIndex58 = 0\n        var minSumIndex59 = 0\n        var\
    \ minSumIndex60 = 0\n        var minSumIndex61 = 0\n        var minSumIndex62\
    \ = 0\n        var minSumIndex63 = 0\n        var minSumIndex64 = 0\n        var\
    \ minSumIndex65 = 0\n        var minSumIndex66 = 0\n        var minSumIndex67\
    \ = 0\n        var minSumIndex68 = 0\n        var minSumIndex69 = 0\n        var\
    \ minSum", "        val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n\
    \        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize\
    \ = numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSet = nums.toSet\n        val numsSetSize =\
    \ numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize\
    \ = numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val sums = mutable.ArrayBuffer.empty[Long]\n        val minSum = Long.MaxValue\n\
    \        val minSumIndex = -1\n        for(i <- 0 until numsCopy.size) {\n   \
    \         val subList = numsCopy.slice(i+1, numsCopy.size)\n            val sum\
    \ = subList.foldLeft(0l) { (sum, num) =>\n                sum + num\n        \
    \    }\n            sums += sum\n            if(sum < minSum) {\n            \
    \    minSum = sum\n                minSumIndex = i\n            }\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSet = nums.toSet\n        val numsSetSize =\
    \ numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize\
    \ = numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val minSum = nums.foldLeft(0l) { (sum, num) =>\n  \
    \          val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      var minSum = numsCopy(0)\n        var minSumIndex = 0\n        var minSumIndex2\
    \ = 0\n        var minSumIndex3 = 0\n        var minSumIndex4 = 0\n        var\
    \ minSumIndex5 = 0\n        var minSumIndex6 = 0\n        var minSumIndex7 = 0\n\
    \        var minSumIndex8 = 0\n        var minSumIndex9 = 0\n        var minSumIndex10\
    \ = 0\n        var minSumIndex11 = 0\n        var minSumIndex12 = 0\n        var\
    \ minSumIndex13 = 0\n        var minSumIndex14 = 0\n        var minSumIndex15\
    \ = 0\n        var minSumIndex16 = 0\n        var minSumIndex17 = 0\n        var\
    \ minSumIndex18 = 0\n        var minSumIndex19 = 0\n        var minSumIndex20\
    \ = 0\n        var minSumIndex21 = 0\n        var minSumIndex22 = 0\n        var\
    \ minSumIndex23 = 0\n        var minSumIndex24 = 0\n        var minSumIndex25\
    \ = 0\n        var minSumIndex26 = 0\n        var minSumIndex27 = 0\n        var\
    \ minSumIndex28 = 0\n        var minSumIndex29 = 0\n        var minSumIndex30\
    \ = 0\n        var minSumIndex31 = 0\n        var minSumIndex32 = 0\n        var\
    \ minSumIndex33 = 0\n        var minSumIndex34 = 0\n        var minSumIndex35\
    \ = 0\n        var minSumIndex36 = 0\n        var minSumIndex37 = 0\n        var\
    \ minSumIndex38 = 0\n        var minSumIndex39 = 0\n        var minSumIndex40\
    \ = 0\n        var minSumIndex41 = 0\n        var minSumIndex42 = 0\n        var\
    \ minSumIndex43 = 0\n        var minSumIndex44 = 0\n        var minSumIndex45\
    \ = 0\n        var minSumIndex46 = 0\n        var minSumIndex47 = 0\n        var\
    \ minSumIndex48 = 0\n        var minSumIndex49 = 0\n        var minSumIndex50\
    \ = 0\n        var minSumIndex51 = 0\n        var minSumIndex52 = 0\n        var\
    \ minSumIndex53 = 0\n        var minSumIndex54 = 0\n        var minSumIndex55\
    \ = 0\n        var minSumIndex56 = 0\n        var minSumIndex57 = 0\n        var\
    \ minSumIndex58 = 0\n        var minSumIndex59 = 0\n        var minSumIndex60\
    \ = 0\n        var minSumIndex61 = 0\n        var minSumIndex62 = 0\n        var\
    \ minSumIndex63 = 0\n        var minSumIndex64 = 0\n        var minSumIndex65\
    \ = 0\n        var minSumIndex66 = 0\n        var minSumIndex67 = 0\n        var\
    \ minSumIndex68 = 0\n        var minSumIndex69 = 0\n        var minSumIndex70\
    \ = 0\n        var minSum", "        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val numsSorted = nums.sortBy(_)\n        val sums = numsSorted.scanLeft(0L)(_\
    \ + _)\n        sums.min", "        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n    \
    \    val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize =\
    \ numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < minSum) newSum else minSum\n        }\n    \
    \    minSum", "        val numsSorted = nums.sortBy(_)\n        val numsSortedLength\
    \ = numsSorted.length\n        val sum = 0\n        var minSum = Long.MaxValue\n\
    \        var minSumIndex = 0\n        var i = 0\n        var j = 0\n        while\
    \ (i < numsSortedLength) {\n            while (j < numsSortedLength && numsSorted(j)\
    \ < numsSorted(i + 1)) {\n                j += 1\n            }\n            val\
    \ currentSum = numsSorted(j) + numsSorted(i)\n            if (currentSum < minSum)\
    \ {\n                minSum = currentSum\n                minSumIndex = j\n  \
    \          }\n            i += 1\n        }\n        minSum", "        val minSum\
    \ = nums.foldLeft(0l) { (sum, num) => sum + num }\n        val subArray = nums.filter(_\
    \ > minSum)\n        minSubArraySum(subArray)", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        var minSum = numsCopy.head\n\
    \        var minSumIndex = 0\n        var minSumIndex2 = numsCopy.head\n     \
    \   var minSumIndex3 = numsCopy.head\n        var minSumIndex4 = numsCopy.head\n\
    \        var minSumIndex5 = numsCopy.head\n        var minSumIndex6 = numsCopy.head\n\
    \        var minSumIndex7 = numsCopy.head\n        var minSumIndex8 = numsCopy.head\n\
    \        var minSumIndex9 = numsCopy.head\n        var minSumIndex10 = numsCopy.head\n\
    \        var minSumIndex11 = numsCopy.head\n        var minSumIndex12 = numsCopy.head\n\
    \        var minSumIndex13 = numsCopy.head\n        var minSumIndex14 = numsCopy.head\n\
    \        var minSumIndex15 = numsCopy.head\n        var minSumIndex16 = numsCopy.head\n\
    \        var minSumIndex17 = numsCopy.head\n        var minSumIndex18 = numsCopy.head\n\
    \        var minSumIndex19 = numsCopy.head\n        var minSumIndex20 = numsCopy.head\n\
    \        var minSumIndex21 = numsCopy.head\n        var minSumIndex22 = numsCopy.head\n\
    \        var minSumIndex23 = numsCopy.head\n        var minSumIndex24 = numsCopy.head\n\
    \        var minSumIndex25 = numsCopy.head\n        var minSumIndex26 = numsCopy.head\n\
    \        var minSumIndex27 = numsCopy.head\n        var minSumIndex28 = numsCopy.head\n\
    \        var minSumIndex29 = numsCopy.head\n        var minSumIndex30 = numsCopy.head\n\
    \        var minSumIndex31 = numsCopy.head\n        var minSumIndex32 = numsCopy.head\n\
    \        var minSumIndex33 = numsCopy.head\n        var minSumIndex34 = numsCopy.head\n\
    \        var minSumIndex35 = numsCopy.head\n        var minSumIndex36 = numsCopy.head\n\
    \        var minSumIndex37 = numsCopy.head\n        var minSumIndex38 = numsCopy.head\n\
    \        var minSumIndex39 = numsCopy.head\n        var minSumIndex40 = numsCopy.head\n\
    \        var minSumIndex41 = numsCopy.head\n        var minSumIndex42 = numsCopy.head\n\
    \        var minSumIndex", "        val numsCopy = nums.toList\n        val sums\
    \ = mutable.ArrayBuffer.empty[Long]\n        var minSum = Long.MaxValue\n    \
    \    var minSumIndex = 0\n        var i = 0\n        while (i < numsCopy.size)\
    \ {\n            val currentSum = numsCopy(i) + numsCopy(i + 1)\n            if\
    \ (currentSum < minSum) {\n                minSum = currentSum\n             \
    \   minSumIndex = i\n            }\n            i += 1\n        }\n        sums(minSumIndex)",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            if (num > 0) sum + num\n            else sum\n\
    \        }\n        minSum", "        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextNext\
    \ = numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNext", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val numsSum = numsSorted.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum > 0l) {\n\
    \                newSum\n            } else {\n                0l\n          \
    \  }\n        }\n        numsSum", "        val numsSorted = nums.sortWith(_ <\
    \ _)\n        val numsSum = numsSorted.foldLeft(0l) { (sum, num) =>\n        \
    \    val newSum = sum + num\n            if (newSum > 0l) {\n                newSum\n\
    \            } else {\n                0l\n            }\n        }\n        numsSum",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0l) { (sum, num)\
    \ => sum + num }\n        val minSum = sums.min\n        val minSumIndex = sums.indexOf(minSum)\n\
    \        sums(minSumIndex)", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < minSum) newSum else minSum\n        }\n    \
    \    minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val num", "        val numsCopy = nums.toList\n        var minSum = numsCopy(0)\n\
    \        var minSumIndex = 0\n        for (i <- 0 until numsCopy.size) {\n   \
    \         val newSum = numsCopy(i) + minSum\n            if (newSum < minSum)\
    \ {\n                minSum = newSum\n                minSumIndex = i\n      \
    \      }\n        }\n        minSum", "        val numsSet = nums.toSet\n    \
    \    val numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum + num }\n     \
    \   val minSubArray = numsCopy.filter(_ < minSum)\n        minSubArray.foldLeft(0l)\
    \ { (sum, num) => sum + num }", "        val numsSorted = nums.sortWith(_ < _)\n\
    \        val minSum = numsSorted.head\n        val minSumIndex = numsSorted.indexOf(minSum)\n\
    \        val minSumSubArray = numsSorted.take(minSumIndex + 1)\n        val minSumSubArraySum\
    \ = minSumSubArray.reduceLeftOption(_ + _)\n        minSumSubArraySum.getOrElse(0)",
  "        val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n    \
    \    val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize =\
    \ numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < minSum) newSum else minSum\n        }\n    \
    \    minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val subArray = numsCopy.filter(_ > minSum)\n\
    \        minSubArraySum(subArray)", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val sums = numsSorted.scanLeft(0l) { (sum, num) => sum + num }\n\
    \        val minSum = sums.min\n        val minSumIndex = sums.indexOf(minSum)\n\
    \        numsSorted.take(minSumIndex).sum", "        val minSum = nums.foldLeft(0l)\
    \ { (sum, num) =>\n            if (num > sum) num\n            else sum\n    \
    \    }\n        minSum", "        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val ", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val sums = mutable.ArrayBuffer.empty[Long]\n        val minSum = Long.MaxValue\n\
    \        val minSumIndex = -1\n        val minSumSum = Long.MaxValue\n       \
    \ for(i <- 0 until numsCopy.size) {\n            val curSum = numsCopy(i) + sums.last\n\
    \            sums += curSum\n            if(curSum < minSum) {\n             \
    \   minSum = curSum\n                minSumIndex = i\n                minSumSum\
    \ = sums.last\n            }\n        }\n        minSumSum", "        val numsCopy\
    \ = nums.toList\n        val numsCopySize = numsCopy.size\n        val minSum\
    \ = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) {\n                minSum = newSum\n       \
    \     }\n            newSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val numsSum = numsSorted.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum > 0l) {\n\
    \                newSum\n            } else {\n                0l\n          \
    \  }\n        }\n        numsSum", "        val numsCopy = nums.toList\n     \
    \   val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSet = nums.toSet\n        val numsSetSize =\
    \ numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize\
    \ = numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsSorted = nums.sortWith(_ < _)\n\
    \        val sum = 0L\n        var minSum = -1L\n        var minSumIndex = 0\n\
    \        var i = 0\n        while (i < numsSorted.length) {\n            val currentSum\
    \ = numsSorted(i) + sum\n            if (currentSum < minSum) {\n            \
    \    minSum = currentSum\n                minSumIndex = i\n            }\n   \
    \         i += 1\n        }\n        minSum", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        ", "        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsCopy = nums.toList\n        var\
    \ minSum = Long.MaxValue\n        var minSumIndex = 0\n        var sum = 0\n \
    \       var i = 0\n        while (i < numsCopy.size) {\n            sum += numsCopy(i)\n\
    \            i += 1\n        }\n        while (i < numsCopy.size) {\n        \
    \    val currentSum = sum\n            val currentIndex = i\n            sum +=\
    \ numsCopy(i)\n            i += 1\n            if (sum < currentSum) {\n     \
    \           minSum = currentSum\n                minSumIndex = currentIndex\n\
    \            }\n        }\n        minSum", "        val numsSet = nums.toSet\n\
    \        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorNext\
    \ = numsSetIterator.next\n        val numsSetIteratorNextValue = numsSetIteratorNext.get\n\
    \        val numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue\
    \ = numsSetIteratorNextNext.get\n        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n\
    \        val numsSetIteratorNextNextNextValue = numsSetIteratorNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextValue = numsSetIteratorNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNext",
  "        val numsCopy = nums.toList\n        var minSum : Long = numsCopy(0)\n \
    \       var minSumIndex = 0\n        var sum = 0\n        var index = 0\n    \
    \    while (index < numsCopy.size) {\n            sum = numsCopy(index) + sum\n\
    \            if (sum < minSum) {\n                minSum = sum\n             \
    \   minSumIndex = index\n            }\n            index += 1\n        }\n  \
    \      minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            if (num > sum) num\n            else sum\n    \
    \    }\n        minSum", "        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val minSum = nums.foldLeft(0l)((sum,\
    \ num) => {\n            val newSum = sum + num\n            if (newSum < minSum)\
    \ newSum else minSum\n        })\n        minSum", "        val numsCopy = nums.toList\n\
    \        var minSum = numsCopy(0)\n        var minSumIndex = 0\n        for (i\
    \ <- 0 until numsCopy.size) {\n            if (numsCopy(i) < 0) {\n          \
    \      minSum = -minSum\n                minSumIndex = i\n            } else {\n\
    \                val currentSum = numsCopy(i) + minSum\n                if (currentSum\
    \ < minSum) {\n                    minSum = currentSum\n                    minSumIndex\
    \ = i\n                }\n            }\n        }\n        minSum", "       \
    \ val numsSorted = nums.sortWith(_ < _)\n        val sums = numsSorted.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > sum) newSum else sum\n        }\n        sums", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSorted = nums.sortWith(_ < _)\n        val\
    \ sums = numsSorted.foldLeft(0L) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum > sum) newSum else sum\n        }\n        sums",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) => sum + num }\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) => sum + num }\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) => sum + num }\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) => sum + num }\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) => sum + num }\n        val numsCopy\
    \ = nums.", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            if (numsCopy.contains(num)) {\n               \
    \ val newSum = sum + num\n                if (newSum < minSum) newSum else minSum\n\
    \            } else {\n                sum\n            }\n        }\n       \
    \ minSum", "        val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n\
    \        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize\
    \ = numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator",
  "        val numsSorted = nums.sortWith(_ < _)\n        val minSum = numsSorted.head\n\
    \        val minSumIndex = 0\n        val minSumSubArray = numsSorted.take(minSumIndex\
    \ + 1)\n        val minSumSubArraySum = minSumSubArray.reduceLeftOption(_ + _)\n\
    \        minSumSubArraySum.getOrElse(minSum)", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val numsSum = numsSorted.foldLeft(0l) { (sum, num) =>\n      \
    \      val newSum = sum + num\n            if (newSum > 0l) {\n              \
    \  newSum\n            } else {\n                0l\n            }\n        }\n\
    \        numsSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            if (numsCopy.contains(num)) {\n                val newSum = sum +\
    \ num\n                if (newSum < minSum)\n                    minSum = newSum\n\
    \            }\n            else\n                sum\n        }\n        minSum",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < minSum) newSum else minSum\n        }\n    \
    \    minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val numsSortedSet = nums.sortWith(_ < _)\n        val\
    \ numsSortedSetSize = numsSortedSet.size\n        val numsSortedSetIterator =\
    \ numsSortedSet.iterator\n        val numsSortedSetIteratorSize = numsSortedSetIterator.size\n\
    \        val numsSortedSetIteratorIterator = numsSortedSetIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorSize = numsSortedSetIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIterator = numsSortedSetIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIteratorIter",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val minSumCopy = minSum.toList\n      \
    \  val minSumCopyCopy = minSumCopy.toList\n        val minSumCopyCopyCopy = minSumCopyCopy.toList\n\
    \        val minSumCopyCopyCopyCopy = minSumCopyCopyCopy.toList\n        val minSumCopyCopyCopyCopyCopy\
    \ = minSumCopyCopyCopyCopy.toList\n        val minSumCopyCopyCopyCopyCopyCopy\
    \ = minSumCopyCopyCopyCopyCopy.toList\n        val minSumCopyCopyCopyCopyCopyCopyCopy\
    \ = minSumCopyCopyCopyCopyCopyCopy.toList\n        val minSumCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = minSumCopyCopyCopyCopyCopyCopyCopy.toList\n        val minSumCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = minSumCopyCopyCopyCopyCopyCopyCopyCopy.toList\n        val minSumCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = minSumCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n        val minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n        val minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n        val minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n        val\
    \ minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        val minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy =\
    \ minSumCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.toList\n\
    \        "]
stop_tokens:
- "\n    }\n"
