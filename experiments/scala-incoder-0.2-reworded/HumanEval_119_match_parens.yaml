name: HumanEval_119_match_parens
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of two strings, both strings consist of open\n    //\
  \ parentheses '(' or close parentheses ')' only.\n    // Your job is to check if\
  \ it is possible to concatenate the two strings in\n    // some order, that the\
  \ resulting string will be good.\n    // A string S is considered to be good if\
  \ and only if all parentheses in S\n    // are balanced. For example: the string\
  \ '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes'\
  \ if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n\
  \    // >>> matchParens((List[String](\"()(\", \")\")))\n    // (\"Yes\")\n    //\
  \ >>> matchParens((List[String](\")\", \")\")))\n    // (\"No\")\n    def matchParens(lst\
  \ : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(matchParens((List[String](\"\
  ()(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\"\
  , \")\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(())\"\
  , \"())())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")())\"\
  , \"(()()(\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"(())))\"\
  , \"(()())((\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"()\"\
  , \"())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(\",\
  \ \"()))()\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"((((\"\
  , \"((())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(()\"\
  , \"(()(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(\", \"\
  )(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(\", \")\"))).equals((\"\
  Yes\")));\n    assert(matchParens((List[String](\")\", \"(\"))).equals((\"Yes\"\
  )));\n    }\n\n}\n"
completions: ["        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        val open = mutable.ListBuffer.empty[String]\n        val close = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => if (x == \"(\") open.append(x))\n        lst.foreach(x\
    \ => if (x == \")\") close.append(x))\n        val openCount = open.count\n  \
    \      val closeCount = close.count\n        if (openCount == closeCount) {\n\
    \            val openStr = open.toList\n            val closeStr = close.toList\n\
    \            val openStrSize = openStr.size\n            val closeStrSize = closeStr.size\n\
    \            val openStrSet = openStr.distinct\n            val closeStrSet =\
    \ closeStr.distinct\n            val openStrSetSize = openStrSet.size\n      \
    \      val closeStrSetSize = closeStrSet.size\n            if (openStrSetSize\
    \ == closeStrSetSize) {\n                val openStrSetIterator = openStrSet.iterator\n\
    \                val closeStrSetIterator = closeStrSet.iterator\n            \
    \    while (openStrSetIterator.hasNext && closeStrSetIterator.hasNext) {\n   \
    \                 val openStr = openStrSetIterator.next\n                    val\
    \ closeStr = closeStrSetIterator.next\n                    val openCount = openStr.count\n\
    \                    val closeCount = closeStr.count\n                    if (openCount\
    \ == closeCount) {\n                        val openStr = openStr.toList\n   \
    \                     val closeStr = closeStr.toList\n                       \
    \ val openStrSize = openStr.size\n                        val closeStrSize = closeStr.size\n\
    \                        val openStrSet = openStr.distinct\n                 \
    \       val closeStrSet = closeStr.distinct\n                        val openStrSetSize\
    \ = openStrSet.size\n                        val closeStrSetSize = closeStrSet.size\n\
    \                        if (openStrSetSize == closeStrSetSize) {\n          \
    \                  val openStrSetIterator = openStrSet.iterator\n            \
    \                val closeStrSetIterator = closeStrSet.iterator\n            \
    \                while (openStrSetIterator.hasNext && closeStrSetIterator.hasNext)\
    \ {\n                                val openStr = openStrSetIterator.next\n \
    \                               val closeStr = closeStrSetIterator.next\n    \
    \                            val openCount = openStr.count\n                 \
    \               val closeCount = closeStr.count\n                            \
    \    if (openCount == closeCount) {\n                                    val openStr\
    \ = openStr.toList\n                                    val closeStr = closeStr.toList\n\
    \                                    val openStrSize = openStr.size\n        \
    \                            val closeStrSize = closeStr.size\n              \
    \                      val openStrSet = openStr.", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        val stackSize = lst.size\n        val stackSize2 = stackSize * stackSize\n\
    \        lst.foreach { x =>\n            x match {\n                case \")\"\
    \ =>\n                    stackSize -= 1\n                case \")()\" =>\n  \
    \                  stackSize -= 1\n                case \")()()\" =>\n       \
    \             stackSize -= 1\n                case \")()()()\" =>\n          \
    \          stackSize -= 1\n                case \")()()()()\" =>\n           \
    \         stackSize -= 1\n                case \")()()()()()\" =>\n          \
    \          stackSize -= 1\n                case \")()()()()()()\" =>\n       \
    \             stackSize -= 1\n                case \")()()()()()()()\" =>\n  \
    \                  stackSize -= 1\n                case \")()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()()()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()()()()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()()()()()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()()()()()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()()()()()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()()()()()()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()()()()()()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()()()()()()()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()()()()()()()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()()()()()()()()()()()()()()\"\
    \ =>\n                    stackSize -= 1\n                case \")()()()", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    close.push(x)\n                }\n               \
    \ case \")(\"  => {\n                    open.push(x)\n                }\n   \
    \             case \")(\" => {\n                    stack.push(x)\n          \
    \      }\n                case \")(\" => {\n                    val x = stack.pop()\n\
    \                    val y = stack.pop()\n                    val z = x + y\n\
    \                    stack.push(z)\n                }\n                case \"\
    )\" => {\n                    val x = stack.pop()\n                    val y =\
    \ stack.pop()\n                    val z = x + y\n                    stack.push(z)\n\
    \                }\n                case \")\" => {\n                    val x\
    \ = stack.pop()\n                    val y = stack.pop()\n                   \
    \ val z = x + y\n                    stack.push(z)\n                }\n      \
    \          case \")(\" => {\n                    val x = stack.pop()\n       \
    \             val y = stack.pop()\n                    val z = x + y\n       \
    \             stack.push(z)\n                }\n                case \")(\" =>\
    \ {\n                    val x = stack.pop()\n                    val y = stack.pop()\n\
    \                    val z = x + y\n                    stack.push(z)\n      \
    \          }\n                case \")(\" => {\n                    val x = stack.pop()\n\
    \                    val y = stack.pop()\n                    val z = x + y\n\
    \                    stack.push(z)\n                }\n                case \"\
    )(\" => {\n                    val x = stack.pop()\n                    val y\
    \ = stack.pop()\n                    val z = x + y\n                    stack.push(z)\n\
    \                }\n                case \")(\" => {\n                    val\
    \ x = stack.pop()\n                    val y = stack.pop()\n                 \
    \   val z = x + y\n                    stack.push(z)\n                }\n    \
    \            case \")(\" => {\n                    val x = stack.pop()\n     \
    \               val y = stack.pop()\n                    val z = x + y\n     \
    \               stack.push(z)\n                }\n                case \")(\"\
    \ => {\n                    val x = stack.pop()\n                    val y = stack.pop()\n\
    \                    val z = x + y\n                    stack.push(z)\n      \
    \          }\n                case \")(\" => {\n                    val x = stack.pop()\n\
    \                    val y = stack.pop()\n                    val z = x + y\n\
    \                    stack.push(z)\n                }\n                case \"\
    )(\" => {\n                    val x = stack.pop()\n                    val y\
    \ = stack.pop()\n                    val z = x + y\n                    stack.push(z)\n\
    \                }\n                case \")(\" => {\n                    val\
    \ x = stack.pop()\n                    val y = stack.pop()\n                 \
    \   val z = x + y\n                    stack.push(z)\n                }\n    \
    \            case \")(\" => {\n                    val x = stack.pop()\n", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    close.synchronized {\n                        stack.pop()\
    \ match {\n                            case \"\" => result.synchronized {\n  \
    \                              result.append(x)\n                            \
    \    result.synchronized {\n                                    result.append(stack.pop())\n\
    \                                }\n                            }\n          \
    \                  case x => result.synchronized {\n                         \
    \       result.append(x)\n                            }\n                    \
    \    }\n                    }\n                }\n                case \"(\" =>\
    \ {\n                    open.synchronized {\n                        stack.push(x)\n\
    \                    }\n                }\n                case x => result.synchronized\
    \ {\n                    result.append(x)\n                }\n            }\n\
    \        })\n        if (close.size == 0 && open.size == 0) \"No\"\n        else\
    \ if (close.size == 0 && open.size == 1) \"Yes\"\n        else matchParens(result)",
  "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            if (x.contains(\"(\")) {\n          \
    \      stack += x\n            } else {\n                queue += x\n        \
    \    }\n        })\n        val goodCount = queue.size\n        val badCount =\
    \ stack.size\n        if (goodCount == badCount) {\n            if (goodCount\
    \ == 0) {\n                return \"No\"\n            } else {\n             \
    \   return \"Yes\"\n            }\n        }\n        val good = queue.take(goodCount)\n\
    \        val bad = stack.take(badCount)\n        val goodCount = good.size\n \
    \       val badCount = bad.size\n        if (goodCount == badCount) {\n      \
    \      if (goodCount == 0) {\n                return \"No\"\n            } else\
    \ {\n                return \"Yes\"\n            }\n        }\n        val good\
    \ = good.toList\n        val bad = bad.toList\n        val goodCount = good.size\n\
    \        val badCount = bad.size\n        if (goodCount == badCount) {\n     \
    \       if (goodCount == 0) {\n                return \"No\"\n            } else\
    \ {\n                return \"Yes\"\n            }\n        }\n        val good\
    \ = good.toList\n        val bad = bad.toList\n        val goodCount = good.size\n\
    \        val badCount = bad.size\n        if (goodCount == badCount) {\n     \
    \       if (goodCount == 0) {\n                return \"No\"\n            } else\
    \ {\n                return \"Yes\"\n            }\n        }\n        val good\
    \ = good.toList\n        val bad = bad.toList\n        val goodCount = good.size\n\
    \        val badCount = bad.size\n        if (goodCount == badCount) {\n     \
    \       if (goodCount == 0) {\n                return \"No\"\n            } else\
    \ {\n                return \"Yes\"\n            }\n        }\n        val good\
    \ = good.toList\n        val bad = bad.toList\n        val goodCount = good.size\n\
    \        val badCount = bad.size\n        if (goodCount == badCount) {\n     \
    \       if (goodCount == 0) {\n                return \"No\"\n            } else\
    \ {\n                return \"Yes\"\n            }\n        }\n        val good\
    \ = good.toList\n        val bad = bad.toList\n        val goodCount = good.size\n\
    \        val badCount = bad.size\n        if (goodCount == badCount) {\n     \
    \       if (goodCount == 0) {\n                return \"No\"\n            } else\
    \ {\n                return \"Yes\"\n            }\n        }\n        val good\
    \ = good.toList\n        val bad = bad", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            val openCount = if (open\
    \ < 0) 0 else open + 1\n            val closeCount = if (close < 0) 0 else close\
    \ + 1\n            val openParen = if (openCount > closeCount) closeCount else\
    \ openCount\n            val closeParen = if (closeCount > openCount) openCount\
    \ else closeCount\n            val openParenCount = if (openParen == 0) 0 else\
    \ openParen\n            val closeParenCount = if (closeParen == 0) 0 else closeParen\n\
    \            val openParenParen = if (openParenParen == 0) 0 else openParenParen\n\
    \            val closeParenParen = if (closeParenParen == 0) 0 else closeParenParen\n\
    \            val openParenParenCount = if (openParenParen == 0) 0 else openParenParen\n\
    \            val closeParenParenCount = if (closeParenParen == 0) 0 else closeParenParen\n\
    \            val openParenCount = if (openParenCount == 0) 0 else openParenCount\n\
    \            val closeParenCount = if (closeParenCount == 0) 0 else closeParenCount\n\
    \            val openParenParenCount = if (openParenParenCount == 0) 0 else openParenParenCount\n\
    \            val closeParenParenCount = if (closeParenParenCount == 0) 0 else\
    \ closeParenParenCount\n            val openParenCount = if (openParenCount ==\
    \ 0) 0 else openParenCount\n            val closeParenCount = if (closeParenCount\
    \ == 0) 0 else closeParenCount\n            val openParenParenCount = if (openParenParenCount\
    \ == 0) 0 else openParenParenCount\n            val closeParenParenCount = if\
    \ (closeParenParenCount == 0) 0 else closeParenParenCount\n            val openParenCount\
    \ = if (openParenCount == 0) 0 else openParenCount\n            val closeParenCount\
    \ = if (closeParenCount == 0) 0 else closeParenCount\n            val openParenParenCount\
    \ = if (openParenParenCount == 0) 0 else openParenParenCount\n            val\
    \ closeParenParenCount = if (closeParenParenCount == 0) 0 else closeParenParenCount\n\
    \            val openParenCount = if (openParenCount == 0) 0 else openParenCount\n\
    \            val closeParenCount = if (closeParenCount == 0) 0 else closeParenCount\n\
    \            val openParenParenCount = if (openParenParenCount == 0) 0 else openParenParenCount\n\
    \            val closeParenParenCount = if (closeParenParenCount == 0) 0 else\
    \ closeParenParenCount\n            val openParenCount = if (openParenCount ==\
    \ 0) 0 else openParenCount\n            val close", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stackMax = stackSize - 1\n    \
    \    val stackMaxSize = stackMax * 2\n        val stackMaxMax = stackMaxSize -\
    \ 1\n        val stackMaxMaxSize = stackMaxMax * 2\n        val stackMaxMaxMax\
    \ = stackMaxMaxSize - 1\n        val stackMaxMaxMaxSize = stackMaxMaxMax * 2\n\
    \        val stackMaxMaxMaxMax = stackMaxMaxMaxSize - 1\n        val stackMaxMaxMaxMaxSize\
    \ = stackMaxMaxMaxMax * 2\n        val stackMaxMaxMaxMaxMax = stackMaxMaxMaxMaxSize\
    \ - 1\n        val stackMaxMaxMaxMaxMaxSize = stackMaxMaxMaxMaxMax * 2\n     \
    \   val stackMaxMaxMaxMaxMaxMax = stackMaxMaxMaxMaxMaxSize - 1\n        val stackMaxMaxMaxMaxMaxMaxSize\
    \ = stackMaxMaxMaxMaxMaxMax * 2\n        val stackMaxMaxMaxMaxMaxMaxMax = stackMaxMaxMaxMaxMaxMaxSize\
    \ - 1\n        val stackMaxMaxMaxMaxMaxMaxMaxSize = stackMaxMaxMaxMaxMaxMaxMax\
    \ * 2\n        val stackMaxMaxMaxMaxMaxMaxMaxMax = stackMaxMaxMaxMaxMaxMaxMaxMaxSize\
    \ - 1\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxSize = stackMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ * 2\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxMax = stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxSize\
    \ - 1\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxMaxSize = stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ * 2\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxSize\
    \ - 1\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxSize = stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ * 2\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxSize\
    \ - 1\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxSize = stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ * 2\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.ListBuffer[String]()\n        val close = mutable.ListBuffer[String]()\n\
    \        val good = mutable.ListBuffer[String]()\n        val bad = mutable.ListBuffer[String]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.List",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.ListBuffer[String]()\n        val close = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    val s = stack.pop()\n                    result +=\
    \ (s + \"(\")\n                }\n                case \")(\"  => {\n        \
    \            val s = stack.pop()\n                    result += (s + \"(\")\n\
    \                    open += (s + \"(\")\n                }\n                case\
    \ \")(\" => {\n                    val s = stack.pop()\n                    result\
    \ += (s + \"(\")\n                    open += (s + \"(\")\n                  \
    \  close += (s + \"(\")\n                }\n                case \")(\" => {\n\
    \                    val s = stack.pop()\n                    result += (s + \"\
    (\")\n                    open += (s + \"(\")\n                    close += (s\
    \ + \"(\")\n                }\n                case \")(\" => {\n            \
    \        val s = stack.pop()\n                    result += (s + \"(\")\n    \
    \                open += (s + \"(\")\n                    close += (s + \"(\"\
    )\n                }\n                case \")(\" => {\n                    val\
    \ s = stack.pop()\n                    result += (s + \"(\")\n               \
    \     open += (s + \"(\")\n                    close += (s + \"(\")\n        \
    \        }\n                case \")(\" => {\n                    val s = stack.pop()\n\
    \                    result += (s + \"(\")\n                    open += (s + \"\
    (\")\n                    close += (s + \"(\")\n                }\n          \
    \      case \")(\" => {\n                    val s = stack.pop()\n           \
    \         result += (s + \"(\")\n                    open += (s + \"(\")\n   \
    \                 close += (s + \"(\")\n                }\n                case\
    \ \")(\" => {\n                    val s = stack.pop()\n                    result\
    \ += (s + \"(\")\n                    open += (s + \"(\")\n                  \
    \  close += (s + \"(\")\n                }\n                case \")(\" => {\n\
    \                    val s = stack.pop()\n                    result += (s + \"\
    (\")\n                    open += (s + \"(\")\n                    close += (s\
    \ + \"(\")\n                }\n                case \")(\" => {\n            \
    \        val s = stack.pop()\n                    result += (s + \"(\")\n    \
    \                open += (s + \"(\")\n                    close += (s + \"(\"\
    )\n                }\n                case \")(\" => {\n                    val\
    \ s = stack.pop()\n                    result += (s + \"(\")\n               \
    \     open += (s + \"(\")\n                    close += (s + \"(\")\n        \
    \        }\n                case \")(\" => {\n                    val s = stack.pop()\n\
    \                    result += (s + \"(\")", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" =>\n                    close.foreach(x\
    \ => stack += x)\n                    result ++= stack\n                    stack.toList.reverse.foreach(x\
    \ => stack += x)\n                    stack.toList.reverse.foreach(x => stack.pop())\n\
    \                case \")(\" =>\n                    open += x\n             \
    \   case \")(\" =>\n                    open += x\n                case \")(\"\
    \ =>\n                    open += x\n                case \")(\" =>\n        \
    \            open += x\n                case \")(\" =>\n                    open\
    \ += x\n                case \")(\" =>\n                    open += x\n      \
    \          case \")(\" =>\n                    open += x\n                case\
    \ \")(\" =>\n                    open += x\n                case \")(\" =>\n \
    \                   open += x\n                case \")(\" =>\n              \
    \      open += x\n                case \")(\" =>\n                    open +=\
    \ x\n                case \")(\" =>\n                    open += x\n         \
    \       case \")(\" =>\n                    open += x\n                case \"\
    )(\" =>\n                    open += x\n                case \")(\" =>\n     \
    \               open += x\n                case \")(\" =>\n                  \
    \  open += x\n                case \")(\" =>\n                    open += x\n\
    \                case \")(\" =>\n                    open += x\n             \
    \   case \")(\" =>\n                    open += x\n                case \")(\"\
    \ =>\n                    open += x\n                case \")(\" =>\n        \
    \            open += x\n                case \")(\" =>\n                    open\
    \ += x\n                case \")(\" =>\n                    open += x\n      \
    \          case \")(\" =>\n                    open += x\n                case\
    \ \")(\" =>\n                    open += x\n                case \")(\" =>\n \
    \                   open += x\n                case \")(\" =>\n              \
    \      open += x\n                case \")(\" =>\n                    open +=\
    \ x\n                case \")(\" =>\n                    open += x\n         \
    \       case \")(\" =>\n                    open += x\n                case \"\
    )(\" =>\n                    open += x\n                case \")(\" =>\n     \
    \               open += x\n                case \")(\" =>\n                  \
    \  open += x\n                case \")(\" =>\n                    open += x\n\
    \                case \")(\" =>\n                    open += x\n             \
    \   case \")(\" =>\n                    open += x\n                case \")(\"\
    \ =>\n", "        val stack = mutable.Stack[String]()\n        val result = mutable.Stack[String]()\n\
    \        val stackSize = lst.size\n        val resultSize = lst.size\n       \
    \ val stackMax = stackSize - 1\n        val resultMax = resultSize - 1\n     \
    \   val stackIndex = stackMax\n        val resultIndex = resultMax\n        val\
    \ stackIsEmpty = stackMax == 0\n        val resultIsEmpty = resultMax == 0\n \
    \       while(stackIsEmpty || resultIsEmpty) {\n            val stackIsFull =\
    \ stackIndex == stackMax\n            val resultIsFull = resultIndex == resultMax\n\
    \            if(!stackIsFull && !resultIsFull) {\n                val stackSize\
    \ = lst.size\n                val resultSize = lst.size\n                val stackMax\
    \ = stackSize - 1\n                val resultMax = resultSize - 1\n          \
    \      val stackIndex = stackMax\n                val resultIndex = resultMax\n\
    \                val stackIsEmpty = stackMax == 0\n                val resultIsEmpty\
    \ = resultMax == 0\n            }\n            if(!stackIsEmpty && !resultIsEmpty)\
    \ {\n                val stackSize = lst.size\n                val resultSize\
    \ = lst.size\n                val stackMax = stackSize - 1\n                val\
    \ resultMax = resultSize - 1\n                val stackIndex = stackMax\n    \
    \            val resultIndex = resultMax\n                val stackIsEmpty = stackMax\
    \ == 0\n                val resultIsEmpty = resultMax == 0\n            }\n  \
    \          if(!stackIsEmpty && resultIsEmpty) {\n                val stackSize\
    \ = lst.size\n                val resultSize = lst.size\n                val stackMax\
    \ = stackSize - 1\n                val resultMax = resultSize - 1\n          \
    \      val stackIndex = stackMax\n                val resultIndex = resultMax\n\
    \                val stackIsEmpty = stackMax == 0\n                val resultIsEmpty\
    \ = resultMax == 0\n            }\n            if(!stackIsEmpty && !resultIsEmpty)\
    \ {\n                val stackSize = lst.size\n                val resultSize\
    \ = lst.size\n                val stackMax = stackSize - 1\n                val\
    \ resultMax = resultSize - 1\n                val stackIndex = stackMax\n    \
    \            val resultIndex = resultMax\n                val stackIsEmpty = stackMax\
    \ == 0\n                val resultIsEmpty = resultMax == 0\n            }\n  \
    \          if(!stackIsEmpty && resultIsEmpty) {\n                val stackSize\
    \ = lst.size\n                val resultSize = lst.size\n                val stackMax\
    \ = stackSize - 1\n                val resultMax = resultSize - 1\n          \
    \      val stackIndex = stackMax\n                val resultIndex = resultMax\n\
    \                val stack", "        val stack = mutable.Stack[String]()\n  \
    \      val queue = mutable.Queue[String]()\n        val good = mutable.ListBuffer[String]()\n\
    \        val bad = mutable.ListBuffer[String]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer[Int]()\n        val goodCount = mutable.ListBuffer[Int]()\n\
    \        val badCount = mutable.ListBuffer", "        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val good = mutable.Set[String]()\n\
    \        val bad = mutable.Set[String]()\n        val goodString = mutable.Set[String]()\n\
    \        val badString = mutable.Set[String]()\n        val goodParens = mutable.Set[String]()\n\
    \        val badParens = mutable.Set[String]()\n        val goodParensCount =\
    \ mutable.Set[Int]()\n        val badParensCount = mutable.Set[Int]()\n      \
    \  val goodParensCount2 = mutable.Set[Int]()\n        val badParensCount2 = mutable.Set[Int]()\n\
    \        val goodParensCount3 = mutable.Set[Int]()\n        val badParensCount3\
    \ = mutable.Set[Int]()\n        val goodParensCount4 = mutable.Set[Int]()\n  \
    \      val badParensCount4 = mutable.Set[Int]()\n        val goodParensCount5\
    \ = mutable.Set[Int]()\n        val badParensCount5 = mutable.Set[Int]()\n   \
    \     val goodParensCount6 = mutable.Set[Int]()\n        val badParensCount6 =\
    \ mutable.Set[Int]()\n        val goodParensCount7 = mutable.Set[Int]()\n    \
    \    val badParensCount7 = mutable.Set[Int]()\n        val goodParensCount8 =\
    \ mutable.Set[Int]()\n        val badParensCount8 = mutable.Set[Int]()\n     \
    \   val goodParensCount9 = mutable.Set[Int]()\n        val badParensCount9 = mutable.Set[Int]()\n\
    \        val goodParensCount10 = mutable.Set[Int]()\n        val badParensCount10\
    \ = mutable.Set[Int]()\n        val goodParensCount11 = mutable.Set[Int]()\n \
    \       val badParensCount11 = mutable.Set[Int]()\n        val goodParensCount12\
    \ = mutable.Set[Int]()\n        val badParensCount12 = mutable.Set[Int]()\n  \
    \      val goodParensCount13 = mutable.Set[Int]()\n        val badParensCount13\
    \ = mutable.Set[Int]()\n        val goodParensCount14 = mutable.Set[Int]()\n \
    \       val badParensCount14 = mut", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        val open = mutable.ListBuffer(\"\
    (\")\n        val close = mutable.ListBuffer(\")\")\n        val openCount = mutable.ListBuffer[Int]()\n\
    \        val closeCount = mutable.ListBuffer[Int]()\n        lst.foreach(x =>\
    \ {\n            x match {\n                case x if x == \")\" => closeCount\
    \ += 1 \n                case x if x == \")\" => closeCount -= 1\n           \
    \     case x if x == \"(\" => openCount += 1 \n                case x if x ==\
    \ \"(\" => openCount -= 1\n                case _ => stack += x\n            }\n\
    \        })\n        val openCount = openCount.sum\n        val closeCount = closeCount.sum\n\
    \        if (openCount == 0 && closeCount == 0) \"Yes\" else \"No\"", "      \
    \  val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach { s =>\n            if (s.contains(\"(\")) {\n          \
    \      open += s\n            } else {\n                close += s\n         \
    \   }\n        }\n        val openCount = open.size\n        val closeCount =\
    \ close.size\n        if (openCount == closeCount) {\n            val openStack\
    \ = mutable.Stack[String]()\n            val closeStack = mutable.Stack[String]()\n\
    \            open.foreach { s =>\n                openStack += s\n           \
    \ }\n            close.foreach { s =>\n                closeStack += s\n     \
    \       }\n            while (openStack.nonEmpty && closeStack.nonEmpty) {\n \
    \               val open = openStack.pop()\n                val close = closeStack.pop()\n\
    \                if (open == close) {\n                    result += (open)\n\
    \                } else {\n                    result += \"No\"\n            \
    \    }\n            }\n            if (result.nonEmpty) {\n                return\
    \ result.toString()\n            } else {\n                return \"No\"\n   \
    \         }\n        } else {\n            return \"No\"\n        }", "      \
    \  val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => stack.pop()\n                case \")(\"  => stack.append(x)\n          \
    \      case \")(\"  => stack.append(x)\n                case \")\" => stack.append(x)\n\
    \                case _ => stack.append(x)\n            }\n        })\n      \
    \  stack.foreach(x => result.append(x))\n        result.mkString(\"(\", \", \"\
    , \")\")", "        val stack = mutable.Stack[String]()\n        val stack2 =\
    \ mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n    \
    \    val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.Queue[String]()\n        val stackSize = lst.size\n\
    \        val queueSize = lst.size\n        val stackIsEmpty = stack.isEmpty\n\
    \        val queueIsEmpty = queue.isEmpty\n        val stackIsFull = stackSize\
    \ == stackIsEmpty\n        val queueIsFull = queueSize == queueIsEmpty\n     \
    \   val stackIsFull = stackSize == stackIsEmpty\n        val queueIsFull = queueSize\
    \ == queueIsEmpty\n        val stackIsEmpty = stack.isEmpty\n        val queueIsEmpty\
    \ = queue.isEmpty\n        val stackIsFull = stackSize == stackIsEmpty\n     \
    \   val queueIsFull = queueSize == queueIsEmpty\n        val stackIsFull = stackSize\
    \ == stackIsEmpty\n        val queueIsFull = queueSize == queueIsEmpty\n     \
    \   val stackIsEmpty = stack.isEmpty\n        val queueIsEmpty = queue.isEmpty\n\
    \        val stackIsFull = stackSize == stackIsEmpty\n        val queueIsFull\
    \ = queueSize == queueIsEmpty\n        val stackIsFull = stackSize == stackIsEmpty\n\
    \        val queueIsFull = queueSize == queueIsEmpty\n        val stackIsEmpty\
    \ = stack.isEmpty\n        val queueIsEmpty = queue.isEmpty\n        val stackIsFull\
    \ = stackSize == stackIsEmpty\n        val queueIsFull = queueSize == queueIsEmpty\n\
    \        val stackIsFull = stackSize == stackIsEmpty\n        val queueIsFull\
    \ = queueSize == queueIsEmpty\n        val stackIsEmpty = stack.isEmpty\n    \
    \    val queueIsEmpty = queue.isEmpty\n        val stackIsFull = stackSize ==\
    \ stackIsEmpty\n        val queueIsFull = queueSize == queueIsEmpty\n        val\
    \ stackIsFull = stackSize == stackIsEmpty\n        val queueIsFull = queueSize\
    \ == queueIsEmpty\n        val stackIsEmpty = stack.isEmpty\n        val queueIsEmpty\
    \ = queue.isEmpty\n        val stackIsFull = stackSize == stackIsEmpty\n     \
    \   val queueIsFull = queueSize == queueIsEmpty\n        val stackIsFull = stackSize\
    \ == stackIsEmpty\n        val queueIsFull = queueSize == queueIsEmpty\n     \
    \   val stackIsEmpty = stack.isEmpty\n        val queueIsEmpty = queue.isEmpty\n\
    \        val stackIsFull = stackSize == stack", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stackMax = stackSize - 1\n        lst.foreach(x => {\n          \
    \  if (x.equals(\"(\")) {\n                stack.push(x)\n            } else if\
    \ (x.equals(\")\")) {\n                if (stack.size == stackMax) {\n       \
    \             result += \"No\"\n                } else {\n                   \
    \ result += \"Yes\"\n                }\n                stack.pop()\n        \
    \    }\n        })\n        result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" =>\n                    close.foreach(c\
    \ => stack += c)\n                    result ++= stack\n                    stack\
    \ = mutable.Stack[String]()\n                case \")(\"  =>\n               \
    \     open += x\n                case \")(\"  =>\n                    open -=\
    \ x\n                case \")\" =>\n                    close.foreach(c => stack\
    \ += c)\n                    result ++= stack\n                    stack = mutable.Stack[String]()\n\
    \                case \")\" =>\n                    close.foreach(c => stack +=\
    \ c)\n                    result ++= stack\n                    stack = mutable.Stack[String]()\n\
    \                case \")\" =>\n                    close.foreach(c => stack +=\
    \ c)\n                    result ++= stack\n                    stack = mutable.Stack[String]()\n\
    \                case \")\" =>\n                    close.foreach(c => stack +=\
    \ c)\n                    result ++= stack\n                    stack = mutable.Stack[String]()\n\
    \                case \")\" =>\n                    close.foreach(c => stack +=\
    \ c)\n                    result ++= stack\n                    stack = mutable.Stack[String]()\n\
    \                case \")\" =>\n                    close.foreach(c => stack +=\
    \ c)\n                    result ++= stack\n                    stack = mutable.Stack[String]()\n\
    \                case \")\" =>\n                    close.foreach(c => stack +=\
    \ c)\n                    result ++= stack\n                    stack = mutable.Stack[String]()\n\
    \                case \")\" =>\n                    close.foreach(c => stack +=\
    \ c)\n                    result ++= stack\n                    stack = mutable.Stack[String]()\n\
    \                case \")\" =>\n                    close.foreach(c => stack +=\
    \ c)\n                    result ++= stack\n                    stack = mutable.Stack[String]()\n\
    \                case \")\" =>\n                    close.foreach(c => stack +=\
    \ c)\n                    result ++= stack\n                    stack = mutable.Stack[String]()\n\
    \                case \")\" =>\n                    close.foreach(c => stack +=\
    \ c)\n                    result ++= stack\n                    stack = mutable.Stack[String]()\n\
    \                case \")\" =>\n                    close.foreach(c => stack +=\
    \ c)\n                    result ++= stack\n                    stack = mutable.Stack[String]()\n\
    \                case ", "        val stack = mutable.Stack[String]()\n      \
    \  val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ queue = mutable.Queue[String]()\n        val good = mutable.Set[String]()\n\
    \        val bad = mutable.Set[String]()\n        lst.foreach(x => {\n       \
    \     x match {\n                case \")\" => stack.pop() match {\n         \
    \           case \")\" => queue.enqueue(x)\n                    case x => bad.add(x)\n\
    \                }\n                case \"(\" => stack.push(x)\n            \
    \    case x => queue.add(x)\n            }\n        })\n        if (stack.size\
    \ == 0 && queue.size == 0) \"Yes\"\n        else if (stack.size == 0 && queue.size\
    \ == 1) \"No\"\n        else matchParens(stack) + matchParens(queue)", "     \
    \   val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        lst.foreach(x => if (x == \"(\") queue.push(x) else stack.push(x))\n\
    \        while(!queue.isEmpty && !stack.isEmpty) {\n            val x = queue.poll\n\
    \            val y = stack.pop()\n            if (x == \"(\") queue.push(y) else\
    \ stack.push(y)\n            if (good.contains(y)) \"Yes\" else \"No\"\n     \
    \   }", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    close.synchronized {\n                        stack.pop\n\
    \                    }\n                }\n                case \")(\"  => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n                        stack += x\n\
    \                    }\n                }\n                case \")(\" => {\n\
    \                    open.synchronized {\n", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        val openCount = mutable.ListBuffer[Int]()\n\
    \        val closeCount = mutable.ListBuffer[Int]()\n        lst.foreach { s =>\n\
    \            val openCount = openCount.updated(0, 0)\n            val closeCount\
    \ = closeCount.updated(0, 0)\n            val open = open.updated(0, \"\")\n \
    \           val close = close.updated(0, \"\")\n            val stack = stack.updated(0,\
    \ \"\")\n            if (s == \"(\") {\n                openCount.updated(1, openCount.getOrElse(1).toInt\
    \ + 1)\n                stack.updated(1, s)\n            } else if (s == \")\"\
    ) {\n                closeCount.updated(1, closeCount.getOrElse(1).toInt + 1)\n\
    \                if (closeCount.getOrElse(1).toInt == openCount.getOrElse(1).toInt)\
    \ {\n                    result += (stack.toString + close.toString + \"Yes\"\
    )\n                } else {\n                    result += (stack.toString + close.toString\
    \ + \"No\")\n                }\n                stack.updated(1, \"\")\n     \
    \       } else {\n                openCount.updated(1, openCount.getOrElse(1).toInt\
    \ + 1)\n                stack.updated(1, s)\n            }\n        }\n      \
    \  if (openCount.getOrElse(1).toInt == closeCount.getOrElse(1).toInt) {\n    \
    \        result += (stack.toString + \"Yes\")\n        } else {\n            result\
    \ += (stack.toString + \"No\")\n        }\n        result.toString", "       \
    \ val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.ListBuffer[String]()\n        val bad = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    queue.enqueue(x)\n                }\n            \
    \    case \")(\"  => {\n                    stack.push(x)\n                }\n\
    \                case \")(\" => {\n                    val s = stack.pop()\n \
    \                   val q = queue.poll()\n                    if (s == q) {\n\
    \                        good.append(x)\n                    } else {\n      \
    \                  bad.append(x)\n                    }\n                }\n \
    \               case \")\" => {\n                    queue.enqueue(x)\n      \
    \          }\n                case _ => {\n                    queue.enqueue(x)\n\
    \                }\n            }\n        })\n        if (good.size == 0) {\n\
    \            \"No\"\n        } else {\n            \"Yes\"\n        }", "    \
    \    val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach { s =>\n     \
    \       s match {\n                case \")\" =>\n                    close.foreach(c\
    \ => stack += c)\n                    result ++= stack\n                    stack\
    \ = mutable.Stack[String]()\n                case \")(\"  =>\n               \
    \     open += s\n                case \")(\"  =>\n                    open +=\
    \ s\n                case \")(\" =>\n                    open += s\n         \
    \       case \")\" =>\n                    open += s\n                case \"\
    )\" =>\n                    open += s\n                case \")\" =>\n       \
    \             open += s\n                case \")\" =>\n                    open\
    \ += s\n                case \")\" =>\n                    open += s\n       \
    \         case \")\" =>\n                    open += s\n                case \"\
    )\" =>\n                    open += s\n                case \")\" =>\n       \
    \             open += s\n                case \")\" =>\n                    open\
    \ += s\n                case \")\" =>\n                    open += s\n       \
    \         case \")\" =>\n                    open += s\n                case \"\
    )\" =>\n                    open += s\n                case \")\" =>\n       \
    \             open += s\n                case \")\" =>\n                    open\
    \ += s\n                case \")\" =>\n                    open += s\n       \
    \         case \")\" =>\n                    open += s\n                case \"\
    )\" =>\n                    open += s\n                case \")\" =>\n       \
    \             open += s\n                case \")\" =>\n                    open\
    \ += s\n                case \")\" =>\n                    open += s\n       \
    \         case \")\" =>\n                    open += s\n                case \"\
    )\" =>\n                    open += s\n                case \")\" =>\n       \
    \             open += s\n                case \")\" =>\n                    open\
    \ += s\n                case \")\" =>\n                    open += s\n       \
    \         case \")\" =>\n                    open += s\n                case \"\
    )\" =>\n                    open += s\n                case \")\" =>\n       \
    \             open += s\n                case \")\" =>\n                    open\
    \ += s\n                case \")\" =>\n                    open += s\n       \
    \         case \")\" =>\n                    open += s\n                case \"\
    )\" =>\n                    open += s\n                case \")\" =>\n       \
    \             open += s\n                case \")\" =>\n                    open\
    \ += s\n                case \")\" =>\n                    open += s\n       \
    \         case \")\" =>\n                    open += s\n                case \"\
    )\" =>\n                    open += s\n                case \")\" =>\n       \
    \             open += s\n                case \")\" =>\n", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    close.foreach(y => stack += y)\n                 \
    \   close.clear()\n                }\n                case \")(\"  => {\n    \
    \                open.foreach(y => stack += y)\n                    open.clear()\n\
    \                }\n                case \")(\"  => {\n                    open.foreach(y\
    \ => stack += y)\n                    open.clear()\n                }\n      \
    \          case \")\" => {\n                    close.foreach(y => stack += y)\n\
    \                    close.clear()\n                }\n                case \"\
    )\" => {\n                    close.foreach(y => stack += y)\n               \
    \     close.clear()\n                }\n                case \")\" => {\n    \
    \                close.foreach(y => stack += y)\n                    close.clear()\n\
    \                }\n                case \")\" => {\n                    close.foreach(y\
    \ => stack += y)\n                    close.clear()\n                }\n     \
    \           case \")\" => {\n                    close.foreach(y => stack += y)\n\
    \                    close.clear()\n                }\n                case \"\
    )\" => {\n                    close.foreach(y => stack += y)\n               \
    \     close.clear()\n                }\n                case \")\" => {\n    \
    \                close.foreach(y => stack += y)\n                    close.clear()\n\
    \                }\n                case \")\" => {\n                    close.foreach(y\
    \ => stack += y)\n                    close.clear()\n                }\n     \
    \           case \")\" => {\n                    close.foreach(y => stack += y)\n\
    \                    close.clear()\n                }\n                case \"\
    )\" => {\n                    close.foreach(y => stack += y)\n               \
    \     close.clear()\n                }\n                case \")\" => {\n    \
    \                close.foreach(y => stack += y)\n                    close.clear()\n\
    \                }\n                case \")\" => {\n                    close.foreach(y\
    \ => stack += y)\n                    close.clear()\n                }\n     \
    \           case \")\" => {\n                    close.foreach(y => stack += y)\n\
    \                    close.clear()\n                }\n                case \"\
    )\" => {\n                    close.foreach(y => stack += y)\n               \
    \     close.clear()\n                }\n                case \")\" => {\n    \
    \                close.foreach(y => stack += y)\n                    close.clear()\n\
    \                }\n                case \")\" => {\n                    close.foreach(y\
    \ => stack += y)\n                    close.clear()\n                }\n     \
    \           case \")\" => {\n                    close.foreach(y => stack += y)\n\
    \                    ", "        val stack = mutable.Stack[String]()\n       \
    \ val result = mutable.ListBuffer.empty[String]\n        val open = mutable.ListBuffer.empty[String]\n\
    \        val close = mutable.ListBuffer.empty[String]\n        val openCount =\
    \ mutable.ListBuffer.empty[Int]\n        val closeCount = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    closeCount += closeCount.length\n                \
    \    closeCount += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += close", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach { s =>\n\
    \            val openCount = if (s.startsWith(\"(\")) 1 else 0\n            val\
    \ closeCount = if (s.endsWith(\")\")) 1 else 0\n            if (openCount == closeCount)\
    \ {\n                result += (s + \"\\n\")\n            } else {\n         \
    \       open += (s + \"\\n\")\n            }\n        }\n        val openCount\
    \ = if (open.isEmpty) 0 else open.length\n        val closeCount = if (close.isEmpty)\
    \ 0 else close.length\n        if (openCount == closeCount) {\n            val\
    \ stackStr = stack.toList\n            if (stackStr.size == 0) {\n           \
    \     return \"No\"\n            } else {\n                val stackStr = stack.toList\n\
    \                val stackStr = stackStr.sortBy(_.length)\n                val\
    \ stackStr = stackStr.take(stackStr.size - 1).mkString(\"\\n\")\n            \
    \    val stackStr = stackStr.substring(0, stackStr.size - 1)\n               \
    \ val stackStr = stackStr.substring(0, stackStr.size - 1)\n                val\
    \ stackStr = stackStr.substring(0, stackStr.size - 1)\n                val stackStr\
    \ = stackStr.substring(0, stackStr.size - 1)\n                val stackStr = stackStr.substring(0,\
    \ stackStr.size - 1)\n                val stackStr = stackStr.substring(0, stackStr.size\
    \ - 1)\n                val stackStr = stackStr.substring(0, stackStr.size - 1)\n\
    \                val stackStr = stackStr.substring(0, stackStr.size - 1)\n   \
    \             val stackStr = stackStr.substring(0, stackStr.size - 1)\n      \
    \          val stackStr = stackStr.substring(0, stackStr.size - 1)\n         \
    \       val stackStr = stackStr.substring(0, stackStr.size - 1)\n            \
    \    val stackStr = stackStr.substring(0, stackStr.size - 1)\n               \
    \ val stackStr = stackStr.substring(0, stackStr.size - 1)\n                val\
    \ stackStr = stackStr.substring(0, stackStr.size - 1)\n                val stackStr\
    \ = stackStr.substring(0, stackStr.size - 1)\n                val stackStr = stackStr.substring(0,\
    \ stackStr.size - 1)\n                val stackStr = stackStr.substring(0, stackStr.size\
    \ - 1)\n                val stackStr = stackStr.substring(0, stackStr.size - 1)\n\
    \                val stackStr = stackStr.substring(0, stackStr.size - 1)\n   \
    \             val stackStr = stackStr.substring(0, stackStr.size - 1)\n      \
    \          val stackStr = stackStr.substring(0, stackStr.size - 1)\n         \
    \       val stackStr = stackStr.substring(0, stackStr", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val len = open - close\n            if(len > 0) {\n           \
    \     stack.push(str)\n                while(stack.nonEmpty) {\n             \
    \       val top = stack.pop()\n                    if(top == close) {\n      \
    \                  result += \"Yes\"\n                        break\n        \
    \            }\n                    if(top == open) {\n                      \
    \  result += \"No\"\n                        break\n                    }\n  \
    \                  result += \"No\"\n                }\n            }\n      \
    \  }\n        result.mkString(\",\")", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => close.push(x)\n        \
    \        case \")(\"  => open.push(x)\n                case \")()\" => stack.push(x)\n\
    \                case \")()()\" => stack.push(x)\n                case \")()\"\
    \ => stack.push(x)\n                case \")\" => close.push(x)\n            \
    \    case \")()\" => stack.push(x)\n                case \")()()\" => stack.push(x)\n\
    \                case \")()()\" => stack.push(x)\n                case \")()()\"\
    \ => stack.push(x)\n                case \")()()\" => stack.push(x)\n        \
    \        case \")()()\" => stack.push(x)\n                case \")()()\" => stack.push(x)\n\
    \                case \")()()\" => stack.push(x)\n                case \")()()\"\
    \ => stack.push(x)\n                case \")()()\" => stack.push(x)\n        \
    \        case \")()()\" => stack.push(x)\n                case \")()()\" => stack.push(x)\n\
    \                case \")()()\" => stack.push(x)\n                case \")()()\"\
    \ => stack.push(x)\n                case \")()()\" => stack.push(x)\n        \
    \        case \")()()\" => stack.push(x)\n                case \")()()\" => stack.push(x)\n\
    \                case \")()()\" => stack.push(x)\n                case \")()()\"\
    \ => stack.push(x)\n                case \")()()\" => stack.push(x)\n        \
    \        case \")()()\" => stack.push(x)\n                case \")()()\" => stack.push(x)\n\
    \                case \")()()\" => stack.push(x)\n                case \")()()\"\
    \ => stack.push(x)\n                case \")()()\" => stack.push(x)\n        \
    \        case \")()()\" => stack.push(x)\n                case \")()()\" => stack.push(x)\n\
    \                case \")()()\" => stack.push(x)\n                case \")()()\"\
    \ => stack.push(x)\n                case \")()()\" => stack.push(x)\n        \
    \        case \")()()\" => stack.push(x)\n                case \")()()\" => stack.push(x)\n\
    \                case \")()()\" => stack.push(x)\n                case \")()()\"\
    \ => stack.push(x)\n                case \")()()\" => stack.push(x)\n        \
    \        case \")()()\" => stack.push(x)\n                case \")()()\" => stack.push(x)\n\
    \                case \")()()\" => stack.push(x)\n                case \")()()\"\
    \ => stack.push(x)\n                case \")()()\" => ", "        val stack =\
    \ mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stackMax = stackSize - 1\n    \
    \    lst.foreach(x => {\n            x match {\n                case \")\" =>\
    \ {\n                    stackSize -= 1\n                    stack.toList.reverse.foreach(y\
    \ => {\n                        y match {\n                            case \"\
    )\" => {\n                                stackSize -= 1\n                   \
    \             stack.toList.reverse.foreach(z => {\n                          \
    \          z match {\n                                        case \")\" => {\n\
    \                                            stackSize -= 1\n                \
    \                            stack.toList.reverse.foreach(w => {\n           \
    \                                     w match {\n                            \
    \                        case \")\" => {\n                                   \
    \                     stackSize -= 1\n                                       \
    \                 stack.toList.reverse.foreach(x => {\n                      \
    \                                      x match {\n                           \
    \                                     case \")\" => {\n                      \
    \                                              stackSize -= 1\n              \
    \                                                      stack.toList.reverse.foreach(y\
    \ => {\n                                                                     \
    \   y match {\n                                                              \
    \              case \")\" => {\n                                             \
    \                                   stackSize -= 1\n                         \
    \                                                       stack.toList.reverse.foreach(z\
    \ => {\n                                                                     \
    \               z match {\n                                                  \
    \                                      case \")\" => {\n                     \
    \                                                                       stackSize\
    \ -= 1\n                                                                     \
    \                       stack.toList.reverse.foreach(w => {\n                \
    \                                                                            \
    \    w match {\n                                                             \
    \                                       case \")\" => {\n                    \
    \                                                                            \
    \        stackSize -= 1\n                                                    \
    \                                                    stack.toList.reverse.foreach(x\
    \ => {\n                                                                     \
    \                                       x match {\n                          \
    \                                                                            \
    \          case \")\" => {\n                                                 \
    \                                                                   stackSize\
    \ -= 1\n                                                                     \
    \                                               stack.toList.reverse.foreach(y\
    \ => {\n                                                                     \
    \                                                   y match {\n              \
    \                                                                            \
    \                                  case \")\" => {\n                         \
    \                                                                            \
    \                           stackSize -= 1\n                                 \
    \                                                                            \
    \                   stack.toList.reverse.foreach(z => {\n                    \
    \                                                                            \
    \                                    z match {\n                             \
    \                                                                            \
    \                               case \")\" => {\n                            \
    \                                                                            \
    \                                    stackSize -= 1\n                        \
    \                                                                            \
    \                                        stack.toList.reverse.foreach(w => {\n\
    \                                                                            \
    \                                                                    w match {\n\
    \                                                                            \
    \                                                                    case \")\"\
    \ => {\n                                                                     \
    \                                                                            \
    \   stackSize -= 1\n                                                         \
    \                                                                            \
    \               stack.toList.reverse.foreach(x => {\n                        \
    \                                                                            \
    \                                                    x match {\n             \
    \                                                                            \
    \                                                                   case \")\"\
    \ => {\n                                                                     \
    \                                                                            \
    \               stackSize -= 1\n                                             \
    \                                                                            \
    \                                       stack.toList.reverse.foreach(y => {\n\
    \                                                                            \
    \                                                                            \
    \            y match {\n                                                     \
    \                                                                            \
    \                                       case \")\" => {\n                    \
    \                                                                            \
    \                                                                            stackSize\
    \ -= 1\n                                                                     \
    \                                                                            \
    \                           stack.toList.reverse.foreach(z => {\n            \
    \                                                                            \
    \                                                                            \
    \            z match {\n                                                     \
    \                                                                            \
    \                                                   case \")\" => {\n        \
    \                                                                            \
    \                                                                            \
    \                        stackSize -= 1\n                                    \
    \                                                                            \
    \                                                                        stack.toList.reverse.foreach(w\
    \ => {\n", "        val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val queueSize = lst.size\n        val stackMax = stackSize - 1\n    \
    \    val queueMax = queueSize - 1\n        val stackIndex = stackMax\n       \
    \ val queueIndex = queueMax\n        val stackIsEmpty = stackMax == -1\n     \
    \   val queueIsEmpty = queueMax == -1\n        val stackIsFull = stackMax == stackSize\n\
    \        val queueIsFull = queueMax == queueSize\n        while(stackIsEmpty ||\
    \ queueIsEmpty) {\n            val stackIsFull = stackMax == stackSize\n     \
    \       val queueIsFull = queueMax == queueSize\n            val stackIsEmpty\
    \ = stackMax == -1\n            val queueIsEmpty = queueMax == -1\n          \
    \  if(stackIsEmpty && queueIsEmpty) {\n                val stackIsEmpty = stackMax\
    \ == -1\n                val queueIsEmpty = queueMax == -1\n            }\n  \
    \          if(stackIsFull) {\n                val stackIsEmpty = stackMax == -1\n\
    \            }\n            if(queueIsFull) {\n                val queueIsEmpty\
    \ = queueMax == -1\n            }\n            val stackSize = lst.size\n    \
    \        val queueSize = lst.size\n            val stackMax = stackSize - 1\n\
    \            val queueMax = queueSize - 1\n            val stackIndex = stackMax\n\
    \            val queueIndex = queueMax\n            val stackIsEmpty = stackMax\
    \ == -1\n            val queueIsEmpty = queueMax == -1\n            val stackIsFull\
    \ = stackMax == stackSize\n            val queueIsFull = queueMax == queueSize\n\
    \        }\n        while(stackIndex < stackSize && queueIndex < queueSize) {\n\
    \            val stack = lst.take(stackIndex).mkString\n            val queue\
    \ = lst.take(queueIndex).mkString\n            val stackSize = lst.size\n    \
    \        val queueSize = lst.size\n            val stackMax = stackSize - 1\n\
    \            val queueMax = queueSize - 1\n            val stackIndex = stackMax\n\
    \            val queueIndex = queueMax\n            val stackIsEmpty = stackMax\
    \ == -1\n            val queueIsEmpty = queueMax == -1\n            val stackIsFull\
    \ = stackMax == stackSize\n            val queueIsFull = queueMax == queueSize\n\
    \            while(stackIsEmpty || queueIsEmpty) {\n                val stackIsFull\
    \ = stackMax == stackSize", "        val stack = mutable.Stack[String]()\n   \
    \     val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.HashSet[String]()\n        val close = mutable.HashSet[String]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") {\n                open\
    \ += x\n            } else if (x == \")\") {\n                close += x\n   \
    \         } else {\n                stack += x\n            }\n        })\n  \
    \      val openCount = open.size\n        val closeCount = close.size\n      \
    \  if (openCount == closeCount) {\n            val openStack = stack.take(openCount)\n\
    \            val closeStack = stack.drop(closeCount)\n            val openStackStr\
    \ = openStack.mkString\n            val closeStackStr = closeStack.mkString\n\
    \            if (openStackStr == closeStackStr) {\n                result += \"\
    Yes\"\n            } else {\n                result += \"No\"\n            }\n\
    \        } else {\n            result += \"No\"\n        }\n        result.toString",
  "        val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.Queue[String]()\n        val good = mutable.Queue[String]()\n\
    \        val bad = mutable.Queue[String]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]()\n        val goodCount = mutable.Queue[Int]()\n\
    \        val badCount = mutable.Queue[Int]", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => if (open(x)\
    \ ) stack += x else close.add(x))\n        while(!stack.isEmpty) {\n         \
    \   val curr = stack.pop()\n            if (close.contains(curr)) {\n        \
    \        result += curr\n            } else {\n                val open1 = open.toList\n\
    \                val close1 = close.toList\n                val open2 = open1.filterNot(x\
    \ => close1.contains(x))\n                val close2 = close1.filterNot(x => open1.contains(x))\n\
    \                if (open2.isEmpty) result += \"(\" + curr\n                else\
    \ if (close2.isEmpty) result += curr + \")\"\n                else {\n       \
    \             val open3 = open2.filterNot(x => close2.contains(x))\n         \
    \           val close3 = close2.filterNot(x => open2.contains(x))\n          \
    \          if (open3.isEmpty) result += \"(\" + curr + \")\"\n               \
    \     else if (close3.isEmpty) result += curr + \")\"\n                    else\
    \ {\n                        val open4 = open3.filterNot(x => close3.contains(x))\n\
    \                        val close4 = close3.filterNot(x => open3.contains(x))\n\
    \                        if (open4.isEmpty) result += \"(\" + curr + \")\"\n \
    \                       else if (close4.isEmpty) result += curr + \")\"\n    \
    \                    else {\n                            val open5 = open4.filterNot(x\
    \ => close4.contains(x))\n                            val close5 = close4.filterNot(x\
    \ => open4.contains(x))\n                            if (open5.isEmpty) result\
    \ += \"(\" + curr + \")\"\n                            else if (close5.isEmpty)\
    \ result += curr + \")\"\n                            else {\n               \
    \                 val open6 = open5.filterNot(x => close5.contains(x))\n     \
    \                           val close6 = close5.filterNot(x => open5.contains(x))\n\
    \                                if (open6.isEmpty) result += \"(\" + curr + \"\
    )\"\n                                else if (close6.isEmpty) result += curr +\
    \ \")\"\n                                else {\n                            \
    \        val open7 = open6.filterNot(x => close6.contains(x))\n              \
    \                      val close7 = close6.filterNot(x => open6.contains(x))\n\
    \                                    if (open7.isEmpty) result += \"(\" + curr\
    \ + \")\"\n                                    else if (close7.isEmpty) result\
    \ += curr + \")\"\n                                    else {\n              \
    \                          val open8 = open7.filterNot(x => close7.contains(x))\n\
    \                                        val close8 = close7.filterNot(x => open7.contains(x))\n\
    \                                ", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ queue = mutable.Queue[String]()\n        val good = mutable.Set[String]()\n\
    \        val bad = mutable.Set[String]()\n        val goodStrings = mutable.Set[String]()\n\
    \        val badStrings = mutable.Set[String]()\n        val goodStringsSize =\
    \ mutable.Set[Int]()\n        val badStringsSize = mutable.Set[Int]()\n      \
    \  val goodStringsSize = mutable.Set[Int]()\n        val badStringsSize = mutable.Set[Int]()\n\
    \        val goodStringsSize = mutable.Set[Int]()\n        val badStringsSize\
    \ = mutable.Set[Int]()\n        val goodStringsSize = mutable.Set[Int]()\n   \
    \     val badStringsSize = mutable.Set[Int]()\n        val goodStringsSize = mutable.Set[Int]()\n\
    \        val badStringsSize = mutable.Set[Int]()\n        val goodStringsSize\
    \ = mutable.Set[Int]()\n        val badStringsSize = mutable.Set[Int]()\n    \
    \    val goodStringsSize = mutable.Set[Int]()\n        val badStringsSize = mutable.Set[Int]()\n\
    \        val goodStringsSize = mutable.Set[Int]()\n        val badStringsSize\
    \ = mutable.Set[Int]()\n        val goodStringsSize = mutable.Set[Int]()\n   \
    \     val badStringsSize = mutable.Set[Int]()\n        val goodStringsSize = mutable.Set[Int]()\n\
    \        val badStringsSize = mutable.Set[Int]()\n        val goodStringsSize\
    \ = mutable.Set[Int]()\n        val badStringsSize = mutable.Set[Int]()\n    \
    \    val goodStringsSize = mutable.Set[Int]()\n        val badStringsSize = mutable.Set[Int]()\n\
    \        val goodStringsSize = mutable.Set[Int]()\n        val badStringsSize\
    \ = mutable.Set[Int]()\n        val goodStringsSize = mutable.Set[Int]()\n   \
    \     val badStringsSize = mutable.Set[Int]()\n        val goodStringsSize = mutable.Set[Int]()\n\
    \        val badStringsSize = mutable.Set[Int]()\n        val goodStringsSize\
    \ = mutable.Set[Int]()\n        val badStrings", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        val openCount = mutable.Map[String,\
    \ Int]()\n        val closeCount = mutable.Map[String, Int]()\n        lst.foreach(x\
    \ => {\n            x match {\n                case \")\" =>\n               \
    \     closeCount += x -> 1\n                case \")(\"  =>\n                \
    \    openCount += x -> 1\n                case \")(\"  =>\n                  \
    \  openCount += x -> 1\n                case \")\" =>\n                    closeCount\
    \ += x -> 1\n                case \")\" =>\n                    closeCount +=\
    \ x -> 1\n                case \")\" =>\n                    closeCount += x ->\
    \ 1\n                case \")\" =>\n                    closeCount += x -> 1\n\
    \                case \")\" =>\n                    closeCount += x -> 1\n   \
    \             case \")\" =>\n                    closeCount += x -> 1\n      \
    \          case \")\" =>\n                    closeCount += x -> 1\n         \
    \       case \")\" =>\n                    closeCount += x -> 1\n            \
    \    case \")\" =>\n                    closeCount += x -> 1\n               \
    \ case \")\" =>\n                    closeCount += x -> 1\n                case\
    \ \")\" =>\n                    closeCount += x -> 1\n                case \"\
    )\" =>\n                    closeCount += x -> 1\n                case \")\" =>\n\
    \                    closeCount += x -> 1\n                case \")\" =>\n   \
    \                 closeCount += x -> 1\n                case \")\" =>\n      \
    \              closeCount += x -> 1\n                case \")\" =>\n         \
    \           closeCount += x -> 1\n                case \")\" =>\n            \
    \        closeCount += x -> 1\n                case \")\" =>\n               \
    \     closeCount += x -> 1\n                case \")\" =>\n                  \
    \  closeCount += x -> 1\n                case \")\" =>\n                    closeCount\
    \ += x -> 1\n                case \")\" =>\n                    closeCount +=\
    \ x -> 1\n                case \")\" =>\n                    closeCount += x ->\
    \ 1\n                case \")\" =>\n                    closeCount += x -> 1\n\
    \                case \")\" =>\n                    closeCount += x -> 1\n   \
    \             case \")\" =>\n                    closeCount += x -> 1\n      \
    \          case \")\" =>\n                    closeCount += x -> 1\n         \
    \       case \")\" =>\n                    closeCount += x -> 1\n            \
    \    case \")\" =>\n                    closeCount += x -> 1\n               \
    \ case \")\" =>\n                    closeCount += x -> 1\n                case\
    \ \")\" =>\n                    closeCount += x ", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" => {\n                    close.add(x)\n\
    \                    stack.push(x)\n                }\n                case \"\
    (\" => {\n                    open.add(x)\n                    stack.push(x)\n\
    \                }\n                case _ => {\n                    val openCount\
    \ = open.count(x => x == x)\n                    val closeCount = close.count(x\
    \ => x == x)\n                    val openParens = stack.count(x => x == \")\"\
    )\n                    val closeParens = stack.count(x => x == \")\")\n      \
    \              val openParensCount = stack.count(x => x == \"(\")\n          \
    \          val closeParensCount = stack.count(x => x == \"(\")\n             \
    \       if (openCount == closeCount && openParensCount == closeParensCount) {\n\
    \                        result.add(x)\n                    }\n              \
    \  }\n            }\n        })\n        if (result.size == lst.size) {\n    \
    \        return \"Yes\"\n        }\n        return \"No\"", "        val stack\
    \ = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n   \
    \     val result = mutable.Queue[String]()\n        val stackSize = lst.size\n\
    \        val queueSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val result = mutable.Queue[String]()\n\
    \        val stackSize = lst.size\n        val queueSize = lst.size\n        val\
    \ stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.Queue[String]()\n        val stackSize = lst.size\n\
    \        val queueSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val result = mutable.Queue[String]()\n\
    \        val stackSize = lst.size\n        val queueSize = lst.size\n        val\
    \ stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.Queue[String]()\n        val stackSize = lst.size\n\
    \        val queueSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val result = mutable.Queue[String]()\n\
    \        val stackSize = lst.size\n        val queueSize = lst.size\n        val\
    \ stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.Queue[String]()\n        val stackSize = lst.size\n\
    \        val queueSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val result = mutable.Queue[String]()\n\
    \        val stackSize = lst.size\n        val queueSize = lst.size\n        val\
    \ stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.Queue[String]()\n        val stackSize = lst.size\n\
    \        val queueSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val result = mutable.Queue[String]()\n\
    \        val stackSize = lst.size\n        val queueSize = lst.size\n        val\
    \ stack = mutable.Stack[String]()\n", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        val openCount = mutable.Map[String,\
    \ Int]()\n        val closeCount = mutable.Map[String, Int]()\n        lst.foreach(x\
    \ => {\n            if (openCount.get(x) == null) {\n                openCount.get(x)\
    \ = 1\n                open(x)\n            }\n            if (closeCount.get(x)\
    \ == null) {\n                closeCount.get(x) = 1\n                close(x)\n\
    \            }\n        })\n        while(stack.nonEmpty) {\n            val s\
    \ = stack.pop()\n            if (openCount.get(s) == null) {\n               \
    \ openCount.get(s) = 1\n                open(s)\n            }\n            if\
    \ (closeCount.get(s) == null) {\n                closeCount.get(s) = 1\n     \
    \           close(s)\n            }\n            if (openCount.get(s) == closeCount.get(s))\
    \ {\n                result += s\n            }\n        }\n        if (result.nonEmpty)\
    \ {\n            return \"Yes\"\n        }\n        return \"No\"", "        val\
    \ stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.ListBuffer[String]()\n        val close = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    close.push(x)\n                }\n               \
    \ case \")(\"  => {\n                    stack.push(x)\n                }\n  \
    \              case \")(\" => {\n                    val open = stack.pop()\n\
    \                    val close = stack.pop()\n                    val open1 =\
    \ open.reverse\n                    val close1 = close.reverse\n             \
    \       val open2 = open1.reverse\n                    val close2 = close1.reverse\n\
    \                    val open3 = open2.reverse\n                    val close3\
    \ = close2.reverse\n                    val open4 = open3.reverse\n          \
    \          val close4 = close3.reverse\n                    val open5 = open4.reverse\n\
    \                    val close5 = close4.reverse\n                    val open6\
    \ = open5.reverse\n                    val close6 = close5.reverse\n         \
    \           val open7 = open6.reverse\n                    val close7 = close6.reverse\n\
    \                    val open8 = open7.reverse\n                    val close8\
    \ = close7.reverse\n                    val open9 = open8.reverse\n          \
    \          val close9 = close8.reverse\n                    val open10 = open9.reverse\n\
    \                    val close10 = close9.reverse\n                    val open11\
    \ = open10.reverse\n                    val close11 = close10.reverse\n      \
    \              val open12 = open11.reverse\n                    val close12 =\
    \ close11.reverse\n                    val open13 = open12.reverse\n         \
    \           val close13 = close12.reverse\n                    val open14 = open13.reverse\n\
    \                    val close14 = close13.reverse\n                    val open15\
    \ = open14.reverse\n                    val close15 = close14.reverse\n      \
    \              val open16 = open15.reverse\n                    val close16 =\
    \ close15.reverse\n                    val open17 = open16.reverse\n         \
    \           val close17 = close16.reverse\n                    val open18 = open17.reverse\n\
    \                    val close18 = close17.reverse\n                    val open19\
    \ = open18.reverse\n                    val close19 = close18.reverse\n      \
    \              val open20 = open19.reverse\n                    val close20 =\
    \ close19.reverse\n                    val open21 = open20.reverse\n         \
    \           val close21 = close20.reverse\n                    val open22 = open21.reverse\n\
    \                    val close22 = close21.reverse\n                    val open23\
    \ = open22.reverse\n                    val close23 = close22.reverse\n      \
    \              val open24 = open23.reverse\n                    val close24 =\
    \ close23.", "        val stack = mutable.Stack[String]()\n        val stack2\
    \ = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n  \
    \      val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        val open = mutable.ListBuffer.empty[String]\n        val close = mutable.ListBuffer.empty[String]\n\
    \        val openCount = mutable.ListBuffer.empty[Int]\n        val closeCount\
    \ = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n            x match\
    \ {\n                case \")\" =>\n                    closeCount += closeCount.length\n\
    \                    close.push(x)\n                case \")(\"  =>\n        \
    \            openCount += openCount.length\n                    open.push(x)\n\
    \                case \")()\" =>\n                    closeCount += closeCount.length\n\
    \                    close.push(x)\n                case \")()()\" =>\n      \
    \              openCount += openCount.length\n                    open.push(x)\n\
    \                case \")()()()\" =>\n                    openCount += openCount.length\n\
    \                    open.push(x)\n                case \")()()()()\" =>\n   \
    \                 openCount += openCount.length\n                    open.push(x)\n\
    \                case \")()()()()()\" =>\n                    openCount += openCount.length\n\
    \                    open.push(x)\n                case \")()()()()()()\" =>\n\
    \                    openCount += openCount.length\n                    open.push(x)\n\
    \                case \")()()()()()()()\" =>\n                    openCount +=\
    \ openCount.length\n                    open.push(x)\n                case \"\
    )()()()()()()()()\" =>\n                    openCount += openCount.length\n  \
    \                  open.push(x)\n                case \")()()()()()()()()()\"\
    \ =>\n                    openCount += openCount.length\n                    open.push(x)\n\
    \                case \")()()()()()()()()()\" =>\n                    openCount\
    \ += openCount.length\n                    open.push(x)\n                case\
    \ \")()()()()()()()()()()\" =>\n                    openCount += openCount.length\n\
    \                    open.push(x)\n                case \")()()()()()()()()()()\"\
    \ =>\n                    openCount += openCount.length\n                    open.push(x)\n\
    \                case \")()()()()()()()()()()()\" =>\n                    openCount\
    \ += openCount.length\n                    open.push(x)\n                case\
    \ \")()()()()()()()()()()()\" =>\n                    openCount += openCount.length\n\
    \                    open.push(x)\n                case \")()()()()()()()()()()()\"\
    \ =>\n                    openCount += open", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        val openCount = mutable.Map[String,\
    \ Int]()\n        val closeCount = mutable.Map[String, Int]()\n        lst.foreach(x\
    \ => {\n            if (openCount.get(x) == null) {\n                openCount.get(x)\
    \ = 1\n                open(x) += 1\n            } else {\n                openCount.get(x)\
    \ += 1\n            }\n            if (closeCount.get(x) == null) {\n        \
    \        closeCount.get(x) = 1\n                close(x) += 1\n            } else\
    \ {\n                closeCount.get(x) += 1\n            }\n        })\n     \
    \   val openCount = openCount.toSeq.sortBy(_._2).reverse\n        val closeCount\
    \ = closeCount.toSeq.sortBy(_._2).reverse\n        val openCount = openCount.toSeq.sortBy(_._1).reverse\n\
    \        val closeCount = closeCount.toSeq.sortBy(_._1).reverse\n        val open\
    \ = open.toSeq.sortBy(_._1).reverse\n        val close = close.toSeq.sortBy(_._1).reverse\n\
    \        val openCount = openCount.toSeq.sortBy(_._2).reverse\n        val closeCount\
    \ = closeCount.toSeq.sortBy(_._2).reverse\n        val openCount = openCount.toSeq.sortBy(_._1).reverse\n\
    \        val closeCount = closeCount.toSeq.sortBy(_._1).reverse\n        val open\
    \ = open.toSeq.sortBy(_._1).reverse\n        val close = close.toSeq.sortBy(_._1).reverse\n\
    \        val openCount = openCount.toSeq.sortBy(_._2).reverse\n        val closeCount\
    \ = closeCount.toSeq.sortBy(_._2).reverse\n        val openCount = openCount.toSeq.sortBy(_._1).reverse\n\
    \        val closeCount = closeCount.toSeq.sortBy(_._1).reverse\n        val open\
    \ = open.toSeq.sortBy(_._1).reverse\n        val close = close.toSeq.sortBy(_._1).reverse\n\
    \        val openCount = openCount.toSeq.sortBy(_._2).reverse\n        val closeCount\
    \ = closeCount.toSeq.sortBy(_._2).reverse\n        val openCount = openCount.toSeq.sortBy(_._1).reverse\n\
    \        val closeCount = closeCount.toSeq.sortBy(_._1).reverse\n        val open\
    \ = open.toSeq", "        val stack = mutable.Stack[String]()\n        val stack2\
    \ = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n  \
    \      val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.Stack[String]()\n        val stackSize = lst.size\n       \
    \ val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n   \
    \     val result = mutable.Stack[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Stack[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Stack[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Stack[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Stack[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Stack[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Stack[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Stack[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Stack[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Stack[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Stack[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Stack[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mut", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.ListBuffer[String]()\n        val close = mutable.ListBuffer[String]()\n\
    \        val openCount = mutable.ListBuffer[Int]()\n        val closeCount = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") {\n                open\
    \ += x\n                openCount += 1 \n            } else if (x == \")\") {\n\
    \                close += x\n                closeCount += 1\n            }\n\
    \        })\n        val openCount = openCount.sum\n        val closeCount = closeCount.sum\n\
    \        if (openCount == closeCount) {\n            val open = open.mkString\n\
    \            val close = close.mkString\n            val stack = stack.mkString\n\
    \            val result = result.mkString\n            if (open == close && stack\
    \ == result) {\n                return \"Yes\"\n            }\n        }\n   \
    \     return \"No\"", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" => close.push(x)\n             \
    \   case \")(\"  => stack.push(x)\n                case \")(\"  => stack.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")", "   \
    \     val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        lst.foreach(x => if (x == \"(\") stack += x else if (!x == \"(\") queue\
    \ += x else if (!x == \")\") bad += x else if (!x == \")\") good += x)\n     \
    \   if (good.size == lst.size && bad.size == lst.size) \"Yes\" else \"No\"", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result += \"No\"\n\
    \            } else {\n                result += \"Yes\"\n                stack.push(str)\n\
    \                while(open < close && stack.nonEmpty) {\n                   \
    \ val str = stack.pop()\n                    val open = str.indexOf(\"(\")\n \
    \                   val close = str.indexOf(\")\")\n                    if(open\
    \ < 0 || close < 0) {\n                        result += \"No\"\n            \
    \        } else {\n                        result += \"Yes\"\n               \
    \         stack.push(str)\n                    }\n                }\n        \
    \    }\n        }\n        result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => close.add(x)\n                case \")(\"  => open.add(x)\n             \
    \   case \")()\" => open.add(x)\n                case \")()()\" => close.add(x)\n\
    \                case \")()\" => open.add(x)\n                case \")\" => close.add(x)\n\
    \                case _ => stack += x\n            }\n        })\n        val\
    \ openCount = open.size\n        val closeCount = close.size\n        val openStack\
    \ = stack.take(openCount)\n        val closeStack = stack.drop(closeCount)\n \
    \       val openStackCount = openStack.size\n        val closeStackCount = closeStack.size\n\
    \        val openStack = openStack.take(openStackCount)\n        val closeStack\
    \ = closeStack.drop(closeStackCount)\n        val openStackCount = openStack.size\n\
    \        val closeStackCount = closeStack.size\n        val openStack = openStack.take(openStackCount)\n\
    \        val closeStack = closeStack.drop(closeStackCount)\n        val openStackCount\
    \ = openStack.size\n        val closeStackCount = closeStack.size\n        val\
    \ openStack = openStack.take(openStackCount)\n        val closeStack = closeStack.drop(closeStackCount)\n\
    \        val openStackCount = openStack.size\n        val closeStackCount = closeStack.size\n\
    \        val openStack = openStack.take(openStackCount)\n        val closeStack\
    \ = closeStack.drop(closeStackCount)\n        val openStackCount = openStack.size\n\
    \        val closeStackCount = closeStack.size\n        val openStack = openStack.take(openStackCount)\n\
    \        val closeStack = closeStack.drop(closeStackCount)\n        val openStackCount\
    \ = openStack.size\n        val closeStackCount = closeStack.size\n        val\
    \ openStack = openStack.take(openStackCount)\n        val closeStack = closeStack.drop(closeStackCount)\n\
    \        val openStackCount = openStack.size\n        val closeStackCount = closeStack.size\n\
    \        val openStack = openStack.take(openStackCount)\n        val closeStack\
    \ = closeStack.drop(closeStackCount)\n        val openStackCount = openStack.size\n\
    \        val closeStackCount = ", "        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val good = mutable.Set[String]()\n\
    \        val bad = mutable.Set[String]()\n        lst.foreach(x => {\n       \
    \     if (x == \"(\") {\n                stack += x\n            } else if (x\
    \ == \")\") {\n                while (!stack.isEmpty && stack.head != \"(\") {\n\
    \                    good += stack.head\n                    stack.pop\n     \
    \           }\n                bad += x\n            } else {\n              \
    \  queue += x\n            }\n        })\n        if (good.size == lst.size) {\n\
    \            return \"Yes\"\n        } else {\n            return \"No\"\n   \
    \     }", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stackMax = stackSize - 1\n    \
    \    val stackMaxIndex = stackSize - 1\n        val stackMin = 0\n        val\
    \ stackMinIndex = stackSize - 1\n        val stackMinSize = stackSize - 1\n  \
    \      val stackMaxSize = stackSize - 1\n        val stackMinSizeIndex = stackSize\
    \ - 1\n        val stackMaxSizeIndex = stackSize - 1\n        val stackMinIndex\
    \ = stackSize - 1\n        val stackMaxIndex = stackSize - 1\n        val stackMinSize\
    \ = stackSize - 1\n        val stackMaxSize = stackSize - 1\n        val stackMinSizeIndex\
    \ = stackSize - 1\n        val stackMaxSizeIndex = stackSize - 1\n        val\
    \ stackMinIndex = stackSize - 1\n        val stackMaxIndex = stackSize - 1\n \
    \       val stackMinSize = stackSize - 1\n        val stackMaxSize = stackSize\
    \ - 1\n        val stackMinSizeIndex = stackSize - 1\n        val stackMaxSizeIndex\
    \ = stackSize - 1\n        val stackMinIndex = stackSize - 1\n        val stackMaxIndex\
    \ = stackSize - 1\n        val stackMinSize = stackSize - 1\n        val stackMaxSize\
    \ = stackSize - 1\n        val stackMinSizeIndex = stackSize - 1\n        val\
    \ stackMaxSizeIndex = stackSize - 1\n        val stackMinIndex = stackSize - 1\n\
    \        val stackMaxIndex = stackSize - 1\n        val stackMinSize = stackSize\
    \ - 1\n        val stackMaxSize = stackSize - 1\n        val stackMinSizeIndex\
    \ = stackSize - 1\n        val stackMaxSizeIndex = stackSize - 1\n        val\
    \ stackMinIndex = stackSize - 1\n        val stackMaxIndex = stackSize - 1\n \
    \       val stackMinSize = stackSize - 1\n        val stackMaxSize = stackSize\
    \ - 1\n        val stackMinSizeIndex = stackSize - 1\n        val stackMaxSizeIndex\
    \ = stackSize - 1\n        val stackMinIndex = stackSize - 1\n        val stackMaxIndex\
    \ = stackSize - 1\n        val stackMinSize = stackSize - 1\n        val stackMaxSize\
    \ = stackSize - 1\n        val stackMinSizeIndex = stackSize - 1\n        val\
    \ stackMaxSizeIndex = stackSize - 1\n        val stackMinIndex = stackSize - 1\n\
    \        val stackMaxIndex = stackSize - 1\n        val stackMinSize = stackSize\
    \ - 1\n        val stackMaxSize = stackSize - 1\n        val stackMinSizeIndex\
    \ = stackSize - 1\n        val stackMaxSizeIndex = stackSize - 1\n        val\
    \ stackMinIndex = stackSize - 1\n        val stackMaxIndex = stackSize - 1", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            if (x != \"(\") close.add(x)\n      \
    \      if (x == \"(\") open.add(x)\n            if (x == \")\") stack.add(x)\n\
    \            if (stack.size == 0) result.add(x)\n        })\n        if (close.size\
    \ == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n \
    \       val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        val goodCount = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String,\
    \ Int]()\n        val goodCount = mutable.Map[String, Int]()\n        val badCount\
    \ = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String, Int]()\n\
    \        val badCount = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String,\
    \ Int]()\n        val badCount = mutable.Map[String, Int]()\n        val goodCount\
    \ = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String, Int]()\n\
    \        val goodCount = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String,\
    \ Int]()\n        val goodCount = mutable.Map[String, Int]()\n        val badCount\
    \ = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String, Int]()\n\
    \        val badCount = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String,\
    \ Int]()\n        val badCount = mutable.Map[String, Int]()\n        val goodCount\
    \ = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String, Int]()\n\
    \        val goodCount = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String,\
    \ Int]()\n        val goodCount = mutable.Map[String, Int]()\n        val badCount\
    \ = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String, Int]()\n\
    \        val badCount = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String,\
    \ Int]()\n        val badCount = mutable.Map[String, Int]()\n        val goodCount\
    \ = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String, Int]()\n\
    \        val goodCount = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String,\
    \ Int]()\n        val goodCount = mutable.Map[String, Int]()\n        val badCount\
    \ = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String, Int]()\n\
    \        val badCount = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String,\
    \ Int]()\n        val badCount = mutable.Map[String, Int]()\n        val goodCount\
    \ = mutable.Map[String, Int", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stackMax = stackSize - 1\n        lst.foreach(x => {\n          \
    \  if (x == \"(\") {\n                stack.push(x)\n            } else if (x\
    \ == \")\") {\n                val top = stack.pop()\n                if (top\
    \ == \"(\") {\n                    result.append(\"Yes\")\n                } else\
    \ {\n                    result.append(\"No\")\n                }\n          \
    \  }\n        })\n        if (result.size == stackMax) {\n            result.append(\"\
    Yes\")\n        } else {\n            result.append(\"No\")\n        }", "   \
    \     val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => close.add(x)\n                case \")(\"  => open.add(x)\n             \
    \   case \")()\" => open.add(x)\n                case \")()()\" => open.add(x)\n\
    \                case \")()()()\" => open.add(x)\n                case \")()()()()\"\
    \ => open.add(x)\n                case \")()()()()()\" => open.add(x)\n      \
    \          case \")()()()()()()\" => open.add(x)\n                case \")()()()()()()()\"\
    \ => open.add(x)\n                case \")()()()()()()()()\" => open.add(x)\n\
    \                case \")()()()()()()()()()\" => open.add(x)\n               \
    \ case \")()()()()()()()()()()\" => open.add(x)\n                case \")()()()()()()()()()()\"\
    \ => open.add(x)\n                case \")()()()()()()()()()()\" => open.add(x)\n\
    \                case \")()()()()()()()()()()()\" => open.add(x)\n           \
    \     case \")()()()()()()()()()()()()\" => open.add(x)\n                case\
    \ \")()()()()()()()()()()()()()\" => open.add(x)\n                case \")()()()()()()()()()()()()()\"\
    \ => open.add(x)\n                case \")()()()()()()()()()()()()()\" => open.add(x)\n\
    \                case \")()()()()()()()()()()()()()\" => open.add(x)\n       \
    \         case \")()()()()()()()()()()()()()()\" => open.add(x)\n            \
    \    case \")()()()()()()()()()()()()()()\" => open.add(x)\n                case\
    \ \")()()()()()()()()()()()()()()\" => open.add(x)\n                case \")()()()()()()()()()()()()()()()\"\
    \ => open.add(x)\n                case \")()()()()()()()()()()()()()()()\" =>\
    \ open.add(x)\n                case \")()()()()()()()()()()()()()()()\" => open.add(x)\n\
    \                case \")()()()()", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stackMax = stackSize - 1\n    \
    \    lst.foreach { x =>\n            if (x.equals(\"(\")) {\n                stack.push(x)\n\
    \            } else if (x.equals(\")\")) {\n                val top = stack.pop()\n\
    \                if (top.equals(\"(\")) {\n                    stack.push(top)\n\
    \                } else {\n                    result.add(\"No\")\n          \
    \      }\n            }\n        }\n        if (stack.size == stackMax) {\n  \
    \          result.add(\"Yes\")\n        } else {\n            result.add(\"No\"\
    )\n        }\n        result.toString", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        lst.foreach {\
    \ s =>\n            s match {\n                case \")\" =>\n               \
    \     stack.pop()\n                case \")(\"  =>\n                    stack\
    \ += s\n                case \")()\" =>\n                    stack += s\n    \
    \            case \")()()\" =>\n                    stack += s\n             \
    \   case _ =>\n                    result += (s +: stack.mkString(\"(\", \")\"\
    ))\n            }\n        }\n        if (stack.size == 0)\n            \"No\"\
    \n        else\n            \"Yes\"", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.ListBuffer[String]()\n        val bad = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x == \"(\") stack += x else if (!x == \"(\") queue\
    \ += x else if (!x == \")\") bad += x)\n        val len = stack.length\n     \
    \   val goodLen = good.length\n        val badLen = bad.length\n        if (len\
    \ == 0 || goodLen == 0 || badLen == 0) \"No\"\n        else if (len == goodLen\
    \ && goodLen == badLen) \"Yes\"\n        else if (len == goodLen || len == badLen)\
    \ \"Yes\"\n        else matchParens(stack.take(len), queue.take(len), good.take(len),\
    \ bad.take(len))", "        val stack = mutable.Stack[String]()\n        val queue\
    \ = mutable.Queue[String]()\n        val good = mutable.Set[String]()\n      \
    \  val bad = mutable.Set[String]()\n        val goodStr = mutable.Set[String]()\n\
    \        val badStr = mutable.Set[String]()\n        val goodParen = mutable.Set[String]()\n\
    \        val badParen = mutable.Set[String]()\n        val goodParenCount = mutable.Set[String]()\n\
    \        val badParenCount = mutable.Set[String]()\n        val goodParenCount\
    \ = mutable.Set[String]()\n        val badParenCount = mutable.Set[String]()\n\
    \        val goodParenCount = mutable.Set[String]()\n        val badParenCount\
    \ = mutable.Set[String]()\n        val goodParenCount = mutable.Set[String]()\n\
    \        val badParenCount = mutable.Set[String]()\n        val goodParenCount\
    \ = mutable.Set[String]()\n        val badParenCount = mutable.Set[String]()\n\
    \        val goodParenCount = mutable.Set[String]()\n        val badParenCount\
    \ = mutable.Set[String]()\n        val goodParenCount = mutable.Set[String]()\n\
    \        val badParenCount = mutable.Set[String]()\n        val goodParenCount\
    \ = mutable.Set[String]()\n        val badParenCount = mutable.Set[String]()\n\
    \        val goodParenCount = mutable.Set[String]()\n        val badParenCount\
    \ = mutable.Set[String]()\n        val goodParenCount = mutable.Set[String]()\n\
    \        val badParenCount = mutable.Set[String]()\n        val goodParenCount\
    \ = mutable.Set[String]()\n        val badParenCount = mutable.Set[String]()\n\
    \        val goodParenCount = mutable.Set[String]()\n        val badParenCount\
    \ = mutable.Set[String]()\n        val goodParenCount = mutable.Set[String]()\n\
    \        val badParenCount = mutable.Set[String]()\n        val goodParenCount\
    \ = mutable.Set[String]()\n        val badParenCount = mutable.Set[String]()\n\
    \        val goodParenCount = mutable.Set[String]()\n        val badParenCount\
    \ = mutable.Set[String]()\n        val goodParenCount = mutable.Set[String]()\n\
    \        val badParenCount = mutable.Set[String]()", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.ListBuffer[String]()\n        val close = mutable.ListBuffer[String]()\n\
    \        val openCount = mutable.ListBuffer[Int]()\n        val closeCount = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    closeCount += closeCount.length\n                \
    \    closeCount -= 1\n                    close.toStack foreach { x => stack +=\
    \ x }\n                    stack.toStack foreach { x => result += x }\n      \
    \          }\n                case \")(\" => {\n                    openCount\
    \ += openCount.length\n                    openCount -= 1\n                  \
    \  open.toStack foreach { x => stack += x }\n                    stack.toStack\
    \ foreach { x => result += x }\n                }\n                case \")(\"\
    \ => {\n                    openCount += openCount.length\n                  \
    \  openCount -= 1\n                    open.toStack foreach { x => stack += x\
    \ }\n                    stack.toStack foreach { x => result += x }\n        \
    \        }\n                case \")(\" => {\n                    openCount +=\
    \ openCount.length\n                    openCount -= 1\n                    open.toStack\
    \ foreach { x => stack += x }\n                    stack.toStack foreach { x =>\
    \ result += x }\n                }\n                case \")(\" => {\n       \
    \             openCount += openCount.length\n                    openCount -=\
    \ 1\n                    open.toStack foreach { x => stack += x }\n          \
    \          stack.toStack foreach { x => result += x }\n                }\n   \
    \             case \")(\" => {\n                    openCount += openCount.length\n\
    \                    openCount -= 1\n                    open.toStack foreach\
    \ { x => stack += x }\n                    stack.toStack foreach { x => result\
    \ += x }\n                }\n                case \")(\" => {\n              \
    \      openCount += openCount.length\n                    openCount -= 1\n   \
    \                 open.toStack foreach { x => stack += x }\n                 \
    \   stack.toStack foreach { x => result += x }\n                }\n          \
    \      case \")(\" => {\n                    openCount += openCount.length\n \
    \                   openCount -= 1\n                    open.toStack foreach {\
    \ x => stack += x }\n                    stack.toStack foreach { x => result +=\
    \ x }\n                }\n                case \")(\" => {\n                 \
    \   openCount += openCount.length\n                    open", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => close.add(x)\n                case \")(\"  => open.add(x)\n             \
    \   case \")(\"  => stack += x\n                case \")\" => stack += x\n   \
    \             case \")\" => close.add(x)\n                case _ => stack += x\n\
    \            }\n        })\n        val openCount = open.size\n        val closeCount\
    \ = close.size\n        if (openCount == closeCount) {\n            val openList\
    \ = open.iterator\n            val closeList = close.iterator\n            while\
    \ (openList.hasNext && closeList.hasNext) {\n                val open = openList.next()\n\
    \                val close = closeList.next()\n                if (open == close)\
    \ {\n                    result += \"Yes\"\n                } else {\n       \
    \             result += \"No\"\n                }\n            }\n        }\n\
    \        result.toString()", "        val stack = mutable.Stack[String]()\n  \
    \      val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stackMax = stackSize - 1\n    \
    \    val stackMaxIndex = stackSize - 1\n        val stackMin = 0\n        val\
    \ stackMinIndex = stackSize - 1\n        val stackMaxStack = mutable.Stack[String]()\n\
    \        val stackMinStack = mutable.Stack[String]()\n        val stackMaxStackSize\
    \ = stackMaxStack.size\n        val stackMinStackSize = stackMinStack.size\n \
    \       val stackMaxStackIndex = stackMaxStackSize - 1\n        val stackMinStackIndex\
    \ = stackMinStackSize - 1\n        val stackMaxStackMinStack = mutable.Stack[String]()\n\
    \        val stackMinStackMaxStack = mutable.Stack[String]()\n        val stackMaxStackMinStackSize\
    \ = stackMaxStackMinStack.size\n        val stackMinStackMaxStackSize = stackMinStackMaxStack.size\n\
    \        val stackMaxStackMinStackIndex = stackMaxStackMinStackSize - 1\n    \
    \    val stackMinStackMaxStackIndex = stackMinStackMaxStackSize - 1\n        val\
    \ stackMaxStackMinStackIndex2 = stackMaxStackMinStackIndex - 1\n        val stackMinStackMaxStackIndex2\
    \ = stackMinStackMaxStackIndex - 1\n        val stackMaxStackMinStackIndex3 =\
    \ stackMaxStackMinStackIndex2 - 1\n        val stackMinStackMaxStackIndex3 = stackMinStackMaxStackIndex2\
    \ - 1\n        val stackMaxStackMinStackIndex4 = stackMaxStackMinStackIndex3 -\
    \ 1\n        val stackMinStackMaxStackIndex4 = stackMinStackMaxStackIndex3 - 1\n\
    \        val stackMaxStackMinStackIndex5 = stackMaxStackMinStackIndex4 - 1\n \
    \       val stackMinStackMaxStackIndex5 = stackMinStackMaxStackIndex4 - 1\n  \
    \      val stackMaxStackMinStackIndex6 = stackMaxStackMinStackIndex5 - 1\n   \
    \     val stackMinStackMaxStackIndex6 = stackMinStackMaxStackIndex5 - 1\n    \
    \    val stackMaxStackMinStackIndex7 = stackMaxStackMinStackIndex6 - 1\n     \
    \   val stackMinStackMaxStackIndex7 = stackMinStackMaxStackIndex6 - 1\n      \
    \  val stackMaxStackMinStackIndex8 = stackMaxStackMinStackIndex7 - 1\n       \
    \ val stackMinStackMaxStackIndex8 = stackMinStackMaxStackIndex7 - 1\n        val\
    \ stackMaxStackMinStackIndex9 = stackMaxStackMinStackIndex8 - 1\n        val stackMinStackMaxStackIndex9\
    \ = stackMin", "        val stack = mutable.Stack[String]()\n        val queue\
    \ = mutable.Queue[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            if(i == lst.size - 1) {\n \
    \               result += \"Yes\"\n                return result.toString\n  \
    \          }\n            if(i == 0) {\n                result += \"No\"\n   \
    \             return result.toString\n            }\n            if((lst(i).charAt(0)\
    \ == '(') && (lst(i).charAt(lst(i).length - 1) == ')')) {\n                stack\
    \ += lst(i)\n                queue += lst(i + 1)\n            }\n            if((lst(i).charAt(0)\
    \ == ')') && (lst(i).charAt(lst(i).length - 1) == '(')) {\n                stack\
    \ -= lst(i)\n                queue -= lst(i + 1)\n            }\n        }", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.HashSet[String]()\n        val close = mutable.HashSet[String]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") open += x\n         \
    \   if (x == \")\") close += x\n            if (open.contains(x)) stack += x\n\
    \            if (close.contains(x)) stack -= x\n        })\n        if (stack.size\
    \ == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       if (x == \"(\") {\n                open += x\n                stack.push(x)\n\
    \            } else if (x == \")\") {\n                close += x\n          \
    \      stack.pop()\n            }\n        })\n        if (open.size == 0 && close.size\
    \ == 0) {\n            result.append(\"Yes\")\n        } else {\n            result.append(\"\
    No\")\n        }\n        return result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        for(i <- 0 until stackSize) {\n            val str = lst(i)\n       \
    \     val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result.append(\"No\"\
    )\n            } else {\n                val openCount = stackSize - stack.size\n\
    \                val closeCount = openCount - close\n                if(openCount\
    \ > closeCount) {\n                    stack += str\n                } else {\n\
    \                    stack -= str\n                }\n                result.append(\"\
    Yes\")\n            }\n        }\n        result.toString()", "        val stack\
    \ = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n  \
    \      val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n  \
    \      val stackMax = stackSize - 1\n        val stackMaxIndex = stackSize - 1\n\
    \        val stackMaxValue = lst(stackMaxIndex)\n        val stackMinValue = lst(0)\n\
    \        val stackMinIndex = stackSize - 1\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinIndexValue = lst(stackMinIndex - 1)\n        val stackMaxIndexValue\
    \ = lst(stackMaxIndex - 1)\n        val stackMinIndexValueValue = lst(stackMinIndex\
    \ - 1)\n        val stackMaxIndexValueValue = lst(stackMaxIndex - 1)\n       \
    \ val stackMinIndexValueValueValue = lst(stackMinIndex - 1)\n        val stackMaxIndexValueValueValue\
    \ = lst(stackMaxIndex - 1)\n        val stackMinIndexValueValueValueValue = lst(stackMinIndex\
    \ - 1)\n        val stackMaxIndexValueValueValueValue = lst(stackMaxIndex - 1)\n\
    \        val stackMinIndexValueValueValueValueValue = lst(stackMinIndex - 1)\n\
    \        val stackMaxIndexValueValueValueValueValue = lst(stackMaxIndex - 1)\n\
    \        val stackMinIndexValueValueValueValueValueValue = lst(stackMinIndex -\
    \ 1)\n        val stackMaxIndexValueValueValueValueValueValue = lst(stackMaxIndex\
    \ - 1)\n        val stackMinIndexValueValueValueValueValueValueValue = lst(stackMinIndex\
    \ - 1)\n        val stackMaxIndexValueValueValueValueValueValueValue = lst(stackMaxIndex\
    \ - 1)\n        val stackMinIndexValueValueValueValueValueValueValueValue = lst(stackMinIndex\
    \ - 1)\n        val stackMaxIndexValueValueValueValueValueValueValueValue = lst(stackMaxIndex\
    \ - 1)\n        val stackMinIndexValueValueValueValueValueValueValueValueValue\
    \ = lst(stackMinIndex - 1)\n        val stackMaxIndexValueValueValueValueValueValueValueValueValue\
    \ = lst(stackMaxIndex - 1)\n        val stackMinIndexValueValueValueValueValueValueValueValueValueValue\
    \ = lst(stackMinIndex - 1)\n        val stackMaxIndexValueValueValueValueValueValueValueValueValueValue\
    \ = lst(stackMaxIndex - 1)\n        val stackMinIndexValueValueValueValueValueValueValueValueValueValueValue\
    \ = lst(stackMinIndex - 1)\n        val stackMaxIndexValueValueValueValueValueValueValueValueValueValueValue\
    \ = lst(stackMaxIndex - 1)\n        val stackMinIndexValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = lst(stackMinIndex - 1)\n        val stack", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stackMax = stackSize - 1\n        val stackMaxIndex = stackSize -\
    \ 1\n        val stackIndex = 0\n        val stackMaxValue = lst(stackMaxIndex)\n\
    \        val stackValue = lst(stackIndex)\n        val stackMaxValueIndex = stackSize\
    \ - 1\n        val stackMaxValueIndex2 = stackSize - 1\n        val stackValueIndex\
    \ = 0\n        val stackValueIndex2 = stackSize - 1\n        val stackValueIndex3\
    \ = stackSize - 1\n        val stackValueIndex4 = stackSize - 1\n        val stackValueIndex5\
    \ = stackSize - 1\n        val stackValueIndex6 = stackSize - 1\n        val stackValueIndex7\
    \ = stackSize - 1\n        val stackValueIndex8 = stackSize - 1\n        val stackValueIndex9\
    \ = stackSize - 1\n        val stackValueIndex10 = stackSize - 1\n        val\
    \ stackValueIndex11 = stackSize - 1\n        val stackValueIndex12 = stackSize\
    \ - 1\n        val stackValueIndex13 = stackSize - 1\n        val stackValueIndex14\
    \ = stackSize - 1\n        val stackValueIndex15 = stackSize - 1\n        val\
    \ stackValueIndex16 = stackSize - 1\n        val stackValueIndex17 = stackSize\
    \ - 1\n        val stackValueIndex18 = stackSize - 1\n        val stackValueIndex19\
    \ = stackSize - 1\n        val stackValueIndex20 = stackSize - 1\n        val\
    \ stackValueIndex21 = stackSize - 1\n        val stackValueIndex22 = stackSize\
    \ - 1\n        val stackValueIndex23 = stackSize - 1\n        val stackValueIndex24\
    \ = stackSize - 1\n        val stackValueIndex25 = stackSize - 1\n        val\
    \ stackValueIndex26 = stackSize - 1\n        val stackValueIndex27 = stackSize\
    \ - 1\n        val stackValueIndex28 = stackSize - 1\n        val stackValueIndex29\
    \ = stackSize - 1\n        val stackValueIndex30 = stackSize - 1\n        val\
    \ stackValueIndex31 = stackSize - 1\n        val stackValueIndex32 = stackSize\
    \ - 1\n        val stackValueIndex33 = stackSize - 1\n        val stackValueIndex34\
    \ = stackSize - 1\n        val stackValueIndex35 = stackSize - 1\n        val\
    \ stackValueIndex36 = stackSize - 1\n        val stackValueIndex37 = stackSize\
    \ - 1\n        val stackValueIndex38 = stackSize - 1\n        val stackValueIndex39\
    \ = stackSize - 1\n        ", "        val stack = mutable.Stack[String]()\n \
    \       val queue = mutable.Queue[String]()\n        val result = mutable.Queue[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => if (x contains \"(\") open += x)\n        lst.foreach(x\
    \ => if (x contains \")\") close += x)\n        open foreach { x => stack push\
    \ x }\n        close foreach { x => queue push x }\n        while(stack.nonEmpty\
    \ || queue.nonEmpty) {\n            val x = stack.pop\n            val y = queue.pop\n\
    \            if (x contains \"(\") stack push y\n            if (x contains \"\
    )\") queue push y\n            if (x contains \"(\") open += y\n            if\
    \ (x contains \")\") close += y\n        }\n        if (open contains \"()\" &&\
    \ close contains \"()\") \"Yes\"\n        else if (!open contains \"()\" && close\
    \ contains \"()\") \"No\"\n        else matchParens(lst)", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stackMax = stackSize - 1\n    \
    \    lst.foreach(x => {\n            x match {\n                case \")\" =>\
    \ {\n                    stackSize -= 1\n                    stack.toList.reverse.foreach(y\
    \ => {\n                        y match {\n                            case \"\
    )\" => {\n                                stackSize -= 1\n                   \
    \             stack.toList.reverse.foreach(z => {\n                          \
    \          z match {\n                                        case \")\" => {\n\
    \                                            stackSize -= 1\n                \
    \                            stack.toList.reverse.foreach(w => {\n           \
    \                                     w match {\n                            \
    \                        case \")\" => {\n                                   \
    \                     stackSize -= 1\n                                       \
    \                 stack.toList.reverse.foreach(x => {\n                      \
    \                                      x match {\n                           \
    \                                     case \")\" => {\n                      \
    \                                              stackSize -= 1\n              \
    \                                                      stack.toList.reverse.foreach(y\
    \ => {\n                                                                     \
    \   y match {\n                                                              \
    \              case \")\" => {\n                                             \
    \                                   stackSize -= 1\n                         \
    \                                                       stack.toList.reverse.foreach(z\
    \ => {\n                                                                     \
    \               z match {\n                                                  \
    \                                      case \")\" => {\n                     \
    \                                                                       stackSize\
    \ -= 1\n                                                                     \
    \                       stack.toList.reverse.foreach(w => {\n                \
    \                                                                            \
    \    w match {\n                                                             \
    \                                       case \")\" => {\n                    \
    \                                                                            \
    \        stackSize -= 1\n                                                    \
    \                                                    stack.toList.reverse.foreach(x\
    \ => {\n                                                                     \
    \                                       x match {\n                          \
    \                                                                            \
    \          case \")\" => {\n                                                 \
    \                                                                   stackSize\
    \ -= 1\n                                                                     \
    \                                               stack.toList.reverse.foreach(y\
    \ => {\n                                                                     \
    \                                                   y match {\n              \
    \                                                                            \
    \                                  case \")\" => {\n                         \
    \                                                                            \
    \                           stackSize -= 1\n                                 \
    \                                                                            \
    \                   stack.toList.reverse.foreach(z => {\n                    \
    \                                                                            \
    \                                    z match {\n                             \
    \                                                                            \
    \                               case \")\" => {\n                            \
    \                                                                            \
    \                                    stackSize -= 1\n                        \
    \                                                                            \
    \                                        stack.toList.reverse.foreach(w => {\n\
    \                                                                            \
    \                                                                    w match {\n\
    \                                                                            \
    \                                                                    case \")\"\
    \ => {\n                                                                     \
    \                                                                            \
    \   stackSize -= 1\n                                                         \
    \                                                                            \
    \               stack.toList.reverse.foreach(x => {\n                        \
    \                                                                            \
    \                                                    x match {\n             \
    \                                                                            \
    \                                                                   case \")\"\
    \ => {\n                                                                     \
    \                                                                            \
    \               stackSize -= 1\n                                             \
    \                                                                            \
    \                                       stack.toList.reverse.foreach(y => {\n\
    \                                                                            \
    \                                                                            \
    \            y match {\n                                                     \
    \                                                                            \
    \                                       case \")\" => {\n                    \
    \                                                                            \
    \                                                                            stackSize\
    \ -= 1\n                                                                     \
    \                                                                            \
    \                           stack.toList.reverse.foreach(z => {\n            \
    \                                                                            \
    \                                                                            \
    \            z match {\n                                                     \
    \                                                                            \
    \                                                   case \")\" => {\n        \
    \                                                                            \
    \                                                                            \
    \                        stackSize -= 1\n                                    \
    \                                                                            \
    \                                                                        stack.toList.reverse.foreach(w\
    \ => {\n", "        val stack = mutable.Stack[String]()\n        val result =\
    \ mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        val openCount = mutable.ListBuffer[Int]()\n\
    \        val closeCount = mutable.ListBuffer[Int]()\n        val openSet = mutable.Set[String]()\n\
    \        val closeSet = mutable.Set[String]()\n        lst.foreach(x => {\n  \
    \          if (x == \"(\") {\n                open += x\n                openCount\
    \ += 1\n                openSet += x\n            } else if (x == \")\") {\n \
    \               close += x\n                closeCount += 1\n                closeSet\
    \ += x\n            } else {\n                stack += x\n            }\n    \
    \    })\n        if (openCount.sum == closeCount.sum) {\n            val openSetStr\
    \ = openSet.mkString(\"(\", \")\")\n            val closeSetStr = closeSet.mkString(\"\
    (\", \")\")\n            val openStr = (open mkString \"(\", \")\")\n        \
    \    val closeStr = (close mkString \"(\", \")\")\n            val openStrLen\
    \ = openStr.length\n            val closeStrLen = closeStr.length\n          \
    \  if (openStrLen > closeStrLen) {\n                result += \"Yes\"\n      \
    \      } else {\n                result += \"No\"\n            }\n        } else\
    \ {\n            result += \"No\"\n        }\n        result.mkString", "    \
    \    val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ =>\n                    stack.pop\n                    queue.enqueue(x)\n  \
    \              case \")(\"  =>\n                    stack.push(x)\n          \
    \      case \")(\"  =>\n                    stack.push(x)\n                case\
    \ \")\" =>\n                    queue.enqueue(x)\n                case \")\" =>\n\
    \                    queue.enqueue(x)\n                case \")\" =>\n       \
    \             queue.enqueue(x)\n                case \")\" =>\n              \
    \      queue.enqueue(x)\n                case \")\" =>\n                    queue.enqueue(x)\n\
    \                case \")\" =>\n                    queue.enqueue(x)\n       \
    \         case \")\" =>\n                    queue.enqueue(x)\n              \
    \  case \")\" =>\n                    queue.enqueue(x)\n                case \"\
    )\" =>\n                    queue.enqueue(x)\n                case \")\" =>\n\
    \                    queue.enqueue(x)\n                case \")\" =>\n       \
    \             queue.enqueue(x)\n                case \")\" =>\n              \
    \      queue.enqueue(x)\n                case \")\" =>\n                    queue.enqueue(x)\n\
    \                case \")\" =>\n                    queue.enqueue(x)\n       \
    \         case \")\" =>\n                    queue.enqueue(x)\n              \
    \  case \")\" =>\n                    queue.enqueue(x)\n                case \"\
    )\" =>\n                    queue.enqueue(x)\n                case \")\" =>\n\
    \                    queue.enqueue(x)\n                case \")\" =>\n       \
    \             queue.enqueue(x)\n                case \")\" =>\n              \
    \      queue.enqueue(x)\n                case \")\" =>\n                    queue.enqueue(x)\n\
    \                case \")\" =>\n                    queue.enqueue(x)\n       \
    \         case \")\" =>\n                    queue.enqueue(x)\n              \
    \  case \")\" =>\n                    queue.enqueue(x)\n                case \"\
    )\" =>\n                    queue.enqueue(x)\n                case \")\" =>\n\
    \                    queue.enqueue(x)\n                case \")\" =>\n       \
    \             queue.enqueue(x)\n                case \")\" =>\n              \
    \      queue.enqueue(x)\n                case \")\" =>\n                    queue.enqueue(x)\n\
    \                case \")\" =>\n                    queue.enqueue(x)\n       \
    \         case \")\" =>\n                    queue.enqueue(x)\n              \
    \  case \")\" =>\n                    queue.enqueue(x)\n                case \"\
    )\" =>\n                    queue.enqueue(x)\n                case \")\" =>\n\
    \                    queue.enqueue(x)\n                case \")\" =>\n       \
    \             queue.enqueue(x)\n                case \")\" =>\n              \
    \      queue.enqueue(x)\n                case \")\" =>\n                    queue.enqueue(x)\n\
    \                case \")\" =>\n                    queue.enqueue", "        val\
    \ stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => x match {\n            case x if x == \")\" => close.add(x)\n\
    \            case x if x == \"(\" => open.add(x)\n            case _ => stack\
    \ += x\n        })\n        val openCount = open.size\n        val closeCount\
    \ = close.size\n        if (openCount == closeCount) {\n            val openList\
    \ = open.iterator\n            while (openList.hasNext) {\n                val\
    \ open = openList.next\n                val closeList = close.iterator\n     \
    \           while (closeList.hasNext) {\n                    val close = closeList.next\n\
    \                    if (open == close) {\n                        result += \"\
    Yes\"\n                        break\n                    }\n                }\n\
    \            }\n        } else {\n            result += \"No\"\n        }\n  \
    \      result.toString()", "        val stack = mutable.Stack[String]()\n    \
    \    val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stackMax = stackSize - 1\n        val stackMaxSize = stackMax * 2\n\
    \        val stackMaxMax = stackMaxSize - 1\n        val stackMaxMaxSize = stackMaxMax\
    \ * 2\n        val stackMaxMaxMax = stackMaxMaxSize - 1\n        val stackMaxMaxMaxSize\
    \ = stackMaxMaxMax * 2\n        val stackMaxMaxMaxMax = stackMaxMaxMaxSize - 1\n\
    \        val stackMaxMaxMaxMaxSize = stackMaxMaxMaxMax * 2\n        val stackMaxMaxMaxMaxMax\
    \ = stackMaxMaxMaxMaxSize - 1\n        val stackMaxMaxMaxMaxMaxSize = stackMaxMaxMaxMaxMax\
    \ * 2\n        val stackMaxMaxMaxMaxMaxMax = stackMaxMaxMaxMaxMaxSize - 1\n  \
    \      val stackMaxMaxMaxMaxMaxMaxSize = stackMaxMaxMaxMaxMaxMax * 2\n       \
    \ val stackMaxMaxMaxMaxMaxMaxMax = stackMaxMaxMaxMaxMaxMaxMaxSize - 1\n      \
    \  val stackMaxMaxMaxMaxMaxMaxMaxSize = stackMaxMaxMaxMaxMaxMaxMax * 2\n     \
    \   val stackMaxMaxMaxMaxMaxMaxMaxMax = stackMaxMaxMaxMaxMaxMaxMaxMaxSize - 1\n\
    \        val stackMaxMaxMaxMaxMaxMaxMaxMaxSize = stackMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ * 2\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxMax = stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxSize\
    \ - 1\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxMaxSize = stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ * 2\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxSize\
    \ - 1\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxSize = stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ * 2\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxSize\
    \ - 1\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxSize = stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ * 2\n        val stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = stackMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax",
  "        val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        lst.foreach(x => if (x == \"\
    (\") stack += x else if (!x == \"(\") queue += x else ())\n        while (!stack.isEmpty\
    \ && !queue.isEmpty) {\n            val first = stack.pop()\n            val second\
    \ = queue.pop()\n            if (first == second) {\n                good += first\n\
    \            } else {\n                good += first\n                good +=\
    \ second\n            }\n        }\n        if (good.size == lst.length) \"Yes\"\
    \ else \"No\"", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        val good = mutable.Set[String]()\n\
    \        lst.foreach { s =>\n            s match {\n                case \")\"\
    \ =>\n                    close.foreach(c => stack += c)\n                   \
    \ result ++= stack.reverse\n                    stack.remove\n               \
    \ case \")(\"  =>\n                    open += s\n                case \")(\"\
    \ =>\n                    open -= s\n                case \")()\" =>\n       \
    \             open -= s\n                    result ++= stack.reverse\n      \
    \              stack.remove\n                case \")()\" =>\n               \
    \     open -= s\n                    result ++= stack.reverse\n              \
    \      stack.remove\n                case \")(\" =>\n                    open\
    \ += s\n                case \")\" =>\n                    open -= s\n       \
    \             result ++= stack.reverse\n                    stack.remove\n   \
    \             case \")\" =>\n                    open -= s\n                 \
    \   result ++= stack.reverse\n                    stack.remove\n             \
    \   case _ =>\n                    good += s\n            }\n        }\n     \
    \   if (good.size == 0) {\n            \"No\"\n        } else {\n            \"\
    Yes\"\n        }", "        val stack = mutable.Stack[String]()\n        val stack2\
    \ = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n  \
    \      val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stackMax = stackSize - 1\n    \
    \    lst.foreach(x => {\n            x match {\n                case \")\" =>\
    \ {\n                    stackSize -= 1\n                    stack.toList.reverse.foreach(y\
    \ => result += y)\n                    stack.toList.reverse.foreach(y => stack\
    \ += y)\n                }\n                case \"(\" => {\n                \
    \    stackSize += 1\n                    stack.toList.reverse.foreach(y => stack\
    \ += y)\n                }\n                case _ => stack.toList.reverse.foreach(y\
    \ => stack += y)\n            }\n        })\n        if (stackSize == 0) {\n \
    \           result.mkString(\"(\", \")\")\n        } else {\n            \"No\"\
    \n        }", "        val stack = mutable.Stack[String]()\n        val stack2\
    \ = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n  \
    \      val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ =>\n                    stack.pop() match {\n                        case Some(\"\
    (\") => queue.add(x)\n                        case _ => bad.add(x)\n         \
    \           }\n                case \")(\"  =>\n                    stack.pop()\
    \ match {\n                        case Some(\"(\") => queue.add(x)\n        \
    \                case _ => bad.add(x)\n                    }\n               \
    \ case \")()\" =>\n                    stack.pop() match {\n                 \
    \       case Some(\"(\") => queue.add(x)\n                        case _ => bad.add(x)\n\
    \                    }\n                case \")()()\" =>\n                  \
    \  stack.pop() match {\n                        case Some(\"(\") => queue.add(x)\n\
    \                        case _ => bad.add(x)\n                    }\n       \
    \         case \")()()()\" =>\n                    stack.pop() match {\n     \
    \                   case Some(\"(\") => queue.add(x)\n                       \
    \ case _ => bad.add(x)\n                    }\n                case \")()()()()\"\
    \ =>\n                    stack.pop() match {\n                        case Some(\"\
    (\") => queue.add(x)\n                        case _ => bad.add(x)\n         \
    \           }\n                case \")()()()()()\" =>\n                    stack.pop()\
    \ match {\n                        case Some(\"(\") => queue.add(x)\n        \
    \                case _ => bad.add(x)\n                    }\n               \
    \ case \")()()()()()()\" =>\n                    stack.pop() match {\n       \
    \                 case Some(\"(\") => queue.add(x)\n                        case\
    \ _ => bad.add(x)\n                    }\n                case \")()()()()()()()\"\
    \ =>\n                    stack.pop() match {\n                        case Some(\"\
    (\") => queue.add(x)\n                        case _ => bad.add(x)\n         \
    \           }\n                case \")()()()()()()()\" =>\n                 \
    \   stack.pop() match {\n                        case Some(\"(\") => queue.add(x)\n\
    \                        case _ => bad.add(x)\n                    }\n       \
    \         case \")()()()()()()()()\" =>\n                    stack.pop() match\
    \ {\n                        case Some(\"(\") => queue.add(x)\n              \
    \          case _ => bad.add(x)\n                    }\n                case \"\
    )()()()()()()()()()\" =>\n                    stack.pop() match {\n          \
    \              case Some(\"(\") => queue.add(x)\n                        case\
    \ _ => bad.add(x)\n                    }\n                case \")()()()()()()()()()\"\
    \ =>\n                    stack", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") open.add(x)\n       \
    \     if (x == \")\") close.add(x)\n            if (open.isEmpty && close.isEmpty)\
    \ stack += x\n            if (open.isEmpty && !close.isEmpty) {\n            \
    \    if (stack.size == 0) result += \"No\"\n                else if (stack.size\
    \ == 1) result += \"Yes\"\n                else if (stack.size > 1) result +=\
    \ \"Yes\"\n            }\n            if (close.isEmpty && !open.isEmpty) {\n\
    \                if (stack.size == 0) result += \"No\"\n                else if\
    \ (stack.size == 1) result += \"Yes\"\n                else if (stack.size > 1)\
    \ result += \"Yes\"\n            }\n        })\n        stack.toList", "     \
    \   val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.ListBuffer[String]()\n        val close = mutable.ListBuffer[String]()\n\
    \        val openCount = mutable.ListBuffer[Int]()\n        val closeCount = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") {\n                open\
    \ += x\n                openCount += 1 \n            } else if (x == \")\") {\n\
    \                close += x\n                closeCount += 1 \n            } else\
    \ if (openCount.sum == closeCount.sum) {\n                stack += x\n       \
    \     } else {\n                result += \"No\"\n            }\n        })\n\
    \        if (openCount.sum == closeCount.sum) {\n            result += \"Yes\"\
    \n        }\n        result.toString", "        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val good = mutable.Set[String]()\n\
    \        val bad = mutable.Set[String]()\n        lst.foreach(x => {\n       \
    \     x match {\n                case \")\" => {\n                    if (!stack.isEmpty)\
    \ {\n                        val top = stack.pop()\n                        if\
    \ (top.equals(\"(\")) {\n                            queue.enqueue(top)\n    \
    \                    } else {\n                            bad.add(top)\n    \
    \                    }\n                    }\n                }\n           \
    \     case \")(\"  => {\n                    if (!queue.isEmpty) {\n         \
    \               val top = queue.pop()\n                        if (top.equals(\"\
    (\")) {\n                            stack.enqueue(top)\n                    \
    \    } else {\n                            bad.add(top)\n                    \
    \    }\n                    }\n                }\n                case \")()\"\
    \ => {\n                    if (!queue.isEmpty) {\n                        val\
    \ top = queue.pop()\n                        if (top.equals(\"(\")) {\n      \
    \                      stack.enqueue(top)\n                        } else {\n\
    \                            bad.add(top)\n                        }\n       \
    \             }\n                }\n                case \")()()\" => {\n    \
    \                if (!queue.isEmpty) {\n                        val top = queue.pop()\n\
    \                        if (top.equals(\"(\")) {\n                          \
    \  stack.enqueue(top)\n                        } else {\n                    \
    \        bad.add(top)\n                        }\n                    }\n    \
    \            }\n                case \")()()()\" => {\n                    if\
    \ (!queue.isEmpty) {\n                        val top = queue.pop()\n        \
    \                if (top.equals(\"(\")) {\n                            stack.enqueue(top)\n\
    \                        } else {\n                            bad.add(top)\n\
    \                        }\n                    }\n                }\n       \
    \         case \")()()()()\" => {\n                    if (!queue.isEmpty) {\n\
    \                        val top = queue.pop()\n                        if (top.equals(\"\
    (\")) {\n                            stack.enqueue(top)\n                    \
    \    } else {\n                            bad.add(top)\n                    \
    \    }\n                    }\n                }\n                case \")()()()()()\"\
    \ => {\n                    if (!queue.isEmpty) {\n                        val\
    \ top = queue.pop()\n                        if (top.equals(\"(\")) {\n      \
    \                      stack.enqueue(top)\n                        } else {\n\
    \                            bad.add(top)\n                        }\n       \
    \             }\n                }\n                case \")()()()()()()\" =>\
    \ {\n                    if (!queue.isEmpty) {\n                        val top\
    \ = queue.pop()\n                        if (top.equals(\"(\")) {\n          \
    \                  stack.enqueue(top)\n                        } else {\n    \
    \                        bad.add(top)\n                        }\n           \
    \         }\n                }\n                case \")()()()()()()()\" => {\n\
    \                    if (!queue.isEmpty) {\n                        val top =\
    \ queue.pop()\n                        if (top.equals(\"(\")) {\n            \
    \                stack.enqueue(top)\n                        } else {\n      \
    \                      bad.add(top", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" =>\n                    close.foreach(x\
    \ => stack += x)\n                    result ++= stack\n                    stack\
    \ = mutable.Stack[String]()\n                case \")(\"  =>\n               \
    \     open += x\n                case \")\" =>\n                    close.foreach(x\
    \ => stack += x)\n                    result ++= stack\n                    stack\
    \ = mutable.Stack[String]()\n                case \")(\"  =>\n               \
    \     open += x\n                case _ =>\n                    stack += x\n \
    \           }\n        })\n        if (stack.size == 0)\n            \"No\"\n\
    \        else\n            \"Yes\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        val openCount = mutable.ListBuffer[Int]()\n\
    \        val closeCount = mutable.ListBuffer[Int]()\n        lst.foreach(x =>\
    \ {\n            x match {\n                case \")\" => {\n                \
    \    closeCount += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += closeCount.length\n\
    \                    closeCount += closeCount.length\n                    closeCount\
    \ += closeCount.length\n                    closeCount += close", "        val\
    \ stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.ListBuffer[String]()\n        val close = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    close.push(x)\n                }\n               \
    \ case \")(\"  => {\n                    open.push(x)\n                }\n   \
    \             case \")(\" => {\n                    stack.push(x)\n          \
    \      }\n                case \")()\" => {\n                    val s = stack.pop()\n\
    \                    val c = close.pop()\n                    val o = open.pop()\n\
    \                    if (s == o) {\n                        result.append(\"Yes\"\
    )\n                    } else {\n                        result.append(\"No\"\
    )\n                    }\n                }\n            }\n        })\n     \
    \   result.toString()", "        val stack = mutable.Stack[String]()\n       \
    \ val result = mutable.ListBuffer[String]()\n        lst.foreach { s =>\n    \
    \        s match {\n                case \"(\" => stack.push(s)\n            \
    \    case \")\" =>\n                    val top = stack.pop()\n              \
    \      result += (s\"$top$s\")\n            }\n        }\n        if (stack.size\
    \ == 0)\n            \"No\"\n        else\n            \"Yes\"", "        val\
    \ stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.Queue[String]()\n        val good = mutable.Queue[String]()\n\
    \        val bad = mutable.Queue[String]()\n        lst.foreach(x => {\n     \
    \       if (x == \"(\") {\n                stack.push(x)\n            } else if\
    \ (x == \")\") {\n                val top = stack.pop()\n                if (top\
    \ == \"(\") {\n                    queue.enqueue(x)\n                } else {\n\
    \                    bad.enqueue(x)\n                }\n            } else {\n\
    \                bad.enqueue(x)\n            }\n        })\n        val n = queue.size\n\
    \        if (n == 0) {\n            result.enqueue(\"Yes\")\n        } else if\
    \ (n == 1) {\n            result.enqueue(\"No\")\n        } else {\n         \
    \   while (!bad.isEmpty) {\n                val top = bad.poll()\n           \
    \     val next = queue.poll()\n                val newTop = stack.pop()\n    \
    \            val newNext = stack.pop()\n                val newTop2 = stack.pop()\n\
    \                val newNext2 = stack.pop()\n                val newTop3 = stack.pop()\n\
    \                val newNext3 = stack.pop()\n                val newTop4 = stack.pop()\n\
    \                val newNext4 = stack.pop()\n                val newTop5 = stack.pop()\n\
    \                val newNext5 = stack.pop()\n                val newTop6 = stack.pop()\n\
    \                val newNext6 = stack.pop()\n                val newTop7 = stack.pop()\n\
    \                val newNext7 = stack.pop()\n                val newTop8 = stack.pop()\n\
    \                val newNext8 = stack.pop()\n                val newTop9 = stack.pop()\n\
    \                val newNext9 = stack.pop()\n                val newTop10 = stack.pop()\n\
    \                val newNext10 = stack.pop()\n                val newTop11 = stack.pop()\n\
    \                val newNext11 = stack.pop()\n                val newTop12 = stack.pop()\n\
    \                val newNext12 = stack.pop()\n                val newTop13 = stack.pop()\n\
    \                val newNext13 = stack.pop()\n                val newTop14 = stack.pop()\n\
    \                val newNext14 = stack.pop()\n                val newTop15 = stack.pop()\n\
    \                val newNext15 = stack.pop()\n                val newTop16 = stack.pop()\n\
    \                val newNext16 = stack.pop()\n                val newTop17 = stack.pop()\n\
    \                val newNext17 = stack.pop()\n                val newTop18 = stack.pop()\n\
    \                val newNext18 = stack.pop()\n                val newTop19 = stack.pop()\n\
    \                val newNext19 = stack.pop()\n                val newTop20 = stack.pop()\n\
    \                val newNext20 = ", "        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val result = mutable.Queue[String]()\n\
    \        lst.foreach { s =>\n            if (s.startsWith(\"(\")) {\n        \
    \        stack.push(s)\n            } else {\n                val top = stack.pop()\n\
    \                if (top == s) {\n                    queue.enqueue(s)\n     \
    \           } else {\n                    result.enqueue(top)\n              \
    \      result.enqueue(s)\n                }\n            }\n        }\n      \
    \  if (stack.size == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" =>\n                    close.foreach(y\
    \ => stack += y)\n                    stack.toList.reverse.foreach(y => result\
    \ += y)\n                    stack.toList.reverse.clear()\n                case\
    \ \")(\"  =>\n                    open += x\n                case \")(\" =>\n\
    \                    open -= x\n                case \")()\" =>\n            \
    \        open += x\n                case \")()()\" =>\n                    open\
    \ -= x\n                case \")(\" =>\n                    open -= x\n      \
    \          case \")()\" =>\n                    open += x\n                case\
    \ \")()()\" =>\n                    open -= x\n                case \")(\" =>\n\
    \                    open -= x\n                case \")()()\" =>\n          \
    \          open += x\n                case \")(\" =>\n                    open\
    \ -= x\n                case \")()()\" =>\n                    open -= x\n   \
    \             case \")(\" =>\n                    open -= x\n                case\
    \ \")()()\" =>\n                    open += x\n                case \")(\" =>\n\
    \                    open -= x\n                case \")()()\" =>\n          \
    \          open -= x\n                case \")(\" =>\n                    open\
    \ -= x\n                case \")()()\" =>\n                    open += x\n   \
    \             case \")(\" =>\n                    open -= x\n                case\
    \ \")()()\" =>\n                    open -= x\n                case \")(\" =>\n\
    \                    open -= x\n                case \")()()\" =>\n          \
    \          open += x\n                case \")(\" =>\n                    open\
    \ -= x\n                case \")()()\" =>\n                    open -= x\n   \
    \             case \")(\" =>\n                    open -= x\n                case\
    \ \")()()\" =>\n                    open += x\n                case \")(\" =>\n\
    \                    open -= x\n                case \")()()\" =>\n          \
    \          open -= x\n                case \")(\" =>\n                    open\
    \ -= x\n                case \")()()\" =>\n                    open += x\n   \
    \             case \")(\" =>\n                    open -= x\n                case\
    \ \")()()\" =>\n                    open -= x\n                case \")(\" =>\n\
    \                    open -= x\n                case \")()()\" =>\n          \
    \          open += x\n                case \")(\" =>\n                    open\
    \ -= x\n                case \")()()\" =>\n                    open -= x\n   \
    \             case \")(\" =>\n                    open -= x\n                case\
    \ \")", "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n  \
    \      val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n", "        val stack\
    \ = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n  \
    \      val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n        \
    \    if (x == \"(\") stack.push(x)\n            if (x == \")\") stack.pop() match\
    \ {\n                case Some(x) => result += x\n                case None =>\
    \ result += \"No\"\n            }\n        })\n        if (stack.size == 0) \"\
    Yes\" else \"No\"", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n  \
    \      val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach { s =>\n            if (s.startsWith(\"(\")) {\n        \
    \        open += s\n                stack.push(s)\n            } else if (s.endsWith(\"\
    )\")) {\n                close += s\n                result += (s\"${stack.pop}${s}\"\
    )\n            }\n        }\n        if (open.isEmpty && close.isEmpty) {\n  \
    \          \"No\"\n        } else {\n            \"Yes\"\n        }", "      \
    \  val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            if (x contains \"(\") open += x\n   \
    \         if (x contains \")\") close += x\n            if (x contains \"(\")\
    \ stack += x\n            if (x contains \")\") stack += x\n        })\n     \
    \   val openCount = open.size\n        val closeCount = close.size\n        if\
    \ (openCount == closeCount) {\n            val openStack = stack.take(openCount)\n\
    \            val closeStack = stack.drop(closeCount)\n            val openStackCount\
    \ = openStack.size\n            val closeStackCount = closeStack.size\n      \
    \      if (openStackCount == closeStackCount) {\n                val stackStr\
    \ = openStack.mkString(\"(\", \")\", \", \")\")\n                val stackStr2\
    \ = closeStack.mkString(\"(\", \")\", \", \")\")\n                if (stackStr\
    \ == stackStr2) {\n                    result += \"Yes\"\n                } else\
    \ {\n                    result += \"No\"\n                }\n            } else\
    \ {\n                result += \"No\"\n            }\n        } else {\n     \
    \       result += \"No\"\n        }\n        result.toString", "        val stack\
    \ = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n   \
    \     val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        val goodCount = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String,\
    \ Int]()\n        val goodCount = mutable.Map[String, Int]()\n        val badCount\
    \ = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String, Int]()\n\
    \        val badCount = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String,\
    \ Int]()\n        val badCount = mutable.Map[String, Int]()\n        val goodCount\
    \ = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String, Int]()\n\
    \        val goodCount = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String,\
    \ Int]()\n        val goodCount = mutable.Map[String, Int]()\n        val badCount\
    \ = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String, Int]()\n\
    \        val badCount = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String,\
    \ Int]()\n        val badCount = mutable.Map[String, Int]()\n        val goodCount\
    \ = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String, Int]()\n\
    \        val goodCount = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String,\
    \ Int]()\n        val goodCount = mutable.Map[String, Int]()\n        val badCount\
    \ = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String, Int]()\n\
    \        val badCount = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String,\
    \ Int]()\n        val badCount = mutable.Map[String, Int]()\n        val goodCount\
    \ = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String, Int]()\n\
    \        val goodCount = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String,\
    \ Int]()\n        val goodCount = mutable.Map[String, Int]()\n        val badCount\
    \ = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String, Int]()\n\
    \        val badCount = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String,\
    \ Int]()\n        val badCount = mutable.Map[String, Int]()\n        val goodCount\
    \ = mutable.Map[String, Int", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => {\n                    if(stack.isEmpty)\
    \ result += \"No\"\n                    else result += \"Yes\"\n             \
    \   }\n                case \")(\"  => {\n                    open += x\n    \
    \            }\n                case \")(\" => {\n                    close +=\
    \ x\n                }\n                case \")(\" => {\n                   \
    \ stack += x\n                }\n                case \")\" => {\n           \
    \         if(stack.isEmpty) result += \"No\"\n                    else result\
    \ += \"Yes\"\n                }\n                case \")\" => {\n           \
    \         if(stack.isEmpty) result += \"No\"\n                    else result\
    \ += \"Yes\"\n                }\n                case \")(\" => {\n          \
    \          stack += x\n                }\n                case \")(\" => {\n \
    \                   open += x\n                }\n                case \")(\"\
    \ => {\n                    close += x\n                }\n                case\
    \ \")(\" => {\n                    stack += x\n                }\n           \
    \     case \")(\" => {\n                    open += x\n                }\n   \
    \             case \")(\" => {\n                    close += x\n             \
    \   }\n                case \")(\" => {\n                    stack += x\n    \
    \            }\n                case \")(\" => {\n                    open +=\
    \ x\n                }\n                case \")(\" => {\n                   \
    \ close += x\n                }\n                case \")(\" => {\n          \
    \          stack += x\n                }\n                case \")(\" => {\n \
    \                   open += x\n                }\n                case \")(\"\
    \ => {\n                    close += x\n                }\n                case\
    \ \")(\" => {\n                    stack += x\n                }\n           \
    \     case \")(\" => {\n                    open += x\n                }\n   \
    \             case \")(\" => {\n                    close += x\n             \
    \   }\n                case \")(\" => {\n                    stack += x\n    \
    \            }\n                case \")(\" => {\n                    open +=\
    \ x\n                }\n                case \")(\" => {\n                   \
    \ close += x\n                }\n                case \")(\" => {\n          \
    \          stack += x\n                }\n                case \")(\" => {\n \
    \                   open += x\n                }\n                case \")(\"\
    \ => {\n                    close += x\n                }\n                case\
    \ \")(\" => {\n                    stack += x\n                }\n           \
    \     case \")(\" => {\n                    open += x\n                }\n   \
    \             case \")(\" => {\n                    close += x\n             \
    \   }\n                case \")(\" => {\n                    stack += x\n    \
    \            }\n                case \")(\" => {\n                    open +=\
    \ x\n", "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ queue = mutable.Queue[String]()\n        val result = mutable.Queue[String]()\n\
    \        val good = mutable.Queue[String]()\n        val bad = mutable.Queue[String]()\n\
    \        val goodCount = mutable.Queue[Int]()\n        val badCount = mutable.Queue[Int]()\n\
    \        val goodCount2 = mutable.Queue[Int]()\n        val badCount2 = mutable.Queue[Int]()\n\
    \        val goodCount3 = mutable.Queue[Int]()\n        val badCount3 = mutable.Queue[Int]()\n\
    \        val goodCount4 = mutable.Queue[Int]()\n        val badCount4 = mutable.Queue[Int]()\n\
    \        val goodCount5 = mutable.Queue[Int]()\n        val badCount5 = mutable.Queue[Int]()\n\
    \        val goodCount6 = mutable.Queue[Int]()\n        val badCount6 = mutable.Queue[Int]()\n\
    \        val goodCount7 = mutable.Queue[Int]()\n        val badCount7 = mutable.Queue[Int]()\n\
    \        val goodCount8 = mutable.Queue[Int]()\n        val badCount8 = mutable.Queue[Int]()\n\
    \        val goodCount9 = mutable.Queue[Int]()\n        val badCount9 = mutable.Queue[Int]()\n\
    \        val goodCount10 = mutable.Queue[Int]()\n        val badCount10 = mutable.Queue[Int]()\n\
    \        val goodCount11 = mutable.Queue[Int]()\n        val badCount11 = mutable.Queue[Int]()\n\
    \        val goodCount12 = mutable.Queue[Int]()\n        val badCount12 = mutable.Queue[Int]()\n\
    \        val goodCount13 = mutable.Queue[Int]()\n        val badCount13 = mutable.Queue[Int]()\n\
    \        val goodCount14 = mutable.Queue[Int]()\n        val badCount14 = mutable.Queue[Int]()\n\
    \        val goodCount15 = mutable.Queue[Int]()\n        val badCount15 = mutable.Queue[Int]()\n\
    \        val goodCount16 = mutable.Queue[Int]()\n        val badCount16 = mutable.Queue[Int]()\n\
    \        val goodCount17 = mutable.Queue[Int]()\n        val badCount17 = mutable.Queue[Int]()\n\
    \        val goodCount", "        val stack = mutable.Stack[String]()\n      \
    \  val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => x match {\n\
    \            case x if x == \")\" => close.add(x)\n            case x if x ==\
    \ \")\" => stack.toList.reverse.foreach(y => result += (y + \"(\"))\n        \
    \    case x if x == \"(\" => open.add(x)\n            case x if x == \")\" =>\
    \ stack.toList.reverse.foreach(y => result += (y + \"(\"))\n            case x\
    \ => stack.toList.reverse.foreach(y => result += (y + \"(\"))\n        })\n  \
    \      if (close.size == 0 && open.size == 0) \"Yes\" else \"No\"", "        val\
    \ stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") open += x\n         \
    \   if (x == \")\") close += x\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"Yes\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (close.isEmpty && !open.isEmpty) result += \"No\"\n \
    \           if (open.isEmpty && close.isEmpty) result += \"No\"\n            if\
    \ (open.isEmpty && !close.isEmpty) result += \"Yes\"\n            if (open.isEmpty\
    \ && close.isEmpty) result += \"No\"\n            if (open.isEmpty && !close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && close.isEmpty) result += \"\
    No\"\n            if (open.isEmpty && !close.isEmpty) result += \"No\"\n     \
    \       if (open.isEmpty && close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"No\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && close.isEmpty) result += \"No\"\n  \
    \          if (open.isEmpty && !close.isEmpty) result += \"No\"\n            if\
    \ (open.isEmpty && close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"No\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && close.isEmpty) result += \"No\"\n  \
    \          if (open.isEmpty && !close.isEmpty) result += \"No\"\n            if\
    \ (open.isEmpty && close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"No\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && close.isEmpty) result += \"No\"\n  \
    \          if (open.isEmpty && !close.isEmpty) result += \"No\"\n            if\
    \ (open.isEmpty && close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"No\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && close", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\"  => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.",
  "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length){\n\
    \            val str = lst(i)\n            val open = str.indexOf(\"(\")\n   \
    \         val close = str.indexOf(\")\")\n            if(open < 0 || close < 0){\n\
    \                result += \"No\"\n                return result.toString()\n\
    \            }\n            val openCount = stack.length\n            val closeCount\
    \ = stack.length\n            val openParen = open\n            val closeParen\
    \ = close\n            while(openCount > 0 && closeCount > 0){\n             \
    \   val openParenCount = stack.length\n                val closeParenCount = stack.length\n\
    \                val openParenStr = stack.pop()\n                val closeParenStr\
    \ = stack.pop()\n                if(openParenStr == closeParenStr){\n        \
    \            openCount -= 1\n                    closeCount -= 1\n           \
    \     }else if(openParenStr < closeParenStr){\n                    openCount -=\
    \ 1\n                }else{\n                    closeCount -= 1\n           \
    \     }\n            }\n            if(openCount > closeCount){\n            \
    \    result += \"No\"\n                return result.toString()\n            }\n\
    \            result += \"Yes\"\n            while(openCount > 0){\n          \
    \      result += \"(\"\n                openCount -= 1\n            }\n      \
    \      while(closeCount > 0){\n                result += \")\"\n             \
    \   closeCount -= 1\n            }\n        }\n        return result.toString()",
  "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       if (x == \"(\") {\n                open += x\n                stack +=\
    \ x\n            } else if (x == \")\") {\n                close += x\n      \
    \          stack -= x\n            }\n        })\n        if (stack.size == 0)\
    \ {\n            result.append(\"Yes\")\n        } else {\n            val openCount\
    \ = open.size\n            val closeCount = close.size\n            val openStack\
    \ = stack.take(openCount)\n            val closeStack = stack.drop(closeCount)\n\
    \            val openStackCount = openStack.size\n            val closeStackCount\
    \ = closeStack.size\n            val openStackStack = openStack.take(openStackCount)\n\
    \            val closeStackStack = closeStack.drop(closeStackCount)\n        \
    \    val openStackStackCount = openStackStack.size\n            val closeStackStackCount\
    \ = closeStackStack.size\n            val openStackStackStack = openStackStack.take(openStackStackCount)\n\
    \            val closeStackStackStack = closeStackStack.drop(closeStackStackCount)\n\
    \            val openStackStackStackCount = openStackStackStack.size\n       \
    \     val closeStackStackStackCount = closeStackStackStack.size\n            val\
    \ openStackStackStackStack = openStackStackStack.take(openStackStackStackCount)\n\
    \            val closeStackStackStackStack = closeStackStackStack.drop(closeStackStackStackCount)\n\
    \            val openStackStackStackStackCount = openStackStackStackStack.size\n\
    \            val closeStackStackStackStackCount = closeStackStackStackStack.size\n\
    \            val openStackStackStackStackStack = openStackStackStackStack.take(openStackStackStackStackCount)\n\
    \            val closeStackStackStackStackStack = closeStackStackStackStack.drop(closeStackStackStackStackCount)\n\
    \            val openStackStackStackStackStackCount = openStackStackStackStackStack.size\n\
    \            val closeStackStackStackStackStackCount = closeStackStackStackStackStack.size\n\
    \            val openStackStackStackStackStackStack = openStackStackStackStackStack.take(openStackStackStackStackStackCount)\n\
    \            val closeStackStackStackStackStackStack = closeStackStackStackStackStack.drop(closeStackStackStackStackStackCount)\n\
    \            val openStackStackStackStackStackStackCount = openStackStackStackStackStackStack.size\n\
    \            val close", "        val stack = mutable.Stack[String]()\n      \
    \  val queue = mutable.Queue[String]()\n        val good = mutable.Set[String]()\n\
    \        val bad = mutable.Set[String]()\n        val goodCount = mutable.Map[String,\
    \ Int]()\n        val badCount = mutable.Map[String, Int]()\n        val goodCount\
    \ = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String, Int]()\n\
    \        val goodCount = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String,\
    \ Int]()\n        val goodCount = mutable.Map[String, Int]()\n        val badCount\
    \ = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String, Int]()\n\
    \        val badCount = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String,\
    \ Int]()\n        val badCount = mutable.Map[String, Int]()\n        val goodCount\
    \ = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String, Int]()\n\
    \        val goodCount = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String,\
    \ Int]()\n        val goodCount = mutable.Map[String, Int]()\n        val badCount\
    \ = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String, Int]()\n\
    \        val badCount = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String,\
    \ Int]()\n        val badCount = mutable.Map[String, Int]()\n        val goodCount\
    \ = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String, Int]()\n\
    \        val goodCount = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String,\
    \ Int]()\n        val goodCount = mutable.Map[String, Int]()\n        val badCount\
    \ = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String, Int]()\n\
    \        val badCount = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String,\
    \ Int]()\n        val badCount = mutable.Map[String, Int]()\n        val goodCount\
    \ = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String, Int]()\n\
    \        val goodCount = mutable.Map[String, Int]()\n        val badCount = mutable.Map[String,\
    \ Int]()\n        val goodCount = mutable.Map[String, Int]()\n        val badCount\
    \ = mutable.Map[String, Int]()\n        val goodCount = mutable.Map[String, Int",
  "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       if (x contains \"(\") {\n                open += x\n                stack.push(x)\n\
    \            } else {\n                close += x\n            }\n        })\n\
    \        val openCount = open.size\n        val closeCount = close.size\n    \
    \    if (openCount == closeCount) {\n            val openStack = stack.take(openCount)\n\
    \            val closeStack = stack.drop(openCount)\n            val openStackSize\
    \ = openStack.size\n            val closeStackSize = closeStack.size\n       \
    \     val openStackLast = openStack.last\n            val closeStackLast = closeStack.last\n\
    \            if (openStackLast == closeStackLast) {\n                result +=\
    \ \"Yes\"\n            } else {\n                result += \"No\"\n          \
    \  }\n        } else {\n            result += \"No\"\n        }\n        result.mkString",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ =>\n                    close.synchronized {\n                        stack.pop()\
    \ match {\n                            case Some(\"(\") => open.remove(stack.pop())\n\
    \                            case _ => result.synchronized {\n               \
    \                 result += stack.pop()\n                            }\n     \
    \                   }\n                    }\n                case \")(\" =>\n\
    \                    stack.synchronized {\n                        open.add(stack.pop())\n\
    \                    }\n                case \")(\" =>\n                    stack.synchronized\
    \ {\n                        open.add(stack.pop())\n                    }\n  \
    \              case \")(\" =>\n                    stack.synchronized {\n    \
    \                    open.add(stack.pop())\n                    }\n          \
    \      case \")(\" =>\n                    stack.synchronized {\n            \
    \            open.add(stack.pop())\n                    }\n                case\
    \ \")(\" =>\n                    stack.synchronized {\n                      \
    \  open.add(stack.pop())\n                    }\n                case \")(\" =>\n\
    \                    stack.synchronized {\n                        open.add(stack.pop())\n\
    \                    }\n                case \")(\" =>\n                    stack.synchronized\
    \ {\n                        open.add(stack.pop())\n                    }\n  \
    \              case \")(\" =>\n                    stack.synchronized {\n    \
    \                    open.add(stack.pop())\n                    }\n          \
    \      case \")(\" =>\n                    stack.synchronized {\n            \
    \            open.add(stack.pop())\n                    }\n                case\
    \ \")(\" =>\n                    stack.synchronized {\n                      \
    \  open.add(stack.pop())\n                    }\n                case \")(\" =>\n\
    \                    stack.synchronized {\n                        open.add(stack.pop())\n\
    \                    }\n                case \")(\" =>\n                    stack.synchronized\
    \ {\n                        open.add(stack.pop())\n                    }\n  \
    \              case \")(\" =>\n                    stack.synchronized {\n    \
    \                    open.add(stack.pop())\n                    }\n          \
    \      case \")(\" =>\n                    stack.synchronized {\n            \
    \            open.add(stack.pop())\n                    }\n                case\
    \ \")(\" =>\n                    stack.synchronized {\n                      \
    \  open.add(stack.pop())\n                    }\n                case \")(\" =>\n\
    \                    stack.synchronized {\n                        open.add(stack.pop())\n\
    \                    }\n                case \")(\" =>\n                    stack.synchronized\
    \ {\n                        open.add(stack.pop())\n                    }\n  \
    \              case \")(\" =>\n                    stack.synchronized {\n    \
    \                    open.add(stack.pop())\n                    }\n          \
    \      case \")(\" =>\n                    stack.synchronized {\n            \
    \            open.add(stack.pop())\n                    }\n                case\
    \ \")", "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        lst.foreach(x => stack +=\
    \ x)\n        while(stack.nonEmpty) {\n            val x = stack.pop()\n     \
    \       val y = stack.pop()\n            val z = (x + \"(\" + y + \")\")\n   \
    \         if(z.contains(\"(\") && z.contains(\")\")) {\n                result\
    \ += \"Yes\"\n            } else {\n                result += \"No\"\n       \
    \     }\n        }\n        result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Stack[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stackMax = stackSize - 1\n   \
    \     val resultMax = resultSize - 1\n        val stackIndex = 0\n        val\
    \ resultIndex = 0\n        val stackIsEmpty = stack.isEmpty\n        val resultIsEmpty\
    \ = result.isEmpty\n        while(stackIsEmpty || resultIsEmpty) {\n         \
    \   if(stackIsEmpty) {\n                stackIndex += 1\n                stackMax\
    \ = stackIndex\n                stackIsEmpty = stack.isEmpty\n            }\n\
    \            if(resultIsEmpty) {\n                resultIndex += 1\n         \
    \       resultMax = resultIndex\n                resultIsEmpty = result.isEmpty\n\
    \            }\n            val stackElement = lst(stackIndex)\n            val\
    \ resultElement = lst(resultIndex)\n            if(stackElement == \"(\" && resultElement\
    \ == \")\") {\n                stack.push(stackElement)\n                result.push(resultElement)\n\
    \                stackIndex += 1\n                resultIndex += 1\n         \
    \   }\n            else if(stackElement == \")\" && resultElement == \"(\") {\n\
    \                stackIndex -= 1\n                stackMax = stackIndex\n    \
    \            stackIsEmpty = stack.isEmpty\n            }\n            else if(stackElement\
    \ == \"(\" && resultElement == \"(\") {\n                result.push(resultElement)\n\
    \                stackIndex += 1\n                resultIndex += 1\n         \
    \   }\n            else if(stackElement == \")\" && resultElement == \")\") {\n\
    \                stackIndex -= 1\n                stackMax = stackIndex\n    \
    \            stackIsEmpty = stack.isEmpty\n            }\n            else if(stackElement\
    \ == \"(\" && resultElement == \"(\") {\n                stack.push(stackElement)\n\
    \                stackIndex += 1\n                stackIsEmpty = stack.isEmpty\n\
    \            }\n            else if(stackElement == \")\" && resultElement ==\
    \ \")\") {\n                stackIndex -= 1\n                stackMax = stackIndex\n\
    \                stackIsEmpty = stack.isEmpty\n            }\n            else\
    \ {\n                stackIndex += 1\n                stackMax = stackIndex\n\
    \                stackIsEmpty = stack.isEmpty\n                resultIndex +=\
    \ 1\n                resultMax = resultIndex\n                resultIsEmpty =\
    \ result.isEmpty\n            }\n        }\n        if(stackMax == resultMax)\
    \ {\n            val stackElement = lst(stackIndex)\n            val resultElement\
    \ = lst(resultIndex)\n            if(stackElement == \"(\" && resultElement ==\
    \ \")\") {\n                stack.push(stackElement)\n                result.push(resultElement)\n\
    \                stackIndex += 1\n                resultIndex += 1\n         \
    \   }\n            else if(stackElement == \")\" && resultElement == \"(\") {\n\
    \                stackIndex -= 1\n                stack", "        val stack =\
    \ mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n     \
    \   val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        val goodSize = mutable.Set[String]()\n        val badSize = mutable.Set[String]()\n\
    \        val goodCount = mutable.Set[String]()\n        val badCount = mutable.Set[String]()\n\
    \        val goodSize = mutable.Set[String]()\n        val badSize = mutable.Set[String]()\n\
    \        val goodCount = mutable.Set[String]()\n        val badCount = mutable.Set[String]()\n\
    \        val goodSize = mutable.Set[String]()\n        val badSize = mutable.Set[String]()\n\
    \        val goodCount = mutable.Set[String]()\n        val badCount = mutable.Set[String]()\n\
    \        val goodSize = mutable.Set[String]()\n        val badSize = mutable.Set[String]()\n\
    \        val goodCount = mutable.Set[String]()\n        val badCount = mutable.Set[String]()\n\
    \        val goodSize = mutable.Set[String]()\n        val badSize = mutable.Set[String]()\n\
    \        val goodCount = mutable.Set[String]()\n        val badCount = mutable.Set[String]()\n\
    \        val goodSize = mutable.Set[String]()\n        val badSize = mutable.Set[String]()\n\
    \        val goodCount = mutable.Set[String]()\n        val badCount = mutable.Set[String]()\n\
    \        val goodSize = mutable.Set[String]()\n        val badSize = mutable.Set[String]()\n\
    \        val goodCount = mutable.Set[String]()\n        val badCount = mutable.Set[String]()\n\
    \        val goodSize = mutable.Set[String]()\n        val badSize = mutable.Set[String]()\n\
    \        val goodCount = mutable.Set[String]()\n        val badCount = mutable.Set[String]()\n\
    \        val goodSize = mutable.Set[String]()\n        val badSize = mutable.Set[String]()\n\
    \        val goodCount = mutable.Set[String]()\n        val badCount = mutable.Set[String]()\n\
    \        val goodSize = mutable.Set[String]()\n        val badSize = mutable.Set[String]()\n\
    \        val goodCount = mutable.Set[String", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        lst.foreach(x => {\n            val index = stack.indexOf(x)\n      \
    \      if (index == -1) {\n                stack += x\n            } else {\n\
    \                val stackSize = stack.size\n                if (stackSize ==\
    \ 0) {\n                    result += \"No\"\n                } else {\n     \
    \               result += \"Yes\"\n                }\n            }\n        })\n\
    \        result.toString()", "        val stack = mutable.Stack[String]()\n  \
    \      val result = mutable.ListBuffer.empty[String]\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach { s =>\n     \
    \       if (open.isEmpty && close.isEmpty) {\n                result ++= s\n \
    \           } else if (open.isEmpty && close.contains(s)) {\n                result\
    \ ++= s\n            } else if (close.isEmpty && open.contains(s)) {\n       \
    \         result ++= s\n            } else if (close.contains(s) && open.contains(s))\
    \ {\n                result ++= s\n            } else if (close.contains(s) &&\
    \ open.contains(s)) {\n                result ++= s\n            } else if (close.isEmpty\
    \ && open.contains(s)) {\n                result ++= s\n            } else if\
    \ (close.contains(s) && open.contains(s)) {\n                result ++= s\n  \
    \          } else {\n                stack += s\n            }\n        }\n  \
    \      if (stack.size == 1) {\n            stack.toList\n        } else {\n  \
    \          \"No\"\n        }", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stackSize2 = stackSize * stackSize\n        val stackSize3 = stackSize2\
    \ * stackSize\n        val stackSize4 = stackSize3 * stackSize\n        val stackSize5\
    \ = stackSize4 * stackSize\n        val stackSize6 = stackSize5 * stackSize\n\
    \        val stackSize7 = stackSize6 * stackSize\n        val stackSize8 = stackSize7\
    \ * stackSize\n        val stackSize9 = stackSize8 * stackSize\n        val stackSize10\
    \ = stackSize9 * stackSize\n        val stackSize11 = stackSize10 * stackSize\n\
    \        val stackSize12 = stackSize11 * stackSize\n        val stackSize13 =\
    \ stackSize12 * stackSize\n        val stackSize14 = stackSize13 * stackSize\n\
    \        val stackSize15 = stackSize14 * stackSize\n        val stackSize16 =\
    \ stackSize15 * stackSize\n        val stackSize17 = stackSize16 * stackSize\n\
    \        val stackSize18 = stackSize17 * stackSize\n        val stackSize19 =\
    \ stackSize18 * stackSize\n        val stackSize20 = stackSize19 * stackSize\n\
    \        val stackSize21 = stackSize20 * stackSize\n        val stackSize22 =\
    \ stackSize21 * stackSize\n        val stackSize23 = stackSize22 * stackSize\n\
    \        val stackSize24 = stackSize23 * stackSize\n        val stackSize25 =\
    \ stackSize24 * stackSize\n        val stackSize26 = stackSize25 * stackSize\n\
    \        val stackSize27 = stackSize26 * stackSize\n        val stackSize28 =\
    \ stackSize27 * stackSize\n        val stackSize29 = stackSize28 * stackSize\n\
    \        val stackSize30 = stackSize29 * stackSize\n        val stackSize31 =\
    \ stackSize30 * stackSize\n        val stackSize32 = stackSize31 * stackSize\n\
    \        val stackSize33 = stackSize32 * stackSize\n        val stackSize34 =\
    \ stackSize33 * stackSize\n        val stackSize35 = stackSize34 * stackSize\n\
    \        val stackSize36 = stackSize35 * stackSize\n        val stackSize37 =\
    \ stackSize36 * stackSize\n        val stackSize38 = stackSize37 * stackSize\n\
    \        val stackSize39 = stackSize38 * stackSize\n        val stackSize", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stackMax = stackSize - 1\n    \
    \    val stackIndex = stackMax\n        val stackElement = lst(stackIndex)\n \
    \       val stackElementSize = stackElement.length\n        val stackElementMax\
    \ = stackElementSize - 1\n        val stackElementIndex = stackElementMax\n  \
    \      val stackElementElement = lst(stackElementIndex)\n        val stackElementElementSize\
    \ = stackElementElement.length\n        val stackElementElementMax = stackElementElementSize\
    \ - 1\n        val stackElementElementIndex = stackElementElementMax\n       \
    \ val stackElementElementElement = lst(stackElementElementIndex)\n        val\
    \ stackElementElementElementSize = stackElementElementElement.length\n       \
    \ val stackElementElementElementMax = stackElementElementElementSize - 1\n   \
    \     val stackElementElementElementIndex = stackElementElementElementMax\n  \
    \      val stackElementElementElementElement = lst(stackElementElementElementIndex)\n\
    \        val stackElementElementElementElementSize = stackElementElementElementElement.length\n\
    \        val stackElementElementElementElementMax = stackElementElementElementElementSize\
    \ - 1\n        val stackElementElementElementElementIndex = stackElementElementElementElementMax\n\
    \        val stackElementElementElementElementElement = lst(stackElementElementElementElementIndex)\n\
    \        val stackElementElementElementElementElementSize = stackElementElementElementElementElement.length\n\
    \        val stackElementElementElementElementElementMax = stackElementElementElementElementElementSize\
    \ - 1\n        val stackElementElementElementElementElementIndex = stackElementElementElementElementElementMax\n\
    \        val stackElementElementElementElementElementElement = lst(stackElementElementElementElementElementIndex)\n\
    \        val stackElementElementElementElementElementElementSize = stackElementElementElementElementElementElement.length\n\
    \        val stackElementElementElementElementElementElementMax = stackElementElementElementElementElementElementSize\
    \ - 1\n        val stackElementElementElementElementElementElementIndex = stackElementElementElementElementElementElementElementMax\n\
    \        val stackElementElementElementElementElementElementElement = lst(stackElementElementElementElementElementElementIndex)\n\
    \        val stackElementElementElementElementElementElementElementSize = stackElementElementElementElementElementElementElement.length\n\
    \        val stackElementElementElementElementElementElementElementMax = stackElementElementElementElementElementElementElementElementSize\
    \ - 1\n        val stackElementElementElementElementElementElementElementIndex\
    \ = stackElementElementElementElementElementElementElementElementMax\n       \
    \ val stackElementElementElementElementElementElementElementElement = lst(stackElementElementElementElementElement",
  "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.Stack[String]()\n        val open = mutable.HashSet[String]()\n\
    \        val close = mutable.HashSet[String]()\n        lst.foreach(x => {\n \
    \           x match {\n                case \")\" =>\n                    close.push(x)\n\
    \                case \")(\"  =>\n                    stack.push(x)\n        \
    \        case \")(\"  =>\n                    stack.push(x)\n                case\
    \ \")\" =>\n                    stack.push(x)\n                case \")\" =>\n\
    \                    stack.push(x)\n                case \")(\" =>\n         \
    \           stack.push(x)\n                case \")(\" =>\n                  \
    \  stack.push(x)\n                case \")(\" =>\n                    stack.push(x)\n\
    \                case \")(\" =>\n                    stack.push(x)\n         \
    \       case \")(\" =>\n                    stack.push(x)\n                case\
    \ \")(\" =>\n                    stack.push(x)\n                case \")(\" =>\n\
    \                    stack.push(x)\n                case \")(\" =>\n         \
    \           stack.push(x)\n                case \")(\" =>\n                  \
    \  stack.push(x)\n                case \")(\" =>\n                    stack.push(x)\n\
    \                case \")(\" =>\n                    stack.push(x)\n         \
    \       case \")(\" =>\n                    stack.push(x)\n                case\
    \ \")(\" =>\n                    stack.push(x)\n                case \")(\" =>\n\
    \                    stack.push(x)\n                case \")(\" =>\n         \
    \           stack.push(x)\n                case \")(\" =>\n                  \
    \  stack.push(x)\n                case \")(\" =>\n                    stack.push(x)\n\
    \                case \")(\" =>\n                    stack.push(x)\n         \
    \       case \")(\" =>\n                    stack.push(x)\n                case\
    \ \")(\" =>\n                    stack.push(x)\n                case \")(\" =>\n\
    \                    stack.push(x)\n                case \")(\" =>\n         \
    \           stack.push(x)\n                case \")(\" =>\n                  \
    \  stack.push(x)\n                case \")(\" =>\n                    stack.push(x)\n\
    \                case \")(\" =>\n                    stack.push(x)\n         \
    \       case \")(\" =>\n                    stack.push(x)\n                case\
    \ \")(\" =>\n                    stack.push(x)\n                case \")(\" =>\n\
    \                    stack.push(x)\n                case \")(\" =>\n         \
    \           stack.push(x)\n                case \")(\" =>\n                  \
    \  stack.push(x)\n                case \")(\" =>\n                    stack.push(x)\n\
    \                case \")(\" =>\n                    stack.push(x)\n         \
    \       case \")(\" =>\n                    stack.push(x)\n                case\
    \ \")(\" =>\n                    stack.push(x)\n                case \")(\" =>\n\
    \                    stack.push(x)\n                case \")(\" =>\n         \
    \           stack.push(x)\n                case \")", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.Queue[String]()\n        val len = lst.size\n  \
    \      for(i <- 0 until len){\n            val str = lst(i)\n            val len\
    \ = str.length\n            val open = str.indexOf(\"(\")\n            val close\
    \ = str.indexOf(\")\")\n            val isOpen = open != -1\n            val isClose\
    \ = close != -1\n            val isOpenClose = open != -1 && close != -1\n   \
    \         if(isOpen && isClose){\n                val str = str.substring(0, open)\n\
    \                val str2 = str.substring(open + 1, close)\n                val\
    \ str3 = str.substring(close + 1)\n                val str4 = str2 + str3\n  \
    \              val str5 = str4 + str\n                val str6 = str5 + str\n\
    \                val str7 = str6 + str\n                val str8 = str7 + str\n\
    \                val str9 = str8 + str\n                val str10 = str9 + str\n\
    \                val str11 = str10 + str\n                val str12 = str11 +\
    \ str\n                val str13 = str12 + str\n                val str14 = str13\
    \ + str\n                val str15 = str14 + str\n                val str16 =\
    \ str15 + str\n                val str17 = str16 + str\n                val str18\
    \ = str17 + str\n                val str19 = str18 + str\n                val\
    \ str20 = str19 + str\n                val str21 = str20 + str\n             \
    \   val str22 = str21 + str\n                val str23 = str22 + str\n       \
    \         val str24 = str23 + str\n                val str25 = str24 + str\n \
    \               val str26 = str25 + str\n                val str27 = str26 + str\n\
    \                val str28 = str27 + str\n                val str29 = str28 +\
    \ str\n                val str30 = str29 + str\n                val str31 = str30\
    \ + str\n                val str32 = str31 + str\n                val str33 =\
    \ str32 + str\n                val str34 = str33 + str\n                val str35\
    \ = str34 + str\n                val str36 = str35 + str\n                val\
    \ str37 = str36 + str\n                val str38 = str37 + str\n             \
    \   val str39 = str38 + str\n                val str40 = str39 + str\n       \
    \         val str4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       if (x == \"(\") open += x\n            if (x == \")\") close += x\n  \
    \          if (open.isEmpty && close.isEmpty) result += \"Yes\"\n            if\
    \ (open.isEmpty || close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && close.isEmpty) result += \"No\"\n            if (open.isEmpty || close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && close.isEmpty) result += \"\
    No\"\n            if (open.isEmpty || close.isEmpty) result += \"No\"\n      \
    \      if (open.isEmpty && close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ || close.isEmpty) result += \"No\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty || close.isEmpty) result += \"\
    No\"\n            if (open.isEmpty && close.isEmpty) result += \"No\"\n      \
    \      if (open.isEmpty || close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && close.isEmpty) result += \"No\"\n            if (open.isEmpty || close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && close.isEmpty) result += \"\
    No\"\n            if (open.isEmpty || close.isEmpty) result += \"No\"\n      \
    \      if (open.isEmpty && close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ || close.isEmpty) result += \"No\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty || close.isEmpty) result += \"\
    No\"\n            if (open.isEmpty && close.isEmpty) result += \"No\"\n      \
    \      if (open.isEmpty || close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && close.isEmpty) result += \"No\"\n            if (open.isEmpty || close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && close.isEmpty) result += \"\
    No\"\n            if (open.isEmpty || close.isEmpty) result += \"No\"\n      \
    \      if (open.isEmpty && close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ || close.isEmpty) result += \"No\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty || close.isEmpty) result += \"\
    No\"\n            if (open.isEmpty && close.isEmpty) result += \"No\"\n      \
    \      if (open.isEmpty || close", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            if(str == \"(\") {\n          \
    \      stack += str\n            }\n            else if(str == \")\") {\n    \
    \            if(stack.size == 0) {\n                    result += \"No\"\n   \
    \             }\n                else if(stack.last == \"(\") {\n            \
    \        result += \"Yes\"\n                }\n                else {\n      \
    \              result += \"No\"\n                }\n                stack.pop()\n\
    \            }\n        }\n        if(result.size == lst.size) {\n           \
    \ result match {\n                case Nil => \"Yes\"\n                case x\
    \ => x\n            }\n        }\n        else {\n            \"No\"\n       \
    \ }", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    stack.push(x)\n                }\n               \
    \ case \")\" => {\n                    val last = stack.pop()\n              \
    \      result += (last + x)\n                }\n                case \")()\" =>\
    \ {\n                    val last = stack.pop()\n                    result +=\
    \ (last + x)\n                }\n                case \")()\" => {\n         \
    \           val last = stack.pop()\n                    result += (last + x)\n\
    \                }\n                case \")(\" => {\n                    val\
    \ last = stack.pop()\n                    result += (last + x)\n             \
    \   }\n                case \")(\" => {\n                    val last = stack.pop()\n\
    \                    result += (last + x)\n                }\n               \
    \ case \")(\" => {\n                    val last = stack.pop()\n             \
    \       result += (last + x)\n                }\n                case \")(\" =>\
    \ {\n                    val last = stack.pop()\n                    result +=\
    \ (last + x)\n                }\n                case \")(\" => {\n          \
    \          val last = stack.pop()\n                    result += (last + x)\n\
    \                }\n                case \")(\" => {\n                    val\
    \ last = stack.pop()\n                    result += (last + x)\n             \
    \   }\n                case \")(\" => {\n                    val last = stack.pop()\n\
    \                    result += (last + x)\n                }\n               \
    \ case \")(\" => {\n                    val last = stack.pop()\n             \
    \       result += (last + x)\n                }\n                case \")(\" =>\
    \ {\n                    val last = stack.pop()\n                    result +=\
    \ (last + x)\n                }\n                case \")(\" => {\n          \
    \          val last = stack.pop()\n                    result += (last + x)\n\
    \                }\n                case \")(\" => {\n                    val\
    \ last = stack.pop()\n                    result += (last + x)\n             \
    \   }\n                case \")(\" => {\n                    val last = stack.pop()\n\
    \                    result += (last + x)\n                }\n               \
    \ case \")(\" => {\n                    val last = stack.pop()\n             \
    \       result += (last + x)\n                }\n                case \")(\" =>\
    \ {\n                    val last = stack.pop()\n                    result +=\
    \ (last + x)\n                }\n                case \")(\" => {\n          \
    \          val last = stack.pop()\n                    result += (last + x)\n\
    \                }\n                case \")(\" => {\n                    val\
    \ last = stack.pop()\n                    result += (last + x)\n             \
    \   }\n                case \")(\" => {\n                    val last = stack.pop()\n\
    \                    result += (last + x)\n                }\n               \
    \ case \")(\" => {\n                    val last = stack.pop()\n             \
    \       result += (last + x)\n                }\n                case \")(\" =>\
    \ {\n                    val last = stack.pop()\n                    result +=\
    \ (last + x)\n                }\n                case \")(", "        val stack\
    \ = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n  \
    \      val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach { s =>\n            s match {\n                case \")\"\
    \ =>\n                    close.foreach(c => stack += c)\n                   \
    \ result ++= stack\n                    stack = mutable.Stack[String]()\n    \
    \            case \")(\"  =>\n                    open += s\n                case\
    \ \")(\"  =>\n                    open += s\n                case \")\" =>\n \
    \                   close += s\n                case \")\" =>\n              \
    \      close += s\n                case _ =>\n                    stack += s\n\
    \            }\n        }\n        result match {\n            case Nil => \"\
    No\"\n            case _ => \"Yes\"\n        }", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\"  => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    val\
    \ x = stack.pop()\n                    val y = close.pop()\n                 \
    \   val z = x + y\n                    result.push(z)\n                    open.push(x)\n\
    \                }\n                case \")\" => {\n                    val x\
    \ = stack.pop()\n                    val y = close.pop()\n                   \
    \ val z = x + y\n                    result.push(z)\n                }\n     \
    \           case \")(\" => {\n                    val x = stack.pop()\n      \
    \              val y = close.pop()\n                    val z = x + y\n      \
    \              result.push(z)\n                }\n                case \")\" =>\
    \ {\n                    val x = stack.pop()\n                    val y = close.pop()\n\
    \                    val z = x + y\n                    result.push(z)\n     \
    \           }\n                case \")(\" => {\n                    val x = stack.pop()\n\
    \                    val y = close.pop()\n                    val z = x + y\n\
    \                    result.push(z)\n                }\n                case \"\
    )(\" => {\n                    val x = stack.pop()\n                    val y\
    \ = close.pop()\n                    val z = x + y\n                    result.push(z)\n\
    \                }\n                case \")(\" => {\n                    val\
    \ x = stack.pop()\n                    val y = close.pop()\n                 \
    \   val z = x + y\n                    result.push(z)\n                }\n   \
    \             case \")(\" => {\n                    val x = stack.pop()\n    \
    \                val y = close.pop()\n                    val z = x + y\n    \
    \                result.push(z)\n                }\n                case \")(\"\
    \ => {\n                    val x = stack.pop()\n                    val y = close.pop()\n\
    \                    val z = x + y\n                    result.push(z)\n     \
    \           }\n                case \")(\" => {\n                    val x = stack.pop()\n\
    \                    val y = close.pop()\n                    val z = x + y\n\
    \                    result.push(z)\n                }\n                case \"\
    )(\" => {\n                    val x = stack.pop()\n                    val y\
    \ = close.pop()\n                    val z = x + y\n                    result.push(z)\n\
    \                }\n                case \")(\" => {\n                    val\
    \ x = stack.pop()\n                    val y = close.pop()\n                 \
    \   val z = x + y\n                    result.push(z)\n                }\n   \
    \             case \")(\" => {\n                    val x = stack.pop()\n    \
    \                val y = close.pop()\n                    val z = x + y\n    \
    \                result.push(z)\n                }\n                case \")(\"\
    \ => {\n                    val x = stack.pop()\n                    val y = close.pop()\n",
  "        val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val len = lst.size\n\
    \        for(i <- 0 until len){\n            val str = lst(i)\n            if(str\
    \ == \"(\"){\n                stack += str\n                queue += str\n   \
    \         }else if(str == \")\"){\n                val top = stack.pop()\n   \
    \             val next = queue.pop()\n                if(top == next){\n     \
    \               result += \"Yes\"\n                }else{\n                  \
    \  result += \"No\"\n                }\n            }\n        }\n        result.mkString(\"\
    ,\")", "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4"]
stop_tokens:
- "\n    }\n"
