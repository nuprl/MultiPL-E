language: scala
name: HumanEval_103_rounded_avg
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(s\"$n1 > $m1\")\n        else Right(n.toBinaryString+m.toBinaryString)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpluib01mq.scala:21:19\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m Right(n.toBinaryString+m.toBinaryString)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   Found:    String\n\e[31m   |\e[0m          \
    \         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val binary = Integer.toBinaryString(avg)\n        if (binary.length <\
    \ 8) {\n            Left(s\"$binary\")\n        } else {\n            Right(avg)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpszjbt6b5.scala:20:44\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                       ^^^\e[0m\n\e[31m   |\e[0m                            \
    \                Found:    (avg : Long)\n\e[31m   |\e[0m                     \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n\
    \            Right(bin)\n        } else {\n            Left(s\"$bin is too big\"\
    )\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptgm456ey.scala:20:41\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptgm456ey.scala:22:18 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m                  ^^^\e[0m\n\
    \e[31m   |\e[0m                  Found:    (bin : String)\n\e[31m   |\e[0m   \
    \               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if (n1\
    \ > m1) Left(-1)\n        else if (n1 < m1) Right(-1)\n        else Right((n1\
    \ + m1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp_now55x.scala:20:26\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (n1 > m1)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                          Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val ns = n.toString.toInt\n        val ms = m.toString.toInt\n\
    \        if (ns > ms) Left(s\"$ns is greater than $ms\")\n        else if (ns\
    \ < ms) Right(-1)\n        else Right(n.toString.toInt + m.toString.toInt)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3egt6cbg.scala:25)\n\tat Problem.main(tmp3egt6cbg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <=\
    \ m) Right(n.toBinaryString)\n        else Left(s\"$n is greater than $m\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2sg5xipw.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp2sg5xipw.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumBits = nBitsSum.toBinaryString\n        val mBitsSumBits\
    \ = mBitsSum.toBinaryString\n        val nBitsSumBitsLen = nBitsSumBits.length\n\
    \        val mBitsSumBitsLen = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = n.toInt + m.toInt\n        val mBitsSumBitsSum = m.toInt + m.toInt\n     \
    \   val nBitsSumBitsSumLen = nBitsSumBitsSum.toBinaryString.length\n        val\
    \ mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n        val nBitsSumBitsSumBits\
    \ = nBitsSumBitsSum.toBinaryString\n        val mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n\
    \        val nBitsSumBitsSumBitsLen = nBitsSumBitsSumBits.length\n        val\
    \ mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n        val nBitsSumBitsSumBitsSum\
    \ = n.toInt + m.toInt + m.toInt\n        val mBitsSumBitsSumBitsSum = m.toInt\
    \ + m.toInt + m.toInt\n        val nBitsSumBitsSumBitsSumLen = nBitsSumBitsSumBitsSum.toBinaryString.length\n\
    \        val mBitsSumBitsSumBitsSumLen = mBitsSumBitsSumBitsSum.toBinaryString.length\n\
    \        val nBitsSumBitsSumBitsSumBits = nBitsSumBitsSumBitsSum.toBinaryString\n\
    \        val mBitsSumBitsSumBitsSumBits = mBitsSumBitsSumBitsSum.toBinaryString\n\
    \        val nBitsSumBitsSumBitsSumBitsLen = nBitsSumBitsSumBits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb0iv_yq7.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        val sum\
    \ = n.toLong + m.toLong\n        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n\
    \        val left = (sum % 2).toInt\n        val right = sum.toInt - left\n  \
    \      val result = if (left == 0) \"0b\" + bin else if (right == 0) \"0b\" +\
    \ bin else bin\n        val errMsg = if (left == 0) \"The average of \" + n +\
    \ \" and \" + m + \" must be less than \" + sum + \", but you gave \" + sum +\
    \ \" as the sum.\" else if (right == 0) \"The average of \" + n + \" and \" +\
    \ m + \" must be less than \" + sum + \", but you gave \" + sum + \" as the sum.\"\
    \ else bin\n        Left(errMsg)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu9e034a5.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpu9e034a5.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumBits = nBitsSum.toBinaryString\n        val mBitsSumBits\
    \ = mBitsSum.toBinaryString\n        val nBitsSumBitsLen = nBitsSumBits.length\n\
    \        val mBitsSumBitsLen = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = n.toInt.toBinaryString\n        val mBitsSumBitsSum = m.toInt.toBinaryString\n\
    \        val nBitsSumBitsSumLen = nBitsSumBitsSum.length\n        val mBitsSumBitsSumLen\
    \ = mBitsSumBitsSum.length\n        val nBitsSumBitsSumBits = n.toInt.toBinaryString\n\
    \        val mBitsSumBitsSumBits = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n\
    \        val nBitsSumBitsSumBitsSum = n.toInt.toBinaryString\n        val mBitsSumBitsSumBitsSum\
    \ = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsSumLen = nBitsSumBitsSumBitsSum.length\n\
    \        val mBitsSumBitsSumBitsSumLen = mBitsSumBitsSumBitsSum.length\n     \
    \   val nBitsSumBitsSumBitsSumBits = n.toInt.toBinaryString\n        val mBitsSumBitsSumBitsSumBits\
    \ = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsSumBitsLen = nBitsSumBitsSumBitsSumBits.length\n\
    \        val mBitsSumBitsSumBitsSumBitsLen = mBitsSumBitsSumBitsSumBitsLen\n \
    \       val nBits\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm8j5xq3t.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm8j5xq3t.scala:45:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmBitsSumBitsSumBitsSumBitsLen\e[0m = mBitsSumBitsSumBitsSumBitsLen\n\e\
    [31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35mmBitsSumBitsSumBitsSumBitsLen\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8j5xq3t.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val result = if (sum > 0) Right(avg) else Left(s\"$sum is not a positive\
    \ integer\")\n        result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7hwkiw2d.scala:24)\n\tat Problem.main(tmp7hwkiw2d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = binary(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqha1v93c.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqha1v93c.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:25:25 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n\
    \            Left(s\"$bin is too short\")\n        } else if (bin.length > 8)\
    \ {\n            Right(-1l)\n        } else {\n            Right(bin)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc29lktta.scala:20:41\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc29lktta.scala:26:18 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m                  ^^^\e[0m\n\
    \e[31m   |\e[0m                  Found:    (bin : String)\n\e[31m   |\e[0m   \
    \               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        val sum\
    \ = n.toLong + m.toLong\n        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin == \"\") {\n            Right(-1)\n        } else if (bin.length\
    \ < n) {\n            Right(-1)\n        } else {\n            Right(bin)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1b89wyga.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp1b89wyga.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp1b89wyga.scala:28:18 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m            \
    \      ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\e\
    [31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nToM = (n to m).map(_.toInt)\n        val nToMSum = nToM.sum\n\
    \        val nToMCount = nToM.size\n        val nToMSumBin = Integer.toBinaryString(nToMSum)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSum)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSum)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSum)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSum)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSum)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSum)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSum)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSum)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSum)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSum)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSum)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSum)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToM\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw4x0b0yn.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw4x0b0yn.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnToMSumBin\e[0m = Integer.toBinaryString(nToMSum)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnToMSumBin is already defined as \e[33mvalue\e[0m \e[35mnToMSumBin\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw4x0b0yn.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mnToMCountBin\e[0m = Integer.toBinaryString(nToMCount)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMCountBin is already defined as \e[33mvalue\e[0m \e[35mnToMCountBin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw4x0b0yn.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnToMSumBin\e[0m = Integer.toBinaryString(nToMSum)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMSumBin is already defined as \e[33mvalue\e[0m \e[35mnToMSumBin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw4x0b0yn.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnToMCountBin\e[0m = Integer.toBinaryString(nToMCount)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMCountBin is already defined as \e[33mvalue\e[0m \e[35mnToMCountBin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same gro"
  stdout: ''
  timestamp: 1659798027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = ((n + m) / 2).round\n        val binary = avg.toBinaryString\n\
    \        if (binary.length < 2) return Left(s\"$avg can't be represented in binary\"\
    )\n        if (binary.length == 2) return Right(binary.toLong)\n        Left(s\"\
    $avg can't be represented in $binary\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8m9cpwqs.scala:25)\n\tat Problem.main(tmp8m9cpwqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = math.abs(n)\n        val m = math.abs(m)\n      \
    \  if (n > m) {\n            Left(-1)\n        } else {\n            val bin =\
    \ n.toBinary() + m.toBinary()\n            val len = bin.length\n            val\
    \ sum = 0\n            val sumOfOnes = 0\n            val sumOfTwos = 0\n    \
    \        val sumOfThrees = 0\n            val sumOfFours = 0\n            val\
    \ sumOfFives = 0\n            val sumOfSixes = 0\n            val sumOfSevens\
    \ = 0\n            val sumOfEights = 0\n            val sumOfNines = 0\n     \
    \       val sumOfTens = 0\n            val sumOfElevens = 0\n            val sumOfTwelves\
    \ = 0\n            val sumOfThirteens = 0\n            val sumOfFourteens = 0\n\
    \            val sumOfFifteens = 0\n            val sumOfSixteens = 0\n      \
    \      val sumOfSeventeens = 0\n            val sumOfEighteens = 0\n         \
    \   val sumOfNineteens = 0\n            val sumOfTwentys = 0\n            val\
    \ sumOfTwentyFours = 0\n            val sumOfTwentyFives = 0\n            val\
    \ sumOfTwentySixes = 0\n            val sumOfTwentySevens = 0\n            val\
    \ sumOfTwentyEights = 0\n            val sumOfTwentyNines = 0\n            val\
    \ sumOfThirtys = 0\n            val sumOfThirtyFours = 0\n            val sumOfThirtyFives\
    \ = 0\n            val sumOfThirtySixes = 0\n            val sumOfThirtySevens\
    \ = 0\n            val sumOfThirtyEights = 0\n            val sumOfThirtyNines\
    \ = 0\n            val sumOfFortys = 0\n            val sumOfFortyFours = 0\n\
    \            val sumOfFortyFives = 0\n            val sumOfFortySixes = 0\n  \
    \          val sumOfFortySevens = 0\n            val sumOfFortyEights = 0\n  \
    \          val sumOfFortyNines = 0\n            val sumOfFiftys = 0\n        \
    \    val sumOfFiftyFours = 0\n            val sumOfFiftyFives = 0\n          \
    \  val sumOfFiftySixes = 0\n            val sumOfFiftySevens = 0\n           \
    \ val sumOfFiftyEights = 0\n            val sumOfFiftyNines = 0\n            val\
    \ sumOfSixtys = 0\n            val sumOfSixtyFours = 0\n            val \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmptb6_hl7o.scala:75:15 ---------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptb6_hl7o.scala:93:0 ----------------------------\e\
    [0m\e[0m\n\e[31m93 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptb6_hl7o.scala:18:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = math.abs(n)\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mn\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptb6_hl7o.scala:19:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.abs(m)\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mm\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptb6_hl7o.scala:92:1\
    \ ---------------------\e[0m\e[0m\n\e[31m92 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmptb6_hl7o.scala:77:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m77 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumLen = nBitsSumLen.toInt\n        val mBitsSumLen = mBitsSumLen.toInt\n\
    \        val nBitsSumBits = nBitsSum.toBinaryString\n        val mBitsSumBits\
    \ = mBitsSum.toBinaryString\n        val nBitsSumBitsLen = nBitsSumBits.length\n\
    \        val mBitsSumBitsLen = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = n.toInt\n        val mBitsSumBitsSum = m.toInt\n        val nBitsSumBitsSumLen\
    \ = nBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n\
    \        val nBitsSumBitsSumLen = nBitsSumBitsSumLen.toInt\n        val mBitsSumBitsSumLen\
    \ = mBitsSumBitsSumLen.toInt\n        val nBitsSumBitsSumBits = nBitsSumBitsSum.toBinaryString\n\
    \        val mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n        val\
    \ nBitsSumBitsSumBitsLen = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen\
    \ = mBitsSumBitsSumBits.length\n        val nBitsSumBitsSumBitsSum = n.toInt\n\
    \        val mBitsSumBitsSumBitsSum = m.toInt\n        val nBitsSumBitsSumBitsSumLen\
    \ = nBitsSumBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumBitsSumLen\
    \ = mBitsSumBitsSumBitsSum.toBinaryString.length\n        val nBitsSumBitsSumBitsSumLen\
    \ = nBitsSumBitsSumBitsSumLen.toInt\n        val mBits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1wjxqtj9.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1wjxqtj9.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnBitsSumLen\e[0m = nBitsSumLen.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnBitsSumLen is already defined as \e[33mvalue\e[0m \e[35mnBitsSumLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1wjxqtj9.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmBitsSumLen\e[0m = mBitsSumLen.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmBitsSumLen is already defined as \e[33mvalue\e[0m \e[35mmBitsSumLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1wjxqtj9.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mnBitsSumBitsSumLen\e[0m = nBitsSumBitsSumLen.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnBitsSumBitsSumLen is already defined as \e[33mvalue\e[0m\
    \ \e[35mnBitsSumBitsSumLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1wjxqtj9.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mmBitsSumBitsSumLen\e[0m\
    \ = mBitsSumBitsSumLen.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmBitsSumBitsSumLen is already defined as \e[33mvalue\e[0m\
    \ \e[35mmBitsSumBitsSumLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val binary = avg.toBinaryString\n        val result = if (binary == \"\
    \") -1l else Right(binary.toLong)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvqjv6rsr.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Matchable)\n\
    \e[31m   |\e[0m        Required: Either[String, Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumBits = nBitsSum.toBinaryString\n        val mBitsSumBits\
    \ = mBitsSum.toBinaryString\n        val nBitsSumBitsLen = nBitsSumBits.length\n\
    \        val mBitsSumBitsLen = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = n.toInt.toBinaryString\n        val mBitsSumBitsSum = m.toInt.toBinaryString\n\
    \        val nBitsSumBitsSumLen = nBitsSumBitsSum.length\n        val mBitsSumBitsSumLen\
    \ = mBitsSumBitsSum.length\n        val nBitsSumBitsSumBits = n.toInt.toBinaryString\n\
    \        val mBitsSumBitsSumBits = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n\
    \        val nBitsSumBitsSumBitsSum = n.toInt.toBinaryString\n        val mBitsSumBitsSumBitsSum\
    \ = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsSumLen = nBitsSumBitsSumBitsSum.length\n\
    \        val mBitsSumBitsSumBitsSumLen = mBitsSumBitsSumBitsSum.length\n     \
    \   val nBitsSumBitsSumBitsSumBits = n.toInt.toBinaryString\n        val mBitsSumBitsSumBitsSumBits\
    \ = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsSumBitsLen = nBitsSumBitsSumBitsSumBits.length\n\
    \        val mBitsSumBitsSumBitsSumBitsLen = mBitsSumBitsSumBitsSumBitsLen\n \
    \       val nBits\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm8j5xq3t.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm8j5xq3t.scala:45:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmBitsSumBitsSumBitsSumBitsLen\e[0m = mBitsSumBitsSumBitsSumBitsLen\n\e\
    [31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35mmBitsSumBitsSumBitsSumBitsLen\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8j5xq3t.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        val n2\
    \ = n1 + m1\n        val m2 = m1 + n1\n        val n3 = n2.toBinaryString\n  \
    \      val m3 = m2.toBinaryString\n        val n4 = n3.length\n        val m4\
    \ = m3.length\n        val n5 = n4 - m1\n        val m5 = m4 - m1\n        val\
    \ n6 = n5 + m1\n        val m6 = m5 + n1\n        val n7 = n6.toBinaryString\n\
    \        val m7 = m6.toBinaryString\n        val n8 = n7.length\n        val m8\
    \ = m7.length\n        val n9 = (n8 - m1)\n        val m9 = (m8 - m1)\n      \
    \  val n10 = n9 + m1\n        val m10 = m9 + n1\n        val n11 = n10.toBinaryString\n\
    \        val m11 = m10.toBinaryString\n        val n12 = n11.length\n        val\
    \ m12 = m11.length\n        val n13 = (n12 - m1)\n        val m13 = (m12 - m1)\n\
    \        val n14 = n13 + m1\n        val m14 = m13 + n1\n        val n15 = n14.toBinaryString\n\
    \        val m15 = m14.toBinaryString\n        val n16 = n15.length\n        val\
    \ m16 = m15.length\n        val n17 = (n16 - m1)\n        val m17 = (m16 - m1)\n\
    \        val n18 = n17 + m1\n        val m18 = m17 + n1\n        val n19 = (n18\
    \ - m1)\n        val m19 = (m18 - m1)\n        val n20 = n19 + m1\n        val\
    \ m20 = m19 + n1\n        val n21 = n20.toBinaryString\n        val m21 = m20.toBinaryString\n\
    \        val n22 = n21.length\n        val m22 = m21.length\n        val n23 =\
    \ (n22 - m1)\n        val m23 = (m22 - m1)\n        val n24 = n23 + m1\n     \
    \   val m24 = m23 + n1\n        val n25 = n24.toBinaryString\n        val m25\
    \ = m24.toBinaryString\n        val n26 = n25.length\n        val m26 = m25.length\n\
    \        val n27 = (n26 - m1)\n        val m27 = (m26 - m1)\n        val n28 =\
    \ n27 + m1\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2xehmsep.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqmxqlzfz.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqmxqlzfz.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqmxqlzfz.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqmxqlzfz.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.padToLength(binary.length, \"0\"))\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi7a_k9h5.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpi7a_k9h5.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpi7a_k9h5.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.size < 8) {\n\
    \            Right(bin)\n        } else {\n            Left(s\"$bin is not a valid\
    \ binary number\")\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy2mg7ctp.scala:20:41\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy2mg7ctp.scala:22:18 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m                  ^^^\e[0m\n\
    \e[31m   |\e[0m                  Found:    (bin : String)\n\e[31m   |\e[0m   \
    \               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <\
    \ m) Left(s\"$n is less than $m\")\n        else if (n == m) Right(n.toBinaryString)\n\
    \        else Right(-1l)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3dkzh3ot.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp3dkzh3ot.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <=\
    \ m) Right(n.toBinaryString)\n        else Left(s\"$n to $m is out of range\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvdr3g8td.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpvdr3g8td.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = Integer.toBinaryString(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgq9k6gr4.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpgq9k6gr4.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpgq9k6gr4.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqmxqlzfz.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqmxqlzfz.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqmxqlzfz.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqmxqlzfz.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = binary(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqha1v93c.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqha1v93c.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:25:25 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = binary(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqha1v93c.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqha1v93c.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:25:25 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nMinusM = (n - m).toInt\n        val nPlusM = (n + m).toInt\n\
    \        val nMinusMPlusM = (nMinusM + m).toInt\n        val nMinusMMinusM = (nMinusM\
    \ - m).toInt\n        val nPlusMMinusM = (nPlusM - m).toInt\n        val nMinusMMinusMPlusM\
    \ = (nMinusMMinusM + m).toInt\n        val nMinusMPlusMMinusM = (nMinusMPlusM\
    \ - m).toInt\n        val nMinusMMinusMPlusMMinusM = (nMinusMMinusMPlusM - m).toInt\n\
    \        val nMinusMPlusMMinusMMinusM = (nMinusMPlusMMinusM - m).toInt\n     \
    \   val nMinusMMinusMPlusMMinusMPlusM = (nMinusMMinusMPlusMMinusM - m).toInt\n\
    \        val nMinusMPlusMMinusMMinusMPlusM = (nMinusMPlusMMinusMPlusM - m).toInt\n\
    \        val nMinusMMinusMPlusMMinusMPlusMMinusM = (nMinusMMinusMPlusMMinusMPlusM\
    \ - m).toInt\n        val nMinusMPlusMMinusMMinusMPlusMMinusMPlusM = (nMinusMPlusMMinusMPlusMMinusM\
    \ - m).toInt\n        val nMinusMMinusMPlusMMinusMPlusMMinusMPlusM = (nMinusMMinusMPlusMPlusMMinusMPlusM\
    \ - m).toInt\n        val nMinusMPlusMMinusMMinusMPlusMMinusMPlusMMinusM = (nMinusMPlusMMinusMPlusMMinusMPlusM\
    \ - m).toInt\n        val nMinusMMinusMPlusMMinusMPlusMMinusMPlusMMinusM = (nMinusMMinusMPlusMPlusMMinusMPlusMMinusM\
    \ - m).toInt\n        val nMinusMPlusMMinusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = (nMinusMMinusMPlusMPlusMMinusMPlusMMinus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpehryi_ic.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpehryi_ic.scala:28:45\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mnMinusMPlusMMinusMMinusMPlusM\e[0m = (nMinusMPlusMMinusMPlusM - m).toInt\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: nMinusMPlusMMinusMPlusM\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpehryi_ic.scala:30:56\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mnMinusMPlusMMinusMMinusMPlusMMinusMPlusM\e[0m = (nMinusMPlusMMinusMPlusMMinusM\
    \ - m).toInt\n\e[31m\e[31m   |\e[0m                                          \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     Not found: nMinusMPlusMMinusMPlusMMinusM\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpehryi_ic.scala:31:56 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnMinusMMinusMPlusMMinusMPlusMMinusMPlusM\e\
    [0m = (nMinusMMinusMPlusMPlusMMinusMPlusM - m).toInt\n\e[31m\e[31m   |\e[0m  \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: nMinusMMinusMPlusMPlusMMinusMPlusM\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpehryi_ic.scala:32:62\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mnMinusMPlusMMinusMMinusMPlusMMinusMPlusMMinusM\e[0m = (nMinusMPlusMMinusMPlusMMinusMPlusM\
    \ - m).toInt\n\e[31m\e[31m   |\e[0m                                          \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e["
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val remainder = sum % 2\n        val binary = remainder.toString + avg.toBinaryString\n\
    \        val result = if (binary == 0) Right(binary) else Left(s\"$binary is not\
    \ a binary number\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpswtox2ip.scala:22:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e\
    [0m (binary == \e[31m0\e[0m) Right(binary) \e[33melse\e[0m Left(\e[31ms\"\e[0m$binary\e\
    [31m is not a binary number\"\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types String and Int\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpswtox2ip.scala:23:8 ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e\
    [31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e[0m]\e[1m\e[31m)\e\
    [0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e[32mLong\e[0m]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if (n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else if (n1 < m1) Right(-1)\n\
    \        else Right(n.toBinaryString+m.toBinaryString)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfwf5yozw.scala:22:19\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m Right(n.toBinaryString+m.toBinaryString)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   Found:    String\n\e[31m   |\e[0m          \
    \         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else Right(round(n/m)*m+n-m*(n%m))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwp5y49z4.scala:24)\n\tat Problem.main(tmpwp5y49z4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val binary = avg.toBinaryString\n        val result = Right(binary.padToLength(n,\
    \ \"0\"))\n        if (n.toLong > m.toLong) result\n        else Left(-1)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgk7ztgbz.scala:21:34 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = Right(binary.padToLength(n,\
    \ \e[31m\"0\"\e[0m))\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value padToLength is not a member\
    \ of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgk7ztgbz.scala:23:18\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m Left(-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m \
    \                 Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m           \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = binary(avg)\n\
    \            Right(binary.toInt)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7po7_8z1.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp7po7_8z1.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7po7_8z1.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7po7_8z1.scala:25:25 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <=\
    \ m) Right(n.toBinaryString)\n        else Left(s\"$n is greater than $m\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2sg5xipw.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp2sg5xipw.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString\n        val nBitsSumLen = nBitsSumLen.toBinaryString\n\
    \        val mBitsSumLen = mBitsSumLen.toBinaryString\n        val nBitsSumLen\
    \ = nBitsSumLen.toBinaryString\n        val mBitsSumLen = mBitsSumLen.toBinaryString\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString\n        val nBitsSumLen = nBitsSumLen.toBinaryString\n\
    \        val mBitsSumLen = mBitsSumLen.toBinaryString\n        val nBitsSumLen\
    \ = nBitsSumLen.toBinaryString\n        val mBitsSumLen = mBitsSumLen.toBinaryString\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString\n        val nBitsSumLen = nBitsSumLen.toBinaryString\n\
    \        val mBitsSumLen = mBitsSumLen.toBinaryString\n        val nBitsSumLen\
    \ = nBitsSumLen.toBinaryString\n        val mBitsSumLen = mBitsSumLen.toBinaryString\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString\n        val nBitsSumLen = nBitsSumLen.toBinaryString\n\
    \        val mBitsSumLen = mBitsSumLen.toBinaryString\n        val nBitsSumLen\
    \ = nBitsSumLen.toBinaryString\n        val mBitsSumLen = mBitsSumLen.toBinaryString\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpu0jmr2cm.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpu0jmr2cm.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnBitsSumLen\e[0m = nBitsSumLen.toBinaryString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnBitsSumLen is already defined as \e[33mvalue\e[0m \e[35mnBitsSumLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu0jmr2cm.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmBitsSumLen\e[0m = mBitsSumLen.toBinaryString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmBitsSumLen is already defined as \e[33mvalue\e[0m \e[35mmBitsSumLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu0jmr2cm.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mnBitsSumLen\e[0m = nBitsSumLen.toBinaryString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnBitsSumLen is already defined as \e[33mvalue\e[0m \e[35mnBitsSumLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu0jmr2cm.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmBitsSumLen\e[0m = mBitsSumLen.toBinaryString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmBitsSumLen is already defined as \e[33mvalue\e[0m \e[35mmBitsSumLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote "
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumBits = nBitsSum.toBinaryString\n        val mBitsSumBits\
    \ = mBitsSum.toBinaryString\n        val nBitsSumBitsLen = nBitsSumBits.length\n\
    \        val mBitsSumBitsLen = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = n.toInt + m.toInt\n        val mBitsSumBitsSum = m.toInt + m.toInt\n     \
    \   val nBitsSumBitsSumLen = nBitsSumBitsSum.toBinaryString.length\n        val\
    \ mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n        val nBitsSumBitsSumBits\
    \ = nBitsSumBitsSum.toBinaryString\n        val mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n\
    \        val nBitsSumBitsSumBitsLen = nBitsSumBitsSumBits.length\n        val\
    \ mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n        val nBitsSumBitsSumBitsSum\
    \ = n.toInt + m.toInt + m.toInt\n        val mBitsSumBitsSumBitsSum = m.toInt\
    \ + m.toInt + m.toInt\n        val nBitsSumBitsSumBitsSumLen = nBitsSumBitsSumBitsSum.toBinaryString.length\n\
    \        val mBitsSumBitsSumBitsSumLen = mBitsSumBitsSumBitsSum.toBinaryString.length\n\
    \        val nBitsSumBitsSumBitsSumBits = nBitsSumBitsSumBitsSum.toBinaryString\n\
    \        val mBitsSumBitsSumBitsSumBits = mBitsSumBitsSumBitsSum.toBinaryString\n\
    \        val nBitsSumBitsSumBitsSumBitsLen = nBitsSumBitsSumBits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb0iv_yq7.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <\
    \ m) Left(s\"$n must be less than $m\")\n        else if (n == m) Right(n.toBinaryString)\n\
    \        else Left(s\"$n must be less than $m\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3m0o0j2v.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp3m0o0j2v.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzzgemtft.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpzzgemtft.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzzgemtft.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nToM : Long = n - m\n        if (nToM < 0) Left(s\"$n\
    \ is greater than $m\")\n        else if (nToM == 0) Right(m)\n        else Left(s\"\
    $n is greater than $m and cannot be averaged\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjpqgl1c6.scala:24)\n\tat Problem.main(tmpjpqgl1c6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = binary(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqha1v93c.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqha1v93c.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:25:25 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val binary = avg.toBinaryString\n        val result = Right(binary.padToLength(4,\
    \ \"0\"))\n        if (sum > m) Left(s\"$sum > $m\")\n        else result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplajrgu12.scala:21:34 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = Right(binary.padToLength(\e\
    [31m4\e[0m, \e[31m\"0\"\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           value padToLength\
    \ is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(-1)\n        else Right(scala.math.round(n1/m1)*m1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3zv436cf.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(n1 > m1)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                         Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = binary(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqha1v93c.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqha1v93c.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:25:25 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else Right(round(n1 / m1) *\
    \ m1)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzrws3wm7.scala:24)\n\tat Problem.main(tmpzrws3wm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = n.toDouble / (m.toDouble - n.toDouble)\n      \
    \  val bin = Integer.toBinaryString(Math.round(avg))\n        if (bin.length <\
    \ m.toString.length) Right(bin)\n        else Left(s\"$bin is too large for $m\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwteio64c.scala:19:52\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(Math.round(avg))\n\e[31m\e[31m   |\e[0m         \
    \                                           ^^^\e[0m\n\e[31m   |\e[0m        \
    \                                        Found:    (avg : Double)\n\e[31m   |\e\
    [0m                                                Required: Float\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwteio64c.scala:20:50 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (bin.length < m.toString.length)\
    \ Right(bin)\n\e[31m\e[31m   |\e[0m                                          \
    \        ^^^\e[0m\n\e[31m   |\e[0m                                           \
    \     Found:    (bin : String)\n\e[31m   |\e[0m                              \
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) {\n            Right(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = Integer.toBinaryString(avg)\n\
    \            Right(binary)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsod4jsxk.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpsod4jsxk.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpsod4jsxk.scala:26:18 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            Right(binary)\n\e[31m\e[31m   |\e[0m         \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (binary : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = ((n + m) / 2).round\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < n) Left(bin)\n        else Right(avg)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8zbwtzn1.scala:19:41\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(s\"$n is greater than $m\")\n        } else {\n     \
    \       val sum = n.toLong + m.toLong\n            val avg = sum / 2\n       \
    \     val bin = Integer.toBinaryString(avg)\n            Right(bin)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkracpfgr.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpkracpfgr.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkracpfgr.scala:26:18 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m            \
    \      ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\e\
    [31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = n.toDouble / (m.toDouble - n.toDouble)\n      \
    \  val bin = math.round(avg).toBinaryString\n        if (bin.length < m.toString.length)\
    \ Left(bin) else Right(bin)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp97_oeohp.scala:20:65\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (bin.length\
    \ < m.toString.length) Left(bin) \e[33melse\e[0m Right(bin)\n\e[31m\e[31m   |\e\
    [0m                                                                 ^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (bin\
    \ : String)\n\e[31m   |\e[0m                                                Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqmxqlzfz.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqmxqlzfz.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqmxqlzfz.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqmxqlzfz.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(-1)\n        else Right((n1 + m1)/2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpufl08gs9.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(n1 > m1)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                         Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else Right(n.toBinaryString+m.toBinaryString)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyj_38tsk.scala:21:19\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m Right(n.toBinaryString+m.toBinaryString)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   Found:    String\n\e[31m   |\e[0m          \
    \         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) Left(-1)\n        else Right(n.toBinaryString() + m.toBinaryString())\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjecmyvu9.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpjecmyvu9.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjecmyvu9.scala:20:24 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (n > m) Left(-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m                \
    \        Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                    \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nToM = (n to m).toList\n        val nToMSum = n.toLong\
    \ + m.toLong\n        val nToMCount = nToMSum.toLong\n        val nToMSumInt =\
    \ nToMSum.toInt\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCount = nToMCount.toInt\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmbtiozs.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnToMCount\e[0m = nToMCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnToMCount is already defined as \e[33mvalue\e[0m \e[35mnToMCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsmbtiozs.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mnToMSumBin\e[0m = Integer.toBinaryString(nToMSumInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMSumBin is already defined as \e[33mvalue\e[0m \e[35mnToMSumBin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsmbtiozs.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnToMCountBin\e[0m = Integer.toBinaryString(nToMCount)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMCountBin is already defined as \e[33mvalue\e[0m \e[35mnToMCountBin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsmbtiozs.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mnToMSumBin\e[0m = Integer.toBinaryString(nToMSumInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMSumBin is already defined as \e[33mvalue\e[0m \e[35mnToMSumBin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsmbtiozs.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mnToMCountBin\e[0m = Integer.toBinaryString(nToMCount)\n\
    \e[31m\e[31"
  stdout: ''
  timestamp: 1659798042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val ns = n.toString.toInt\n        val ms = m.toString.toInt\n\
    \        if(ns > ms) Left(s\"$ns is greater than $ms\")\n        else Right(math.round(ns.toDouble\
    \ / (ms.toDouble - ns).toInt).toBinaryString)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7gsax8ol.scala:21:70\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m Right(math.round(ns.toDouble\
    \ / (ms.toDouble - ns).toInt).toBinaryString)\n\e[31m\e[31m   |\e[0m         \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    String\n\e[31m   |\e[0m     \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzzgemtft.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpzzgemtft.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzzgemtft.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else Right(round(n1 / m1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmt6w8mgg.scala:24)\n\tat Problem.main(tmpmt6w8mgg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        val right = bin.dropRight(1)\n\
    \        val left = bin.drop(1)\n        val result = if (right == left) Right(avg)\
    \ else Left(s\"$avg does not divide into $n and $m\")\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprvqb4tme.scala:20:41\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = Integer.toBinaryString(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgq9k6gr4.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpgq9k6gr4.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpgq9k6gr4.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) Left(-1)\n        else Right(math.ceil((n + m) / 2.0).toBinaryString)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2zci6hj7.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp2zci6hj7.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp2zci6hj7.scala:20:25 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (n >= m) Left(-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                         ^^\e[0m\n\e[31m   |\e[0m               \
    \          Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                  \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2zci6hj7.scala:21:44 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33melse\e[0m Right(math.ceil((n + m) / \e[31m2.0\e[0m).toBinaryString)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toBinaryString is not a member of\
    \ Double\n4 errors found\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val binary = Integer.toBinaryString(avg)\n        if (binary.length <\
    \ m) Left(s\"$binary is too short\")\n        else if (binary.length > m) Right(-1)\n\
    \        else Right(binary)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmrih_vi8.scala:20:44\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                       ^^^\e[0m\n\e[31m   |\e[0m                            \
    \                Found:    (avg : Long)\n\e[31m   |\e[0m                     \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmrih_vi8.scala:23:19 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33melse\e[0m Right(binary)\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^\e[0m\n\e[31m   |\e[0m                   Found:  \
    \  (binary : String)\n\e[31m   |\e[0m                   Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nBits = n.toBinaryString.length\n        val mBits =\
    \ m.toBinaryString.length\n        val nBitsDiff = mBits - nBits\n        val\
    \ nBitsDiffBits = nBits - nBitsDiff \n        val mBitsDiffBits = mBits - mBitsDiff\
    \ \n        val nBitsDiffBitsBits = nBitsDiff - nBitsDiffBits \n        val mBitsDiffBitsBits\
    \ = mBitsDiff - mBitsDiffBits \n        val nBitsDiffBitsBitsBits = nBitsDiffBits\
    \ - nBitsDiffBitsBits \n        val mBitsDiffBitsBitsBits = mBitsDiffBits - mBitsDiffBitsBits\
    \ \n        val nBitsDiffBitsBitsBitsBits = nBitsDiffBitsBits - nBitsDiffBitsBitsBits\
    \ \n        val mBitsDiffBitsBitsBitsBits = mBitsDiffBitsBits - mBitsDiffBitsBitsBits\
    \ \n        val nBitsDiffBitsBitsBitsBitsBits = nBitsDiffBitsBitsBits - nBitsDiffBitsBitsBitsBits\
    \ \n        val mBitsDiffBitsBitsBitsBitsBits = mBitsDiffBitsBitsBits - mBitsDiffBitsBitsBitsBits\
    \ \n        val nBitsDiffBitsBitsBitsBitsBitsBits = nBitsDiffBitsBitsBitsBits\
    \ - nBitsDiffBitsBitsBitsBitsBits \n        val mBitsDiffBitsBitsBitsBitsBitsBitsBits\
    \ = mBitsDiffBitsBitsBitsBits - mBitsDiffBitsBitsBitsBitsBits \n        val nBitsDiffBitsBitsBitsBitsBitsBitsBits\
    \ = nBitsDiffBitsBitsBitsBits - nBitsDiffBitsBitsBitsBitsBits \n        val mBitsDiffBitsBitsBitsBitsBitsBitsBitsBits\
    \ = mBitsDiffBitsBitsBitsBits - mBitsDiffBitsBitsBitsBits \n        val nBitsDiffBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = nBitsDiffBit\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4xmge2_7.scala:22:36 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmBitsDiffBits\e[0m = mBits\
    \ - mBitsDiff \n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: mBitsDiff\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4xmge2_7.scala:24:32\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mmBitsDiffBitsBits\e[0m = mBitsDiff - mBitsDiffBits \n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   Not found: mBitsDiff\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4xmge2_7.scala:35:60 ------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mnBitsDiffBitsBitsBitsBitsBitsBitsBitsBitsBits\e\
    [0m = nBitsDiffBit\n\e[31m\e[31m   |\e[0m                                    \
    \                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                               Not found: nBitsDiffBit\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4xmge2_7.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Either[String, Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = binary(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9b556b8q.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp9b556b8q.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9b556b8q.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9b556b8q.scala:25:25 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if (n1\
    \ > m1) {\n            Left(-1)\n        } else {\n            val n2 = n1.toInt\n\
    \            val m2 = m1.toInt\n            val sum = n2 + m2\n            val\
    \ avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n         \
    \   Right(bin)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezzvkz4.scala:21:17\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezzvkz4.scala:28:18\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            Right(bin)\n\e[31m\e\
    [31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (bin : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) Left(-1)\n        else if (n == m) Right(n.toBinaryString)\n        else\
    \ {\n            val mid = (n + m) / 2\n            val left = roundedAvg(n, mid)\n\
    \            val right = roundedAvg(mid, m)\n            left.fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))(Right(_))\n\
    \                .fold(Right(-1))(Right(_))\n                .fold(Right(-1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkdhx1bfs.scala:84:0 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkdhx1bfs.scala:18:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = n.toInt\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkdhx1bfs.scala:19:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = m.toInt\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkdhx1bfs.scala:26:27\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            left.fold(Right(-\e\
    [31m1\e[0m))(Right(_))\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Right[Nothing, Int]\n\e[31m\
    \   |\e[0m                      Required: String => Any\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpkdhx1bfs.scala:83:1 ---------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Either[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- Warning: /tmp/tmpkdhx1bfs.scala:68:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m68 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659798050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nToM = (n to m).toList\n        val nToM2 = nToM.filter(_\
    \ > 0)\n        val nToM3 = nToM2.filter(_ > 1)\n        val nToM4 = nToM3.filter(_\
    \ > 2)\n        val nToM5 = nToM4.filter(_ > 3)\n        val nToM6 = nToM5.filter(_\
    \ > 4)\n        val nToM7 = nToM6.filter(_ > 5)\n        val nToM8 = nToM7.filter(_\
    \ > 6)\n        val nToM9 = nToM8.filter(_ > 7)\n        val nToM10 = nToM9.filter(_\
    \ > 8)\n        val nToM11 = nToM10.filter(_ > 9)\n        val nToM12 = nToM11.filter(_\
    \ > 10)\n        val nToM13 = nToM12.filter(_ > 11)\n        val nToM14 = nToM13.filter(_\
    \ > 12)\n        val nToM15 = nToM14.filter(_ > 13)\n        val nToM16 = nToM15.filter(_\
    \ > 14)\n        val nToM17 = nToM16.filter(_ > 15)\n        val nToM18 = nToM17.filter(_\
    \ > 16)\n        val nToM19 = nToM18.filter(_ > 17)\n        val nToM20 = nToM19.filter(_\
    \ > 18)\n        val nToM21 = nToM20.filter(_ > 19)\n        val nToM22 = nToM21.filter(_\
    \ > 20)\n        val nToM23 = nToM22.filter(_ > 21)\n        val nToM24 = nToM23.filter(_\
    \ > 22)\n        val nToM25 = nToM24.filter(_ > 23)\n        val nToM26 = nToM25.filter(_\
    \ > 24)\n        val nToM27 = nToM26.filter(_ > 25)\n        val nToM28 = nToM27.filter(_\
    \ > 26)\n        val nToM29 = nToM28.filter(_ > 27)\n        val nToM30 = nToM29.filter(_\
    \ > 28)\n        val nToM31 = nToM30.filter(_ > 29)\n        val nToM32 = nToM31.filter(_\
    \ > 30)\n        val nToM33 = nToM32.filter(_ > 31)\n        val nToM34 = nToM33.filter(_\
    \ > \n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp87kdaxv9.scala:51:38 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mnToM34\e[0m = nToM33.filter(_\
    \ > \n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m\
    \   |\e[0m                                      expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp87kdaxv9.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nMinusM = n - m\n        if (nMinusM < 0) Left(s\"$n\
    \ is greater than $m\")\n        else if (nMinusM == 0) Right(n)\n        else\
    \ Right(round(nMinusM.toDouble).toBinaryString)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfgejbm_u.scala:21:43\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m Right(round(nMinusM.toDouble).toBinaryString)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    String\n\e[31m   |\e[0m     \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <=\
    \ m) Right(n.toBinaryString)\n        else if (n > m) Left(-1)\n        else Right(n.toBinaryString\
    \ + m.toBinaryString)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpczsqqcy2.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpczsqqcy2.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpczsqqcy2.scala:21:29 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (n > m) Left(-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                             ^^\e[0m\n\e[31m   |\e\
    [0m                             Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e\
    [0m                             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = binary(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqha1v93c.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqha1v93c.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:25:25 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) {\n            Left(s\"$n is greater than $m\")\n        } else {\n  \
    \          val n2 = n1.toInt\n            val m2 = m1.toInt\n            val sum\
    \ = (n2 + m2)/2\n            val bin = sum.toBinaryString\n            Right(bin)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsva8pubd.scala:27:18\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            Right(bin)\n\e[31m\e\
    [31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (bin : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n\
    \            Left(s\"$bin is too small\")\n        } else {\n            Right(avg)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp0wy41su.scala:20:41\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(-1)\n        else Right(round(n1 / m1) * m1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0kq_tdv2.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(n1 > m1)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                         Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) Left(-1)\n        else Right(n.toBinaryString.padLeft(m.toBinaryString.length,\
    \ \"0\") + m.toBinaryString)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptyqesiml.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmptyqesiml.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmptyqesiml.scala:20:24 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (n > m) Left(-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m                \
    \        Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                    \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if (n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else if (n1 < m1) Right(-1)\n\
    \        else Right((n1 until m1).sum / 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl5flqeoz.scala:25)\n\tat Problem.main(tmpl5flqeoz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.padToLength(4, '0'))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsiexxtpl.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpsiexxtpl.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpsiexxtpl.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < m.toString.length)\
    \ Left(bin) else Right(avg)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9jlvua4y.scala:20:41\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798050
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else Right((n1 + m1)/2)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp45t837ro.scala:24)\n\tat Problem.main(tmp45t837ro.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nMinusM = n - m\n        val nMinusMInt = nMinusM.toInt\n\
    \        val nMinusMIntBin = Integer.toBinaryString(nMinusMInt)\n        val nMinusMIntBinLen\
    \ = nMinusMIntBin.length\n        val nMinusMIntBinLenMinusOne = nMinusMIntBinLen\
    \ - 1\n        val nMinusMIntBinLenMinusOneInt = nMinusMIntBinLenMinusOne.toInt\n\
    \        val nMinusMIntBinLenMinusOneIntBin = Integer.toBinaryString(nMinusMIntBinLenMinusOneInt)\n\
    \        val nMinusMIntBinLenMinusOneIntBinLen = nMinusMIntBinLenMinusOneIntBin.length\n\
    \        val nMinusMIntBinLenMinusOneIntBinLenMinusOne = nMinusMIntBinLenMinusOneIntBinLenMinusOne.toInt\n\
    \        val nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBin = Integer.toBinaryString(nMinusMIntBinLenMinusOneIntBinLenMinusOne)\n\
    \        val nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLen = nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLen.toInt\n\
    \        val nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOne = nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOne.toInt\n\
    \        val nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOneIntBin\
    \ = Integer.toBinaryString(nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOneIntBin)\n\
    \        val nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOneIntBinLen\
    \ = nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOneIntBinLen.toInt\n\
    \        val nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOne\
    \ = nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOne\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2ab4m0m2.scala:26:56 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnMinusMIntBinLenMinusOneIntBinLenMinusOne\e\
    [0m = nMinusMIntBinLenMinusOneIntBinLenMinusOne.toInt\n\e[31m\e[31m   |\e[0m \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \    Recursive \e[33mvalue\e[0m \e[35mnMinusMIntBinLenMinusOneIntBinLenMinusOne\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2ab4m0m2.scala:28:65\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLen\e[0m = nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLen.toInt\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLen\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2ab4m0m2.scala:29:73\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOne\e[0m = nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOne.toInt\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOne\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2ab4m0m2.scala:30:102\
    \ --------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOneIntBin\e[0m\
    \ = Integer.toBinaryString(nMinusMIntBinLenMinusOneIntBinLenMinusOneIntBinLenMinusOneIntBin)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                              ^\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659798051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = Integer.toBinaryString(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgq9k6gr4.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpgq9k6gr4.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpgq9k6gr4.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n\
    \            Right(bin)\n        } else {\n            Left(s\"$bin is not a valid\
    \ binary number\")\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxm0go7cr.scala:20:41\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxm0go7cr.scala:22:18 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m                  ^^^\e[0m\n\
    \e[31m   |\e[0m                  Found:    (bin : String)\n\e[31m   |\e[0m   \
    \               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val binary = Integer.toBinaryString(avg)\n        if (binary.length <\
    \ m.toString.length) {\n            Left(s\"$binary is too short\")\n        }\
    \ else {\n            Right(avg)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc2fi1q6f.scala:20:44\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                       ^^^\e[0m\n\e[31m   |\e[0m                            \
    \                Found:    (avg : Long)\n\e[31m   |\e[0m                     \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nToM = (n to m).toList\n        val nToMSum = n.toLong\
    \ + m.toLong\n        val nToMCount = nToMSum.toInt\n        val nToMSumInt =\
    \ nToMSum.toInt\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBinInt\
    \ = Integer.parseInt(nToMSumBin)\n        val nToMCountBinInt = Integer.parseInt(nToMCountBin)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBinInt = Integer.parseInt(nToMSumBin)\n\
    \        val nToMCountBinInt = Integer.parseInt(nToMCountBin)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBinInt = Integer.parseInt(nToMSumBin)\n        val nToMCountBinInt\
    \ = Integer.parseInt(nToMCountBin)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \        val nToMCountBin = Integer.toBinaryString(nToMCount)\n        val nToMSumBinInt\
    \ = Integer.parseInt(nToMSumBin)\n        val nToMCountBinInt = Integer.parseInt(nToMCountBin)\n\
    \        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin\
    \ = Integer.toBinaryString(nToMCount)\n        val nToMSumBinInt = Integer.parseInt(nToMSumBin)\n\
    \        val nToMCountBinInt = Integer.parseInt(nToMCountBin)\n        val nToMSumBin\
    \ = Integer.toBinaryString(nToMSumInt)\n        val nToMCountBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMSumBinInt = Integer.parseInt(nToMSumBin)\n        val nToMCountBinInt\
    \ = Integer.parseInt(nToMCountBin)\n        val nToMSumBin = Integer.toBinaryString(nToMSumInt)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi1kmm3po.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnToMSumBin\e[0m = Integer.toBinaryString(nToMSumInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMSumBin is already defined as \e[33mvalue\e[0m \e[35mnToMSumBin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi1kmm3po.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mnToMCountBin\e[0m = Integer.toBinaryString(nToMCount)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMCountBin is already defined as \e[33mvalue\e[0m \e[35mnToMCountBin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi1kmm3po.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mnToMSumBinInt\e[0m = Integer.parseInt(nToMSumBin)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMSumBinInt is already defined as \e[33mvalue\e[0m \e[35mnToMSumBinInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi1kmm3po.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mnToMCountBinInt\e[0m = Integer.parseInt(nToMCountBin)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMCountBinInt is already defined as \e[33mvalue\e[0m \e\
    [35mnToMCountBinInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpi1kmm3po.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnToMSumB"
  stdout: ''
  timestamp: 1659798058
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else Right(n + m - n1 - m1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp517ibjke.scala:24)\n\tat Problem.main(tmp517ibjke.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798060
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else Right((n1 + m1) / 2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwj70_sdb.scala:24)\n\tat Problem.main(tmpwj70_sdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if (n1\
    \ > m1) {\n            Left(-1)\n        } else {\n            val n2 = n1.toInt\n\
    \            val m2 = m1.toInt\n            val sum = n2.toLong + m2.toLong\n\
    \            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0kldghtu.scala:21:17\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0kldghtu.scala:27:45\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e\
    [36mbin\e[0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^\e[0m\n\e[31m   |\e[0m                  \
    \                           Found:    (avg : Long)\n\e[31m   |\e[0m          \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp0kldghtu.scala:28:18 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = n / (m + 1)\n        val bin = Integer.toBinaryString(avg)\n\
    \        val len = bin.length\n        if (len > 8) {\n            Right(bin.substring(0,\
    \ len - 8))\n        } else {\n            Left(s\"$bin is too large\")\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_2bsiiee.scala:19:41\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_2bsiiee.scala:22:31 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            Right(bin.substring(\e[31m0\e[0m, len - \e[31m8\e[0m))\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Found:    String\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nToM : Long = m - n\n        val nToMInt : Long = math.ceil(nToM/2)\n\
    \        val nToMIntBin = math.pow(2, math.ceil(nToMInt/2))\n        val nToMIntBinString\
    \ = Integer.toString(nToMIntBin)\n        val nToMIntBinString = nToMIntBinString.substring(0,\
    \ nToMIntBinString.length-1)\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \        val nToMIntBinStringLength = nToMIntBinString.length\n        val nToMIntBinStringLength\
    \ = nToMIntBinString.length\n        val nToMIntBinStringLength = nToMIntBinString.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg4_t5j45.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnToMIntBinString\e[0m =\
    \ nToMIntBinString.substring(\e[31m0\e[0m, nToMIntBinString.length-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMIntBinString is already defined as \e[33mvalue\e[0m \e\
    [35mnToMIntBinString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg4_t5j45.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnToMIntBinStringLength\e\
    [0m = nToMIntBinString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMIntBinStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mnToMIntBinStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg4_t5j45.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnToMIntBinStringLength\e\
    [0m = nToMIntBinString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMIntBinStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mnToMIntBinStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg4_t5j45.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnToMIntBinStringLength\e\
    [0m = nToMIntBinString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMIntBinStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mnToMIntBinStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n"
  stdout: ''
  timestamp: 1659798062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = binary(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqha1v93c.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqha1v93c.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:25:25 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = math.max(n.toInt, m.toInt)\n        val m = math.max(n.toInt,\
    \ m.toInt)\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val binary = Integer.toBinaryString(avg)\n        val result = if (binary\
    \ == \"\") -1 else Right(binary)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_ai78hle.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.max(n.toInt,\
    \ m.toInt)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_ai78hle.scala:19:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.max(n.toInt, m.toInt)\n\e[31m\e[31m   |\e[0m           \
    \              ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp_ai78hle.scala:19:34 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.max(n.toInt, m.toInt)\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \                           Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ai78hle.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Matchable)\n\
    \e[31m   |\e[0m        Required: Either[String, Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798061
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else Right(round(n1 / m1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmt6w8mgg.scala:24)\n\tat Problem.main(tmpmt6w8mgg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        val left = bin.substring(0,\
    \ bin.length - m.toString.length)\n        val right = bin.substring(bin.length\
    \ - m.toString.length)\n        val result = if (left == right) Left(left) else\
    \ Right(right)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxozj4w_1.scala:20:41\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxozj4w_1.scala:24:8 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e\
    [1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e[0m]\e[1m\e\
    [31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = ((n + m) / 2).round\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < 8) {\n            Left(s\"$bin is not a valid binary\
    \ number\")\n        } else {\n            Right(avg)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi9pjss4v.scala:19:41\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <=\
    \ m) Right(n.toBinaryString)\n        else Left(s\"$n is greater than $m\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2sg5xipw.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp2sg5xipw.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(-1)\n        else Right(n.toBinaryString.padLeft(m1.toBinaryString.length,\
    \ \"0\") + m1.toBinaryString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg3u8x6dh.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(n1 > m1)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                         Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpg3u8x6dh.scala:21:36 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m Right(n.toBinaryString.padLeft(m1.toBinaryString.length,\
    \ \e[31m\"0\"\e[0m) + m1.toBinaryString)\n\e[31m\e[31m   |\e[0m              \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value padLeft\
    \ is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659798062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = ((n + m) / 2)\n        val binary = avg.toBinaryString\n\
    \        if (binary.length < 8) {\n            Right(binary.padTo8(0))\n     \
    \   } else {\n            Left(s\"$binary too large\")\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu16h1vzh.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Right(binary.padTo8(\e[31m0\e[0m))\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       value padTo8 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659798061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <=\
    \ m) Right(n.toBinaryString)\n        else if (n > m) Left(-1)\n        else Right(n.toBinaryString\
    \ + m.toBinaryString)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpczsqqcy2.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpczsqqcy2.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpczsqqcy2.scala:21:29 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (n > m) Left(-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                             ^^\e[0m\n\e[31m   |\e\
    [0m                             Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e\
    [0m                             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nToM = (n to m).toList\n        val nToMSum = n.toLong\
    \ + m.toLong\n        val nToMSumAsString = nToMSum.toBinaryString\n        val\
    \ nToMSumAsLong = Long.parseLong(nToMSumAsString)\n        val nToMSumAsLongAsString\
    \ = nToMSumAsLong.toBinaryString\n        val nToMSumAsLongAsStringAsEither =\
    \ Right(nToMSumAsLongAsString) \n        val nToMSumAsLongAsStringAsEitherAsRight\
    \ = Right(nToMSumAsLongAsStringAsEither)\n        val nToMSumAsLongAsStringAsEitherAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRight)\n        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRight)\n        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRight)\n        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight)\n       \
    \ val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAs\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5kj3o8yd.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5kj3o8yd.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight\e[0m = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight\
    \ is already defined as \e[33mvalue\e[0m \e[35mnToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5kj3o8yd.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\e\
    [0m = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\
    \ is already defined as \e[33mvalue\e[0m \e[35mnToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5kj3o8yd.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\e\
    [0m = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzzgemtft.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpzzgemtft.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzzgemtft.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzzgemtft.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpzzgemtft.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzzgemtft.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = binary(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqha1v93c.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqha1v93c.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:25:25 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) Left(-1)\n        else if (n == m) Right(n.toBinaryString)\n        else\
    \ {\n            val mid = (n + m) / 2\n            val left = roundedAvg(n, mid)\n\
    \            val right = roundedAvg(mid, m)\n            left.fold(Right(-1))(Right(_))\n\
    \            right.fold(Left(-1))(Left(_))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7t5mc26m.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp7t5mc26m.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7t5mc26m.scala:20:24 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (n > m) Left(-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m                \
    \        Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                    \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7t5mc26m.scala:26:27\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            left.fold(Right(-\e\
    [31m1\e[0m))(Right(_))\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Right[Nothing, Int]\n\e[31m\
    \   |\e[0m                      Required: String => Any\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7t5mc26m.scala:27:27 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            right.fold(Left(-\e[31m1\e[0m))(Left(_))\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                    Found:    Left[Int, Nothing]\n\e[31m   |\e[0m           \
    \            Required: String => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659798062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = Integer.toBinaryString(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgq9k6gr4.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpgq9k6gr4.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpgq9k6gr4.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val avg = n / m\n\
    \            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuz0hwcjv.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpuz0hwcjv.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuz0hwcjv.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuz0hwcjv.scala:25:18 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nToM = (n to m).map(_.toInt)\n        val nToMSum = nToM.sum\n\
    \        val nToMCount = nToM.size\n        val nToMAvg = nToMSum / nToMCount\n\
    \        val nToMRound = math.round(nToMAvg).toBinaryString\n        val nToMRoundEither\
    \ = Right(nToMRound)\n        val mToN = (m to n).map(_.toInt)\n        val mToNSum\
    \ = mToN.sum\n        val mToNCount = mToN.size\n        val mToNAvg = mToNSum\
    \ / mToNCount\n        val mToNRound = math.round(mToNAvg).toBinaryString\n  \
    \      val mToNRoundEither = Right(mToNRound)\n        val nToMAndM = (nToM +\
    \ mToN).map(_.toInt)\n        val nToMAndMSum = nToMAndM.sum\n        val nToMAndMCount\
    \ = nToMAndM.size\n        val nToMAndMAvg = nToMAndMSum / nToMAndMCount\n   \
    \     val nToMAndMRound = math.round(nToMAndMAvg).toBinaryString\n        val\
    \ nToMAndMRoundEither = Right(nToMAndMRound)\n        val nToMAndMAndM = (nToMAndM\
    \ + mToN).map(_.toInt)\n        val nToMAndMAndMSum = nToMAndMAndM.sum\n     \
    \   val nToMAndMAndMCount = nToMAndMAndM.size\n        val nToMAndMAndMAvg = nToMAndMAndMSum\
    \ / nToMAndMAndMCount\n        val nToMAndMAndMRound = math.round(nToMAndMAndMAvg).toBinaryString\n\
    \        val nToMAndMAndMRoundEither = Right(nToMAndMAndMRound)\n        val nToMAndMAndMAndM\
    \ = (nToMAndMAndM + mToN).map(_.toInt)\n        val nToMAndMAndMAndMSum = nToMAndMAndMAndM.sum\n\
    \        val nToMAndMAndMAndMCount = nToMAndMAndMAndM.size\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdctp3vws.scala:30:29 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnToMAndM\e[0m = (nToM +\
    \ mToN).map(_.toInt)\n\e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of IndexedSeq[Int], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpdctp3vws.scala:46:5 ---------------------\e[0m\e\
    [0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Either[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <=\
    \ m) Right(n.toBinaryString)\n        else Left(s\"$n is greater than $m\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2sg5xipw.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp2sg5xipw.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else Right(n.toBinaryString.padLeft(m1.toBinaryString.length,\
    \ \"0\"))\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprnb_gonq.scala:21:36 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m Right(n.toBinaryString.padLeft(m1.toBinaryString.length,\
    \ \e[31m\"0\"\e[0m))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value padLeft is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) {\n            Right(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwiclk90a.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpwiclk90a.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpwiclk90a.scala:26:18 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m            \
    \      ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\e\
    [31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nToM = (n to m).toList\n        val nToM2 = nToM.filter(_\
    \ > 0)\n        val nToM3 = nToM2.filter(_ > 1)\n        val nToM4 = nToM3.filter(_\
    \ > 2)\n        val nToM5 = nToM4.filter(_ > 3)\n        val nToM6 = nToM5.filter(_\
    \ > 4)\n        val nToM7 = nToM6.filter(_ > 5)\n        val nToM8 = nToM7.filter(_\
    \ > 6)\n        val nToM9 = nToM8.filter(_ > 7)\n        val nToM10 = nToM9.filter(_\
    \ > 8)\n        val nToM11 = nToM10.filter(_ > 9)\n        val nToM12 = nToM11.filter(_\
    \ > 10)\n        val nToM13 = nToM12.filter(_ > 11)\n        val nToM14 = nToM13.filter(_\
    \ > 12)\n        val nToM15 = nToM14.filter(_ > 13)\n        val nToM16 = nToM15.filter(_\
    \ > 14)\n        val nToM17 = nToM16.filter(_ > 15)\n        val nToM18 = nToM17.filter(_\
    \ > 16)\n        val nToM19 = nToM18.filter(_ > 17)\n        val nToM20 = nToM19.filter(_\
    \ > 18)\n        val nToM21 = nToM20.filter(_ > 19)\n        val nToM22 = nToM21.filter(_\
    \ > 20)\n        val nToM23 = nToM22.filter(_ > 21)\n        val nToM24 = nToM23.filter(_\
    \ > 22)\n        val nToM25 = nToM24.filter(_ > 23)\n        val nToM26 = nToM25.filter(_\
    \ > 24)\n        val nToM27 = nToM26.filter(_ > 25)\n        val nToM28 = nToM27.filter(_\
    \ > 26)\n        val nToM29 = nToM28.filter(_ > 27)\n        val nToM30 = nToM29.filter(_\
    \ > 28)\n        val nToM31 = nToM30.filter(_ > 29)\n        val nToM32 = nToM31.filter(_\
    \ > 30)\n        val nToM33 = nToM32.filter(_ > 31)\n        val nToM34 = nToM33.filter(_\
    \ > \n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp87kdaxv9.scala:51:38 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mnToM34\e[0m = nToM33.filter(_\
    \ > \n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m\
    \   |\e[0m                                      expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp87kdaxv9.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <=\
    \ m) {\n            Right(n.toBinaryString)\n        } else {\n            Left(-1)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzkfa7utg.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpzkfa7utg.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzkfa7utg.scala:23:17 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val binary = avg.toBinaryString\n        if (binary.length < 8) {\n \
    \           Left(s\"$binary\")\n        } else {\n            Right(binary.substring(binary.length\
    \ - 8))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9h0_yjwb.scala:24:34\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            Right(binary.substring(binary.length\
    \ - \e[31m8\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    String\n\e[31m   |\e[0m      \
    \            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798063
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val result = if (sum > 0) Right(avg) else Left(s\"$sum is not a positive\
    \ integer\")\n        result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7hwkiw2d.scala:24)\n\tat Problem.main(tmp7hwkiw2d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nMinusM : Long = n - m\n        val nMinusMInt : Long\
    \ = math.ceil(nMinusM.toDouble)\n        val nMinusMIntBin = math.pow(2, math.ceil(math.log(nMinusMInt,\
    \ 2)))\n        val nMinusMIntBinString = Integer.toString(nMinusMIntBin)\n  \
    \      val nMinusMIntBinStringLength = nMinusMIntBinString.length\n        val\
    \ nMinusMIntBinStringWithZeros = nMinusMIntBinString.padTo(\n            nMinusMIntBinStringLength,\
    \ \"0\"\n        )\n        val nMinusMIntBinStringWithZerosAndOnes = nMinusMIntBinStringWithZeros\
    \ + \"1\"\n        val nMinusMIntBinStringWithZerosAndOnesLength = nMinusMIntBinStringWithZerosAndOnes.length\n\
    \        val nMinusMIntBinStringWithZerosAndOnesWithZeros = nMinusMIntBinStringWithZerosAndOnes.padTo(\n\
    \            nMinusMIntBinStringWithZerosAndOnesLength, \"0\"\n        )\n   \
    \     val nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnes = nMinusMIntBinStringWithZerosAndOnesWithZeros\
    \ + \"1\"\n        val nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnesLength\
    \ = nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnes.length\n        val nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnesWithZeros\
    \ = nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnes.padTo(\n            nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnesLength,\
    \ \"0\"\n        )\n        val nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnesWithZerosAndOnes\
    \ = nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnesWithZeros + \"1\"\n   \
    \     val nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnesWithZerosAndOnesLength\
    \ = nMinusMIntBinStringWithZerosAndOnesWithZerosAndOnesWithZerosAndOnesLength\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxkx3atpv.scala:19:41\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnMinusMInt\e\
    [0m : \e[35mLong\e[0m = math.ceil(nMinusM.toDouble)\n\e[31m\e[31m   |\e[0m   \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                Found:    Double\n\e[31m   |\e[0m           \
    \                     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpxkx3atpv.scala:20:59 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnMinusMIntBin\e[0m = math.pow(\e\
    [31m2\e[0m, math.ceil(math.log(nMinusMInt, \e[31m2\e[0m)))\n\e[31m\e[31m   |\e\
    [0m                                                           ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    (Long, Int)\n\e[31m   |\e[0m                                            \
    \       Required: Double\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxkx3atpv.scala:21:51 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mnMinusMIntBinString\e[0m = Integer.toString(nMinusMIntBin)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Found:    (nMinusMIntBin\
    \ : Double)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxkx3atpv.scala:26:79\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mnMinusMIntBinStringWithZerosAndOnes\e[0m = nMinusMIntBinStringWithZeros +\
    \ \e[31m\"1\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is\
    \ not a member of IndexedSeq[Matchable], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659798065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else Right(n.toBinaryString+m.toBinaryString)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyj_38tsk.scala:21:19\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m Right(n.toBinaryString+m.toBinaryString)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   Found:    String\n\e[31m   |\e[0m          \
    \         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <\
    \ m) Left(-1)\n        else {\n            val sum = n.toLong + m.toLong\n   \
    \         val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpr7jch6dh.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpr7jch6dh.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpr7jch6dh.scala:20:24 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (n < m) Left(-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m                \
    \        Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                    \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr7jch6dh.scala:25:18\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            Right(bin)\n\e[31m\e\
    [31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (bin : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(-1)\n        else Right(math.round(n/m)*m)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnk8mkm2y.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(n1 > m1)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                         Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqmxqlzfz.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqmxqlzfz.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqmxqlzfz.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqmxqlzfz.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = (n + m)\
    \ / 2\n            val bin = sum.toBinaryString\n            val len = bin.length\n\
    \            val result = bin.take(len)\n            Right(result)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp833933a6.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp833933a6.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp833933a6.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val ns = n.toString.toInt\n        val ms = m.toString.toInt\n\
    \        if(ns > ms) Left(-1)\n        else Right(scala.math.round(ns.toDouble/ms))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp407le47l.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(ns > ms)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                         Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzzgemtft.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpzzgemtft.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzzgemtft.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nMinusM = (n - m).toInt\n        if (nMinusM < 0) Left(s\"\
    $n is greater than $m\")\n        else if (nMinusM == 0) Right(m)\n        else\
    \ Left(s\"$n is greater than $m, but $nMinusM does not divide $m\")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9l4su8gd.scala:24)\n\tat Problem.main(tmp9l4su8gd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = math.abs(n)\n        val m = math.abs(m)\n      \
    \  if (n > m) {\n            Left(-1)\n        } else {\n            val sum =\
    \ n.toLong + m.toLong\n            val avg = sum / 2\n            val bin = math.pow(10,\
    \ math.ceil(math.log10(avg)))\n            Right(bin.toLong)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqr_zun94.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.abs(n)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqr_zun94.scala:19:25 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.abs(m)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqr_zun94.scala:21:17 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                 ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = math.abs(n)\n        val m = math.abs(m)\n      \
    \  val sum = n to m by -1\n        val avg = sum.sum / sum.length\n        val\
    \ bin = math.pow(2,math.ceil(math.log2(avg)))\n        val rounded = math.round(avg\
    \ * bin) / bin\n        val result = Right(rounded)\n        if (n >= m) Left(-1)\n\
    \        else result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9g1klq3w.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.abs(n)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9g1klq3w.scala:19:25 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.abs(m)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9g1klq3w.scala:22:44 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbin\e[0m = math.pow(\e[31m2\e\
    [0m,math.ceil(math.log2(avg)))\n\e[31m\e[31m   |\e[0m                        \
    \               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \        value log2 is not a member of math\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9g1klq3w.scala:25:25 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mif\e[0m (n >= m) Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                         ^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                         Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nToM = (n to m).toList\n        val nToMSum = nToM.foldLeft(0l){\
    \ (sum, elem) => sum + elem}\n        val nToMCount = nToM.size\n        val nToMAvg\
    \ = nToMSum / nToMCount\n        val nToMBin = Integer.toBinaryString(nToMCount)\n\
    \        val nToMBinAvg = Integer.toBinaryString(nToMAvg)\n        val nToMBinSum\
    \ = Integer.toBinaryString(nToMSum)\n        val nToMBinCount = Integer.toBinaryString(nToMCount)\n\
    \        val nToMBinBin = Integer.toBinaryString(nToMCount)\n        val nToMBinBinAvg\
    \ = Integer.toBinaryString(nToMAvg)\n        val nToMBinBinSum = Integer.toBinaryString(nToMSum)\n\
    \        val nToMBinBinCount = Integer.toBinaryString(nToMCount)\n        val\
    \ nToMBinBinBin = Integer.toBinaryString(nToMCount)\n        val nToMBinBinBinAvg\
    \ = Integer.toBinaryString(nToMAvg)\n        val nToMBinBinBinSum = Integer.toBinaryString(nToMSum)\n\
    \        val nToMBinBinBinCount = Integer.toBinaryString(nToMCount)\n        val\
    \ nToMBinBinBinBin = Integer.toBinaryString(nToMCount)\n        val nToMBinBinBinAvg\
    \ = Integer.toBinaryString(nToMAvg)\n        val nToMBinBinBinSum = Integer.toBinaryString(nToMSum)\n\
    \        val nToMBinBinBinCount = Integer.toBinaryString(nToMCount)\n        val\
    \ nToMBinBinBinBin = Integer.toBinaryString(nToMCount)\n        val nToMBinBinBinAvg\
    \ = Integer.toBinaryString(nToMAvg)\n        val nToMBinBinBinSum = Integer.toBinaryString(nToMSum)\n\
    \        val nToMBinBinBinCount = Integer.toBinaryString(nToMCount)\n        val\
    \ nToMBinBinBinBin = Integer.toBinaryString(nToMCount)\n        val nToMBinBinBinAvg\
    \ = Integer.toBinaryString(nToMAvg)\n        val nToMBinBinBinSum = Integer.toBinaryString(nToMSum)\n\
    \        val nToM\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw98lkeel.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw98lkeel.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnToMBinBinBinAvg\e[0m = Integer.toBinaryString(nToMAvg)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnToMBinBinBinAvg is already defined as \e[33mvalue\e[0m \e[35mnToMBinBinBinAvg\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw98lkeel.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mnToMBinBinBinSum\e[0m = Integer.toBinaryString(nToMSum)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMBinBinBinSum is already defined as \e[33mvalue\e[0m \e\
    [35mnToMBinBinBinSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw98lkeel.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mnToMBinBinBinCount\e[0m\
    \ = Integer.toBinaryString(nToMCount)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMBinBinBinCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mnToMBinBinBinCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw98lkeel.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mnToMBinBinBinBin\e[0m =\
    \ Integer.toBinaryString(nToMCount)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMBinBinBinBin is already defined as \e[33mvalue\e[0m \e\
    [35mnToMBinBinBinBin\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659798073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(s\"$n is greater than $m\")\n        } else {\n     \
    \       val sum = n.toLong + m.toLong\n            val avg = sum / 2\n       \
    \     val bin = Integer.toBinaryString(avg)\n            Right(bin)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkracpfgr.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpkracpfgr.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkracpfgr.scala:26:18 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m            \
    \      ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\e\
    [31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nToM : Long = m - n\n        val nToMInt : Long = math.ceil(nToM.toDouble)\n\
    \        val nToMBin = Integer.toBinaryString(nToMInt)\n        val nToMBinLen\
    \ = nToMBin .length\n        val nToMBinLenMinusOne = nToMBinLen - 1\n       \
    \ val nToMBinLenMinusOneDouble = nToMBinLenMinusOne * 2.0\n        val nToMBinLenMinusOneDoubleDouble\
    \ = nToMBinLenMinusOneDouble * 2.0\n        val nToMBinLenMinusOneDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDouble * 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDouble * 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDouble * 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDouble * 2.0\n        val\
    \ nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDouble = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ * 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble * 2.0\n\
    \        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble *\
    \ 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble *\
    \ 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ * 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ * 2.0\n        val nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = nToMBinLenMinusOneDoubleDouble\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvaonp0sq.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDouble\e\
    [0m = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDouble * \e[31m2.0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDouble is\
    \ already defined as \e[33mvalue\e[0m \e[35mnToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDouble\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvaonp0sq.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mnToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\e\
    [0m = nToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ * \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ is already defined as \e[33mvalue\e[0m \e[35mnToMBinLenMinusOneDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpvaonp0sq.scala:19:38 --------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnToMInt\e[0m : \e[35mLong\e[0m = math.ceil(nToM.toDouble)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Found:    Double\n\e[31m   |\e[0m\
    \                             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvaonp0sq.scala"
  stdout: ''
  timestamp: 1659798074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = ((n + m) / 2).round\n        val binary = avg.toBinaryString\n\
    \        if (binary.length < 8) {\n            Left(s\"$binary\")\n        } else\
    \ {\n            Right(avg)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptyefgp0n.scala:27)\n\tat Problem.main(tmptyefgp0n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = math.ceil(n)\n        val m = math.ceil(m)\n    \
    \    if (n > m) {\n            Left(s\"$n is greater than $m\")\n        } else\
    \ {\n            val avg = n + (m - n) / 2\n            Right(math.ceil(avg).toBinaryString)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpku7lecn0.scala:18:26 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.ceil(n)\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpku7lecn0.scala:19:26 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.ceil(m)\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpku7lecn0.scala:24:33 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            Right(math.ceil(avg).toBinaryString)\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value toBinaryString is not a member of Double\n3\
    \ errors found\n"
  stdout: ''
  timestamp: 1659798073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val binary = binary(avg)\n        val result = if (sum > 0) Right(binary)\
    \ else Left(s\"$sum is not a positive integer\")\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4h4ttmj_.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        val result = if (bin.length\
    \ == 1) \"0b\" + bin else bin\n        Right(result)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4kx9qau9.scala:20:41\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4kx9qau9.scala:22:14 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        Right(result)\n\e[31m\e[31m   |\e[0m              ^^^^^^\e[0m\n\
    \e[31m   |\e[0m              Found:    (result : String)\n\e[31m   |\e[0m    \
    \          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.padToLength(n + m.toInt, 0).toLong)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw4egvj5r.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpw4egvj5r.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpw4egvj5r.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = (n to m).map(i\
    \ => i.toLong).sum\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7nikdoll.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp7nikdoll.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7nikdoll.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7nikdoll.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val ns = n.toString.toInt\n        val ms = m.toString.toInt\n\
    \        if(ns > ms) Left(s\"$ns is greater than $ms\")\n        else Right(math.round(n/m)*m)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpom27j14j.scala:24)\n\tat Problem.main(tmpom27j14j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = n.toDouble / (m.toDouble - n.toDouble)\n      \
    \  val bin = math.round(avg).toBinaryString\n        if (bin.length < m.toString.length)\
    \ Left(bin) else Right(bin)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp97_oeohp.scala:20:65\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (bin.length\
    \ < m.toString.length) Left(bin) \e[33melse\e[0m Right(bin)\n\e[31m\e[31m   |\e\
    [0m                                                                 ^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (bin\
    \ : String)\n\e[31m   |\e[0m                                                Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val avg = ((n + m)\
    \ / 2).round\n            val binary = binary(avg)\n            Right(binary.toLong)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_d35ynst.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp_d35ynst.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_d35ynst.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_d35ynst.scala:24:25 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.charAt(bin.length\
    \ - 1) == '1') Right(avg) else Left(s\"$sum is not a multiple of 2\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7vmdyake.scala:20:41\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <\
    \ m) Left(s\"$n is less than $m\")\n        else if (n == m) Right(n.toBinaryString)\n\
    \        else Left(s\"$n is greater than $m\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpouplk256.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpouplk256.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nToM = (n to m).toList\n        val nToMSum = n.toLong\
    \ + m.toLong\n        val nToMSumAsString = nToMSum.toBinaryString\n        val\
    \ nToMSumAsLong = Long.parseLong(nToMSumAsString)\n        val nToMSumAsLongAsString\
    \ = nToMSumAsLong.toBinaryString\n        val nToMSumAsLongAsStringAsEither =\
    \ Right(nToMSumAsLongAsString) \n        val nToMSumAsLongAsStringAsEitherAsRight\
    \ = Right(nToMSumAsLongAsStringAsEither)\n        val nToMSumAsLongAsStringAsEitherAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRight)\n        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRight)\n        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRight)\n        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight)\n       \
    \ val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\
    \ = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \        val nToMSumAsLongAs\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5kj3o8yd.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5kj3o8yd.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight\e[0m = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight\
    \ is already defined as \e[33mvalue\e[0m \e[35mnToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5kj3o8yd.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\e\
    [0m = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\
    \ is already defined as \e[33mvalue\e[0m \e[35mnToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5kj3o8yd.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight\e\
    [0m = Right(nToMSumAsLongAsStringAsEitherAsRightAsRightAsRightAsRightAsRight)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nMinusM = n - m\n        val nPlusM = n + m\n       \
    \ val nMinusMPlusM = nMinusM + nPlusM\n        val nMinusMPlusMMinusM = nMinusM\
    \ - nPlusM - m\n        val nMinusMPlusMMinusMPlusM = nMinusM - nPlusM - m - m\n\
    \        val nMinusMPlusMMinusMPlusMMinusM = nMinusM - nPlusM - m - m - m\n  \
    \      val nMinusMPlusMMinusMPlusMMinusMPlusM = nMinusM - nPlusM - m - m - m -\
    \ m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusM = nMinusM - nPlusM -\
    \ m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m - m - m - m - m\n        val\
    \ nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = nMin\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp83nodo0m.scala:32:104 -----------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM\e\
    [0m = nMin\n\e[31m\e[31m   |\e[0m                                            \
    \                                                            ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                         Not found:\
    \ nMin\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp83nodo0m.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <=\
    \ m) Right(n.toBinaryString)\n        else Left(s\"$n is greater than $m\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2sg5xipw.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp2sg5xipw.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <\
    \ m) Left(s\"$n is less than $m\")\n        else if (n == m) Right(n.toBinaryString)\n\
    \        else Right(-1l)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3dkzh3ot.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp3dkzh3ot.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nMinusM = (n - m).toInt\n        val nPlusM = (n + m).toInt\n\
    \        val nMinusMPlusM = (nMinusM + m).toInt\n        val nMinusMPlusMMinusM\
    \ = (nMinusM - m).toInt\n        val nMinusMPlusMMinusMPlusM = (nMinusM - m +\
    \ m).toInt\n        val nMinusMPlusMMinusMPlusMMinusM = (nMinusM - m - m - m).toInt\n\
    \        val nMinusMPlusMMinusMPlusMMinusMMinusM = (nMinusM - m - m - m - m -\
    \ m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM = (nMinusM -\
    \ m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m - m - m - m - m - m).toInt\n        val nMinusMPlusMMinusMPlusMMinusMMinus\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa5nc6sm0.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa5nc6sm0.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnMinusMPlusMMinusMPlusMMinusMMinusMMinusM\e[0m = (nMinusM - m - m - m\
    \ - m - m - m - m).toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnMinusMPlusMMinusMPlusMMinusMMinusMMinusM is already defined\
    \ as \e[33mvalue\e[0m \e[35mnMinusMPlusMMinusMPlusMMinusMMinusMMinusM\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpa5nc6sm0.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mnMinusMPlusMMinusMPlusMMinusMMinusMMinusM\e\
    [0m = (nMinusM - m - m - m - m - m - m - m).toInt\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnMinusMPlusMMinusMPlusMMinusMMinusMMinusM is already defined\
    \ as \e[33mvalue\e[0m \e[35mnMinusMPlusMMinusMPlusMMinusMMinusMMinusM\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpa5nc6sm0.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mnMinusMPlusMMinusMPlusMMinusMMinusMMinusM\e\
    [0m = (nMinusM - m - m - m - m - m - m - m).toInt\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnMinusMPlusMMinusMPlusMMinusMMinusMMinusM is already defined\
    \ as \e[33mvalue\e[0m \e[35mnMinusMPlusMMinusMPlusMMinusMMinusMMinusM\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161"
  stdout: ''
  timestamp: 1659798074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = binary(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqha1v93c.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqha1v93c.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqha1v93c.scala:25:25 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = math.max(n.toInt, m.toInt)\n        val m = math.min(n.toInt,\
    \ m.toInt)\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        val right = bin.dropRight(1)\n\
    \        val left = bin.drop(1)\n        val result = if (right == left) Right(avg)\
    \ else Left(s\"$n $m\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv26ft8zk.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.max(n.toInt,\
    \ m.toInt)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv26ft8zk.scala:19:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.min(n.toInt, m.toInt)\n\e[31m\e[31m   |\e[0m           \
    \              ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpv26ft8zk.scala:19:34 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.min(n.toInt, m.toInt)\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \                           Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = ((n + m) / 2.0).toInt\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < 8) {\n            Right(bin)\n        } else {\n   \
    \         Left(s\"$bin is not a valid binary number\")\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8m1mx6g_.scala:21:18\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Right(bin)\n\e[31m\e\
    [31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (bin : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqmxqlzfz.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqmxqlzfz.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqmxqlzfz.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqmxqlzfz.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = ((n + m) / 2).round\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < 8) {\n            Left(s\"$bin is too short\")\n   \
    \     } else if (bin.length > 8) {\n            Right(s\"$bin is too long\")\n\
    \        } else {\n            Right(avg)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgmgmy5f4.scala:19:41\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgmgmy5f4.scala:23:18 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            Right(\e[31ms\"\e[0m$bin\e[31m is too long\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \             Found:    String\n\e[31m   |\e[0m                  Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nMinusM = (n - m).toInt\n        if (nMinusM < 0) Left(s\"\
    $n is greater than $m\")\n        else if (nMinusM == 0) Right(m)\n        else\
    \ Left(s\"$n is greater than $m, but $nMinusM integers skipped\")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyhq1hs_x.scala:24)\n\tat Problem.main(tmpyhq1hs_x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = ((n + m) / 2).round\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < m) Left(s\"$avg cannot be represented as a binary string\
    \ of length $m\")\n        else if (bin.length > m) Right(-1)\n        else Right(bin)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm7md_pii.scala:19:41\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpm7md_pii.scala:22:19 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33melse\e[0m Right(bin)\n\e[31m\e[31m   |\e[0m            \
    \       ^^^\e[0m\n\e[31m   |\e[0m                   Found:    (bin : String)\n\
    \e[31m   |\e[0m                   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <=\
    \ m) Right(n.toBinaryString)\n        else Left(s\"$n is greater than $m\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2sg5xipw.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp2sg5xipw.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(-1)\n        else Right(n.toString.reverse.foldLeft(0)((sum, digit)\
    \ => sum + digit.toInt)/m1)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp29sbfpmo.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(n1 > m1)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                         Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <\
    \ m) Left(-1)\n        else {\n            val sum = n.toLong + m.toLong\n   \
    \         val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpr7jch6dh.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpr7jch6dh.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpr7jch6dh.scala:20:24 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (n < m) Left(-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m                \
    \        Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                    \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr7jch6dh.scala:25:18\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            Right(bin)\n\e[31m\e\
    [31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (bin : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(s\"$n is greater than $m\")\n        } else {\n     \
    \       val sum = (n to m).sum\n            val avg = sum / 2\n            val\
    \ bin = Integer.toBinaryString(avg)\n            Right(bin)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_t9a5m0b.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp_t9a5m0b.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_t9a5m0b.scala:26:18 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m            \
    \      ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\e\
    [31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqmxqlzfz.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqmxqlzfz.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqmxqlzfz.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqmxqlzfz.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = (n to m).sum\n\
    \            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx30k4uun.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpx30k4uun.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpx30k4uun.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx30k4uun.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = math.abs(n)\n        val m = math.abs(m)\n      \
    \  if (n > m) {\n            Left(-1)\n        } else {\n            val sum =\
    \ n.toLong + m.toLong\n            val avg = sum / 2\n            val bin = math.pow(10,\
    \ math.ceil(math.log10(avg)))\n            Right(bin.toLong)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqr_zun94.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.abs(n)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqr_zun94.scala:19:25 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.abs(m)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqr_zun94.scala:21:17 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                 ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        val sum\
    \ = n + m\n        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin == \"\") {\n            Right(bin)\n        } else if (bin ==\
    \ \"0\") {\n            Right(bin)\n        } else if (bin == \"1\") {\n     \
    \       Right(bin)\n        } else {\n            Left(s\"$bin is not a valid\
    \ binary number\")\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmh0iriu_.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpmh0iriu_.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmh0iriu_.scala:24:18 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m            \
    \      ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\e\
    [31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpmh0iriu_.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpmh0iriu_.scala:28:18 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659798083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nToM = (n to m).toList\n        val nToM2 = (nToM zip\
    \ nToM).filter(_._2 > 0).map(_._1)\n        val nToM3 = nToM2.foldLeft(0l) { (sum,\
    \ v) => sum + v }\n        val nToM4 = nToM3 / 2\n        val nToM5 = nToM4 /\
    \ 2\n        val nToM6 = nToM5 / 2\n        val nToM7 = nToM6 / 2\n        val\
    \ nToM8 = nToM7 / 2\n        val nToM9 = nToM8 / 2\n        val nToM10 = nToM9\
    \ / 2\n        val nToM11 = nToM10 / 2\n        val nToM12 = nToM11 / 2\n    \
    \    val nToM13 = nToM12 / 2\n        val nToM14 = nToM13 / 2\n        val nToM15\
    \ = nToM14 / 2\n        val nToM16 = nToM15 / 2\n        val nToM17 = nToM16 /\
    \ 2\n        val nToM18 = nToM17 / 2\n        val nToM19 = nToM18 / 2\n      \
    \  val nToM20 = nToM19 / 2\n        val nToM21 = nToM20 / 2\n        val nToM22\
    \ = nToM21 / 2\n        val nToM23 = nToM22 / 2\n        val nToM24 = nToM23 /\
    \ 2\n        val nToM25 = nToM24 / 2\n        val nToM26 = nToM25 / 2\n      \
    \  val nToM27 = nToM26 / 2\n        val nToM28 = nToM27 / 2\n        val nToM29\
    \ = nToM28 / 2\n        val nToM30 = nToM29 / 2\n        val nToM31 = nToM30 /\
    \ 2\n        val nToM32 = nToM31 / 2\n        val nToM33 = nToM32 / 2\n      \
    \  val nToM34 = nToM33 / 2\n        val nToM35 = nToM34 / 2\n        val nToM36\
    \ = nToM35 / 2\n        val nToM37 = nToM36 / 2\n        val nToM38 = n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi9rxb5ze.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val avg = ((n + m) / 2)\n        val binary = avg.toBinaryString\n\
    \        if (binary.length < 2) Right(binary.padToLength(2, \"0\"))\n        else\
    \ Left(s\"$binary\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpep4h23j9.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (binary.length < \e[31m2\e[0m)\
    \ Right(binary.padToLength(\e[31m2\e[0m, \e[31m\"0\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             value padToLength is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = math.abs(n)\n        val m = math.abs(m)\n      \
    \  val sum = n + m\n        val avg = sum / 2\n        val bin = math.pow(2,math.ceil(math.log2(avg)))\n\
    \        val result = math.round(avg * bin)\n        val result = math.abs(result)\n\
    \        if (result > m) Left(-1)\n        else Right(result)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn0r_cn0a.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = math.abs(result)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn0r_cn0a.scala:18:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = math.abs(n)\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mn\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn0r_cn0a.scala:19:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.abs(m)\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mm\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn0r_cn0a.scala:22:44\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mbin\e[0m = math.pow(\e[31m2\e[0m,math.ceil(math.log2(avg)))\n\e[31m\e[31m\
    \   |\e[0m                                       ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                      value log2 is not a member of math\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn0r_cn0a.scala:25:29 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (result > m) Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                             ^^\e[0m\n\e[31m   |\e[0m   \
    \                          Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m  \
    \                           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659798084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqmxqlzfz.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpqmxqlzfz.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqmxqlzfz.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqmxqlzfz.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsLenMinusOne = nBitsLen - 1\n        val mBitsLenMinusOne = mBitsLen\
    \ - 1\n        val nBitsLenMinusOneBits = nBitsLen - 1 - 1\n        val mBitsLenMinusOneBits\
    \ = mBitsLen - 1 - 1\n        val nBitsLenMinusOneBitsBits = nBitsLen - 1 - 1\
    \ - 1\n        val mBitsLenMinusOneBitsBits = mBitsLen - 1 - 1 - 1\n        val\
    \ nBitsLenMinusOneBitsBitsBits = nBitsLen - 1 - 1 - 1 - 1\n        val mBitsLenMinusOneBitsBitsBits\
    \ = mBitsLen - 1 - 1 - 1 - 1\n        val nBitsLenMinusOneBitsBitsBitsBits = nBitsLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1\n        val mBitsLenMinusOneBitsBitsBitsBits = mBitsLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1\n        val nBitsLenMinusOneBitsBitsBitsBitsBits =\
    \ nBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val mBitsLenMinusOneBitsBitsBitsBitsBits\
    \ = mBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val nBitsLenMinusOneBitsBitsBitsBitsBitsBits\
    \ = nBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val mBitsLenMinusOneBitsBitsBitsBitsBitsBitsBits\
    \ = mBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val nBitsLenMinusOneBitsBitsBitsBitsBitsBitsBitsBits\
    \ = nBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val mBitsLenMinusOneBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = mBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val\
    \ nBitsLenMinusOneBitsBitsBitsBitsBitsBit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8m599pyr.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8m599pyr.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Either[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n <=\
    \ m) Right(n.toBinaryString)\n        else Left(s\"$n is greater than $m\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2sg5xipw.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp2sg5xipw.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nMinusM = (n - m).toInt\n        val nPlusM = (n + m).toInt\n\
    \        val nMinusMPlusM = (nMinusM + m).toInt\n        val nMinusMPlusMPlusM\
    \ = (nMinusMPlusM + m).toInt\n        val nMinusMPlusMPlusMPlusM = (nMinusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM\
    \ = (nMinusMPlusMPlusMPlusM + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM\
    \ = (nMinusMPlusMPlusMPlusM + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM\
    \ = (nMinusMPlusMPlusMPlusM + m).toInt\n        val nMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM\
    \ = (\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdqurtcur.scala:34:68 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM\e\
    [0m = (\n\e[31m\e[31m   |\e[0m                                               \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdqurtcur.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnMinusMPlusMPlusMPlusMPlusMPlusMPlusM\e\
    [0m = (nMinusMPlusMPlusMPlusM + m).toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnMinusMPlusMPlusMPlusMPlusMPlusMPlusM is already defined as\
    \ \e[33mvalue\e[0m \e[35mnMinusMPlusMPlusMPlusMPlusMPlusMPlusM\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdqurtcur.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM\e[0m = (nMinusMPlusMPlusMPlusM\
    \ + m).toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM is already defined\
    \ as \e[33mvalue\e[0m \e[35mnMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdqurtcur.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mnMinusMPlusMPlusMPlusMPlusMPlusMPlusMPlusMPlusM\e\
    [0m = (nMinusMPlusMPlusMPlusM + m).toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnMinusMPlusMPlusMPlusMPlusMPlusMPlusM"
  stdout: ''
  timestamp: 1659798083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val sum = n + m\n        val avg = sum / 2\n        val binary\
    \ = binary(avg)\n        if (binary == -1l) Left(s\"$avg cannot be represented\
    \ in binary\")\n        else Right(binary)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7igbspnv.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        val avg\
    \ = ((n + m) / 2)\n        val binary = avg.toBinaryString\n        val result\
    \ = Right(binary.toLong)\n        if (n > m) {\n            Left(s\"$n $m $avg\"\
    )\n        } else {\n            result\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkoz_ar_p.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpkoz_ar_p.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = Integer.toBinaryString(avg)\n\
    \            Right(binary)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuh_km1s0.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpuh_km1s0.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuh_km1s0.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuh_km1s0.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(binary)\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (binary\
    \ : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = Integer.toBinaryString(avg)\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgq9k6gr4.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpgq9k6gr4.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpgq9k6gr4.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = (n to m).foldLeft(0l){\
    \ (sum, num) => sum + num }\n            val avg = sum / m.toInt\n           \
    \ val bin = Integer.toBinaryString(avg)\n            Right(bin)\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5xojjlas.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5xojjlas.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5xojjlas.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5xojjlas.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzzgemtft.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpzzgemtft.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzzgemtft.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val avg = n.toDouble\
    \ / m.toDouble\n            val bin = math.ceil(avg).toBinaryString\n        \
    \    Right(bin)\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl48zz9ox.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpl48zz9ox.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpl48zz9ox.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpl48zz9ox.scala:24:37 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mbin\e[0m = math.ceil(avg).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      value toBinaryString is not a member of Double\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = binary(avg)\n\
    \            Right(binary.toInt)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7po7_8z1.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp7po7_8z1.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7po7_8z1.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7po7_8z1.scala:25:25 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = binary(avg)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        val sum\
    \ = n.toLong + m.toLong\n        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin == \"\") Right(avg)\n        else Left(bin)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnww_kyag.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpnww_kyag.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) Left(-1)\n        else Right((n+m)/2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9p52i42i.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp9p52i42i.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9p52i42i.scala:20:25 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (n >= m) Left(-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                         ^^\e[0m\n\e[31m   |\e[0m               \
    \          Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                  \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) Left(-1)\n        else Right(n.toBinaryString() + m.toBinaryString().reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpepz_8cvn.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpepz_8cvn.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpepz_8cvn.scala:20:24 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (n > m) Left(-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m                \
    \        Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                    \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nToM = (n+m)/2\n        val nToMBin = Integer.toBinaryString(nToM)\n\
    \        val nToMBinLen = nToMBin .length\n        val mToNBin = Integer.toBinaryString(m)\n\
    \        val mToNBinLen = mToNBin .length\n        val nToMBinLen = nToMBinLen\
    \ - mToNBinLen\n        val nToMBin = if (nToMBinLen < 0) \"0\" + nToMBin else\
    \ nToMBin\n        val mToNBin = if (mToNBinLen < 0) \"0\" + mToNBin else mToNBin\n\
    \        val nToMBin = if (nToMBinLen < 0) \"0\" + nToMBin else nToMBin\n    \
    \    val mToNBin = if (mToNBinLen < 0) \"0\" + mToNBin else mToNBin\n        val\
    \ nToMBin = if (nToMBinLen < 0) \"0\" + nToMBin else nToMBin\n        val mToNBin\
    \ = if (mToNBinLen < 0) \"0\" + mToNBin else mToNBin\n        val nToMBin = if\
    \ (nToMBinLen < 0) \"0\" + nToMBin else nToMBin\n        val mToNBin = if (mToNBinLen\
    \ < 0) \"0\" + mToNBin else mToNBin\n        val nToMBin = if (nToMBinLen < 0)\
    \ \"0\" + nToMBin else nToMBin\n        val mToNBin = if (mToNBinLen < 0) \"0\"\
    \ + mToNBin else mToNBin\n        val nToMBin = if (nToMBinLen < 0) \"0\" + nToMBin\
    \ else nToMBin\n        val mToNBin = if (mToNBinLen < 0) \"0\" + mToNBin else\
    \ mToNBin\n        val nToMBin = if (nToMBinLen < 0) \"0\" + nToMBin else nToMBin\n\
    \        val mToNBin = if (mToNBinLen < 0) \"0\" + mToNBin else mToNBin\n    \
    \    val nToMBin = if (nToMBinLen < 0) \"0\" + nToMBin else nToMBin\n        val\
    \ mToNBin = \n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi478_gno.scala:39:21 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mmToNBin\e[0m = \n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpi478_gno.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnToMBinLen\e[0m = nToMBinLen\
    \ - mToNBinLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMBinLen is already defined as \e[33mvalue\e[0m \e[35mnToMBinLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi478_gno.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnToMBin\e[0m = \e[33mif\e[0m (nToMBinLen\
    \ < \e[31m0\e[0m) \e[31m\"0\"\e[0m + nToMBin \e[33melse\e[0m nToMBin\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnToMBin is already defined as \e[33mvalue\e[0m \e[35mnToMBin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi478_gno.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmToNBin\e[0m = \e[33mif\e[0m (mToNBinLen\
    \ < \e[31m0\e[0m) \e[31m\"0\"\e[0m + mToNBin \e[33melse\e[0m mToNBin\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmToNBin is already defined as \e[33mvalue\e[0m \e[35mmToNBin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi478_gno.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnToMBin\e[0m = \e[33mif\e[0m (nToMBinLen\
    \ < \e[31m0\e[0m) \e[31m\"0\""
  stdout: ''
  timestamp: 1659798085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nMinusM = (n - m).toInt\n        if (nMinusM < 0) Left(s\"\
    $n is greater than $m\")\n        else if (nMinusM == 0) Right(m)\n        else\
    \ Left(s\"$n is greater than $m and cannot be averaged\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3om2bzlq.scala:24)\n\tat Problem.main(tmp3om2bzlq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5d2jx7ju.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5d2jx7ju.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:21:17 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \              ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5d2jx7ju.scala:26:18 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(-1)\n        else Right(scala.math.round(n1/m1)*m1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3zv436cf.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(n1 > m1)\
    \ Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                         Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumBits = nBitsSum.toBinaryString\n        val mBitsSumBits\
    \ = mBitsSum.toBinaryString\n        val nBitsSumBitsLen = nBitsSumBits.length\n\
    \        val mBitsSumBitsLen = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = n.toInt.toBinaryString\n        val mBitsSumBitsSum = m.toInt.toBinaryString\n\
    \        val nBitsSumBitsSumLen = nBitsSumBitsSum.length\n        val mBitsSumBitsSumLen\
    \ = mBitsSumBitsSum.length\n        val nBitsSumBitsSumBits = n.toInt.toBinaryString\n\
    \        val mBitsSumBitsSumBits = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n\
    \        val nBitsSumBitsSumBitsSum = n.toInt.toBinaryString\n        val mBitsSumBitsSumBitsSum\
    \ = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsSumLen = nBitsSumBitsSumBitsSum.length\n\
    \        val mBitsSumBitsSumBitsSumLen = mBitsSumBitsSumBitsSum.length\n     \
    \   val nBitsSumBitsSumBitsSumBits = n.toInt.toBinaryString\n        val mBitsSumBitsSumBitsSumBits\
    \ = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsSumBitsLen = nBitsSumBitsSumBitsSumBits.length\n\
    \        val mBitsSumBitsSumBitsSumBitsLen = mBitsSumBitsSumBitsSumBitsLen\n \
    \       val nBits\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm8j5xq3t.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm8j5xq3t.scala:45:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmBitsSumBitsSumBitsSumBitsLen\e[0m = mBitsSumBitsSumBitsSumBitsLen\n\e\
    [31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35mmBitsSumBitsSumBitsSumBitsLen\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8j5xq3t.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n1 = n.toInt\n        val m1 = m.toInt\n        if (n1\
    \ > m1) {\n            Left(-1)\n        } else {\n            val n2 = n1.toInt\n\
    \            val m2 = m1.toInt\n            val sum = n2 +  m2\n            val\
    \ avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n         \
    \   Right(bin)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwnjhxdho.scala:21:17\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwnjhxdho.scala:28:18\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            Right(bin)\n\e[31m\e\
    [31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (bin : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
    \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
    \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
    \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
    \ Long] = {\n        val n = math.abs(n)\n        val m = math.abs(m)\n      \
    \  if (n > m) {\n            Left(-1)\n        } else {\n            val sum =\
    \ (n+m)/2\n            val binary = sum.toBinaryString\n            Right(binary.padToLength(binary.length,\
    \ \"0\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7pjhj9b9.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.abs(n)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7pjhj9b9.scala:19:25 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.abs(m)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7pjhj9b9.scala:21:17 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                 ^^\e[0m\n\e[31m   |\e[0m                 Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798085
