name: HumanEval_152_compare
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // I think we all remember that feeling when the result of some long-awaited\n\
  \    // event is finally known. The feelings and thoughts you have at that moment\
  \ are\n    // definitely worth noting down and comparing.\n    // Your task is to\
  \ determine if a person correctly guessed the results of a number of matches.\n\
  \    // You are given two lists of scores and guesses of equal length, where each\
  \ index shows a match. \n    // Return a list of the same length denoting how far\
  \ off each guess was. If they have guessed correctly,\n    // the value is 0, and\
  \ if not, the value is the absolute difference between the guess and the score.\n\
  \    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong, 0l.toLong,\
  \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
  \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
  \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
  \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
  \ : List[Long], guess : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
completions: ["        val guesses = guess.map(x => Math.abs(x - game))\n        val\
    \ scores = game.map(x => Math.abs(x - guess))\n        val differences = guesses.zip(scores)\n\
    \        differences.map(x => if (x._1 == 0) 0 else x._1 - x._2)", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score - guess(index)\
    \ }\n        val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.sum\n\
    \        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score - game(index) }\n  \
    \      val guessScoreSum = guessScores.sum\n        val guessScoreDiff = guessScores.sum\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val gameScoreDiffAbs\
    \ = Math.abs(gameScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        ", "      \
    \  val gameScores = game.zipWithIndex.map{case (score, index) => score}\n    \
    \    val guessesScores = guess.zipWithIndex.map{case (score, index) => score}\n\
    \        val gameScoreCount = gameScores.count\n        val guessesScoreCount\
    \ = guessesScores.count\n        val gameScoreSum = gameScores.sum\n        val\
    \ guessesScoreSum = guessesScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessesScoreSum\n        val guessesScoreDiff = guessesScoreSum - gameScoreSum\n\
    \        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessesScoreDiffAbs\
    \ = Math.abs(guessesScoreDiff)\n        val gameScoreDiffAbsList = gameScoreDiffAbs.toList.sortBy(_\
    \ < 0).reverse\n        val guessesScoreDiffAbsList = guessesScoreDiffAbs.toList.sortBy(_\
    \ < 0).reverse\n        val gameScoreDiffAbsListLength = gameScoreDiffAbsList.length\n\
    \        val guessesScoreDiffAbsListLength = guessesScoreDiffAbsList.length\n\
    \        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n       \
    \ val guessesScoreDiffAbsListLength = guessesScoreDiffAbsListLength\n        val\
    \ gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n        val guessesScoreDiffAbsListLength\
    \ = guessesScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n\
    \        val guessesScoreDiffAbsListLength = guessesScoreDiffAbsListLength\n \
    \       val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n        val\
    \ guessesScoreDiffAbsListLength = guessesScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsListLength\n        val guessesScoreDiffAbsListLength = guessesScoreDiffAbsListLength\n\
    \        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n       \
    \ val guessesScoreDiffAbsListLength = guessesScoreDiffAbsListLength\n        val\
    \ gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n        val guessesScoreDiffAbsListLength\
    \ = guessesScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n\
    \        val guessesScoreDiffAbsListLength = guessesScoreDiffAbsListLength\n \
    \       val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n        val\
    \ guessesScoreDiffAbsListLength = guessesScoreDiffAbsListLength", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }\n      \
    \  val guessesScores = guess.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesDiff = guessesScores.zip(gameScores).map { case (guess, game)\
    \ => if (guess == game) 0 else Math.abs(guess - game) }\n        guessesDiff.zipWithIndex.map\
    \ { case (diff, index) => diff + guessesDiff(index) }", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score - guess(index) }\n  \
    \      val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.sum\n\
    \        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score - guess(index) }\n \
    \       val guessesScoreSum = guessesScores.sum\n        val guessesScoreDiff\
    \ = guessesScores.sum\n        val guessesScoreDiffAbs = Math.abs(guessesScoreDiff)\n\
    \        val guessesScoreDiffAbsMinusGameScoreDiffAbs = guessesScoreDiffAbs -\
    \ gameScoreDiffAbs\n        val guessesScoreDiffAbsMinusGuessesScoreDiffAbs =\
    \ guessesScoreDiffAbs - guessesScoreDiffAbs\n        val guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbs\
    \ = guessesScoreDiffAbsMinusGameScoreDiffAbs - guessesScoreDiffAbsMinusGuessesScoreDiffAbs\n\
    \        val guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbsMinusGuessesScoreDiffAbs\
    \ = guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbs - guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbs\n\
    \        val guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbs\
    \ = guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbs\n\
    \        val guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAb",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => score -> index }\n        val guessesWithScores = guessesScores.map { case\
    \ (score, index) => score -> gameScores(index) }\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }\n        val\
    \ guessesWithIndexesSorted = guessesWithIndexes.sortBy(_._1)\n        val guessesWithIndexesSortedReversed\
    \ = guessesWithIndexesSorted.reverse\n        val guessesWithIndexesSortedReversedSorted\
    \ = guessesWithIndexesSortedReversed.sortBy(_._1)\n        val guessesWithIndexesSortedReversedSortedSortedReversed\
    \ = guessesWithIndexesSortedReversedSorted\n            .sortBy(_._1)\n      \
    \      .reverse\n        val guessesWithIndexesSortedReversedSortedSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedReversed.sortBy(_._1)\n      \
    \  val guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversed\
    \ = guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversed.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReverse", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guess.zip(gameScores).map { case (guess, score)\
    \ => (guess, score) }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => (guess, index) -> score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score -> score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score -> score -> score -> score }.toMap\n      \
    \  val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScore", " \
    \       val guesses = guess.toList\n        val scores = game.toList\n       \
    \ val guessesCount = guesses.size\n        val scoresCount = scores.size\n   \
    \     val guessesPerScore = guessesCount / scoresCount\n        val guessesPerScoreAbs\
    \ = guessesPerScore - math.abs(guessesPerScore)\n        val guessesPerScoreAbsCount\
    \ = guessesPerScoreAbs.toInt\n        val guessesPerScoreAbsSum = guessesPerScoreAbs.sum\n\
    \        val guessesPerScoreAbsSumAbs = guessesPerScoreAbsSum / guessesPerScoreAbsCount\n\
    \        val guessesPerScoreAbsSumAbsCount = guessesPerScoreAbsSumAbs.toInt\n\
    \        val guessesPerScoreAbsSumAbsSum = guessesPerScoreAbsSumAbs.sum\n    \
    \    val guessesPerScoreAbsSumAbsSumAbs = guessesPerScoreAbsSumAbsSum / guessesPerScoreAbsCount\n\
    \        val guessesPerScoreAbsSumAbsSumAbsCount = guessesPerScoreAbsSumAbsSumAbs.toInt\n\
    \        val guessesPerScoreAbsSumAbsSumAbsSum = guessesPerScoreAbsSumAbsSumAbs.sum\n\
    \        val guessesPerScoreAbsSumAbsSumAbsSumAbs = guessesPerScoreAbsSumAbsSumAbsSum\
    \ / guessesPerScoreAbsCount\n        val guessesPerScoreAbsSumAbsSumAbsSumAbsCount\
    \ = guessesPerScoreAbsSumAbsSumAbsSumAbs.toInt\n        val guessesPerScoreAbsSumAbsSumAbsSumAbsSum\
    \ = guessesPerScoreAbsSumAbsSumAbsSumAbs.sum\n        val guessesPerScoreAbsSumAbsSumAbsSumAbsSumAbs\
    \ = guessesPerScoreAbsSumAbsSumAbsSumAbsSum / guessesPerScoreAbsCount\n      \
    \  val guessesPerScoreAbsSumAbsSumAbsSumAbsSumAbsCount = guessesPerScoreAbsSumAbsSumAbsSumAbsSumAbs.toInt\n\
    \        val guessesPerScoreAbsSumAbsSumAbsSumAbsSumAbsSum = guessesPerScoreAbsSumAbsSumAbsSumAbsSumAbs.sum\n",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => score -> index }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessesScoreMap = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.map { case (score, index) => score -> index }\n        val guessesScores\
    \ = guessesScoreList.map { case (score, index) => score -> index }\n        val\
    \ gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScoreMap.values.toList\n        val guessesScoreList\
    \ = guessesScoreMap.values.toList\n        val gameScores = gameScoreList.map\
    \ { case (score, index) => score -> index }\n        val guessesScores = guessesScoreList.map\
    \ { case (score, index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScores = gameScoreList.map { case (score, index) => score ->\
    \ index }\n        val guessesScores = guessesScoreList.map { case (score, index)\
    \ => score -> index }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessesScoreMap = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.map { case (score, index) => score -> index }\n        val guessesScores\
    \ = guessesScoreList.map { case (score, index) => score -> index }\n        val\
    \ gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScoreMap.values.toList\n        val guessesScoreList\
    \ = guessesScoreMap.values.toList\n        val gameScores = gameScoreList.map\
    \ { case (score, index) => score -> index }\n        val guessesScores = guessesScoreList.map\
    \ { case (score, index) => score ", "        val gameSet = game.distinct\n   \
    \     val guessSet = guess.distinct\n        val gameSize = gameSet.size\n   \
    \     val guessSize = guessSet.size\n        val gameSetSize = gameSet.size +\
    \ guessSet.size\n        val gameSetSize = gameSetSize * gameSize\n        val\
    \ guessSetSize = guessSet.size + gameSet.size\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize", "        val gameScores = game.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreCount = gameScores.count\n  \
    \      val guessScoreCount = guessScores.count\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffDiff\
    \ = gameScoreDiffSum - guessScoreDiffSum\n        val guessScoreDiffDiff = guessScoreDiffSum\
    \ - gameScoreDiffSum\n        val gameScoreDiffDiffCount = gameScoreDiffDiff.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiff.count\n        val gameScoreDiffDiffSum\
    \ = gameScoreDiffDiff.sum\n        val guessScoreDiffDiffSum = guessScoreDiffDiff.sum\n\
    \        val gameScoreDiffDiffDiff = gameScoreDiffDiffSum - guessScoreDiffDiffSum\n\
    \        val guessScoreDiffDiffDiff = guessScoreDiffDiffSum - gameScoreDiffDiffSum\n\
    \        val gameScoreDiffDiffDiffCount = gameScoreDiffDiffCount + guessScoreDiffDiffCount\n\
    \        val guessScoreDiffDiffDiffCount = guessScoreDiffDiffCount + gameScoreDiffDiffCount\n\
    \        val gameScoreDiffDiffDiffSum = gameScoreDiffDiff.sum\n        val guessScoreDiffDiffDiffSum\
    \ = guessScoreDiffDiff.sum\n        val gameScoreDiffDiffDiffSum = gameScoreDiffDiff.sum\
    \ - guessScoreDiffDiff.sum\n        val guessScoreDiffDiffDiffSum = guessScoreDiffDiff.sum\
    \ - gameScoreDiffDiff.sum\n        val gameScoreDiffDiffDiffCount = gameScoreDiffDiffCount\
    \ + guessScoreDiffDiffCount\n        val guessScoreDiffDiffDiffCount = guessScoreDiffDiffCount\
    \ + gameScoreDiffDiffCount\n        val gameScoreDiffDiffDiffSum = gameScoreDiffDiff.sum\n\
    \        val guessScoreDiffDiffDiffSum = guessScoreDiffDiff.sum\n        val gameScoreDiffDiffDiffSum\
    \ = gameScoreDiffDiff.sum - guessScoreDiffDiff.sum\n        val guessScoreDiffDiff",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }\n        val guessScores = guess.zipWithIndex.map { case (score, index)\
    \ => score -> index }\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessScoreSetSize = guessScoreSet.size\n  \
    \      val gameScoreSetIterator = gameScoreSet.iterator\n        val guessScoreSetIterator\
    \ = guessScoreSet.iterator\n        val gameScoreSetIteratorSize = gameScoreSetIterator.size\n\
    \        val guessScoreSetIteratorSize = guessScoreSetIterator.size\n        val\
    \ gameScoreSetIteratorIterator = gameScoreSetIterator.iterator\n        val guessScoreSetIteratorIterator\
    \ = guessScoreSetIterator.iterator\n        val gameScoreSetIteratorIteratorSize\
    \ = gameScoreSetIteratorIterator.size\n        val guessScoreSetIteratorIteratorSize\
    \ = guessScoreSetIteratorIterator.size\n        val gameScoreSetIteratorIteratorIterator\
    \ = gameScoreSetIteratorIterator.iterator\n        val guessScoreSetIteratorIteratorIterator\
    \ = guessScoreSetIteratorIterator.iterator\n        val gameScoreSetIteratorIteratorIteratorSize\
    \ = gameScoreSetIteratorIteratorIterator.size\n        val guessScoreSetIteratorIteratorIteratorSize\
    \ = guessScoreSetIteratorIteratorIterator.size\n        val gameScoreSetIteratorIteratorIteratorIterator\
    \ = gameScoreSetIteratorIteratorIterator.iterator\n        val guessScoreSetIteratorIteratorIteratorIterator\
    \ = guessScoreSetIteratorIteratorIterator.iterator\n        val gameScoreSetIteratorIteratorIteratorIteratorSize\
    \ = gameScoreSetIteratorIteratorIteratorIterator.size\n        val guessScoreSetIteratorIteratorIteratorIteratorSize\
    \ = guessScoreSetIteratorIteratorIteratorIterator.size\n        val gameScoreSetIteratorIteratorIteratorIteratorIterator\
    \ = gameScoreSetIteratorIteratorIteratorIterator.iterator\n        val guessScoreSetIteratorIteratorIteratorIteratorIterator\
    \ = guessScoreSetIteratorIteratorIteratorIterator.iterator\n        val gameScoreSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = gameScoreSetIteratorIteratorIteratorIteratorIterator.size\n        val guessScoreSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = guessScoreSetIteratorIteratorIteratorIteratorIterator.size\n        val gameScoreSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gameScoreSetIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ guessScoreSetIteratorIteratorIteratorIteratorIteratorIterator = guessScoreSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val gameScoreSet", "        val gameScores = game.zipWithIndex.map {\
    \ case (score, index) => (index, score) }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => (index, score) }\n        val gameScore = gameScores.toMap\n\
    \        val guessesScore = guessesScores.toMap\n        val gameScores = gameScores.toSeq.sortBy(_._1).reverse\n\
    \        val guessesScores = guessesScores.toSeq.sortBy(_._1).reverse\n      \
    \  val gameScore = gameScores.head._2\n        val guessesScore = guessesScores.head._2\n\
    \        val gameScores = gameScores.tail\n        val guessesScores = guessesScores.tail\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ (index, score) }\n        val guessesScores = guessesScores.zipWithIndex.map\
    \ { case (score, index) => (index, score) }\n        val gameScore = gameScores.toMap\n\
    \        val guessesScore = guessesScores.toMap\n        val gameScores = gameScores.toSeq.sortBy(_._1).reverse\n\
    \        val guessesScores = guessesScores.toSeq.sortBy(_._1).reverse\n      \
    \  val gameScore = gameScores.head._2\n        val guessesScore = guessesScores.head._2\n\
    \        val gameScores = gameScores.tail\n        val guessesScores = guessesScores.tail\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ (index, score) }\n        val guessesScores = guessesScores.zipWithIndex.map\
    \ { case (score, index) => (index, score) }\n        val gameScore = gameScores.toMap\n\
    \        val guessesScore = guessesScores.toMap\n        val gameScores = gameScores.toSeq.sortBy(_._1).reverse\n\
    \        val guessesScores = guessesScores.toSeq.sortBy(_._1).reverse\n      \
    \  val gameScore = gameScores.head._2\n        val guessesScore = guessesScores.head._2\n\
    \        val gameScores = gameScores.tail\n        val guessesScores = guessesScores.tail\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ (index, score) }\n        val guessesScore", "        val gameScores = game.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n        val guessScores = guess.zipWithIndex.filter(_._1 ==\
    \ _).map(_._2)\n        val gameScore = gameScores.sum\n        val guessScore\
    \ = guessScores.sum\n        val gameScoreDiff = gameScore - guessScore\n    \
    \    val gameScoreDiffAbs = math.abs(gameScoreDiff)\n        val gameScoreDiffAbsList\
    \ = gameScoreDiffAbs.toList.sortBy(_ < 0).reverse\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsList.length\n        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n\
    \        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n \
    \       val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n \
    \       val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n  \
    \      val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n  \
    \      val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n   \
    \     val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n   \
    \     val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n    \
    \    val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n    \
    \    val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n     \
    \   val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n     \
    \   val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n      \
    \  val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n      \
    \  val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n       \
    \ val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n       \
    \ val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n        val\
    \ gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n        val\
    \ gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsListLength.toLong\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsListLength.toInt\n        val gameScoreDiffAbsListLength =\
    \ gameScoreDiffAbsListLength.toLong\n        val gameScoreDiffAbsListLength =\
    \ gameScoreDiffAbsListLength.toInt\n        val gameScoreDiffAbsListLength = gameScoreDiffAb",
  "        val gameScores = game.zipWithIndex.map(x => x._1 + x._2)\n        val guessScores\
    \ = guess.zipWithIndex.map(x => x._1 + x._2)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreMap = gameScoreSet.map(x => (x, gameScoreMap.get(x)))\n    \
    \    val guessScoreMap = guessScoreSet.map(x => (x, guessScoreMap.get(x)))\n \
    \       val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreMap = gameScoreSet.map(x\
    \ => (x, gameScoreMap.get(x)))\n        val guessScoreMap = guessScoreSet.map(x\
    \ => (x, guessScoreMap.get(x)))\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreMap = gameScoreSet.map(x => (x, gameScoreMap.get(x)))\n    \
    \    val guessScoreMap = guessScoreSet.map(x => (x, guessScoreMap.get(x)))\n \
    \       val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreMap = gameScoreSet.map(x\
    \ => (x, gameScoreMap.get(x)))\n        val guessScoreMap = guessScoreSet.map(x\
    \ => (x, guessScoreMap.get(x)))\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreMap = gameScoreSet.map(x => (x, gameScoreMap.get(x)))\n    \
    \    val guessScoreMap = guessScoreSet.map(x => (x, guessScoreMap.get(x)))\n \
    \       val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet", "        val guesses = gues\n        val scores = game\n\
    \        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val guessesRemaining\
    \ = guessesCount - 1\n        val scoresRemaining = scoresCount - 1\n        val\
    \ guessesRemaining2 = guessesCount - 2\n        val scoresRemaining2 = scoresCount\
    \ - 2\n        val guessesRemaining3 = guessesCount - 3\n        val scoresRemaining3\
    \ = scoresCount - 3\n        val guessesRemaining4 = guessesCount - 4\n      \
    \  val scoresRemaining4 = scoresCount - 4\n        val guessesRemaining5 = guessesCount\
    \ - 5\n        val scoresRemaining5 = scoresCount - 5\n        val guessesRemaining6\
    \ = guessesCount - 6\n        val scoresRemaining6 = scoresCount - 6\n       \
    \ val guessesRemaining7 = guessesCount - 7\n        val scoresRemaining7 = scoresCount\
    \ - 7\n        val guessesRemaining8 = guessesCount - 8\n        val scoresRemaining8\
    \ = scoresCount - 8\n        val guessesRemaining9 = guessesCount - 9\n      \
    \  val scoresRemaining9 = scoresCount - 9\n        val guessesRemaining10 = guessesCount\
    \ - 10\n        val scoresRemaining10 = scoresCount - 10\n        val guessesRemaining11\
    \ = guessesCount - 11\n        val scoresRemaining11 = scoresCount - 11\n    \
    \    val guessesRemaining12 = guessesCount - 12\n        val scoresRemaining12\
    \ = scoresCount - 12\n        val guessesRemaining13 = guessesCount - 13\n   \
    \     val scoresRemaining13 = scoresCount - 13\n        val guessesRemaining14\
    \ = guessesCount - 14\n        val scoresRemaining14 = scoresCount - 14\n    \
    \    val guessesRemaining15 = guessesCount - 15\n        val scoresRemaining15\
    \ = scoresCount - 15\n        val guessesRemaining16 = guessesCount - 16\n   \
    \     val scoresRemaining16 = scoresCount - 16\n        val guessesRemaining17\
    \ = guessesCount - 17\n        val scoresRemaining17 = scoresCount - 17\n    \
    \    val guessesRemaining18 = guessesCount - 18\n        val scoresRemaining18\
    \ = scoresCount - 18\n        val guessesRemaining19 = guessesCount - 19\n   \
    \     val scoresRemaining19 = scoresCount - 19\n        val guessesRemain", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ -> index }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n  \
    \      val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values\n        val guessScoreValues = guessScoreMap.values\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySetSet\
    \ = gameScoreKeySet.toSet\n        val guessScoreKeySetSet = guessScoreKeySet.toSet\n\
    \        val gameScoreValueSetSet = gameScoreValueSet.toSet\n        val guessScoreValueSetSet\
    \ = guessScoreValueSet.toSet\n        val gameScoreKeySetSetSet = gameScoreKeySetSet.toSet\n\
    \        val guessScoreKeySetSetSet = guessScoreKeySetSet.toSet\n        val gameScoreValueSetSetSet\
    \ = gameScoreValueSetSet.toSet\n        val guessScoreValueSetSetSet = guessScoreValueSetSet.toSet\n\
    \        val gameScoreKeySetSetSetSet = gameScoreKeySetSetSet.toSet\n        val\
    \ guessScoreKeySetSetSetSet = guessScoreKeySetSetSet.toSet\n        val gameScoreValueSetSetSetSet\
    \ = gameScoreValueSetSetSet.toSet\n        val guessScoreValueSetSetSetSet = guessScoreValueSetSetSet.toSet\n\
    \        val gameScoreKeySetSetSetSetSet = gameScoreKeySetSetSetSet.toSet\n  \
    \      val guessScoreKeySetSetSetSetSet = guessScoreKeySetSetSetSet.toSet\n  \
    \      val gameScoreValueSetSetSetSetSet = gameScoreValueSetSetSetSet.toSet\n\
    \        val guessScoreValueSetSetSetSetSet = guessScoreValueSetSetSetSet.toSet\n\
    \        val gameScoreKeySetSetSetSetSetSet = gameScoreKeySetSetSetSetSet.toSet\n\
    \        val guessScoreKeySetSetSetSetSetSet = guessScoreKeySetSetSetSetSet.toSet\n\
    \        val gameScoreValueSetSetSetSetSetSet = game", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n\
    \        val gameScoreSet = gameScoreList.map(_.toSet)\n        val guessScoreSet\
    \ = guessScoreList.map(_.toSet)\n        val gameScoreSetSize = gameScoreSet.map(_.size).sum\n\
    \        val guessScoreSetSize = guessScoreSet.map(_.size).sum\n        val gameScoreSetSizeDiff\
    \ = gameScoreSetSize - guessScoreSetSize\n        val gameScoreSetSizeDiffAbs\
    \ = gameScoreSetSizeDiff.abs\n        val gameScoreSetSizeDiffAbsSum = gameScoreSetSizeDiffAbs.sum\n\
    \        val gameScoreSetSizeDiffAbsSumDiff = gameScoreSetSizeDiffAbsSum - gameScoreSetSizeDiffAbsSum\n\
    \        val gameScoreSetSizeDiffAbsSumDiffDiff = gameScoreSetSizeDiffAbsSumDiff\
    \ - gameScoreSetSizeDiffAbsSumDiff\n        val gameScoreSetSizeDiffAbsSumDiffDiffDiff\
    \ = gameScoreSetSizeDiffAbsSumDiffDiff - gameScoreSetSizeDiffAbsSumDiffDiff\n\
    \        val gameScoreSetSizeDiffAbsSumDiffDiffDiffDiff = gameScoreSetSizeDiffAbsSumDiffDiffDiff\
    \ - gameScoreSetSizeDiffAbsSumDiffDiffDiff\n        val gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiff\
    \ = gameScoreSetSizeDiffAbsSumDiffDiffDiffDiff - gameScoreSetSizeDiffAbsSumDiffDiffDiffDiff\n\
    \        val gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiffDiff = gameScoreSetSizeDiffAbsSumDiffDiffDiffDiff\
    \ - gameScoreSetSizeDiffAbsSumDiffDiffDiffDiff\n        val gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiffDiff\
    \ = gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiff - gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiff\n\
    \        val gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiffDiff = gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiff\
    \ - gameScoreSetSizeDiffAb", "        val guesses = gues\n        val scores =\
    \ game\n        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val guessesDiff = guesses.zip(scores).map { case (guess, score) =>\n\
    \            val diff = Math.abs(guess - score)\n            if (diff > 0) diff\
    \ else 0\n        }\n        val scoresDiff = scores.zip(guesses).map { case (score,\
    \ guess) =>\n            val diff = Math.abs(guess - score)\n            if (diff\
    \ > 0) diff else 0\n        }\n        guessesDiff.zip(scoresDiff).map { case\
    \ (diff, diff2) =>\n            if (diff > diff2) diff else diff2\n        }",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => score -> index }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessesScoreMap = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.map { case score => score.toLong }\n        val guessesScores\
    \ = guessesScoreList.map { case score => score.toLong }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = gameScoreMap.values.toList\n        val guessesScoreList\
    \ = guessesScoreMap.values.toList\n        val gameScores = gameScoreList.map\
    \ { case score => score.toLong }\n        val guessesScores = guessesScoreList.map\
    \ { case score => score.toLong }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScores = gameScoreList.map { case score => score.toLong }\n \
    \       val guessesScores = guessesScoreList.map { case score => score.toLong\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.map { case score => score.toLong }\n        val guessesScores\
    \ = guessesScoreList.map { case score => score.toLong }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = gameScoreMap.values.toList\n        val guessesScoreList\
    \ = guessesScoreMap.values.toList\n        val gameScores = gameScoreList.map\
    \ { case score => score.toLong }\n        val guessesScores = guessesScoreList.map\
    \ { case score => score.toLong }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScore", "        val gameScores = game.zipWithIndex.map {\
    \ case (score, index) => (index, score) }.toMap\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => (index, score) }.toMap\n        val guessesWithScores\
    \ = guessesScores.map { case (index, score) => (index, score) }.toMap\n      \
    \  val guessesWithIndexes = guessesWithScores.map { case (index, score) => (index,\
    \ score) }.toMap\n        val guessesWithIndexesSorted = guessesWithIndexes.sortBy(_._1).reverse\n\
    \        val gameWithIndexes = gameScores.map { case (index, score) => (index,\
    \ score) }.toMap\n        val gameWithIndexesSorted = gameWithIndexes.sortBy(_._1).reverse\n\
    \        val gameWithIndexesSortedWithScores = gameWithIndexesSorted.map { case\
    \ (index, score) => (index, score) }.toMap\n        val gameWithIndexesSortedWithIndexes\
    \ = gameWithIndexesSortedWithScores.map { case (index, score) => (index, score)\
    \ }.toMap\n        val gameWithIndexesSortedWithIndexesSorted = gameWithIndexesSortedWithIndexes.sortBy(_._1).reverse\n\
    \        val gameWithIndexesSortedWithIndexesSortedWithScores = gameWithIndexesSortedWithIndexesSorted.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = gameWithIndexesSortedWithIndexesSortedWithScores.map { case (index, score)\
    \ => (index, score) }.toMap\n        val gameWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = gameWithIndexesSortedWithIndexesSortedWithIndexes.sortBy(_._1).reverse\n \
    \       val gameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\
    \ = gameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes.map { case\
    \ (index, score) => (index, score) }.toMap\n        val gameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = gameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores.map { case\
    \ (index, score) => (index, score) }.toMap\n        val gameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = gameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.sort",
  "        val guesses = guess.map(x => Math.abs(x - game))\n        val scores =\
    \ game.map(x => Math.abs(x - guess))\n        val differences = guesses.zip(scores)\n\
    \        differences.map(x => if (x._1 == 0) 0 else x._1 - x._2)", "        val\
    \ gameScores = game.zipWithIndex.map(x => x._2.toLong)\n        val guessScores\
    \ = guess.zipWithIndex.map(x => x._2.toLong)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreList = gameScoreSet.toList\n        val guessScoreList = guessScoreSet.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreList = gameScoreSet.toList\n        val guessScoreList =\
    \ guessScoreSet.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreList = gameScoreSet.toList\n\
    \        val guessScoreList = guessScoreSet.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreList = gameScoreSet.toList\n        val guessScoreList = guessScoreSet.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreList = gameScoreSet.toList\n        val guessScoreList =\
    \ guessScoreSet.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreList = gameScoreSet.toList\n\
    \        val guessScoreList = guessScoreSet.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreList = gameScoreSet.toList\n        val guessScoreList = guessScoreSet.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreList = gameScoreSet.toList\n        val guessScoreList =\
    \ guessScoreSet.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreList = gameScoreSet.toList\n\
    \        val guessScoreList = guessScoreSet.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        ", "        val guesses = guess.toList\n      \
    \  val scores = game.toList\n        val guessesCount = guesses.size\n       \
    \ val scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        val guessesRemainingInt = guessesRemaining.toInt\n\
    \        val scoresRemainingInt = scoresRemaining.toInt\n        val guessesRemainingDouble\
    \ = guessesRemainingInt * 1.0\n        val scoresRemainingDouble = scoresRemainingInt\
    \ * 1.0\n        val guessesRemainingLong = guessesRemainingInt * 1.0\n      \
    \  val scoresRemainingLong = scoresRemainingInt * 1.0\n        val guessesRemainingFloat\
    \ = guessesRemainingInt * 1.0\n        val scoresRemainingFloat = scoresRemainingInt\
    \ * 1.0\n        val guessesRemainingInt = guessesRemainingInt.toDouble\n    \
    \    val scoresRemainingInt = scoresRemainingInt.toDouble\n        val guessesRemainingDouble\
    \ = guessesRemainingDouble.toDouble\n        val scoresRemainingDouble = scoresRemainingDouble.toDouble\n\
    \        val guessesRemainingLong = guessesRemainingLong.toDouble\n        val\
    \ scoresRemainingLong = scoresRemainingLong.toDouble\n        val guessesRemainingFloat\
    \ = guessesRemainingFloat.toDouble\n        val scoresRemainingFloat = scoresRemainingFloat.toDouble\n\
    \        val guessesRemainingInt = guessesRemainingInt.toFloat\n        val scoresRemainingInt\
    \ = scoresRemainingInt.toFloat\n        val guessesRemainingDouble = guessesRemainingDouble.toFloat\n\
    \        val scoresRemainingDouble = scoresRemainingDouble.toFloat\n        val\
    \ guessesRemainingLong = guessesRemainingLong.toFloat\n        val scoresRemainingLong\
    \ = scoresRemainingLong.toFloat\n        val guessesRemainingFloat = guessesRemainingFloat.toFloat\n\
    \        val scoresRemainingFloat = scoresRemainingFloat.toFloat\n        val\
    \ guessesRemainingInt = guessesRemainingInt.toInt\n        val scoresRemainingInt\
    \ = scoresRemainingInt.toInt\n        val guessesRemainingDouble = guessesRemainingDouble.toInt\n\
    \        val scoresRemainingDouble = scoresRemainingDouble.toInt\n        val\
    \ guessesRemainingLong = guessesRemainingLong.toInt\n        val scoresRemainingLong",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (index, score) => (index, gameScores(index) - score) }\n        val guessesWithScores\
    \ = guessesWithScores.toSeq.sortBy(_._1).reverse\n        val guessesWithScores\
    \ = guessesWithScores.map { case (index, score) => (index, Math.abs(score)) }\n\
    \        val guessesWithScores = guessesWithScores.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithScores = guessesWithScores.map { case (index, score) =>\
    \ (index, score) }\n        guessesWithScores", "        val gameScores = game.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreList = gameScoreMap.mapValues(_.toList)\n        val guessScoreList\
    \ = guessScoreMap.mapValues(_.toList)\n        val gameScores = gameScoreList.map{case\
    \ (score, index) => score}.toList\n        val guessScores = guessScoreList.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreList = gameScoreMap.mapValues(_.toList)\n        val guessScoreList\
    \ = guessScoreMap.mapValues(_.toList)\n        val gameScores = gameScoreList.map{case\
    \ (score, index) => score}.toList\n        val guessScores = guessScoreList.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreList = gameScoreMap.mapValues(_.toList)\n        val guessScoreList\
    \ = guessScoreMap.mapValues(_.toList)\n        val gameScores = gameScoreList.map{case\
    \ (score, index) => score}.toList\n        val guessScores = guessScoreList.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreList = gameScoreMap.mapValues(_.toList)\n        val guessScoreList\
    \ = guessScoreMap.mapValues(_.toList)\n        val gameScores = gameScoreList.map{case\
    \ (score, index) => score}.toList\n        val guessScores = guessScoreList.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap = guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreList = gameScoreList.map { case (score, index) => index }\n\
    \        val guessScoreList = guessScoreList.map { case (score, index) => index\
    \ }\n        val gameScoreSet = gameScoreSet.toList\n        val guessScoreSet\
    \ = guessScoreSet.toList\n        val gameScoreList = gameScoreList.map { case\
    \ (score, index) => score }\n        val guessScoreList = guessScoreList.map {\
    \ case (score, index) => score }\n        val gameScoreSet = gameScoreSet.toList\n\
    \        val guessScoreSet = guessScoreSet.toList\n        val gameScoreList =\
    \ gameScoreList.map { case (score, index) => score }\n        val guessScoreList\
    \ = guessScoreList.map { case (score, index) => score }\n        val gameScoreSet\
    \ = gameScoreSet.toList\n        val guessScoreSet = guessScoreSet.toList\n  \
    \      val gameScoreList = gameScoreList.map { case (score, index) => score }\n\
    \        val guessScoreList = guessScoreList.map { case (score, index) => score\
    \ }\n        val gameScoreSet = gameScoreSet.toList\n        val guessScoreSet\
    \ = guessScoreSet.toList\n        val gameScoreList = gameScoreList.map { case\
    \ (score, index) => score }\n        val guessScoreList = guessScoreList.map {\
    \ case (score, index) => score }\n        val gameScoreSet = gameScoreSet.toList\n\
    \        val guessScoreSet = guessScoreSet.toList\n        val gameScoreList =\
    \ gameScoreList.map { case (score, index) => score }\n        val guessScoreList\
    \ = guessScoreList.map { case (score, index) => score }\n        val gameScoreSet\
    \ = gameScoreSet.toList\n        val guessScoreSet = guessScoreSet.toList\n  \
    \      val gameScoreList = gameScoreList.map { case (score, index) => score }\n\
    \        val guessScoreList = guessScoreList.map { case (score, index) => score\
    \ }\n        val gameScoreSet = game", "        val guesses = guess.map(x => Math.abs(x\
    \ - game))\n        val correct = game.zip(guesses).filter(_._1 == 0).map(_._2)\n\
    \        val wrong = game.zip(guesses).filter(_._1 == 1).map(_._2)\n        correct.toList\
    \ ++ wrong.toList", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score - guess(index) }\n        val gameScoreSum = gameScores.sum\n\
    \        val gameScoreDiff = gameScores.map(_.abs).sum\n        val gameScoreDiffPercent\
    \ = gameScoreDiff / gameScoreSum * 100\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercent.toString\n        val gameScoreDiffPercentStringWithSpaces\
    \ = gameScoreDiffPercentString.replaceAll(\"\\\\.\", \"\\\\. \")\n        val\
    \ gameScoreDiffPercentStringWithCommas = gameScoreDiffPercentStringWithSpaces.replaceAll(\"\
    ,\", \"\\\\, \")\n        val gameScoreDiffPercentStringWithDots = gameScoreDiffPercentStringWithCommas.replaceAll(\"\
    \\\\.\", \"\\\\. \")\n        val gameScoreDiffPercentStringWithCommasAndDots\
    \ = gameScoreDiffPercentStringWithDots.replaceAll(\",\", \"\\\\, \")\n       \
    \ val gameScoreDiffPercentStringWithDotsAndCommas = gameScoreDiffPercentStringWithCommasAndDots.replaceAll(\"\
    \\\\.\", \"\\\\. \")\n        val gameScoreDiffPercentStringWithDotsAndCommasAndDots\
    \ = gameScoreDiffPercentStringWithDotsAndCommas.replaceAll(\",\", \"\\\\, \")\n\
    \        val gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpaces = gameScoreDiffPercentStringWithDotsAndCommasAndDots.replaceAll(\"\
    \\\\.\", \"\\\\. \")\n        val gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpacesAndDots\
    \ = gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpaces.replaceAll(\"\
    ,\", \"\\\\, \")\n        val gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpacesAndDotsAndDots\
    \ = gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpacesAndDots.replaceAll(\"\
    \\\\.\", \"\\\\. \")\n        val gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpacesAndDotsAndDotsAndSpaces\
    \ = gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpacesAndDotsAndDots.replaceAll(\"\
    ,\", \"\\\\, \")\n        val gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpacesAndDotsAndDotsAndDotsAndSpaces\
    \ = gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpacesAndDotsAndDotsAndSpaces.replaceAll(\"\
    \\\\.\", \"\\\\. \")\n        val gameScoreDiffPercentStringWithDotsAndComm",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (index, score) => (index, index) }.toMap\n  \
    \      val guessesWithIndexesWithScores = guessesWithIndexes.map { case (index,\
    \ score) => (index, score) }.toMap\n        val guessesWithIndexesWithIndexes\
    \ = guessesWithIndexesWithScores.map { case (index, score) => (index, index) }.toMap\n\
    \        val guessesWithIndexesWithIndexesWithScores = guessesWithIndexesWithIndexes.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithScores.map { case (index, score) => (index,\
    \ score) }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexes.map { case (index, score)\
    \ => (index, score) }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores.map { case (index,\
    \ score) => (index, score) }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndex", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach { case (score, index) =>\n            val guessScore\
    \ = guessScoreMap.get(index)\n            if (guessScore == null) {\n        \
    \        gameScoreList.add(score)\n            } else {\n                val gameScore\
    \ = gameScoreMap.get(index)\n                val diff = abs(guessScore - gameScore)\n\
    \                gameScoreList.add(gameScore)\n                guessScoreList.add(guessScore)\n\
    \                guessScoreMap += (index -> diff)\n            }\n        }\n\
    \        guessScoreList.toList", "        val gameScores = game.zipWithIndex.map{\
    \ case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map{\
    \ case (score, index) => score }\n        val gameScoreCount = gameScores.count\n\
    \        val guessScoreCount = guessScores.count\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map{ case (score, index)\
    \ => score }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map{ case\
    \ (score, index) => score }\n        val gameScoreDiffCount = gameScoreDiffs.count\n\
    \        val guessScoreDiffCount = guessScoreDiffs.count\n        val gameScoreDiffSum\
    \ = gameScoreDiffs.sum\n        val guessScoreDiffSum = guessScoreDiffs.sum\n\
    \        val gameScoreDiffDiff = gameScoreDiffSum - guessScoreDiffSum\n      \
    \  val guessScoreDiffDiff = guessScoreDiffSum - gameScoreDiffSum\n        val\
    \ gameScoreDiffDiffs = gameScoreDiffDiff.zipWithIndex.map{ case (score, index)\
    \ => score }\n        val guessScoreDiffDiffs = guessScoreDiffDiff.zipWithIndex.map{\
    \ case (score, index) => score }\n        val gameScoreDiffDiffCount = gameScoreDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiffs.sum\n        val gameScoreDiffDiffDiff = gameScoreDiffDiffSum\
    \ - guessScoreDiffDiffSum\n        val guessScoreDiffDiffDiff = guessScoreDiffDiffSum\
    \ - gameScoreDiffDiffSum\n        val gameScoreDiffDiffDiffs = gameScoreDiffDiffDiff.zipWithIndex.map{\
    \ case (score, index) => score }\n        val guessScoreDiffDiffs = guessScoreDiffDiff.zipWithIndex.map{\
    \ case (score, index) => score }\n        val gameScoreDiffDiffCount = gameScoreDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiffs.sum\n        val gameScoreDiffDiffDiff", "        val\
    \ guesses = guess.length\n        val scores = game.length\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val guessesRemaining = guesses\n \
    \       val scoresRemaining = scores\n        val guessesRemainingInGame = guessesRemaining\
    \ - game.length\n        val scoresRemainingInGame = scoresRemaining - game.length\n\
    \        val guessesRemainingInGuess = guessesRemainingInGame - guesses.length\n\
    \        val scoresRemainingInGuess = scoresRemainingInGame - guesses.length\n\
    \        val guessesRemainingInScore = guessesRemainingInGuess - scores.length\n\
    \        val scoresRemainingInScore = scoresRemainingInScore - scores.length\n\
    \        val guessesRemainingInGuesses = guessesRemainingInScore - guesses.length\n\
    \        val scoresRemainingInGuesses = scoresRemainingInGuesses - guesses.length\n\
    \        val guessesRemainingInGuessesAndScores = guessesRemainingInGuesses -\
    \ scores.length\n        val scoresRemainingInGuessesAndScores = scoresRemainingInGuessesAndScores\
    \ - guesses.length\n        val guessesRemainingInGuessesAndScoresAndGame = guessesRemainingInGuessesAndScores\
    \ - scores.length\n        val scoresRemainingInGuessesAndScoresAndGame = scoresRemainingInGuessesAndScoresAndGame\
    \ - guesses.length\n        val guessesRemainingInGuessesAndScoresAndGameAndGuesses\
    \ = guessesRemainingInGuessesAndScoresAndGame - scores.length\n        val scoresRemainingInGuessesAndScoresAndGameAndGuesses\
    \ = scoresRemainingInGuessesAndScoresAndGameAndGuesses - guesses.length\n    \
    \    val guessesRemainingInGuessesAndScoresAndGameAndGuessesAndScores = guessesRemainingInGuessesAndScoresAndGameAndGuesses\
    \ - scores.length\n        val scoresRemainingInGuessesAndScoresAndGameAndGuessesAndScores\
    \ = scoresRemainingInGuessesAndScoresAndGameAndGuessesAndScores - guesses.length\n\
    \        val guessesRemainingInGuessesAndScoresAndGameAndGuessesAndScoresAndGame\
    \ = guessesRemainingInGuessesAndSco", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guessesScores.map { case (score, index) => gameScores(index)\
    \ -> score }.toMap\n        val guessesWithIndexes = guessesWithScores.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.sortBy(_._1).reverse\n        val guessesWithIndexesSortedWithScores\
    \ = guessesWithIndexesSorted.map { case (index, score) => score -> index }.toMap\n\
    \        val guessesWithIndexesSortedWithIndexes = guessesWithIndexesSortedWithScores.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexes.sortBy(_._1).reverse\n        val guessesWithIndexesSortedWithIndexesSortedWithScores\
    \ = guessesWithIndexesSortedWithIndexesSorted.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithIndexesSortedWithScores.map { case (score, index)\
    \ => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexes.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores.map {\
    \ case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\
    \ = guesses", "        val guesses = gues\n        val scores = game\n       \
    \ val guessesCount = guesses.size\n        val scoresCount = scores.size\n   \
    \     val guessesDiff = guesses.zip(scores).map { case (guess, score) => abs(guess\
    \ - score) }\n        val scoresDiff = scores.zip(guesses).map { case (score,\
    \ guess) => abs(score - guess) }\n        val diffs = guessesDiff.zip(scoresDiff).map\
    \ { case (diff, scoreDiff) => diff + scoreDiff }\n        diffs.toList", "   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessesScoreCount\
    \ = guessesScores.count\n        val gameScoreDiff = gameScoreCount - guessesScoreCount\n\
    \        val guessesScoreDiff = guessesScoreCount - gameScoreCount\n        val\
    \ gameScoreDiffList = gameScoreDiff.toList.map { i => gameScoreDiff.abs() }\n\
    \        val guessesScoreDiffList = guessesScoreDiff.toList.map { i => guessesScoreDiff.abs()\
    \ }\n        val gameScoreDiffSum = gameScoreDiffList.sum\n        val guessesScoreDiffSum\
    \ = guessesScoreDiffList.sum\n        val gameScoreDiffDiff = gameScoreDiffSum\
    \ - guessesScoreDiffSum\n        val guessesScoreDiffDiff = guessesScoreDiffSum\
    \ - gameScoreDiffSum\n        val gameScoreDiffDiffList = gameScoreDiffDiff.toList.map\
    \ { i => gameScoreDiffDiff.abs() }\n        val guessesScoreDiffDiffList = guessesScoreDiffDiff.toList.map\
    \ { i => guessesScoreDiffDiff.abs() }\n        val gameScoreDiffDiffSum = gameScoreDiffDiffList.sum\n\
    \        val guessesScoreDiffDiffSum = guessesScoreDiffDiffList.sum\n        val\
    \ gameScoreDiffDiffDiff = gameScoreDiffDiffSum - guessesScoreDiffDiffSum\n   \
    \     val guessesScoreDiffDiffDiff = guessesScoreDiffDiffSum - gameScoreDiffDiffSum\n\
    \        val gameScoreDiffDiffDiffList = gameScoreDiffDiffDiff.toList.map { i\
    \ => gameScoreDiffDiffDiff.abs() }\n        val guessesScoreDiffDiffDiffList =\
    \ guessesScoreDiffDiffDiff.toList.map { i => guessesScoreDiffDiffDiff.abs() }\n\
    \        val gameScoreDiffDiffDiffSum = gameScoreDiffDiffDiffList.sum\n      \
    \  val guessesScoreDiffDiffDiffSum = guessesScoreDiffDiffDiffList.sum\n      \
    \  val gameScoreDiffDiffDiffDiff = gameScoreDiffDiffDiffSum - guessesScoreDiffDiffDiffSum\n\
    \        val guessesScoreDiffDiffDiffDiff = guessesScoreDiffDiffDiffSum - gameScoreDiffDiffDiffSum\n\
    \        val gameScoreDiffDiffDiffDiffList = gameScoreDiffDiffDiffDiff.toList.map\
    \ { i => gameScoreDiffDiffDiffDiff", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guessesWithIndexes = guess.zipWithIndex.map { case (guess, index) =>\
    \ guess -> index }.toMap\n        val guessesWithIndexesWithScores = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score }.toMap\n        val guessesWithIndexesWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoreAndIndexWithScore = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score -> index -> score }.toMap\n        val\
    \ guessesWithIndexesWithScoreAndIndexWithScoreAndIndex = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score -> index -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScore = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score -> index -> score -> index -> score\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> ", "        val guesses = guess.toSet\n        val\
    \ scores = game.toSet\n        val results = new mutable.ListBuffer[Long]()\n\
    \        for(score <- scores) {\n            val guess = guesses.find(_ == score)\n\
    \            if(guess == None) results += score\n            else results += abs(guess\
    \ - score)\n        }\n        results.toList", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guessesScores.map { case (score, index) => score\
    \ -> gameScores(index) }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n        val guessesWithIndexesSortedSortedByScore\
    \ = guessesWithIndexesSorted.toSeq.sortBy(_._2)\n        val guessesWithIndexesSortedSortedByScoreSortedByIndex\
    \ = guessesWithIndexesSortedSortedByScore.toSeq.sortBy(_._1)\n        val guessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScore\
    \ = guessesWithIndexesSortedSortedByIndexSortedByScore.toSeq.sortBy(_._2)\n  \
    \      val guessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScoreSortedByIndex\
    \ = guessesWithIndexesSortedSortedByIndexSortedByScoreSortedByIndex.toSeq.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScore\
    \ = guessesWithIndexesSortedSortedByIndexSortedByScoreSortedByIndexSortedByScore.toSeq.sortBy(_._2)\n\
    \        val guessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndex\
    \ = guessesWithIndexesSortedSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScore.toSeq.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScore\
    \ = guessesWithIndexesSortedSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScore.toSeq.sortBy(_._2)\n\
    \        val guessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndex\
    \ = guessesWithIndexesSortedSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedBy",
  "        val gameScores = game.zipWithIndex.map{ case (score, index) => score }.toList\n\
    \        val guessScores = guess.zipWithIndex.map{ case (score, index) => score\
    \ }.toList\n        val gameScoreMap = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val guessScoreMap = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val gameScoreList: List[Long] = gameScoreMap.keys.toList.sortBy(_._1).reverse.map(x\
    \ => gameScoreMap.get(x))\n        val guessScoreList: List[Long] = guessScoreMap.keys.toList.sortBy(_._1).reverse.map(x\
    \ => guessScoreMap.get(x))\n        val gameScoreDiff = gameScoreList.zip(guessScoreList).map(x\
    \ => x._1 - x._2)\n        val gameScoreDiffList = gameScoreDiff.map(x => x.toLong)\n\
    \        val gameScoreDiffListMap = gameScoreDiffList.groupBy(_._1).mapValues(_.map(_._2)).toMap\n\
    \        val gameScoreDiffListMapKeys = gameScoreDiffListMap.keys.toList.sortBy(_._1).reverse.map(x\
    \ => gameScoreDiffListMap.get(x))\n        val gameScoreDiffListMapValues = gameScoreDiffListMapKeys.map(x\
    \ => gameScoreDiffListMap.get(x))\n        val gameScoreDiffListMapValuesList\
    \ = gameScoreDiffListMapValues.toList.sortBy(_._1).reverse.map(x => x._2)\n  \
    \      val gameScoreDiffListMapValuesListMapKeys = gameScoreDiffListMapValuesList.toList.sortBy(_._1).reverse.map(x\
    \ => x._2)\n        val gameScoreDiffListMapValuesListMapValues = gameScoreDiffListMapValuesListMapKeys.map(x\
    \ => gameScoreDiffListMapValuesListMapKeys.get(x))\n        val gameScoreDiffListMapValuesListMapValuesList\
    \ = gameScoreDiffListMapValuesListMapValues.toList.sortBy(_._1).reverse.map(x\
    \ => x._2)\n        val gameScoreDiffListMapValuesListMapValuesListMapKeys = gameScoreDiffListMapValuesListMapValuesList.toList.sortBy(_._1).reverse.map(x\
    \ => x._2)\n        val gameScoreDiffListMapValuesListMapValuesListMapValues =\
    \ gameScoreDiffListMapValuesListMapValuesListMapKeys.map(x => gameScoreDiffListMapValuesListMapValuesListMapKeys.get(x))\n\
    \        val game", "        val guesses = guess.toSet\n        val scores = game.toSet\n\
    \        val diffs = scores.toList.zip(guesses.toList).map(x => Math.abs(x._1\
    \ - x._2))\n        val diffsSet = diffs.toSet\n        val diffsList = diffs.toList\n\
    \        val diffsSetList = diffsSet.toList\n        val diffsSetListLength =\
    \ diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diff", "        val guessesCount = guess.size\n        val gamesCount = game.size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val gamesScore =\
    \ game.map(x => x.toLong)\n        val guessesScore = guess.map(x => x.toLong)\n\
    \        val gamesScoreDiff = gamesScore diff guessesScore\n        val guessesScoreDiff\
    \ = guessesScore diff gamesScore\n        val gamesScoreDiffCount = gamesScoreDiff.count\n\
    \        val guessesScoreDiffCount = guessesScoreDiff.count\n        val gamesScoreDiffCountMinusOne\
    \ = gamesScoreDiffCount - 1\n        val guessesScoreDiffCountMinusOne = guessesScoreDiffCount\
    \ - 1\n        val gamesScoreDiffCountMinusTwo = gamesScoreDiffCount - 2\n   \
    \     val guessesScoreDiffCountMinusTwo = guessesScoreDiffCount - 2\n        val\
    \ gamesScoreDiffCountMinusThree = gamesScoreDiffCount - 3\n        val guessesScoreDiffCountMinusThree\
    \ = guessesScoreDiffCount - 3\n        val gamesScoreDiffCountMinusFour = gamesScoreDiffCount\
    \ - 4\n        val guessesScoreDiffCountMinusFour = guessesScoreDiffCount - 4\n\
    \        val gamesScoreDiffCountMinusFive = gamesScoreDiffCount - 5\n        val\
    \ guessesScoreDiffCountMinusFive = guessesScoreDiffCount - 5\n        val gamesScoreDiffCountMinusSix\
    \ = gamesScoreDiffCount - 6\n        val guessesScoreDiffCountMinusSix = guessesScoreDiffCount\
    \ - 6\n        val gamesScoreDiffCountMinusSeven = gamesScoreDiffCount - 7\n \
    \       val guessesScoreDiffCountMinusSeven = guessesScoreDiffCount - 7\n    \
    \    val gamesScoreDiffCountMinusEight = gamesScoreDiffCount - 8\n        val\
    \ guessesScoreDiffCountMinusEight = guessesScoreDiffCount - 8\n        val gamesScoreDiffCountMinusNine\
    \ = gamesScoreDiffCount - 9\n        val guessesScoreDiffCountMinusNine = guessesScoreDiffCount\
    \ - 9\n        val gamesScoreDiffCountMinusTen = gamesScoreDiffCount - 10\n  \
    \      val guessesScoreDiffCountMinusTen = guessesScoreDiffCount - 10\n      \
    \  val gamesScoreDiffCount", "        val gameScores = game.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val guessScores = guess.zipWithIndex.map(x => x._1\
    \ + x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n     \
    \   val guessScoreList = guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n\
    \        val guessScoreSet = guessScoreList.toSet\n        val gameScoreList =\
    \ gameScoreSet.toList\n        val guessScoreList = guessScoreSet.toList\n   \
    \     val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreList = gameScoreSet.toList\n        val guessScoreList =\
    \ guessScoreSet.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreList = gameScoreSet.toList\n\
    \        val guessScoreList = guessScoreSet.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreList = gameScoreSet.toList\n        val guessScoreList = guessScoreSet.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreList = gameScoreSet.toList\n        val guessScoreList =\
    \ guessScoreSet.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreList = gameScoreSet.toList\n\
    \        val guessScoreList = guessScoreSet.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreList = gameScoreSet.toList\n        val guessScoreList = guessScoreSet.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreList = gameScoreSet.toList\n        val guessScoreList =\
    \ guessScoreSet.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreList = gameScoreSet.toList\n\
    \        val guessScoreList = guessScoreSet.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        ", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScore = gameScores.map\
    \ { case (score, index) => score }.toList\n        val guessScore = guessScores.map\
    \ { case (score, index) => score }.toList\n        val gameScoreDiff = gameScore\
    \ diff guessScore\n        val gameScoreDiffList = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreDiffList\
    \ = gameScoreDiffList.map { case (score, index) => score -> gameScoreDiff(index)\
    \ }.toMap\n        val gameScoreDiffList = gameScoreDiffList.map { case (score,\
    \ index) => score -> gameScoreDiff(index) }.toMap\n        val gameScoreDiffList\
    \ = gameScoreDiffList.map { case (score, index) => score -> gameScoreDiff(index)\
    \ }.toMap\n        val gameScoreDiffList = gameScoreDiffList.map { case (score,\
    \ index) => score -> gameScoreDiff(index) }.toMap\n        val gameScoreDiffList\
    \ = gameScoreDiffList.map { case (score, index) => score -> gameScoreDiff(index)\
    \ }.toMap\n        val gameScoreDiffList = gameScoreDiffList.map { case (score,\
    \ index) => score -> gameScoreDiff(index) }.toMap\n        val gameScoreDiffList\
    \ = gameScoreDiffList.map { case (score, index) => score -> gameScoreDiff(index)\
    \ }.toMap\n        val gameScoreDiffList = gameScoreDiffList.map { case (score,\
    \ index) => score -> gameScoreDiff(index) }.toMap\n        val gameScoreDiffList\
    \ = gameScoreDiffList.map { case (score, index) => score -> gameScoreDiff(index)\
    \ }.toMap\n        val gameScoreDiffList = gameScoreDiffList.map { case (score,\
    \ index) => score -> gameScoreDiff(index) }.toMap\n        val gameScoreDiffList\
    \ = gameScoreDiffList.map { case (score, index) => score -> gameScoreDiff(index)\
    \ }.toMap\n        val gameScoreDiffList = gameScoreDiffList.map { case (score,\
    \ index) => score -> gameScoreDiff(index) }.toMap\n        val gameScoreDiffList\
    \ = gameScoreDiffList.map { case (score, index) => score -> gameScoreDiff(index)\
    \ }.toMap\n        val gameScoreDiffList = ", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScore = gameScores.sum\n \
    \       val guessScore = guessScores.sum\n        val gameScoreDiff = gameScore\
    \ - guessScore\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n     \
    \   val gameScoreDiffAbsMinusGuess = gameScoreDiffAbs - guessScore\n        val\
    \ gameScoreDiffAbsMinusGuessMinusGame = gameScoreDiffAbsMinusGuess - gameScore\n\
    \        val gameScoreDiffAbsMinusGuessMinusGameMinusGuess = gameScoreDiffAbsMinusGuessMinusGame\
    \ - gameScoreDiff\n        val gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGame\
    \ = gameScoreDiffAbsMinusGuessMinusGameMinusGuess - gameScoreDiffAbs\n       \
    \ val gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuess = gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGame\
    \ - gameScoreDiffAbsMinusGuessMinusGameMinusGuess\n        val gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGame\
    \ = gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuess - gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGame\n\
    \        val gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGameMinusGuess\
    \ = gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGuess\
    \ - gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGuess\n\
    \        val gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGuess\
    \ = gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGuessMinusGuess\
    \ - game", "        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => (index, score) }\n        val guessScores = guess.zipWithIndex.map { case\
    \ (score, index) => (index, score) }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreDiff\
    \ = gameScoreList.zip(guessScoreList).map { case (gameScore, guessScore) =>\n\
    \            val gameScoreDiff = gameScore - guessScore\n            if (gameScoreDiff\
    \ < 0)\n                gameScoreDiff\n            else\n                Math.abs(gameScoreDiff)\n\
    \        }\n        gameScoreDiff.toList", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        ", "  \
    \      val gameScores = game.zipWithIndex.filter(_._1 == _).map(_._2)\n      \
    \  val guessScores = guess.zipWithIndex.filter(_._1 == _).map(_._2)\n        val\
    \ gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSetSize = gameScoreSet.size\n        val guessScoreSetSize\
    \ = guessScoreSet.size\n        val gameScoreListSize = gameScoreList.size\n \
    \       val guessScoreListSize = guessScoreList.size\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreList", "        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val results = new mutable.ListBuffer[Long]()\n\
    \        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val guessesPerScore = guessesCount / scoresCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n\
    \        val guessesPerGuess = guessesCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n       \
    \ val guessScoreKeys = guessScoreMap.keySet\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessScoreValues = guessScoreMap.values.toList\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeyList = gameScoreKeys.toList\n\
    \        val guessScoreKeyList = guessScoreKeys.toList\n        val gameScoreValueList\
    \ = gameScoreValues.toList\n        val guessScoreValueList = guessScoreValues.toList\n\
    \        val gameScoreKeySetList = gameScoreKeySet.toList\n        val guessScoreKeySetList\
    \ = guessScoreKeySet.toList\n        val gameScoreValueSetList = gameScoreValueSet.toList\n\
    \        val guessScoreValueSetList = guessScoreValueSet.toList\n        val gameScoreKeySetSetList\
    \ = gameScoreKeySetList.toSet.toList\n        val guessScoreKeySetSetList = guessScoreKeySetList.toSet.toList\n\
    \        val gameScoreValueSetSetList = gameScoreValueSetList.toSet.toList\n \
    \       val guessScoreValueSetSetList = guessScoreValueSetList.toSet.toList\n\
    \        val gameScoreKeySetSetSetList = gameScoreKeySetSetList.toSet.toList\n\
    \        val guessScoreKeySetSetList = guessScoreKeySetSetList.toSet.toList\n\
    \        val gameScoreValueSetSetList = gameScoreValueSetSetList.toSet.toList\n\
    \        val guessScoreValueSetSetList = guessScoreValueSetSetList.toSet.toList\n\
    \        val gameScoreKeySetSetSetList = gameScoreKeySetSetSetList.toSet.toList\n\
    \        val guessScoreKeySetSetList = guessScoreKeySetSetList.toSet.toList\n\
    \        val gameScoreValueSetSetList = gameScoreValueSetSetList.toSet.toList\n\
    \        val guessScoreValueSetSetList = guessScoreValueSetSetList.toSet.toList\n\
    \        val gameScoreKeySetSetSetList = game", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guess.zip(game).map { case (guess, score) => guess\
    \ -> score }.toMap\n        val guessesWithScoreKeys = guessesWithScores.keys.toSet\n\
    \        val gameWithScoreKeys = gameScores.keys.toSet\n        val gameWithScores\
    \ = gameScores.map { case (score, index) => score -> index }.toMap\n        val\
    \ guessesWithScoreKeysAndGameWithScoreKeys = guessesWithScoreKeys ++ gameWithScoreKeys\n\
    \        val guessesWithScoreKeysAndGameWithScores = guessesWithScoreKeysAndGameWithScoreKeys.map\
    \ { case (guess, gameScore) =>\n            val gameScoreIndex = gameWithScores.get(gameScore)\n\
    \            val guessesScoreIndex = guessesWithScores.get(guess)\n          \
    \  val gameScoreDiff = gameScoreIndex - guessesScoreIndex\n            val guessesScoreDiff\
    \ = gameScoreIndex - gameWithScores.get(gameScore)\n            val gameScoreDiffAbs\
    \ = math.abs(gameScoreDiff)\n            val guessesScoreDiffAbs = math.abs(guessesScoreDiff)\n\
    \            val gameScoreDiffAbsOrZero = gameScoreDiffAbs.orElse(0)\n       \
    \     val guessesScoreDiffAbsOrZero = guessesScoreDiffAbs.orElse(0)\n        \
    \    (gameScoreDiffAbsOrZero, guessesScoreDiffAbsOrZero)\n        }\n        val\
    \ guessesWithScoreKeysAndGameWithScoresAndGameWithScoreKeysAndGameWithScores =\
    \ guessesWithScoreKeysAndGameWithScores.map { case (gameScoreDiffAbsOrZero, guessesScoreDiffAbsOrZero)\
    \ =>\n            val gameScoreDiff = gameScoreDiffAbsOrZero.toLong\n        \
    \    val guessesScoreDiff = guessesScoreDiffAbsOrZero.toLong\n            val\
    \ gameScoreDiffAbs = math.abs(gameScoreDiff)\n            val guessesScoreDiffAbs\
    \ = math.abs(guessesScoreDiff)\n            val gameScoreDiffAbsOrZero = gameScoreDiffAbs.orElse(0)\n\
    \            val guessesScoreDiffAbsOrZero = guessesScoreDiffAbs.orElse(0)\n \
    \           (gameScoreDiffAbsOr", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guessesWithScoreAndIndex = guess.zip(game).map { case (guess, score)\
    \ => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndGuess\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> guess\
    \ }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuess = guess.zip(game).map\
    \ { case (guess, score) => guess -> score -> index -> guess -> guess }.toMap\n\
    \        val guessesWithScoreAndIndexAndGuessAndGuessAndGuess = guess.zip(game).map\
    \ { case (guess, score) => guess -> score -> index -> guess -> guess -> guess\
    \ }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> guess\
    \ -> guess -> guess -> guess }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> guess\
    \ -> guess -> guess -> guess -> guess }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> guess\
    \ -> guess -> guess -> guess -> guess -> guess }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> guess\
    \ -> guess -> guess -> guess -> guess -> guess }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index ", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessScores = guess.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val gameScores = gameScores.toList\n        val guessScores\
    \ = guessScores.toList\n        val gameScoreCount = gameScores.size\n       \
    \ val guessScoreCount = guessScores.size\n        val gameScoreDiff = gameScoreCount\
    \ - guessScoreCount\n        val guessScoreDiff = guessScoreCount - gameScoreCount\n\
    \        val gameScoreDiffList = gameScoreDiff.toList.map(x => x.toLong)\n   \
    \     val guessScoreDiffList = guessScoreDiff.toList.map(x => x.toLong)\n    \
    \    val gameScoreDiffList2 = gameScoreDiffList.zip(guessScoreDiffList).map {\
    \ case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n \
    \       val gameScoreDiffList3 = gameScoreDiffList2.toList\n        val guessScoreDiffList3\
    \ = guessScoreDiffList2.toList\n        val gameScoreDiffList4 = gameScoreDiffList3.zip(guessScoreDiffList3).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList5 = gameScoreDiffList4.toList\n        val guessScoreDiffList5\
    \ = guessScoreDiffList4.toList\n        val gameScoreDiffList6 = gameScoreDiffList5.zip(guessScoreDiffList5).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList7 = gameScoreDiffList6.toList\n        val guessScoreDiffList7\
    \ = guessScoreDiffList6.toList\n        val gameScoreDiffList8 = gameScoreDiffList7.zip(guessScoreDiffList7).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList9 = gameScoreDiffList8.toList\n        val guessScoreDiffList9\
    \ = guessScoreDiffList8.toList\n        val gameScoreDiffList10 = gameScoreDiffList9.zip(guessScoreDiffList9).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList11 = gameScoreDiffList10.toList\n        val guessScoreDiffList11\
    \ = guessScoreDiffList10.toList\n        val gameScoreDiffList12 = game", "  \
    \      val gameScores = game.zipWithIndex.filter(_._1 == _).map(_._2)\n      \
    \  val guessesScores = guess.zipWithIndex.filter(_._1 == _).map(_._2)\n      \
    \  val guessesWithScores = guessesScores.zip(gameScores)\n        val guessesWithScoresSorted\
    \ = guessesWithScores.sortBy(_._1).reverse\n        val guessesWithScoresSortedWithIndex\
    \ = guessesWithScoresSorted.zipWithIndex\n        val guessesWithScoresSortedWithIndexSorted\
    \ = guessesWithScoresSortedWithIndex.sortBy(_._1).reverse\n        val guessesWithScoresSortedWithIndexSortedWithIndex\
    \ = guessesWithScoresSortedWithIndexSortedWithIndex.sortBy(_._2).reverse\n   \
    \     val guessesWithScoresSortedWithIndexSortedWithIndexSorted = guessesWithScoresSortedWithIndexSortedWithIndexSorted.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndex =\
    \ guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessScoreList = new mutable.ListBuffer[Long]()\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList =\
    \ new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) =>\n            val guessScore = guessScoreMap.get(index)\n         \
    \   if (guessScore == null) {\n                gameScoreList.add(score)\n    \
    \        } else {\n                val gameScore = gameScoreMap.get(index)\n \
    \               val diff = abs(guessScore - gameScore)\n                gameScoreList.add(gameScore)\n\
    \                guessScoreList.add(guessScore)\n                gameScoreList.add(diff)\n\
    \                guessScoreList.add(diff)\n            }\n        }\n        gameScoreList.toList",
  "        val guesses = gues\n        val scores = game\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        val result =\
    \ new mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < guessesCount)\
    \ {\n            val guess = guesses(i)\n            val score = scores(i)\n \
    \           val difference = abs(guess - score)\n            if (difference ==\
    \ 0) {\n                result.add(i)\n            } else {\n                result.add(difference)\n\
    \            }\n            i += 1\n        }\n        result.toList", "     \
    \   val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScore = gameScores.sum\n        val guessScore = guessScores.sum\n\
    \        val gameScoreDiff = gameScore - guessScore\n        val gameScoreDiffAbs\
    \ = Math.abs(gameScoreDiff)\n        val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArray.length\n    \
    \    val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAb", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guessesScores.map { case (score, index) => score -> gameScores(index) }.toMap\n\
    \        val guessesWithoutScores = guessesScores.map { case (score, index) =>\
    \ gameScores(index) }.toMap\n        val guessesWithoutScores = guessesWithoutScores.map\
    \ { case (score, index) => gameScores(index) }.toMap\n        val guessesWithScoreAndIndex\
    \ = guessesWithScores.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesWithoutScoreAndIndex = guessesWithoutScores.map { case (score,\
    \ index) => index -> score }.toMap\n        val guessesWithoutScoreAndIndex =\
    \ guessesWithoutScores.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithScoreAndIndexAndScore = guessesWithScoreAndIndex.map {\
    \ case (score, index) => index -> score }.toMap\n        val guessesWithoutScoreAndIndexAndScore\
    \ = guessesWithoutScoreAndIndex.map { case (score, index) => index -> score }.toMap\n\
    \        val guessesWithoutScoreAndIndexAndScore = guessesWithoutScoreAndIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndex\
    \ = guessesWithScoreAndIndexAndScore.map { case (score, index) => index -> score\
    \ }.toMap\n        val guessesWithoutScoreAndIndexAndScoreAndIndex = guessesWithoutScoreAndIndexAndScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithoutScoreAndIndexAndScoreAndIndex\
    \ = guessesWithoutScoreAndIndexAndScore.map { case (score, index) => index ->\
    \ score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScore\
    \ = guessesWithScoreAndIndexAndScoreAndIndex.map { case (score, index) => index\
    \ -> score }.toMap\n        val guessesWithoutScoreAndIndexAndScoreAndIndexAndScore\
    \ = guessesWithoutScoreAndIndexAndScoreAndIndex.map { case (score, index) => index\
    \ -> score }.toMap\n        val guessesWithout", "        val guesses = gues\n\
    \        val scores = game\n        val guesses_count = guesses.size\n       \
    \ val scores_count = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guesses_count) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val guessed_correct\
    \ = guess == score\n            val guessed_wrong = !(guessed_correct)\n     \
    \       val diff = if (guessed_correct) 0 else abs(guess - score)\n          \
    \  val guessed_wrong_count = if (guessed_wrong) 1 else 0\n            val guessed_correct_count\
    \ = if (guessed_correct) 1 else 0\n            val guessed_wrong_count = if (guessed_wrong)\
    \ 1 else 0\n            val guessed_correct_count = if (guessed_correct) 1 else\
    \ 0\n            val guessed_wrong_count = if (guessed_wrong) 1 else 0\n     \
    \       val guessed_correct_count = if (guessed_correct) 1 else 0\n          \
    \  val guessed_wrong_count = if (guessed_wrong) 1 else 0\n            val guessed_correct_count\
    \ = if (guessed_correct) 1 else 0\n            val guessed_wrong_count = if (guessed_wrong)\
    \ 1 else 0\n            val guessed_correct_count = if (guessed_correct) 1 else\
    \ 0\n            val guessed_wrong_count = if (guessed_wrong) 1 else 0\n     \
    \       val guessed_correct_count = if (guessed_correct) 1 else 0\n          \
    \  val guessed_wrong_count = if (guessed_wrong) 1 else 0\n            val guessed_correct_count\
    \ = if (guessed_correct) 1 else 0\n            val guessed_wrong_count = if (guessed_wrong)\
    \ 1 else 0\n            val guessed_correct_count = if (guessed_correct) 1 else\
    \ 0\n            val guessed_wrong_count = if (guessed_wrong) 1 else 0\n     \
    \       val guessed_correct_count = if (guessed_correct) 1 else 0\n          \
    \  val guessed_wrong_count = if (guessed_wrong) 1 else 0\n            val guessed_correct_count\
    \ = if (guessed_correct) 1 else 0\n            val guessed_wrong_count = if (guessed_wrong)\
    \ 1 else 0\n            val guessed_correct_count = if (guessed_correct) 1 else\
    \ 0\n            val guessed_wrong_count = if (guessed_wrong) 1 else 0\n     \
    \       val guessed_correct_count = if (guessed_correct) 1 else 0\n          \
    \  val guessed_wrong_count = if (guessed_wrong) 1 else 0\n            val guessed_correct_count\
    \ = if (guessed_correct) 1 else 0\n            val guessed_wrong_count = if (guessed_wrong)\
    \ 1 else 0\n            val guessed_correct_count = if (guessed_correct) 1 else\
    \ 0\n            val gues", "        val gameScores = game.zipWithIndex.map {\
    \ case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScore = gameScores.map\
    \ { case (score, index) => score }\n        val guessScore = guessScores.map {\
    \ case (score, index) => score }\n        val gameScores = gameScores.map { case\
    \ (score, index) => gameScore(index) - guessScore(index) }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.map { case score => if\
    \ (score < 0) score else -score }\n        gameScores.toList", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n  \
    \      val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => index -> score }.toMap\n        val guessesWithIndexes = guessesScores.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithScoreAndIndex\
    \ = guessesScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithIndexesAndScores = guessesScores.map { case (score, index)\
    \ => index -> score -> index }.toMap\n        val guessesWithScoreAndIndexes =\
    \ guessesScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithIndexesAndScoresAndIndex = guessesScores.map { case (score,\
    \ index) => index -> score -> index }.toMap\n        val guessesWithScoreAndIndexesAndScores\
    \ = guessesScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithIndexesAndScoresAndIndexes = guessesScores.map { case\
    \ (score, index) => index -> score -> index }.toMap\n        val guessesWithScoreAndIndexesAndScoresAndIndex\
    \ = guessesScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithScoreAndIndexesAndScoresAndIndexesAndScores = guessesScores.map\
    \ { case (score, index) => index -> score -> index }.toMap\n        val guessesWithIndexesAndScoresAndIndexesAndScores\
    \ = guessesScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithScoreAndIndexesAndScoresAndIndexesAndIndexesAndScores\
    \ = guessesScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithIndexesAndScoresAndIndexesAndIndexesAndIndexesAndScores\
    \ = guessesScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithScoreAndIndexesAndScoresAndIndexesAndIndexesAndIndexesAndIndexesAndScores\
    \ = guessesScores.map { case (score, index) => index ", "        val guesses =\
    \ guess.map(x => Math.abs(x - game))\n        val scores = game.map(x => Math.abs(x\
    \ - guess))\n        guesses.zip(scores).map(x => if (x._1 == x._2) 0 else x._1\
    \ - x._2)", "        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guessesWithScores = guess.zip(game).map { case (guess, score) => guess\
    \ -> score }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guessesWithScores = guess.zip(game).map { case (guess, score) => guess\
    \ -> score }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guessesWithScores = guess.zip(game).map { case (guess, score) => guess\
    \ -> score }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guessesWithScores = guess.zip(game).map { case (guess, score) => guess\
    \ -> score }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guesses", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score - guess(index) }\n        val gameScore = gameScores.sum\n \
    \       val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score == 0) 0 else abs(score - gameScore) }\n        gameScores.toList",
  "        val gameSet = game.distinct\n        val guessSet = guess.distinct\n  \
    \      val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet =\
    \ guessesScoreList.toSet\n        val gameScoreList = gameScoreList.filter(_ >\
    \ guessesScoreList.size)\n        val guessesScoreList = guessesScoreList.filter(_\
    \ > gameScoreList.size)\n        val gameScoreList = gameScoreList.filter(_ <\
    \ guessesScoreList.size)\n        val guessesScoreList = guessesScoreList.filter(_\
    \ < gameScoreList.size)\n        val gameScoreList = gameScoreList.filter(_ ==\
    \ guessesScoreList.size)\n        val guessesScoreList = guessesScoreList.filter(_\
    \ == gameScoreList.size)\n        val gameScoreList = gameScoreList.filter(_ !=\
    \ guessesScoreList.size)\n        val guessesScoreList = guessesScoreList.filter(_\
    \ != gameScoreList.size)\n        val gameScoreList = gameScoreList.filter(_ <\
    \ guessesScoreList.size)\n        val guessesScoreList = guessesScoreList.filter(_\
    \ < gameScoreList.size)\n        val gameScoreList = gameScoreList.filter(_ >\
    \ guessesScoreList.size)\n        val guessesScoreList = guessesScoreList.filter(_\
    \ > gameScoreList.size)\n        val gameScoreList = gameScoreList.filter(_ ==\
    \ guessesScoreList.size)\n        val guessesScoreList = guessesScoreList.filter(_\
    \ == gameScoreList.size)\n        val gameScoreList = gameScoreList.filter(_ !=\
    \ guessesScoreList.size)\n        val guessesScoreList = guessesScoreList.filter(_\
    \ != gameScoreList.size)\n        val gameScoreList = gameScoreList.filter(_ <\
    \ guessesScoreList.size)\n        val guessesScoreList = guessesScoreList.filter(_\
    \ < gameScoreList.size)\n        val gameScoreList = gameScoreList.filter(_ >\
    \ guessesScoreList.size)\n        val guessesScoreList = guessesScoreList.filter(_\
    \ > gameScoreList.size)\n        val gameScoreList = gameScoreList.filter(_ ==\
    \ guessesScoreList.size)\n        val guessesScoreList = guessesScoreList.filter(_\
    \ == gameScoreList.size)\n        val game", "        val guesses = gues\n   \
    \     val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val diff = abs(guess\
    \ - score)\n            if (diff > 0) {\n                result.add(diff)\n  \
    \          }\n            i += 1\n        }\n        result.toList", "       \
    \ val guessesCount = guess.size\n        val gameCount = game.size\n        val\
    \ guessesToGuess = guessesCount / gameCount\n        val guessesToGame = guessesCount\
    \ % gameCount\n        val gameToGuess = gameCount / guessesCount\n        val\
    \ gameToGame = gameCount % guessesCount\n        val gameToGuessesCount = gameToGuess\
    \ * guessesCount\n        val gameToGameCount = gameToGame * gameCount\n     \
    \   val guessesToGuessesCount = guessesToGuess * guessesCount\n        val guessesToGameCount\
    \ = guessesToGame * gameCount\n        val guessesToGuessesToGameCount = guessesToGuessesCount\
    \ * gameCount\n        val guessesToGuessesToGameToGuessesCount = guessesToGuessesToGameCount\
    \ * guessesCount\n        val guessesToGuessesToGameToGameCount = guessesToGuessesToGameToGuessesCount\
    \ * gameCount\n        val guessesToGuessesToGameToGameToGuessesCount = guessesToGuessesToGameToGameCount\
    \ * guessesCount\n        val guessesToGuessesToGameToGameToGameCount = guessesToGuessesToGameToGameToGuessesCount\
    \ * gameCount\n        val guessesToGuessesToGameToGameToGameToGuessesCount =\
    \ guessesToGuessesToGameToGameToGuessesCount * guessesCount\n        val guessesToGuessesToGameToGameToGameToGameCount\
    \ = guessesToGuessesToGameToGameToGameToGuessesCount * gameCount\n        val\
    \ guessesToGuessesToGameToGameToGameToGameToGuessesCount = guessesToGuessesToGameToGameToGameToGuessesCount\
    \ * guessesCount\n        val guessesToGuessesToGameToGameToGameToGameToGuessesToGameCount\
    \ = guessesToGuessesToGameToGameToGameToGuessesToGameCount * guessesCount\n  \
    \      val guessesToGuessesToGameToGameToGameToGameToGuessesToGameToGuessesCount\
    \ = guessesToGuessesToGameToGameToGameToGuessesToGameToGuessesCount * guessesCount\n\
    \        val guesses", "        val guesses = gues\n        val scores = game\n\
    \        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < guessesCount) {\n            val guess = guesses(i)\n        \
    \    val score = scores(i)\n            val diff = Math.abs(guess - score)\n \
    \           if (diff == score) result.add(i)\n            else if (diff > score)\
    \ result.add(i)\n            else result.add(i) += diff\n            i += 1\n\
    \        }\n        result.toList", "        val guesses = gues\n        val scores\
    \ = game\n        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val results = new mutable.ListBuffer[Long]()\n        val guessesRemaining\
    \ = guessesCount - 1\n        val scoresRemaining = scoresCount - 1\n        val\
    \ guessesRemainingInScore = guessesRemaining / scoresCount\n        val scoresRemainingInScore\
    \ = scoresRemaining / guessesCount\n        val guessesRemainingInScore2 = guessesRemainingInScore\
    \ * scoresCount\n        val scoresRemainingInScore2 = scoresRemainingInScore\
    \ * guessesCount\n        val guessesRemainingInScore3 = guessesRemainingInScore2\
    \ * scoresCount\n        val scoresRemainingInScore3 = scoresRemainingInScore2\
    \ * guessesCount\n        val guessesRemainingInScore4 = guessesRemainingInScore3\
    \ * scoresCount\n        val scoresRemainingInScore4 = scoresRemainingInScore3\
    \ * guessesCount\n        val guessesRemainingInScore5 = guessesRemainingInScore4\
    \ * scoresCount\n        val scoresRemainingInScore5 = scoresRemainingInScore4\
    \ * guessesCount\n        val guessesRemainingInScore6 = guessesRemainingInScore5\
    \ * scoresCount\n        val scoresRemainingInScore6 = scoresRemainingInScore5\
    \ * guessesCount\n        val guessesRemainingInScore7 = guessesRemainingInScore6\
    \ * scoresCount\n        val scoresRemainingInScore7 = scoresRemainingInScore6\
    \ * guessesCount\n        val guessesRemainingInScore8 = guessesRemainingInScore7\
    \ * scoresCount\n        val scoresRemainingInScore8 = scoresRemainingInScore7\
    \ * guessesCount\n        val guessesRemainingInScore9 = guessesRemainingInScore8\
    \ * scoresCount\n        val scoresRemainingInScore9 = scoresRemainingInScore8\
    \ * guessesCount\n        val guessesRemainingInScore10 = guessesRemainingInScore9\
    \ * scoresCount\n        val scoresRemainingInScore10 = scoresRemainingInScore9\
    \ * guessesCount\n        val guessesRemainingInScore11 = guessesRemainingInScore10\
    \ * scoresCount\n        val scoresRemainingInScore11 = scoresRemainingInScore10\
    \ * guessesCount\n        val guessesRemainingInScore12 = guessesRemainingInScore11\
    \ * scoresCount\n        val scoresRemainingInScore12 = scoresRemainingInScore11\
    \ * guessesCount\n        val gues", "        val guesses = guess.toList\n   \
    \     val scores = game.toList\n        val guessesCount = guesses.size\n    \
    \    val scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        val guessesTaken = guessesRemaining\n        val\
    \ scoresTaken = scoresRemaining\n        val guessesTakenIncorrect = guessesTaken\n\
    \        val scoresTakenIncorrect = scoresTaken\n        val guessesTakenCorrect\
    \ = guessesTaken\n        val scoresTakenCorrect = scoresTaken\n        val guessesTakenIncorrectCorrect\
    \ = guessesTakenIncorrect\n        val scoresTakenIncorrectCorrect = scoresTakenIncorrect\n\
    \        val guessesTakenCorrectCorrect = guessesTakenCorrect\n        val scoresTakenCorrectCorrect\
    \ = scoresTakenCorrect\n        val guessesTakenIncorrectIncorrect = guessesTakenIncorrect\n\
    \        val scoresTakenIncorrectIncorrect = scoresTakenIncorrect\n        val\
    \ guessesTakenCorrectIncorrect = guessesTakenCorrectIncorrect\n        val scoresTakenCorrectIncorrect\
    \ = scoresTakenCorrectIncorrect\n        val guessesTakenIncorrectCorrectCorrect\
    \ = guessesTakenIncorrectCorrect\n        val scoresTakenIncorrectCorrectCorrect\
    \ = scoresTakenIncorrectCorrectCorrect\n        val guessesTakenCorrectCorrectCorrect\
    \ = guessesTakenCorrectCorrect\n        val scoresTakenCorrectCorrectCorrect =\
    \ scoresTakenCorrectCorrectCorrect\n        val guessesTakenIncorrectIncorrectCorrect\
    \ = guessesTakenIncorrectIncorrect\n        val scoresTakenIncorrectIncorrectCorrect\
    \ = scoresTakenIncorrectIncorrectCorrect\n        val guessesTakenCorrectIncorrectCorrect\
    \ = guessesTakenCorrectIncorrectCorrect\n        val scoresTakenCorrectIncorrectCorrect\
    \ = scoresTakenCorrectIncorrectCorrect\n        val guessesTakenIncorrectIncorrectIncorrect\
    \ = guessesTakenIncorrectIncorrect\n        val scoresTakenIncorrectIncorrectIncorrect\
    \ = scoresTakenIncorrectIncorrectIncorrect\n        val guessesTakenCorrectIncorrectIncorrect\
    \ = guessesTakenCorrectIncorrectIncorrect\n        val scoresTakenCorrectIncorrectIncorrectIncorrect\
    \ = scoresTakenCorrectIncorrectIncorrectIncorrect\n        val guessesTakenIn",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }\n        val gameScoreSet = gameScores.toSet\n  \
    \      val guessesScoreSet = guessesScores.toSet\n        val gameScoreList =\
    \ gameScoreSet.toList\n        val guessesScoreList = guessesScoreSet.toList\n\
    \        val gameScoreSetSize = gameScoreSet.size\n        val guessesScoreSetSize\
    \ = guessesScoreSet.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreListSize\
    \ = gameScoreListSize - gameScoreSetSize\n        val guessesScoreListSize = guessesScoreListSize\
    \ - guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize - gameScoreSetSize\n\
    \        val guessesScoreListSize = guessesScoreListSize - guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize - gameScoreSetSize\n      \
    \  val guessesScoreListSize = guessesScoreListSize - guessesScoreSetSize\n   \
    \     val gameScoreListSize = gameScoreListSize - gameScoreSetSize\n        val\
    \ guessesScoreListSize = guessesScoreListSize - guessesScoreSetSize\n        val\
    \ gameScoreListSize = gameScoreListSize - gameScoreSetSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize - guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize - gameScoreSetSize\n        val guessesScoreListSize = guessesScoreListSize\
    \ - guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize - gameScoreSetSize\n\
    \        val guessesScoreListSize = guessesScoreListSize - guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize - gameScoreSetSize\n      \
    \  val guessesScoreListSize = guessesScoreListSize - guessesScoreSetSize\n   \
    \     val gameScoreListSize = gameScoreListSize - gameScoreSetSize\n        val\
    \ guessesScoreListSize = guessesScoreListSize - guessesScoreSetSize\n        val\
    \ gameScoreListSize = gameScoreListSize - gameScoreSetSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize - guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize - gameScoreSetSize\n", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesCorrect = guessesScores.filter(_._1 == gameScores.keys)\n   \
    \     val guessesIncorrect = guessesScores.filter(_._1 != gameScores.keys)\n \
    \       val guessesDiff = guessesCorrect.map(x => guessesScores(x._1) - gameScores(x._1))\n\
    \        val guessesDiffIncorrect = guessesIncorrect.map(x => guessesScores(x._1)\
    \ - gameScores(x._1))\n        val guessesDiffCorrect = guessesCorrect.map(x =>\
    \ gameScores(x._1) - guessesScores(x._1))\n        val guessesDiffIncorrectCorrect\
    \ = guessesIncorrectCorrect.map(x => gameScores(x._1) - guessesScores(x._1))\n\
    \        val guessesDiffCorrectIncorrect = guessesCorrectIncorrect.map(x => guessesScores(x._1)\
    \ - gameScores(x._1))\n        val guessesDiffCorrectCorrect = guessesCorrectCorrect.map(x\
    \ => gameScores(x._1) - guessesScores(x._1))\n        val guessesDiffIncorrectIncorrect\
    \ = guessesIncorrectIncorrect.map(x => guessesScores(x._1) - gameScores(x._1))\n\
    \        val guessesDiffCorrectCorrect = guessesCorrectCorrect.map(x => gameScores(x._1)\
    \ - guessesScores(x._1))\n        val guessesDiffIncorrectCorrect = guessesIncorrectCorrect.map(x\
    \ => guessesScores(x._1) - gameScores(x._1))\n        val guessesDiffCorrectIncorrect\
    \ = guessesCorrectIncorrect.map(x => guessesScores(x._1) - gameScores(x._1))\n\
    \        val guessesDiffCorrectCorrect = guessesCorrectCorrect.map(x => gameScores(x._1)\
    \ - guessesScores(x._1))\n        val guessesDiffIncorrectIncorrect = guessesIncorrectIncorrect.map(x\
    \ => guessesScores(x._1) - gameScores(x._1))\n        val guessesDiffCorrectIncorrect\
    \ = guessesCorrectIncorrect.map(x => guessesScores(x._1) - gameScores(x._1))\n\
    \        val guessesDiffCorrectCorrect = guessesCorrectCorrect.map(x => gameScores(x.",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScore = gameScores.map { case\
    \ (score, index) => score }\n        val guessScore = guessScores.map { case (score,\
    \ index) => score }\n        val gameScores = gameScores.map { case (score, index)\
    \ => gameScore(index) - guessScore(index) }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.map { case score => if (score < 0) score\
    \ else -score }\n        gameScores.toList", "        val gameSet = game.distinct\n\
    \        val guessSet = guess.distinct\n        val result = gameSet.zip(guessSet).map\
    \ { case (game, guess) =>\n            val diff = abs(guess - game)\n        \
    \    if (guess == game) diff else -diff\n        }\n        result.toList", " \
    \       val gameSet = game.distinct\n        val guessSet = guess.distinct\n \
    \       val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSet",
  "        val gameLength = game.size\n        val guessLength = guess.size\n    \
    \    val result = new mutable.ListBuffer[Long]()\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffs = gameScores.zip(guessScores).map\
    \ { case (gameScore, guessScore) => Math.abs(gameScore - guessScore) }\n     \
    \   val gameScoreDiffsSorted = gameScoreDiffs.sortWith(_ < _)\n        val gameScoreDiffsSortedLength\
    \ = gameScoreDiffsSorted.length\n        val gameScoreDiffsSortedIndexes = gameScoreDiffsSorted.zipWithIndex.map\
    \ { case (gameScoreDiff, index) => index }\n        val guessScoreDiffs = guessScores.zip(gameScores).map\
    \ { case (guessScore, gameScore) => Math.abs(guessScore - gameScore) }\n     \
    \   val guessScoreDiffsSorted = guessScoreDiffs.sortWith(_ < _)\n        val guessScoreDiffsSortedLength\
    \ = guessScoreDiffsSorted.length\n        val guessScoreDiffsSortedIndexes = guessScoreDiffsSorted.zipWithIndex.map\
    \ { case (guessScoreDiff, index) => index }\n        val gameScoreDiffsSortedIndexesLength\
    \ = gameScoreDiffsSortedIndexes.length\n        val guessScoreDiffsSortedIndexesLength\
    \ = guessScoreDiffsSortedIndexes.length\n        val gameScoreDiffsSortedIndexesLength\
    \ = gameScoreDiffsSortedIndexes.length\n        val guessScoreDiffsSortedIndexesLength\
    \ = guessScoreDiffsSortedIndexes.length\n        val gameScoreDiffsSortedIndexesLength\
    \ = gameScoreDiffsSortedIndexes.length\n        val guessScoreDiffsSortedIndexesLength\
    \ = guessScoreDiffsSortedIndexes.length\n        val gameScoreDiffsSortedIndexesLength\
    \ = gameScoreDiffsSortedIndexes.length\n        val guessScoreDiffsSortedIndexesLength\
    \ = guessScoreDiffsSortedIndexes.length\n        val gameScoreDiffsSortedIndexesLength\
    \ = gameScoreDiffsSortedIndexes.length\n        val guessScoreDiffsSortedIndexesLength\
    \ = guessScoreDiffsSortedIndexes.length\n        val gameScoreDiffsSortedIndexesLength\
    \ = gameScoreDiffsSortedIndexes.length\n        val guessScoreDiffsSortedIndexesLength\
    \ = guessScoreDiffsSortedIndexes.length\n        val gameScoreDiffsSortedIndexesLength\
    \ = gameScoreDiffsSorted", "        val gameScores = game.zipWithIndex.map{ case\
    \ (score, index) => score }\n        val guessScores = guess.zipWithIndex.map{\
    \ case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreMap = gameScoreSet.toMap\n        val guessScoreMap = guessScoreSet.toMap\n\
    \        val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreMap = gameScoreSet.toMap\n\
    \        val guessScoreMap = guessScoreSet.toMap\n        val gameScoreList =\
    \ gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n   \
    \     val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreMap = gameScoreSet.toMap\n        val guessScoreMap = guessScoreSet.toMap\n\
    \        val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreMap = gameScoreSet.toMap\n\
    \        val guessScoreMap = guessScoreSet.toMap\n        val gameScoreList =\
    \ gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n   \
    \     val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreMap = gameScoreSet.toMap\n        val guessScoreMap = guessScoreSet.toMap\n\
    \        val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreMap = gameScoreSet.toMap\n\
    \        val guessScoreMap = guessScoreSet.toMap\n        val gameScoreList =\
    \ gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n   \
    \     val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guess",
  "        val gameScores = game.zipWithIndex.map(x => x._2 - x._1).toList\n     \
    \   val guessScores = guess.zipWithIndex.map(x => x._2 - x._1).toList\n      \
    \  val gameScoreMap = gameScores.groupBy(x => x._1).map(x => x._2.map(y => y._2\
    \ - y._1).sum).toList\n        val guessScoreMap = guessScores.groupBy(x => x._1).map(x\
    \ => x._2.map(y => y._2 - y._1).sum).toList\n        val gameScoreMap2 = gameScores.groupBy(x\
    \ => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n        val guessScoreMap2\
    \ = guessScores.groupBy(x => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n\
    \        val gameScoreMap3 = gameScores.groupBy(x => x._1).map(x => x._2.map(y\
    \ => y._2 - y._1).sum).toList\n        val guessScoreMap3 = guessScores.groupBy(x\
    \ => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n        val gameScoreMap4\
    \ = gameScores.groupBy(x => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n\
    \        val guessScoreMap4 = guessScores.groupBy(x => x._1).map(x => x._2.map(y\
    \ => y._2 - y._1).sum).toList\n        val gameScoreMap5 = gameScores.groupBy(x\
    \ => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n        val guessScoreMap5\
    \ = guessScores.groupBy(x => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n\
    \        val gameScoreMap6 = gameScores.groupBy(x => x._1).map(x => x._2.map(y\
    \ => y._2 - y._1).sum).toList\n        val guessScoreMap6 = guessScores.groupBy(x\
    \ => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n        val gameScoreMap7\
    \ = gameScores.groupBy(x => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n\
    \        val guessScoreMap7 = guessScores.groupBy(x => x.", "        val guesses\
    \ = gues\n        val scores = game\n        val guesses_count = guesses.size\n\
    \        val scores_count = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guesses_count) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val diff = abs(guess\
    \ - score)\n            if (diff > 0) {\n                result.add(diff)\n  \
    \          }\n            i += 1\n        }\n        result.toList", "       \
    \ val gameScores = game.zipWithIndex.map { case (score, index) => score }\n  \
    \      val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreSum = gameScores.sum\n        val\
    \ guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum -\
    \ gameScoreCount\n        val guessScoreDiff = guessScoreSum - guessScoreCount\n\
    \        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val guessScoreDiffAbsArray = guessScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val guessScoreDiffAbsArray = guessScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val guessScoreDiffAbsArray = guessScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val guessScoreDiffAbsArray = guessScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val guessScoreDiffAbsArray = guessScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val guessScoreDiffAbsArray = guessScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val guessScoreDiffAbsArray = guessScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val guessScoreDiffAbsArray = guessScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(_.toLong)\n\
    \        ", "        val guesses = gues\n        val scores = game\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val guessesToScores = guesses.zip(scores)\n        val scoresToGuesses = scores.zip(guesses)\n\
    \        val guessesToGuesses = guessesToScores.zip(scoresToGuesses)\n       \
    \ val guessesToGuessesCount = guessesToGuesses.size\n        val scoresToGuessesCount\
    \ = scoresToGuesses.size\n        val guessesToGuessesToScores = guessesToGuesses.zip(scoresToGuesses)\n\
    \        val guessesToGuessesToScoresCount = guessesToGuessesToScores.size\n \
    \       val guessesToGuessesToScoresToGuesses = guessesToGuessesToScores.zip(guessesToGuesses)\n\
    \        val guessesToGuessesToScoresToGuessesCount = guessesToGuessesToScoresToGuesses.size\n\
    \        val guessesToGuessesToScoresToGuessesToScores = guessesToGuessesToScoresToGuesses.zip(scoresToGuesses)\n\
    \        val guessesToGuessesToScoresToGuessesToScoresCount = guessesToGuessesToScoresToGuessesToScores.size\n\
    \        val guessesToGuessesToScoresToGuessesToScoresToGuesses = guessesToGuessesToScoresToGuessesToScores.zip(guessesToGuesses)\n\
    \        val guessesToGuessesToScoresToGuessesToScoresToGuessesCount = guessesToGuessesToScoresToGuessesToScoresToGuesses.size\n\
    \        val guessesToGuessesToScoresToGuessesToScoresToGuessesToScores = guessesToGuessesToScoresToGuessesToScoresToGuesses.zip(guessesToGuesses)\n\
    \        val guessesToGuessesToScoresToGuessesToScoresToGuessesToScoresCount =\
    \ guessesToGuessesToScoresToGuessesToScoresToGuessesToScoresToGuesses.size\n \
    \       val guessesToGuessesToScores", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guessesScores.map { case (score, index) => score\
    \ -> gameScores(index) }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.sortBy(_._1)\n        val guessesWithIndexesSortedWithScores\
    \ = guessesWithIndexesSorted.map { case (score, index) => index -> score }.toMap\n\
    \        val guessesWithIndexesSortedWithScoresSorted = guessesWithIndexesSortedWithScores.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexes = guessesWithIndexesSortedWithScoresSorted.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithScoresSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexes.sortBy(_._1)\n       \
    \ val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexes = guessesWithIndexesSortedWithScoresSortedWithIndexesSorted.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexes.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSorted.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexes.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.",
  "        val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ result: List[Long] = guesses.map(x => if (scores.contains(x)) 0 else abs(x -\
    \ scores.head))\n        result", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guessesScores.map { case (score, index) => index\
    \ -> score }.toMap\n        val guessesWithIndexes = guessesWithScores.map { case\
    \ (score, index) => index -> guess }.toMap\n        val guessesWithIndexesWithScores\
    \ = guessesWithIndexes.map { case (score, index) => index -> gameScores(index)\
    \ }.toMap\n        val guessesWithIndexesWithScoresWithIndex = guessesWithIndexesWithScores.map\
    \ { case (score, index, gameScore) => index -> gameScore }.toMap\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndGameScore = guessesWithIndexesWithScoresWithIndex.map\
    \ { case (score, index, gameScore) => index -> gameScore }.toMap\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndex = guessesWithIndexesWithScoresWithIndexAndGameScore.map\
    \ { case (score, index, gameScore) => index -> gameScore }.toMap\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndexAndGameScore = guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndex.map\
    \ { case (score, index, gameScore) => index -> gameScore }.toMap\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndexAndGameScoreWithIndex\
    \ = guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndexAndGameScore.map\
    \ { case (score, index, gameScore) => index -> gameScore }.toMap\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndexAndGameScoreWithIndexAndGameScore\
    \ = guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndexAndGameScoreWithIndex.map\
    \ { case (score, index, gameScore) => index -> gameScore }.toMap\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndexAndGameScoreWithIndexAndGameScoreWithIndex\
    \ = guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndexAndGameScoreWithIndexAndGameScore.map\
    \ { case (score, index, gameScore) => index -> gameScore }.toMap\n        val\
    \ guesses", "        val gameScores = game.zipWithIndex.map(x => (x._1, x._2)).toMap\n\
    \        val guessScores = guess.zipWithIndex.map(x => (x._1, x._2)).toMap\n \
    \       val gameScore = gameScores.values.toList\n        val guessScore = guessScores.values.toList\n\
    \        val gameScoreDiff = gameScore diff guessScore\n        val gameScoreDiffList\
    \ = gameScoreDiff.toList\n        val gameScoreDiffList2 = gameScoreDiffList.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList3 = gameScoreDiffList2.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList4 = gameScoreDiffList3.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList5 = gameScoreDiffList4.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList6 = gameScoreDiffList5.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList7 = gameScoreDiffList6.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList8 = gameScoreDiffList7.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList9 = gameScoreDiffList8.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList10 = gameScoreDiffList9.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList11 = gameScoreDiffList10.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList12 = gameScoreDiffList11.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList13 = gameScoreDiffList12.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList14 = gameScoreDiffList13.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList15 = gameScoreDiffList14.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList16 = gameScoreDiffList15.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList17 = gameScoreDiffList16.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList18 = gameScoreDiffList17.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList19 = gameScoreDiffList18.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList20 = gameScoreDiffList19.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList21 = gameScoreDiffList20.",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val result = guessScores.map { case\
    \ (score, index) =>\n            val gameScore = gameScores(score)\n         \
    \   if (gameScore == -1) {\n                0\n            } else {\n        \
    \        val diff = abs(gameScore - guessScores(score))\n                if (gameScore\
    \ > guessScores(score)) {\n                    diff\n                } else {\n\
    \                    -diff\n                }\n            }\n        }\n    \
    \    result", "        val guesses = guess.map(x => Math.abs(x - game))\n    \
    \    val guessesSum = guesses.sum\n        val guessesDiff = guesses.map(x =>\
    \ x - guessesSum).sum\n        val guessesDiffAbs = guessesDiff.abs\n        val\
    \ guessesDiffAbsSum = guessesDiffAbs.sum\n        val guessesDiffAbsDiff = guessesDiffAbs.map(x\
    \ => x - guessesDiffAbsSum).sum\n        val guessesDiffAbsDiffAbs = guessesDiffAbsDiff\
    \ - guessesSum\n        val guessesDiffAbsDiffAbsSum = guessesDiffAbsDiffAbs.sum\n\
    \        val guessesDiffAbsDiffAbsDiff = guessesDiffAbsDiffAbs.map(x => x - guessesDiffAbsDiffAbsSum).sum\n\
    \        guessesDiffAbsDiffAbsDiffAbs", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessesWithScores = guessesScores.map\
    \ { case (score, index) => score -> gameScores(index) }\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }\n        val\
    \ guessesWithIndexesSorted = guessesWithIndexes.sortBy(_._1)\n        val guessesWithIndexesSortedWithScores\
    \ = guessesWithIndexesSorted.map { case (index, score) => score -> index }\n \
    \       val guessesWithIndexesSortedWithScoresSorted = guessesWithIndexesSortedWithScores.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexes = guessesWithIndexesSortedWithScoresSorted.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedWithScoresSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexes.sortBy(_._1)\n       \
    \ val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexes = guessesWithIndexesSortedWithScoresSortedWithIndexesSorted.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexes.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSorted.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexes.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.map\
    \ { case (score, index) => index -> score }\n        val guesses", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }\n      \
    \  val guessScores = guess.zipWithIndex.map { case (score, index) => score }\n\
    \        val gameScoreCount = gameScores.count\n        val guessScoreCount =\
    \ guessScores.count\n        val gameScoreSum = gameScores.sum\n        val guessScoreSum\
    \ = guessScores.sum\n        val gameScoreDiff = gameScoreSum - guessScoreSum\n\
    \        val guessScoreDiff = guessScoreSum - gameScoreSum\n        val gameScoreDiffAbs\
    \ = Math.abs(gameScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val gameScoreDiffAbsList = gameScoreDiffAbs.toList.sortBy(_ < 0).reverse\n\
    \        val guessScoreDiffAbsList = guessScoreDiffAbs.toList.sortBy(_ < 0).reverse\n\
    \        val gameScoreDiffAbsListLength = gameScoreDiffAbsList.length\n      \
    \  val guessScoreDiffAbsListLength = guessScoreDiffAbsList.length\n        val\
    \ gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n        val guessScoreDiffAbsListLength\
    \ = guessScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n\
    \        val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n     \
    \   val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n        val guessScoreDiffAbsListLength\
    \ = guessScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n\
    \        val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n     \
    \   val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n        val guessScoreDiffAbsListLength\
    \ = guessScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n\
    \        val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n     \
    \   val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n        val guessScoreDiffAbsListLength\
    \ = guessScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n\
    \        val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n     \
    \   val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n        val guessScoreDiffAbsListLength\
    \ = guessScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n\
    \        val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n     \
    \   ", "        val guesses = gues\n        val scores = game\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        val guessesPerGame\
    \ = guessesCount / scoresCount\n        val guessesPerGuess = guessesCount / guessesCount\n\
    \        val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerGuess\
    \ = guessesCount / guessesCount\n        val guessesPerGuess = guessesCount /\
    \ guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n  \
    \      val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerGuess\
    \ = guessesCount / guessesCount\n        val guessesPerGuess = guessesCount /\
    \ guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n  \
    \      val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerGuess\
    \ = guessesCount / guessesCount\n        val guessesPerGuess = guessesCount /\
    \ guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n  \
    \      val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerGuess\
    \ = guessesCount / guessesCount\n        val guessesPerGuess = guessesCount /\
    \ guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n  \
    \      val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerGuess\
    \ = guessesCount / guessesCount\n        val guessesPerGuess = guessesCount /\
    \ guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n  \
    \      val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerGuess\
    \ = guessesCount / guessesCount\n        val guessesPerGuess = guessesCount /\
    \ guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n  \
    \      val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerGuess\
    \ = guessesCount / guessesCount\n        val guessesPerGuess = guessesCount /\
    \ guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n  \
    \      val guessesPerG", "        val guesses = gues\n        val scores = game\n\
    \        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val guessesRemaining\
    \ = guessesCount - 1\n        val scoresRemaining = scoresCount - 1\n        val\
    \ guessesRemainingScore = scores.last\n        val scoresRemainingScore = scores.last\n\
    \        val guessesRemainingGuess = guesses.last\n        val scoresRemainingGuess\
    \ = scores.last\n        val guessesRemainingGuessScore = guesses.last\n     \
    \   val scoresRemainingGuessScore = scores.last\n        val guessesRemainingGuessGuess\
    \ = guesses.last\n        val scoresRemainingGuessGuess = scores.last\n      \
    \  val guessesRemainingGuessGuessScore = guesses.last\n        val scoresRemainingGuessGuessScore\
    \ = scores.last\n        val guessesRemainingGuessGuessGuess = guesses.last\n\
    \        val scoresRemainingGuessGuessGuess = scores.last\n        val guessesRemainingGuessGuessGuessScore\
    \ = guesses.last\n        val scoresRemainingGuessGuessGuessScore = scores.last\n\
    \        val guessesRemainingGuessGuessGuessGuess = guesses.last\n        val\
    \ scoresRemainingGuessGuessGuessGuess = scores.last\n        val guessesRemainingGuessGuessGuessGuessScore\
    \ = guesses.last\n        val scoresRemainingGuessGuessGuessGuessScore = scores.last\n\
    \        val guessesRemainingGuessGuessGuessGuessGuess = guesses.last\n      \
    \  val scoresRemainingGuessGuessGuessGuessGuess = scores.last\n        val guessesRemainingGuessGuessGuessGuessGuessScore\
    \ = guesses.last\n        val scoresRemainingGuessGuessGuessGuessGuessScore =\
    \ scores.last\n        val guessesRemainingGuessGuessGuessGuessGuessGuess = guesses.last\n\
    \        val scoresRemainingGuessGuessGuessGuessGuessGuess = scores.last\n   \
    \     val guessesRemainingGuessGuessGuessGuessGuessGuessScore = guesses.last\n\
    \        val scoresRemainingGuessGuessGuessGuessGuessGuessScore = scores.", " \
    \       val gameSet = game.toSet\n        val guessSet = guess.toSet\n       \
    \ val result = game.map{x => if (guessSet.contains(x)) 0 else abs(x - guessSet.head)}\n\
    \        result", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score -> index }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessesScoreSet = guessesScores.toSet\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSetSize = gameScoreSet.size\n        val guessesScoreSetSize\
    \ = guessesScoreSet.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessesScoreSetSize = guessesScoreSet.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreSetSize = gameScoreSet.size\n\
    \        val guessesScoreSetSize = guessesScoreSet.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreSetSize = gameScoreSet.size\n        val guessesScoreSetSize\
    \ = guessesScoreSet.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessesScoreSetSize = guessesScoreSet.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreSetSize = gameScoreSet.size\n\
    \        val guessesScoreSetSize = guessesScoreSet.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreSetSize = gameScoreSet.size\n        val guessesScoreSetSize\
    \ = guessesScoreSet.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessesScoreSetSize = guessesScoreSet.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreSetSize = gameScoreSet.size\n\
    \        val guessesScoreSetSize = guessesScoreSet.size\n        val gameScoreListSize\
    \ = gameScore", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexes = guess.zipWithIndex.map { case (score, index)\
    \ => index }.toMap\n        val guessesWithScoreAndIndex = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score -> index }.toMap\n        val guessesWithIndexesAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> index -> score }.toMap\n\
    \        val guessesWithScoreAndIndexAndScore = guess.zipWithIndex.map { case\
    \ (score, index) => index -> score -> index -> score }.toMap\n        val guessesWithIndexesAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> index -> index ->\
    \ score }.toMap\n        val guessesWithScoreAndIndexAndIndexAndScore = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score -> index -> index -> index -> score\
    \ }.toMap\n        val guessesWithIndexesAndIndexAndIndexAndScore = guess.zipWithIndex.map\
    \ { case (score, index) => index -> index -> index -> index -> index -> score\
    \ }.toMap\n        val guessesWithScoreAndIndexAndIndexAndIndexAndScore = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score -> index -> index -> index -> index\
    \ -> score }.toMap\n        val guessesWithIndexesAndIndexAndIndexAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> index -> index ->\
    \ index -> index -> index -> score }.toMap\n        val guessesWithScoreAndIndexAndIndexAndIndexAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ index -> index -> index -> index -> score }.toMap\n        val guessesWithIndexesAndIndexAndIndexAndIndexAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> index -> index ->\
    \ index -> index -> index -> index -> score }.toMap\n        val guessesWith",
  "        val gameScores = game.zipWithIndex.map(x => (x._2, x._1)).toMap\n     \
    \   val guessScores = guess.zipWithIndex.map(x => (x._2, x._1)).toMap\n      \
    \  val gameScore = gameScores.toSeq.sortBy(x => x._1).reverse.head._2\n      \
    \  val guessScore = guessScores.toSeq.sortBy(x => x._1).reverse.head._2\n    \
    \    val diffs = guessScores.toSeq.filter(x => gameScores.getOrElse(x._1, x._1)\
    \ != x._2).map(x => (x._2, x._1 - gameScore))\n        diffs.sortBy(x => x._1).reverse.head._2",
  "        val gameScores = game.zipWithIndex.map{ case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map{ case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessScoreList = new mutable.ListBuffer[Long]()\n        val gameScoreSet\
    \ = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n        gameScoreMap.foreach\
    \ { case (score, index) =>\n            val guessIndex = guessScoreMap.get(index)\n\
    \            if (guessIndex == None) gameScoreList.add(score)\n            else\
    \ guessScoreList.add(guessIndex.get)\n        }\n        guessScoreMap.foreach\
    \ { case (score, index) =>\n            val gameIndex = gameScoreMap.get(index)\n\
    \            if (gameIndex == None) guessScoreList.add(score)\n            else\
    \ gameScoreList.add(gameIndex.get)\n        }\n        gameScoreList.zip(guessScoreList).map\
    \ { case (gameScore, guessScore) => Math.abs(gameScore - guessScore) }", "   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => score -> index }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessesScoreMap = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreListSize = ", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score - guess(index) }\n  \
    \      val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score ", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesDiff = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => math.abs(guess - game) }\n        guessesDiff.zipWithIndex.map\
    \ { case (diff, index) => diff + guessesDiff(index) }", "        val gameScores\
    \ = game.zipWithIndex.map(x => x._1 - x._2)\n        val guessScores = guess.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.toList\n        val guessesScoreList = guessesScoreMap.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet =\
    \ guessesScoreList.toSet\n        val gameScoreList = gameScoreList.map { case\
    \ (score, index) => score -> index }\n        val guessesScoreList = guessesScoreList.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScoreSet.toList\n\
    \        val guessesScoreSet = guessesScoreSet.toList\n        val gameScoreList\
    \ = gameScoreList.map { case (score, index) => score -> index }\n        val guessesScoreList\
    \ = guessesScoreList.map { case (score, index) => score -> index }\n        val\
    \ gameScoreSet = gameScoreSet.toSet\n        val guessesScoreSet = guessesScoreSet.toSet\n\
    \        val gameScoreList = gameScoreList.map { case (score, index) => score\
    \ -> index }\n        val guessesScoreList = guessesScoreList.map { case (score,\
    \ index) => score -> index }\n        val gameScoreSet = gameScoreSet.toList\n\
    \        val guessesScoreSet = guessesScoreSet.toList\n        val gameScoreList\
    \ = gameScoreList.map { case (score, index) => score -> index }\n        val guessesScoreList\
    \ = guessesScoreList.map { case (score, index) => score -> index }\n        val\
    \ gameScoreSet = gameScoreSet.toSet\n        val guessesScoreSet = guessesScoreSet.toSet\n\
    \        val gameScoreList = gameScoreList.map { case (score, index) => score\
    \ -> index }\n        val guessesScoreList = guessesScoreList.map { case (score,\
    \ index) => score -> index }\n        val gameScoreSet = gameScoreSet.toList\n\
    \        val guessesScoreSet = guessesScoreSet.toList\n        val gameScoreList\
    \ = gameScoreList.map { case (score, index) => score -> index }\n        val guessesScoreList\
    \ = guessesScoreList.map { case (score, index) => score -> index }\n        val\
    \ gameScoreSet = gameScoreSet.to", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guessesScores.map { case (score, index) => gameScores(index)\
    \ -> score }.toMap\n        val guessesWithIndexes = guessesWithScores.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n        val guessesWithIndexesSortedWithScores\
    \ = guessesWithIndexesSorted.map { case (score, index) => gameScores(index) ->\
    \ score }.toMap\n        val guessesWithIndexesSortedWithIndexes = guessesWithIndexesSortedWithScores.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexes.toSeq.sortBy(_._1).reverse\n        val\
    \ guessesWithIndexesSortedWithIndexesSortedWithScores = guessesWithIndexesSortedWithIndexesSorted.map\
    \ { case (score, index) => gameScores(index) -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithIndexesSortedWithScores.map { case (score, index)\
    \ => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes.map\
    \ { case (score, index) => gameScores(index) -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores.map {\
    \ case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.toSeq.sortBy(_._1).reverse\n\
    \        ", "        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessScoreMap = guessScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessScoreList = new mutable.ListBuffer[Long]()\n        val gameScoreSet\
    \ = new mutable.HashSet[Long]()\n        val guessScoreSet = new mutable.HashSet[Long]()\n\
    \        val gameScoreList = gameScoreMap.values.toList\n        val guessScoreList\
    \ = guessScoreMap.values.toList\n        val gameScoreSet = gameScoreMap.values.toSet\n\
    \        val guessScoreSet = guessScoreMap.values.toSet\n        val gameScoreSet\
    \ = gameScoreSet.toSet\n        val guessScoreSet = guessScoreSet.toSet\n    \
    \    gameScoreList.foreach { score =>\n            if (gameScoreSet.contains(score))\
    \ {\n                gameScoreList += score\n                gameScoreSet.remove(score)\n\
    \            }\n        }\n        guessScoreList.foreach { score =>\n       \
    \     if (guessScoreSet.contains(score)) {\n                guessScoreList +=\
    \ score\n                guessScoreSet.remove(score)\n            }\n        }\n\
    \        gameScoreList.zipWithIndex.map { case (score, index) => Math.abs(score\
    \ - guessScoreList.getOrElse(index, 0l)) }", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score - game(index) }\n    \
    \    val guessesCorrect = guessesScores.zipWithIndex.map { case (score, index)\
    \ => if (score < 0) -score else score }\n        val guessesDiff = guessesScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score - guess(index) }\n\
    \        val guessesDiffCorrect = guessesDiff.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val guessesDiffDiff =\
    \ guessesDiff.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score - guess(index) }\n        val guessesDiffDiffCorrect = guessesDiffDiff.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val guessesDiffDiffDiff\
    \ = guessesDiffDiff.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score - guess(index) }\n        val guessesDiffDiffDiffCorrect = guessesDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val guessesDiffDiffDiffDiff\
    \ = guessesDiffDiffDiff.zipWithIndex.map { case (score, index) => if (score <\
    \ 0) -score else score - guess(index) }\n        val guessesDiffDiffDiffDiffCorrect\
    \ = guessesDiffDiffDiffDiff.zipWithIndex.map { case (score, index) => if (score\
    \ < 0) -score else score }\n        val guessesDiffDiffDiffDiffDiff = guessesDiffDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score - guess(index) }\n\
    \        val guessesDiffDiffDiffDiffCorrect = guessesDiffDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val guessesDiffDiffDiffDiffDiff\
    \ = guessesDiffDiffDiffDiff.zipWithIndex.map { case (score, index) => if (score\
    \ < 0) -score else score - guess(index) }\n        val guessesDiffDiffDiffDiffCorrect\
    \ = guessesDiffDiffDiffDiff.zipWithIndex.map { case ", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = gameScoreMap.toList\n        val guessesScoreList = guessesScoreMap.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet =\
    \ guessesScoreList.toSet\n        val gameScoreMap = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesScoreMap\
    \ = guessesScoreList.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet\
    \ = guessesScoreList.toSet\n        val gameScoreMap = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesScoreMap\
    \ = guessesScoreList.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet\
    \ = guessesScoreList.toSet\n        val gameScoreMap = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesScoreMap\
    \ = guessesScoreList.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet\
    \ = guessesScoreList.toSet\n        val gameScoreMap = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesScoreMap\
    \ = guessesScoreList.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet\
    \ = guessesScoreList.toSet\n        val gameScoreMap = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesScoreMap\
    \ = guessesScoreList.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet\
    \ = guessesScore", "        val gameScores = game.zipWithIndex.map{ case (score,\
    \ index) => score - guess(index) }\n        val gameScoreSum = gameScores.sum\n\
    \        val gameScoreDiff = gameScores.map(x => Math.abs(x)).sum\n        val\
    \ gameScoreDiffPercent = gameScoreDiff / gameScoreSum * 100\n        val gameScoreDiffPercentString\
    \ = gameScoreDiffPercent.toString\n        val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n\
    \        val gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n      \
    \  val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n        val gameScoreDiffPercentFloat\
    \ = gameScoreDiffPercent.toFloat\n        val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n\
    \        val gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n      \
    \  val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n        val gameScoreDiffPercentFloat\
    \ = gameScoreDiffPercent.toFloat\n        val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n\
    \        val gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n      \
    \  val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n        val gameScoreDiffPercentFloat\
    \ = gameScoreDiffPercent.toFloat\n        val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n\
    \        val gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n      \
    \  val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n        val gameScoreDiffPercentFloat\
    \ = gameScoreDiffPercent.toFloat\n        val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n\
    \        val gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n      \
    \  val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n        val gameScoreDiffPercentFloat\
    \ = gameScoreDiffPercent.toFloat\n        val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n\
    \        val gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n      \
    \  val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n        val gameScoreDiffPercentFloat\
    \ = gameScoreDiffPercent.toFloat\n        val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n\
    \        val gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n      \
    \  val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n        val gameScoreDiffPercentFloat\
    \ = gameScoreDiffPercent.toFloat\n        val gameScoreDiffPercentInt = ", " \
    \       val guesses = guess.toList\n        val scores = game.toList\n       \
    \ val guessesCount = guesses.size\n        val scoresCount = scores.size\n   \
    \     val guessesToScores = guesses.zip(scores)\n        val scoresToGuesses =\
    \ scores.zip(guesses)\n        val guessesToGuesses = guesses.zip(guesses)\n \
    \       val guessesToGuessesCount = guessesToGuesses.size\n        val scoresToGuessesCount\
    \ = scoresToGuesses.size\n        val guessesToGuessesToScores = guessesToGuesses.zip(scoresToGuesses)\n\
    \        val scoresToGuessesToGuesses = scoresToGuesses.zip(guessesToGuesses)\n\
    \        val guessesToGuessesToGuessesCount = guessesToGuessesToScores.size\n\
    \        val scoresToGuessesToGuessesCount = scoresToGuessesToGuesses.size\n \
    \       val guessesToGuessesToGuessesToScores = guessesToGuessesToGuesses.zip(scoresToGuessesToGuesses)\n\
    \        val scoresToGuessesToGuessesToGuesses = scoresToGuessesToGuesses.zip(guessesToGuessesToGuesses)\n\
    \        val guessesToGuessesToGuessesToGuessesCount = guessesToGuessesToGuessesToScores.size\n\
    \        val scoresToGuessesToGuessesToGuessesCount = scoresToGuessesToGuessesToGuesses.size\n\
    \        val guessesToGuessesToGuessesToGuessesToScores = guessesToGuessesToGuessesToGuesses.zip(scoresToGuessesToGuessesToGuesses)\n\
    \        val scoresToGuessesToGuessesToGuessesToGuessesCount = scoresToGuessesToGuessesToGuessesToGuesses.size\n\
    \        val guessesToGuessesToGuessesToGuessesToGuessesCount = guessesToGuessesToGuessesToGuessesToScores.size\n\
    \        val guessesToGuessesToGuessesToGuessesToGuessesCount = guessesToGuessesToGuessesToGuessesToG",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScore = gameScores.sum\n        val guessScore = guessScores.sum\n\
    \        val gameScoreDiff = gameScore - guessScore\n        val gameScoreDiffAbs\
    \ = Math.abs(gameScoreDiff)\n        val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArray.length\n    \
    \    val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAb", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesCorrect = guessesScores.zip(gameScores).map\
    \ { case (guess, score) => (guess, score) }\n        val guessesIncorrect = guessesScores.zip(gameScores).filter\
    \ { case (guess, score) => guess != score }\n        val guessesDiff = guessesCorrect\
    \ ++ guessesIncorrect\n        guessesDiff.map { case (guess, score) => Math.abs(guess\
    \ - score) }", "        val guesses = gues\n        val scores = game\n      \
    \  val guessesCount = guesses.size\n        val scoresCount = scores.size\n  \
    \      val results = new mutable.ListBuffer[Long]()\n        val guessesRemaining\
    \ = guessesCount - 1\n        val scoresRemaining = scoresCount - 1\n        val\
    \ guessesRemaining2 = guessesCount - 2\n        val scoresRemaining2 = scoresCount\
    \ - 2\n        val guessesRemaining3 = guessesCount - 3\n        val scoresRemaining3\
    \ = scoresCount - 3\n        val guessesRemaining4 = guessesCount - 4\n      \
    \  val scoresRemaining4 = scoresCount - 4\n        val guessesRemaining5 = guessesCount\
    \ - 5\n        val scoresRemaining5 = scoresCount - 5\n        val guessesRemaining6\
    \ = guessesCount - 6\n        val scoresRemaining6 = scoresCount - 6\n       \
    \ val guessesRemaining7 = guessesCount - 7\n        val scoresRemaining7 = scoresCount\
    \ - 7\n        val guessesRemaining8 = guessesCount - 8\n        val scoresRemaining8\
    \ = scoresCount - 8\n        val guessesRemaining9 = guessesCount - 9\n      \
    \  val scoresRemaining9 = scoresCount - 9\n        val guessesRemaining10 = guessesCount\
    \ - 10\n        val scoresRemaining10 = scoresCount - 10\n        val guessesRemaining11\
    \ = guessesCount - 11\n        val scoresRemaining11 = scoresCount - 11\n    \
    \    val guessesRemaining12 = guessesCount - 12\n        val scoresRemaining12\
    \ = scoresCount - 12\n        val guessesRemaining13 = guessesCount - 13\n   \
    \     val scoresRemaining13 = scoresCount - 13\n        val guessesRemaining14\
    \ = guessesCount - 14\n        val scoresRemaining14 = scoresCount - 14\n    \
    \    val guessesRemaining15 = guessesCount - 15\n        val scoresRemaining15\
    \ = scoresCount - 15\n        val guessesRemaining16 = guessesCount - 16\n   \
    \     val scoresRemaining16 = scoresCount - 16\n        val guessesRemaining17\
    \ = guessesCount - 17\n        val scoresRemaining17 = scoresCount - 17\n    \
    \    val guessesRemaining18 = guessesCount - 18\n        val scoresRemaining18\
    \ = scoresCount - 18\n        val guessesRemaining19 = guessesCount - 19\n   \
    \     val scoresRemaining19 = scoresCount - 19\n        val guessesRemain", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessScores = guess.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessesWithScores = guessesScores.map\
    \ { case (score, index) => score -> gameScores(index) }\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }\n        val\
    \ guessesWithIndexesSorted = guessesWithIndexes.sortBy(_._1)\n        val guessesWithIndexesSortedReversed\
    \ = guessesWithIndexesSorted.reverse\n        val guessesWithIndexesSortedReversedSorted\
    \ = guessesWithIndexesSortedReversed.sortBy(_._2)\n        val guessesWithIndexesSortedReversedSortedWithIndex\
    \ = guessesWithIndexesSortedReversedSorted.map { case (score, index) => index\
    \ -> score }\n        val guessesWithIndexesSortedReversedSortedWithIndexSorted\
    \ = guessesWithIndexesSortedReversedSortedWithIndex.sortBy(_._1)\n        val\
    \ guessesWithIndexesSortedReversedSortedWithIndexSortedReversed = guessesWithIndexesSortedReversedSortedWithIndexSortedReversed.reverse\n\
    \        val guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSorted.sortBy(_._2)\n\
    \        val guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndex\
    \ = guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndex.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndexSorted\
    \ = guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndexSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndexSortedReversed\
    \ = guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndexSortedReversed.reverse\n\
    \        val guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndexSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndexSortedReversedSorted.sortBy(_._2)\n\
    \        val guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWith",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guess.zip(gameScores).map\
    \ { case (guess, score) => (guess, score) }.toMap\n        val guessesWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index }.toMap\n \
    \       val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => (guess, index) -> score }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScores = guess.zipWithIndex.map\
    \ { case (guess, index) => (guess, index) -> score -> score -> score }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScoreAndScoreAndScores = guess.zipWithIndex.map\
    \ { case (guess, index) => (guess, index) -> score -> score -> score -> score\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score -> score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score -> score -> score -> score }.toMap\n      \
    \  val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScore", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ -> index }\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n  \
    \      val guessesScoreMap = guessesScores.toMap\n        val gameScoreList =\
    \ gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreListSize = gameScoreListSize +\
    \ 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ + 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ + 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ + 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ + 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ + 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ + 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ + 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n", "     \
    \   val gameScores = game.zipWithIndex.map(x => x._1 - x._2)\n        val guessScores\
    \ = guess.zipWithIndex.map(x => x._1 - x._2)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreDiff\
    \ = gameScoreList.zip(guessScoreList).map(x => x._1 - x._2).map(x => if (x ==\
    \ 0) 0 else x)\n        val gameScoreDiffList = gameScoreDiff.toList\n       \
    \ val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gameScoreDiffList = gameScoreDiffMap.values.toList\n        val gameScoreDiffMap\
    \ = gameScoreDiffList.zipWithIndex.map(x => (x._1, x._2)).toMap\n        val gameScoreDiffList\
    \ = gameScoreDiffMap.values.toList\n        val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gameScoreDiffList = gameScoreDiffMap.values.toList\n\
    \        val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x => (x._1,\
    \ x._2)).toMap\n        val gameScoreDiffList = gameScoreDiffMap.values.toList\n\
    \        val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x => (x._2,\
    \ x._1)).toMap\n        val gameScoreDiffList = gameScoreDiffMap.values.toList\n\
    \        val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x => (x._1,\
    \ x._2)).toMap\n        val gameScoreDiffList = gameScoreDiffMap.values.toList\n\
    \        val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x => (x._2,\
    \ x._1)).toMap\n        val gameScoreDiffList = gameScoreDiffMap.values.toList\n\
    \        val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x => (x._1,\
    \ x._2)).toMap\n        val gameScoreDiffList = gameScoreDiffMap.values.toList\n\
    \        val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x => (x._2,\
    \ x._1)).toMap\n        val gameScoreDiffList = gameScoreDiffMap.values.toList\n\
    \        val gameScoreDiffMap = gameScoreDiffList.", "        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreDiff = gameScoreCount - guessScoreCount\n        val guessScoreDiff\
    \ = guessScoreCount - gameScoreCount\n        val gameScoreDiffList = gameScoreDiff.map(x\
    \ => gameScoreDiff.indexOf(x) + 1)\n        val guessScoreDiffList = guessScoreDiff.map(x\
    \ => guessScoreDiff.indexOf(x) + 1)\n        val gameScoreDiffList2 = gameScoreDiffList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffList2 = guessScoreDiffList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffList3 = gameScoreDiffList2.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffList3 = guessScoreDiffList2.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffList4 = gameScoreDiffList3.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffList4 = guessScoreDiffList3.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffList5 = gameScoreDiffList4.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffList5 = guessScoreDiffList4.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffList6 = gameScoreDiffList5.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffList6 = guessScoreDiffList5.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffList7 = gameScoreDiffList6.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffList7 = guessScoreDiffList6.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffList8 = gameScoreDiffList7.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffList8 = guessScoreDiffList7.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffList9 = gameScoreDiffList8.zipWithIndex.map ",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val result = guessScores.map { case\
    \ (score, index) =>\n            val gameScore = gameScores(score)\n         \
    \   if (gameScore == None) 0\n            else gameScore - guessScores(score)\n\
    \        }\n        result", "        val guesses = guess.toList\n        val\
    \ scores = game.toList\n        val guessesCount = guesses.size\n        val scoresCount\
    \ = scores.size\n        val result = new mutable.ListBuffer[Long]()\n       \
    \ var i = 0\n        while (i < guessesCount) {\n            val guess = guesses(i)\n\
    \            val score = scores(i)\n            val difference = guess - score\n\
    \            if (difference < 0) {\n                result.add(difference)\n \
    \           } else {\n                result.add(Math.abs(difference))\n     \
    \       }\n            i += 1\n        }\n        result.toList", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }\n      \
    \  val guessesScores = guess.zipWithIndex.map { case (score, index) => score }\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val guessesScoreList = new mutable.ListBuffer[Long]()\n        val gameScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) =>\n            if (guessesScoreMap.contains(index)) {\n            \
    \    val guess = guessesScoreMap(index)\n                val gameScore = gameScoreMap(index)\n\
    \                val difference = guess - gameScore\n                guessesScoreList\
    \ += difference\n                gameScoreList += gameScore\n            }\n \
    \       }\n        guessesScoreList.map(_.abs)", "        val gameScores = game.zipWithIndex.map(x\
    \ => x._2 - x._1)\n        val guessScores = guess.zipWithIndex.map(x => x._2\
    \ - x._1)\n        val gameScore = gameScores.sum\n        val guessScore = guessScores.sum\n\
    \        val gameScoreDiff = gameScore - guessScore\n        val gameScoreDiffAbs\
    \ = Math.abs(gameScoreDiff)\n        val gameScoreDiffAbsMinusOne = gameScoreDiffAbs\
    \ - 1\n        val gameScoreDiffAbsMinusTwo = gameScoreDiffAbs - 2\n        val\
    \ gameScoreDiffAbsMinusThree = gameScoreDiffAbs - 3\n        val gameScoreDiffAbsMinusFour\
    \ = gameScoreDiffAbs - 4\n        val gameScoreDiffAbsMinusFive = gameScoreDiffAbs\
    \ - 5\n        val gameScoreDiffAbsMinusSix = gameScoreDiffAbs - 6\n        val\
    \ gameScoreDiffAbsMinusSeven = gameScoreDiffAbs - 7\n        val gameScoreDiffAbsMinusEight\
    \ = gameScoreDiffAbs - 8\n        val gameScoreDiffAbsMinusNine = gameScoreDiffAbs\
    \ - 9\n        val gameScoreDiffAbsMinusTen = gameScoreDiffAbs - 10\n        val\
    \ gameScoreDiffAbsMinusEleven = gameScoreDiffAbs - 11\n        val gameScoreDiffAbsMinusTwelve\
    \ = gameScoreDiffAbs - 12\n        val gameScoreDiffAbsMinusThirteen = gameScoreDiffAbs\
    \ - 13\n        val gameScoreDiffAbsMinusFourteen = gameScoreDiffAbs - 14\n  \
    \      val gameScoreDiffAbsMinusFifteen = gameScoreDiffAbs - 15\n        val gameScoreDiffAbsMinusSixteen\
    \ = gameScoreDiffAbs - 16\n        val gameScoreDiffAbsMinusSeventeen = gameScoreDiffAbs\
    \ - 17\n        val gameScoreDiffAbsMinusEighteen = gameScoreDiffAbs - 18\n  \
    \      val gameScoreDiffAbsMinusNineteen = gameScoreDiffAbs - 19\n        val\
    \ gameScoreDiffAbsMinusTwenty = gameScoreDiffAbs - 20\n        val gameScoreDiffAbsMinusThirty\
    \ = gameScoreDiffAbs - 30\n        val gameScoreDiffAbsMinusFourty = gameScoreDiffAbs\
    \ - 40\n        val gameScoreDiffAbsMin", "        val gameScores = game.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val guessScores = guess.zipWithIndex.map(x => x._1\
    \ + x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val gameScore = gameScores.sum\n\
    \        val gameScoreDiff = gameScore - gameScores.min\n        val gameScoreDiffAbs\
    \ = gameScoreDiff.abs\n        gameScoreDiffAbs.toList.map(_.toLong).reverse",
  "        val gameScores = game.zipWithIndex.map{ case (score, index) => score -\
    \ guess(index) }\n        val gameScore = gameScores.sum\n        val gameScores\
    \ = gameScores.zipWithIndex.map{ case (score, index) => if (score == 0) 0 else\
    \ abs(score - gameScore) }\n        gameScores.toList", "        val gameScores\
    \ = game.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessesScores\
    \ = guess.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessesWithScores\
    \ = guessesScores.filter(_._2 > 0).map(_._1)\n        val guessesWithoutScores\
    \ = guessesScores.filter(_._2 < 0).map(_._1)\n        val guessesWithScoreAndScores\
    \ = guessesWithScores.zip(guessesScores).filter(_._2 > 0).map(_._1)\n        val\
    \ guessesWithoutScoreAndScores = guessesWithScores.zip(guessesScores).filter(_._2\
    \ < 0).map(_._1)\n        val guessesWithScoreAndGuess = guessesWithScores.zip(guessesWithScores).filter(_._2\
    \ > 0).map(_._1)\n        val guessesWithoutScoreAndGuess = guessesWithScores.zip(guessesWithScores).filter(_._2\
    \ < 0).map(_._1)\n        val guessesWithScoreAndGuessAndScores = guessesWithScoreAndGuess.zip(guessesScores).filter(_._2\
    \ > 0).map(_._1)\n        val guessesWithoutScoreAndGuessAndScores = guessesWithScoreAndGuess.zip(guessesScores).filter(_._2\
    \ < 0).map(_._1)\n        val guessesWithScoreAndGuessAndGuess = guessesWithScoreAndGuess.zip(guessesWithScores).filter(_._2\
    \ > 0).map(_._1)\n        val guessesWithoutScoreAndGuessAndGuess = guessesWithScoreAndGuess.zip(guessesWithScores).filter(_._2\
    \ < 0).map(_._1)\n        val guessesWithScoreAndGuessAndGuessAndScores = guessesWithScoreAndGuessAndGuess.zip(guessesScores).filter(_._2\
    \ > 0).map(_._1)\n        val guessesWithoutScoreAndGuessAndGuessAndScores = guessesWithScoreAndGuessAndGuess.zip(guessesScores).filter(_._2\
    \ < 0).map(_._1)\n        val guessesWithScoreAndGuessAndGuessAndGuess = guessesWithScoreAndGuessAndGuess.zip(guessesWithScores).filter(_._2\
    \ > 0).map(_._1)\n        val guessesWithoutScoreAndGuessAndGuessAndGuess = guessesWithScoreAndGuessAnd",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (index, score) => (index, gameScores(index) - score) }\n        val guessesWithCorrect\
    \ = guessesWithScores.map { case (index, score) => (index, if (score == 0) 0 else\
    \ abs(score)) }\n        guessesWithCorrect.map { case (index, score) => (index,\
    \ score) }", "        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => score - guess(index) }\n        val gameScores = gameScores.toList\n    \
    \    val guessesWithScores = guess.zipWithIndex.map { case (score, index) => score\
    \ - gameScores(index) }\n        val guessesWithScores = guessesWithScores.toList\n\
    \        guessesWithScores.map { case (guess, score) => if (guess == 0) 0 else\
    \ Math.abs(guess) }", "        val guesses = guess.length\n        val scores\
    \ = game.length\n        val guessedCorrectly = mutable.Set[Long]()\n        val\
    \ guessedWrongly = mutable.Set[Long]()\n        val guessedCorrectlyCount = mutable.Set[Long]()\n\
    \        val guessedWronglyCount = mutable.Set[Long]()\n        val guessedCorrectlyPercentage\
    \ = mutable.Set[Long]()\n        val guessedWronglyPercentage = mutable.Set[Long]()\n\
    \        val guessedCorrectlyPercentageCount = mutable.Set[Long]()\n        val\
    \ guessedWronglyPercentageCount = mutable.Set[Long]()\n        val guessedCorrectlyPercentagePercentage\
    \ = mutable.Set[Long]()\n        val guessedWronglyPercentagePercentage = mutable.Set[Long]()\n\
    \        val guessedCorrectlyPercentagePercentageCount = mutable.Set[Long]()\n\
    \        val guessedWronglyPercentagePercentageCount = mutable.Set[Long]()\n \
    \       val guessedCorrectlyPercentagePercentagePercentage = mutable.Set[Long]()\n\
    \        val guessedWronglyPercentagePercentageCount = mutable.Set[Long]()\n \
    \       val guessedCorrectlyPercentagePercentagePercentage = mutable.Set[Long]()\n\
    \        val guessedWronglyPercentagePercentageCount = mutable.Set[Long]()\n \
    \       val guessedCorrectlyPercentagePercentagePercentage = mutable.Set[Long]()\n\
    \        val guessedWronglyPercentagePercentagePercentage = mutable.Set[Long]()\n\
    \        val guessedCorrectlyPercentagePercentagePercentagePercentage = mutable.Set[Long]()\n\
    \        val guessedWronglyPercentagePercentagePercentageCount = mutable.Set[Long]()\n\
    \        val guessedCorrectlyPercentagePercentagePercentagePercentage = mutable.Set[Long]()\n\
    \        val guessedWronglyPercentagePercentagePercentagePercentage = mutable.Set[Long]()\n\
    \        val guessedCorrectlyPercentagePercentagePercentagePercentage = mutable.Set[Long]()\n\
    \        val guessedWronglyPercentagePercentagePercentagePercentage = mutable.Set[Long]()\n\
    \        val guessedCorrectlyPercentagePercentagePercentagePercentage = mutable.Set[Long]()\n\
    \        val guessedWronglyPercentagePercentagePercentagePercentage = mutable.Set[Long]()\n\
    \        val guessedCorrectlyPercentagePercentagePercentagePercentage = mutable.Set[Long]()\n\
    \        val guessedWronglyPercentagePercentagePercentagePercentage = mutable.Set[Long",
  "        val gameScores = game.zipWithIndex.map{case (score, index) => score}\n\
    \        val guessScores = guess.zipWithIndex.map{case (score, index) => score}\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreList = gameScoreList.sortBy(_._1).reverse\n\
    \        val guessScoreList = guessScoreList.sortBy(_._1).reverse\n        val\
    \ gameScoreList = gameScoreList.zipWithIndex.map{case (score, index) => score}\n\
    \        val guessScoreList = guessScoreList.zipWithIndex.map{case (score, index)\
    \ => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case (score,\
    \ index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        ", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => (index, score) }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => (index, score) }\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessesScoreSet = guessesScores.toSet\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSetSize = gameScoreSet.size\n        val guessesScoreSetSize\
    \ = guessesScoreSet.size\n        val gameScoreSetIterator = gameScoreSet.iterator\n\
    \        val guessesScoreSetIterator = guessesScoreSet.iterator\n        val gameScoreSetIteratorSize\
    \ = gameScoreSetIterator.size\n        val guessesScoreSetIteratorSize = guessesScoreSetIterator.size\n\
    \        val gameScoreSetIteratorIterator = gameScoreSetIterator.iterator\n  \
    \      val guessesScoreSetIteratorIterator = guessesScoreSetIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorSize = gameScoreSetIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorSize = guessesScoreSetIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIterator = gameScoreSetIteratorIterator.iterator\n\
    \        val guessesScoreSetIteratorIteratorIterator = guessesScoreSetIteratorIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorIteratorSize = gameScoreSetIteratorIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorIteratorSize = guessesScoreSetIteratorIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIteratorIterator = gameScoreSetIteratorIteratorIterator.iterator\n\
    \        val guessesScoreSetIteratorIteratorIteratorIterator = guessesScoreSetIteratorIteratorIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorSize = gameScoreSetIteratorIteratorIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorIteratorIteratorSize = guessesScoreSetIteratorIteratorIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorIterator = gameScoreSetIteratorIteratorIterator.iterator\n\
    \        val guessesScoreSetIteratorIteratorIteratorIterator = guessesScoreSetIteratorIteratorIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorIteratorSize = gameScoreSetIteratorIteratorIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorIteratorIteratorIteratorSize = guessesScoreSetIteratorIteratorIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorIteratorIterator = gameScoreSetIteratorIteratorIterator.iterator\n\
    \        val guessesScoreSet", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreList = gameScoreList.map { case (score, index) => score -> index\
    \ }\n        val guessScoreList = guessScoreList.map { case (score, index) =>\
    \ score -> index }\n        val gameScoreSet = gameScoreSet.toList\n        val\
    \ guessScoreSet = guessScoreSet.toList\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> index }\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> index }\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> index }\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> index }\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> index }\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> index }\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> index }\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> index }\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> index }", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreCount = gameScores.count\n\
    \        val guessesScoreCount = guessesScores.count\n        val gameScoreDiff\
    \ = gameScoreCount - guessesScoreCount\n        val guessesScoreDiff = guessesScoreCount\
    \ - gameScoreCount\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScoreDiffs = guessesScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffsCount = gameScoreDiffs.count\n\
    \        val guessesScoreDiffsCount = guessesScoreDiffs.count\n        val gameScoreDiffsSum\
    \ = gameScoreDiffsCount.foldLeft(0l)(_ + _)\n        val guessesScoreDiffsSum\
    \ = guessesScoreDiffsCount.foldLeft(0l)(_ + _)\n        val gameScoreDiffsSumAbs\
    \ = gameScoreDiffsSum.abs\n        val guessesScoreDiffsSumAbs = guessesScoreDiffsSum.abs\n\
    \        val gameScoreDiffsSumAbsCount = gameScoreDiffsSumAbs.count\n        val\
    \ guessesScoreDiffsSumAbsCount = guessesScoreDiffsSumAbs.count\n        val gameScoreDiffsSumAbsSum\
    \ = gameScoreDiffsSumAbsCount.foldLeft(0l)(_ + _)\n        val guessesScoreDiffsSumAbsSum\
    \ = guessesScoreDiffsSumAbsCount.foldLeft(0l)(_ + _)\n        val gameScoreDiffsSumAbsSumAbs\
    \ = gameScoreDiffsSumAbsSum.abs\n        val guessesScoreDiffsSumAbsSumAbs = guessesScoreDiffsSumAbsSum.abs\n\
    \        val gameScoreDiffsSumAbsSumAbsCount = gameScoreDiffsSumAbsSumAbs.count\n\
    \        val guessesScoreDiffsSumAbsSumAbsCount = guessesScoreDiffsSumAbsSumAbs.count\n\
    \        val gameScoreDiffsSumAbsSumAbsSum = gameScoreDiffsSumAbsSumAbsCount.foldLeft(0l)(_\
    \ + _)\n        val guessesScore", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach { case (score, index) => gameScoreList.add(score)\
    \ }\n        guessScoreMap.foreach { case (score, index) => guessScoreList.add(score)\
    \ }\n        gameScoreList.zip(guessScoreList).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) {\n                0\n        \
    \    } else {\n                Math.abs(guessScore - gameScore)\n            }\n\
    \        }", "        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreCount = gameScores.count\n        val\
    \ guessScoreCount = guessScores.count\n        val gameScoreDiff = gameScoreCount\
    \ - guessScoreCount\n        val guessScoreDiff = guessScoreCount - gameScoreCount\n\
    \        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map {\
    \ case (score, index) => score }\n        val gameScoreDiffsCount = gameScoreDiffs.count\n\
    \        val guessScoreDiffsCount = guessScoreDiffs.count\n        val gameScoreDiffsSum\
    \ = gameScoreDiffsCount.zip(gameScoreDiffs).sum\n        val guessScoreDiffsSum\
    \ = guessScoreDiffsCount.zip(guessScoreDiffs).sum\n        val gameScoreDiffsSumAbs\
    \ = gameScoreDiffsSum.abs.toLong\n        val guessScoreDiffsSumAbs = guessScoreDiffsSum.abs.toLong\n\
    \        val gameScoreDiffsSumAbsDiff = gameScoreDiffsSumAbs - guessScoreDiffsSumAbs\n\
    \        val gameScoreDiffsSumAbsDiffs = gameScoreDiffsSumAbsDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffsSumAbsDiffsCount\
    \ = gameScoreDiffsSumAbsDiffs.count\n        val gameScoreDiffsSumAbsDiffsCountSum\
    \ = gameScoreDiffsSumAbsDiffsCount.zip(gameScoreDiffsSumAbsDiffs).sum\n      \
    \  val gameScoreDiffsSumAbsDiffsCountSumAbs = gameScoreDiffsSumAbsDiffsCountSum.abs.toLong\n\
    \        val gameScoreDiffsSumAbsDiffsCountSumAbsDiff = gameScoreDiffsSumAbsDiffsCountSumAbs\
    \ - guessScoreDiffsSumAbsDiffsCountSumAbs\n        val gameScoreDiffsSumAbsDiffsCountSumAbsDiffs\
    \ = gameScoreDiffsSumAbsDiffsCountSumAbsDiff.zipWithIndex.map { case (score, index)\
    \ => score }\n        val gameScoreDiffsSumAbsDiffsCountSumAbsDiffsCount = gameScoreDiffsSumAbs",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScores.toList\n        val\
    \ guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesScores = guess.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScores = guessesScores.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreAndGameScores = guessesWithScores\
    \ ++ gameScores\n        val guessesWithScoreAndGameScoreAndGameScores = guessesWithScoreAndGameScores.map(x\
    \ => (x._1, x._2, x._3))\n        val guessesWithScoreAndGameScoreAndGameScoreAndGameScores\
    \ = guessesWithScoreAndGameScoreAndGameScores.map(x => (x._1, x._2, x._3, x._4))\n\
    \        val guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores\
    \ = guessesWithScoreAndGameScoreAndGameScoreAndGameScores.map(x => (x._1, x._2,\
    \ x._3, x._4, x._5))\n        val guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores\
    \ = guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores.map(x =>\
    \ (x._1, x._2, x._3, x._4, x._5, x._6))\n        val guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores\
    \ = guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores.map(x\
    \ => (x._1, x._2, x._3, x._4, x._5, x._6, x._7))\n        val guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores\
    \ = guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores.map(x\
    \ => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8))\n        val guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores\
    \ = guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores.map(x\
    \ => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._", "        val gameLength\
    \ = game.length\n        val guessLength = guess.length\n        val result =\
    \ new mutable.ListBuffer[Long]()\n        val gameScores = game.zipWithIndex.filter(_._1\
    \ == 1).toList\n        val guessScores = guess.zipWithIndex.filter(_._1 == 1).toList\n\
    \        val gameScore = gameScores.head._2\n        val guessScore = guessScores.head._2\n\
    \        val gameScoreIndex = gameScores.head._1\n        val guessScoreIndex\
    \ = guessScores.head._1\n        val gameScoreDiff = gameScore - guessScore\n\
    \        val guessScoreDiff = guessScore - gameScore\n        val gameScoreDiffIndex\
    \ = gameScoreIndex - guessScoreIndex\n        val guessScoreDiffIndex = guessScoreIndex\
    \ - gameScoreIndex\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n \
    \       val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val gameScoreDiffIndexAbs\
    \ = Math.abs(gameScoreDiffIndex)\n        val guessScoreDiffIndexAbs = Math.abs(guessScoreDiffIndex)\n\
    \        val gameScoreDiffAbsIndex = Math.abs(gameScoreDiffAbs)\n        val guessScoreDiffAbsIndex\
    \ = Math.abs(guessScoreDiffAbs)\n        val gameScoreDiffAbsIndexAbs = Math.abs(gameScoreDiffAbsIndex)\n\
    \        val guessScoreDiffAbsIndexAbs = Math.abs(guessScoreDiffAbsIndex)\n  \
    \      val gameScoreDiffAbsIndexAbsIndex = Math.abs(gameScoreDiffAbsIndexAbs)\n\
    \        val guessScoreDiffAbsIndexAbsIndex = Math.abs(guessScoreDiffAbsIndexAbs)\n\
    \        val gameScoreDiffAbsIndexAbsIndexAbs = Math.abs(gameScoreDiffAbsIndexAbsIndex)\n\
    \        val guessScoreDiffAbsIndexAbsIndexAbs = Math.abs(guessScoreDiffAbsIndexAbsIndex)\n\
    \        val gameScoreDiffAbsIndexAbsIndexAbsIndex = Math.abs(gameScoreDiffAbsIndexAbsIndexAbs)\n\
    \        val guessScoreDiffAbsIndexAbsIndexAbsIndex = Math.abs(guessScoreDiffAbsIndexAbsIndexAbs)\n\
    \        val gameScoreDiffAbsIndexAbsIndexAbsIndexAbs = Math.abs(gameScoreDiffAbsIndexAbsIndexAbsIndex)\n\
    \        val guessScoreDiffAbsIndexAbsIndexAbsIndexAbs = Math.abs(guessScoreDiffAbsIndexAbsIndexAbsIndex)\n\
    \        val gameScoreDiffAbsIndexAbsIndexAbsIndexAbsIndexAbs = Math.abs(gameScoreDiff",
  "        val gameScores = game.zipWithIndex.map{ case (score, index) => (index,\
    \ score) }.toMap\n        val guessesScores = guess.zipWithIndex.map{ case (score,\
    \ index) => (index, score) }.toMap\n        val guessesWithScores = guessesScores.map{\
    \ case (index, score) => (index, gameScores(index) - score) }.toMap\n        val\
    \ guessesWithScores = guessesScores.map{ case (index, score) => (index, gameScores(index)\
    \ - score) }.toMap\n        val guessesWithScores = guessesScores.map{ case (index,\
    \ score) => (index, gameScores(index) - score) }.toMap\n        val guessesWithScores\
    \ = guessesScores.map{ case (index, score) => (index, gameScores(index) - score)\
    \ }.toMap\n        val guessesWithScores = guessesScores.map{ case (index, score)\
    \ => (index, gameScores(index) - score) }.toMap\n        val guessesWithScores\
    \ = guessesScores.map{ case (index, score) => (index, gameScores(index) - score)\
    \ }.toMap\n        val guessesWithScores = guessesScores.map{ case (index, score)\
    \ => (index, gameScores(index) - score) }.toMap\n        val guessesWithScores\
    \ = guessesScores.map{ case (index, score) => (index, gameScores(index) - score)\
    \ }.toMap\n        val guessesWithScores = guessesScores.map{ case (index, score)\
    \ => (index, gameScores(index) - score) }.toMap\n        val guessesWithScores\
    \ = guessesScores.map{ case (index, score) => (index, gameScores(index) - score)\
    \ }.toMap\n        val guessesWithScores = guessesScores.map{ case (index, score)\
    \ => (index, gameScores(index) - score) }.toMap\n        val guessesWithScores\
    \ = guessesScores.map{ case (index, score) => (index, gameScores(index) - score)\
    \ }.toMap\n        val guessesWithScores = guessesScores.map{ case (index, score)\
    \ => (index, gameScores(index) - score) }.toMap\n        val guessesWithScores\
    \ = guessesScores.map{ case (index, score) => (index, gameScores(index) - score)\
    \ }.toMap\n        val guessesWithScores = guessesScores.map", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n  \
    \      val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => index -> score }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.toSeq.sortBy(_._1)\n        val guessesWithIndexesSortedSortedByScore\
    \ = guessesWithIndexesSorted.toSeq.sortBy(_._2)\n        val guessesWithIndexesSortedSortedByScoreWithIndex\
    \ = guessesWithIndexesSortedSortedByScore.map { case (score, index) => index ->\
    \ score }.toMap\n        val guessesWithIndexesSortedSortedByScoreWithIndexSorted\
    \ = guessesWithIndexesSortedSortedByScoreWithIndex.toSeq.sortBy(_._1)\n      \
    \  val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScore = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex.toSeq.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex.toSeq.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndex",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithScore\
    \ = guessesWithScores.toSeq.sortBy(_._1).reverse\n        val guessesWithScoreWithIndex\
    \ = guessesWithScore.zipWithIndex.map { case (guess, score) => (guess, score)\
    \ }.toMap\n        val guessesWithScoreWithIndexSorted = guessesWithScoreWithIndex.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithScoreWithIndexSortedWithIndex = guessesWithScoreWithIndexSorted.zipWithIndex.map\
    \ { case (guess, score, index) => (guess, score, index) }.toMap\n        val guessesWithScoreWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreWithIndexSortedWithIndex.sortBy(_._1).reverse\n        val\
    \ guessesWithScoreWithIndexSortedWithIndexSortedWithIndex = guessesWithScoreWithIndexSortedWithIndexSorted.zipWithIndex.map\
    \ { case (guess, score, index, index2) => (guess, score, index, index2) }.toMap\n\
    \        val guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSorted = guessesWithScoreWithIndexSortedWithIndexSortedWithIndex.sortBy(_._1).reverse\n\
    \        val guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map\
    \ { case (guess, score, index, index2, index3) => (guess, score, index, index2,\
    \ index3) }.toMap\n        val guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._1).reverse\n\
    \        val guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map\
    \ { case (guess, score, index, index2, index3, index4) => (guess, score, index,\
    \ index2, index3, index4) }.toMap\n        val guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndex",
  "        val guesses = gues\n        val scores = game\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        val result =\
    \ new mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < guessesCount)\
    \ {\n            val guess = guesses(i)\n            val score = scores(i)\n \
    \           val diff = Math.abs(guess - score)\n            if (diff < 0)\n  \
    \              result.add(-diff)\n            else\n                result.add(diff)\n\
    \            i += 1\n        }\n        result.toList", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n\
    \        val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n    \
    \    val guessScoreList = guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreList\
    \ = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n \
    \       val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n    \
    \    val guessScoreList = guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreList\
    \ = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n \
    \       val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n    \
    \    val guessScoreList = guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreList\
    \ = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n \
    \       val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n    \
    \    val guessScoreList = guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreList\
    \ = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n \
    \       val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n    \
    \    val guessScoreList = guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreList\
    \ = gameScoreMap.to", "        val guesses = guess.toSet\n        val scores =\
    \ game.toSet\n        val result = new mutable.ListBuffer[Long]()\n        scores.foreach\
    \ { score =>\n            guesses.foreach { guess =>\n                if (guess\
    \ == score) {\n                    result += 0\n                } else {\n   \
    \                 val diff = abs(guess - score)\n                    result +=\
    \ diff\n                }\n            }\n        }\n        result.toList", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }\n        val guessScores = guess.zipWithIndex.map { case (score, index)\
    \ => (index, score) }\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessScoreSetSize = guessScoreSet.size\n  \
    \      val gameScoreListSize = gameScoreList.size\n        val guessScoreListSize\
    \ = guessScoreList.size\n        val gameScoreSetSize = gameScoreSetSize\n   \
    \     val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    ", "        val gameScores = game.zipWithIndex.map{ case (score, index) =>\
    \ score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map{\
    \ case (score, index) => score -> index }.toMap\n        val guessesCorrect =\
    \ guessesScores.filter(_._1 == gameScores.keys)\n        val guessesIncorrect\
    \ = guessesScores.filter(_._1 != gameScores.keys)\n        val guessesDiff = guessesCorrect\
    \ ++ guessesIncorrect\n        val guessesDiffMap = guessesDiff.map{ case (score,\
    \ index) => (score, gameScores(index)) }.toMap\n        val guessesDiffList =\
    \ guessesDiffMap.keys.toList.sortBy(_._1).reverse\n        val guessesDiffDiff\
    \ = guessesDiffList.map{ case (score, index) => (score, guessesDiffMap(index)\
    \ - gameScores(index)) }.toList\n        val guessesDiffDiffMap = guessesDiffDiff.map{\
    \ case (score, diff) => (score, diff) }.toMap\n        val guessesDiffDiffList\
    \ = guessesDiffDiffMap.keys.toList.sortBy(_._1).reverse\n        val guessesDiffDiffDiff\
    \ = guessesDiffDiffList.map{ case (score, diff) => (score, guessesDiffDiffMap(diff)\
    \ - gameScores(diff)) }.toList\n        val guessesDiffDiffDiffMap = guessesDiffDiffDiff.map{\
    \ case (score, diff) => (score, diff) }.toMap\n        val guessesDiffDiffDiffList\
    \ = guessesDiffDiffDiffMap.keys.toList.sortBy(_._1).reverse\n        val guessesDiffDiffDiffDiff\
    \ = guessesDiffDiffDiffList.map{ case (score, diff) => (score, guessesDiffDiffDiffMap(diff)\
    \ - gameScores(diff)) }.toList\n        val guessesDiffDiffDiffDiffMap = guessesDiffDiffDiffDiff.map{\
    \ case (score, diff) => (score, diff) }.toMap\n        val guessesDiffDiffDiffDiffList\
    \ = guessesDiffDiffDiffDiffMap.keys.toList.sortBy(_._1).reverse\n        val guessesDiffDiffDiffDiffDiff\
    \ = guessesDiffDiffDiffDiffList.map{ case (score, diff) => (score, guessesDiffDiffDiffDiffMap(diff)\
    \ - gameScores(diff)) }.toList\n        val guessesDiffDiffDiffDiffDiffMap = guessesDiffDiffDiffDiffDiff.map{\
    \ case (score, diff) => (score, diff) }.toMap\n        val guesses", "       \
    \ val gameScores = game.zipWithIndex.map { case (score, index) => (index, score)\
    \ }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score, index)\
    \ => (index, score) }.toMap\n        val gameScoreKeys = gameScores.keys.toList\n\
    \        val guessScoreKeys = guessScores.keys.toList\n        val gameScoreKeysSet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeysSet = guessScoreKeys.toSet\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessScoreKeysSetSize = guessScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessScoreKeysSetSize = guessScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessScoreKeysSetSize = guessScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessScoreKeysSetSize = guessScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val ", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score -> index }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach { case (score, index) =>\n            val guessScore\
    \ = guessScoreMap(score)\n            if (guessScore == -1) {\n              \
    \  gameScoreList += score\n                guessScoreList += score\n         \
    \   } else {\n                val diff = abs(guessScore - score)\n           \
    \     if (diff > 0) {\n                    gameScoreList += score\n          \
    \          guessScoreList += guessScore\n                } else {\n          \
    \          gameScoreList += diff\n                    guessScoreList += diff\n\
    \                }\n            }\n        }\n        gameScoreList.take(gameScoreList.size)",
  "        val gameScores = game.zipWithIndex.filter(_._1 == _).map(_._2)\n      \
    \  val guessScores = guess.zipWithIndex.filter(_._1 == _).map(_._2)\n        val\
    \ gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreListMap = gameScoreList.toMap\n        val guessScoreListMap\
    \ = guessScoreList.toMap\n        val gameScoreListSet = gameScoreList.toSet\n\
    \        val guessScoreListSet = guessScoreList.toSet\n        val gameScoreListMap\
    \ = gameScoreList.toMap\n        val guessScoreListMap = guessScoreList.toMap\n\
    \        val gameScoreListHashSet = gameScoreList.toHashSet\n        val guessScoreListHashSet\
    \ = guessScoreList.toHashSet\n        val gameScoreListHashMap = gameScoreList.toHashMap\n\
    \        val guessScoreListHashMap = guessScoreList.toHashMap\n        val gameScoreListHashSet\
    \ = gameScoreList.toHashSet\n        val guessScoreListHashSet = guessScoreList.toHashSet\n\
    \        val gameScoreListHashMap = gameScoreList.toHashMap\n        val guessScoreListHashMap\
    \ = guessScoreList.toHashMap\n        val gameScoreListHashSet = gameScoreList.toHashSet\n\
    \        val guessScoreListHashSet = guessScoreList.toHashSet\n        val gameScoreListHashMap\
    \ = gameScoreList.toHashMap\n        val guessScoreListHashMap = guessScoreList.toHashMap\n\
    \        val gameScoreListHashSet = gameScoreList.toHashSet\n        val guessScoreListHashSet\
    \ = guessScoreList.toHashSet\n        val gameScoreListHashMap = gameScoreList.toHashMap\n\
    \        val guessScoreListHashMap = guessScoreList.toHashMap\n        val gameScoreListHashSet\
    \ = gameScoreList.toHashSet\n        val guessScoreListHashSet = guessScoreList.toHashSet\n\
    \        val gameScoreListHashMap = gameScoreList.toHashMap\n        val guessScoreListHashMap\
    \ = guessScoreList.toHashMap\n        val gameScoreListHashSet = gameScoreList.toHashSet\n\
    \        val guessScoreListHashSet = guessScoreList.toHashSet\n        val gameScoreListHashMap\
    \ = gameScoreList.toHashMap\n        val guessScoreListHashMap = guessScoreList.toHashMap\n\
    \        val game", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score - guess(index) }\n        val gameScore = gameScores.sum\n \
    \       val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score < 0) -score else score }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score < 0) -score else score }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score < 0) -score else score }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score < 0) -score else score }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score < 0) -score else score }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score < 0) -score else score }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score < 0) -score else score }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score < 0) -score else score }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score < 0) -score else score }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score < 0) -score else score }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score < 0) -score else score }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score < 0) -score else score }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score ", "        val gameScores = game.zipWithIndex.map{ case (score, index)\
    \ => score }\n        val guessesScores = guess.zipWithIndex.map{ case (score,\
    \ index) => score }\n        val guessesDiff = guessesScores.zip(gameScores).map{\
    \ case (guess, game) => math.abs(guess - game) }\n        guessesDiff.zipWithIndex.map{\
    \ case (diff, index) => diff + guessesDiff(index) }", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score - guess(index) }\n  \
    \      val gameScore = gameScores.sum\n        val guesses = guess.zipWithIndex.map\
    \ { case (guess, index) => guess - game(index) }\n        val guessesScore = guesses.sum\n\
    \        guessesScore match {\n            case 0 => gameScore\n            case\
    \ _ => gameScore - guessesScore\n        }", "        val guesses = gues\n   \
    \     val scores = game\n        val guessesWithScores = guesses.zip(scores)\n\
    \        val guessesWithScoresSortedByScore = guessesWithScores.sortBy(_._2)\n\
    \        val guessesWithScoresSortedByScoreWithCorrect = guessesWithScoresSortedByScore\n\
    \            .filter(x => x._2 == 0)\n        val guessesWithScoresSortedByScoreWithIncorrect\
    \ = guessesWithScoresSortedByScore\n            .filter(x => x._2 > 0)\n     \
    \   val guessesWithScoresSortedByScoreWithCorrectAndIncorrect = guessesWithScoresSortedByScoreWithCorrect\n\
    \            .union(guessesWithScoresSortedByScoreWithIncorrect)\n        val\
    \ guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithZero = guessesWithScoresSortedByScoreWithCorrectAndIncorrect\n\
    \            .filter(x => x._2 == 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegative\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrect\n            .filter(x\
    \ => x._2 < 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndZero\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegative\n      \
    \      .filter(x => x._2 == 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegative\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegative\n      \
    \      .filter(x => x._2 < 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegativeAndZero\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegative\n\
    \            .filter(x => x._2 == 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegativeAndNegative\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegativeAndZero\n\
    \            .filter(x => x._2 < 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegativeAndNegativeAndZero\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegativeAndNegative\n\
    \            .filter(x => x._2 == 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegativeAndNegativeAndNegative\
    \ = guessesWithScoresSortedByScoreWithCorrect", "        val gameScores = game.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n        val guessScores = guess.zipWithIndex.filter(_._1 ==\
    \ _).map(_._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet", "        val gameSet = game.toSet\n        val guessSet\
    \ = guess.toSet\n        val gameSetSize = gameSet.size\n        val guessSetSize\
    \ = guessSet.size\n        val gameSetIterator = gameSet.iterator\n        val\
    \ guessSetIterator = guessSet.iterator\n        val gameSetIteratorSize = gameSetIterator.size\n\
    \        val guessSetIteratorSize = guessSetIterator.size\n        val gameSetIteratorIterator\
    \ = gameSetIterator.iterator\n        val guessSetIteratorIterator = guessSetIterator.iterator\n\
    \        val gameSetIteratorIteratorSize = gameSetIteratorIterator.size\n    \
    \    val guessSetIteratorIteratorSize = guessSetIteratorIterator.size\n      \
    \  val gameSetIteratorIteratorIterator = gameSetIteratorIterator.iterator\n  \
    \      val guessSetIteratorIteratorIterator = guessSetIteratorIterator.iterator\n\
    \        val gameSetIteratorIteratorIteratorSize = gameSetIteratorIteratorIterator.size\n\
    \        val guessSetIteratorIteratorIteratorSize = guessSetIteratorIteratorIterator.size\n\
    \        val gameSetIteratorIteratorIteratorIterator = gameSetIteratorIteratorIterator.iterator\n\
    \        val guessSetIteratorIteratorIteratorIterator = guessSetIteratorIteratorIterator.iterator\n\
    \        val gameSetIteratorIteratorIteratorIteratorSize = gameSetIteratorIteratorIteratorIterator.size\n\
    \        val guessSetIteratorIteratorIteratorIteratorSize = guessSetIteratorIteratorIteratorIterator.size\n\
    \        val gameSetIteratorIteratorIteratorIteratorIterator = gameSetIteratorIteratorIteratorIterator.iterator\n\
    \        val guessSetIteratorIteratorIteratorIteratorIterator = guessSetIteratorIteratorIteratorIterator.iterator\n\
    \        val gameSetIteratorIteratorIteratorIteratorIteratorSize = gameSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val guessSetIteratorIteratorIteratorIteratorSize = guessSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gameSetIteratorIteratorIteratorIteratorIteratorIterator = gameSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val guessSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = guessSetIteratorIteratorIteratorIteratorIterator.iterator\n        val gameSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gameSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ guessSetIteratorIteratorIteratorIteratorIteratorIteratorSize = guessSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gameSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ gameSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ guessSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = guessSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val gameSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gameSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val guessSetIteratorIteratorIteratorIteratorIterator", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n  \
    \      val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zipWithIndex.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexes = guess.zipWithIndex.map { case (score,\
    \ index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes\
    \ = guess.zipWithIndex.map { case (score, index) => index }.toMap\n        val\
    \ guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndex", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score - guess(index) }\n  \
    \      val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexes = guess.zipWithIndex.map { case (score, index)\
    \ => index }.toMap\n        val guessesWithScoreAndIndex = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndex = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score -> index -> score -> index }.toMap\n\
    \        val guessesWithScoreAndIndexAndScoreAndIndexAndScore = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score -> index -> score -> index -> score\
    \ }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ score -> index -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ score -> index -> score -> index -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ score -> index -> score -> index -> score -> index -> score }.toMap\n      \
    \  val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ score -> index -> score -> index -> score -> index -> score -> index }.toMap\n\
    \        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ score -> index -> score -> ", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreList =\
    \ gameScores.toList\n        val guessScoreList = guessScores.toList\n       \
    \ val gameScoreListSize = gameScoreList.size\n        val guessScoreListSize =\
    \ guessScoreList.size\n        val gameScoreListSize = gameScoreListSize - guessScoreListSize\n\
    \        val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n \
    \       val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n  \
    \      val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n   \
    \     val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n    \
    \    val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n     \
    \   val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n      \
    \  val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n       \
    \ val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n        val gameScoreListSize\
    \ = gameScoreListSize - gameScoreListSize + 1\n        val gameScoreListSize =\
    \ gameScoreListSize - gameScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ - gameScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize -\
    \ gameScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize - gameScoreListSize\
    \ + 1\n        val gameScoreListSize = gameScoreListSize - gameScoreListSize +\
    \ 1\n        val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n\
    \        val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n \
    \       val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n  \
    \      val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n   \
    \     val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n    \
    \    val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n     \
    \   val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n      \
    \  val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n       \
    \ val gameScoreListSize = gameScoreListSize - game", "        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val guessesCorrect = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score == 0) 0 else abs(score) }\n        guessesCorrect.zipWithIndex.map\
    \ { case (score, index) => guess(index) - score }", "        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        val guessesRemainingInScore = guessesRemaining /\
    \ scoresCount\n        val scoresRemainingInScore = scoresRemaining / guessesCount\n\
    \        val guessesRemainingInScoreAbs = guessesRemainingInScore.abs\n      \
    \  val scoresRemainingInScoreAbs = scoresRemainingInScore.abs\n        var guessesRemainingInScoreAbsIndex\
    \ = 0\n        var scoresRemainingInScoreAbsIndex = 0\n        var guessesRemainingInScoreAbsIndex2\
    \ = 0\n        var scoresRemainingInScoreAbsIndex2 = 0\n        var guessesRemainingInScoreAbsIndex3\
    \ = 0\n        var scoresRemainingInScoreAbsIndex3 = 0\n        var guessesRemainingInScoreAbsIndex4\
    \ = 0\n        var scoresRemainingInScoreAbsIndex4 = 0\n        var guessesRemainingInScoreAbsIndex5\
    \ = 0\n        var scoresRemainingInScoreAbsIndex5 = 0\n        var guessesRemainingInScoreAbsIndex6\
    \ = 0\n        var scoresRemainingInScoreAbsIndex6 = 0\n        var guessesRemainingInScoreAbsIndex7\
    \ = 0\n        var scoresRemainingInScoreAbsIndex7 = 0\n        var guessesRemainingInScoreAbsIndex8\
    \ = 0\n        var scoresRemainingInScoreAbsIndex8 = 0\n        var guessesRemainingInScoreAbsIndex9\
    \ = 0\n        var scoresRemainingInScoreAbsIndex9 = 0\n        var guessesRemainingInScoreAbsIndex10\
    \ = 0\n        var scoresRemainingInScoreAbsIndex10 = 0\n        var guessesRemainingInScoreAbsIndex11\
    \ = 0\n        var scoresRemainingInScoreAbsIndex11 = 0\n        var guessesRemainingInScoreAbsIndex12\
    \ = 0\n        var scoresRemainingInScoreAbsIndex12 = 0\n        var guessesRemainingInScoreAbsIndex13\
    \ = 0\n        var scoresRemainingInScoreAbsIndex13 = 0\n        var guessesRemainingInScoreAbsIndex14\
    \ = 0\n        var scoresRemainingInScoreAbsIndex14 = 0\n        var guessesRemainingInScoreAbsIndex15\
    \ = 0\n        var scoresRemainingInScoreAbsIndex15 = 0\n        var guessesRemainingInScoreAbs",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => (score,\
    \ index) }\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (score, index) }\n        val gameScoreMap = gameScores.toMap\n  \
    \      val guessesScoreMap = guessesScores.toMap\n        val gameScoreList =\
    \ gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet =\
    \ guessesScoreList.toSet\n        val gameScoreList = gameScoreList.filter(gameScoreSet.contains)\n\
    \        val guessesScoreList = guessesScoreList.filter(guessesScoreSet.contains)\n\
    \        val gameScoreList = gameScoreList.map(gameScoreMap(_))\n        val guessesScoreList\
    \ = guessesScoreList.map(guessesScoreMap(_))\n        val gameScoreList = gameScoreList.sortBy(_._1)\n\
    \        val guessesScoreList = guessesScoreList.sortBy(_._1)\n        val gameScoreList\
    \ = gameScoreList.map(x => x._2 - x._1)\n        val guessesScoreList = guessesScoreList.map(x\
    \ => x._2 - x._1)\n        val gameScoreList = gameScoreList.map(x => x._1)\n\
    \        val guessesScoreList = guessesScoreList.map(x => x._1)\n        val gameScoreList\
    \ = gameScoreList.map(x => x._1)\n        val guessesScoreList = guessesScoreList.map(x\
    \ => x._1)\n        val gameScoreList = gameScoreList.map(x => x._1)\n       \
    \ val guessesScoreList = guessesScoreList.map(x => x._1)\n        val gameScoreList\
    \ = gameScoreList.map(x => x._1)\n        val guessesScoreList = guessesScoreList.map(x\
    \ => x._1)\n        val gameScoreList = gameScoreList.map(x => x._1)\n       \
    \ val guessesScoreList = guessesScoreList.map(x => x._1)\n        val gameScoreList\
    \ = gameScoreList.map(x => x._1)\n        val guessesScoreList = guessesScoreList.map(x\
    \ => x._1)\n        val gameScoreList = gameScoreList.map(x => x._1)\n       \
    \ val guessesScoreList = guessesScoreList.map(x => x._1)\n        val gameScoreList\
    \ = gameScoreList.map(x => x._1)\n        val guessesScoreList = guessesScoreList.map(x\
    \ => ", "        val gameScores = game.zipWithIndex.filter(_._1 == _).map(_._2)\n\
    \        val guessScores = guess.zipWithIndex.filter(_._1 == _).map(_._2)\n  \
    \      val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSetList = gameScores.toList\n        val guessScoreSetList\
    \ = guessScores.toList\n        val gameScoreSetSet = gameScoreSet.toSet\n   \
    \     val guessScoreSetSet = guessScoreSet.toSet\n        val gameScoreSetSetList\
    \ = gameScoreSet.toList\n        val guessScoreSetSetList = guessScoreSet.toList\n\
    \        val gameScoreSetSetSet = gameScoreSetSet.toSet\n        val guessScoreSetSetSet\
    \ = guessScoreSetSet.toSet\n        val gameScoreSetSetSetList = gameScoreSetSet.toList\n\
    \        val guessScoreSetSetSetList = guessScoreSetSet.toList\n        val gameScoreSetSetSetSet\
    \ = gameScoreSetSetSet.toSet\n        val guessScoreSetSetSetSet = guessScoreSetSetSet.toSet\n\
    \        val gameScoreSetSetSetSetList = gameScoreSetSetSet.toList\n        val\
    \ guessScoreSetSetSetSetList = guessScoreSetSetSet.toList\n        val gameScoreSetSetSetSetSet\
    \ = gameScoreSetSetSetSet.toSet\n        val guessScoreSetSetSetSetSet = guessScoreSetSetSetSet.toSet\n\
    \        val gameScoreSetSetSetSetSetList = gameScoreSetSetSetSet.toList\n   \
    \     val guessScoreSetSetSetSetSetList = guessScoreSetSetSetSet.toList\n    \
    \    val gameScoreSetSetSetSetSetSet = gameScoreSetSetSetSetSet.toSet\n      \
    \  val guessScoreSetSetSetSetSetSet = guessScoreSetSetSetSetSet.toSet\n      \
    \  val gameScoreSetSetSetSetSetSetList = gameScoreSetSetSetSetSet.toList\n   \
    \     val guessScoreSetSetSetSetSetSetList = guessScoreSetSetSetSetSet.toList\n\
    \        val gameScoreSetSetSetSetSetSetSet = gameScoreSetSetSetSetSetSet.toSet\n\
    \        val guessScoreSetSetSetSetSetSetSet = guessScoreSetSetSetSetSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSetSetList = gameScore", "        val gameScores\
    \ = game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val gameScoreDiff\
    \ = gameScore - guessScore\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n\
    \        val gameScoreDiffAbsSorted = gameScoreDiffAbs.sortBy(_ < 0)\n       \
    \ val gameScoreDiffAbsSortedIndex = gameScoreDiffAbsSorted.indexWhere(_ < 0)\n\
    \        val gameScoreDiffAbsSortedValue = gameScoreDiffAbsSorted.take(gameScoreDiffAbsSortedIndex).sum\n\
    \        val gameScoreDiffAbsSortedIndex2 = gameScoreDiffAbsSorted.lastIndexWhere(_\
    \ < 0)\n        val gameScoreDiffAbsSortedValue2 = gameScoreDiffAbsSorted.take(gameScoreDiffAbsSortedIndex2).sum\n\
    \        val gameScoreDiffAbsSortedIndex3 = gameScoreDiffAbsSorted.lastIndexWhere(_\
    \ < 0)\n        val gameScoreDiffAbsSortedValue3 = gameScoreDiffAbsSorted.take(gameScoreDiffAbsSortedIndex3).sum\n\
    \        val gameScoreDiffAbsSortedIndex4 = gameScoreDiffAbsSorted.lastIndexWhere(_\
    \ < 0)\n        val gameScoreDiffAbsSortedValue4 = gameScoreDiffAbsSorted.take(gameScoreDiffAbsSortedIndex4).sum\n\
    \        val gameScoreDiffAbsSortedIndex5 = gameScoreDiffAbsSorted.lastIndexWhere(_\
    \ < 0)\n        val gameScoreDiffAbsSortedValue5 = gameScoreDiffAbsSorted.take(gameScoreDiffAbsSortedIndex5).sum\n\
    \        val gameScoreDiffAbsSortedIndex6 = gameScoreDiffAbsSorted.lastIndexWhere(_\
    \ < 0)\n        val gameScoreDiffAbsSortedValue6 = gameScoreDiffAbsSorted.take(gameScoreDiffAbsSortedIndex6).sum\n\
    \        val gameScoreDiffAbsSortedIndex7 = gameScoreDiffAbsSorted.lastIndexWhere(_\
    \ < 0)\n        val gameScoreDiffAbsSortedValue7 = gameScoreDiffAbsSorted.take(gameScoreDiffAbsSortedIndex7).sum\n\
    \        val gameScoreDiffAbsSortedIndex8 = gameScoreDiffAbsSorted.lastIndexWhere(_\
    \ < 0)\n        val gameScoreDiffAbsSortedValue8 = gameScoreDiff", "        val\
    \ gameScores = game.zipWithIndex.filter(_._1 == _).map(_._2)\n        val guessScores\
    \ = guess.zipWithIndex.filter(_._1 == _).map(_._2)\n        val gameScoreMap =\
    \ gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n\
    \        val gameScoreSet = gameScoreList.map(x => gameScoreMap.get(x))\n    \
    \    val guessScoreSet = guessScoreList.map(x => guessScoreMap.get(x))\n     \
    \   val gameScoreSetSet = gameScoreSet.map(x => gameScoreSet.toSet)\n        val\
    \ guessScoreSetSet = guessScoreSet.map(x => guessScoreSet.toSet)\n        val\
    \ gameScoreSetSetSet = gameScoreSetSet.map(x => gameScoreSetSet.toSet)\n     \
    \   val guessScoreSetSetSet = guessScoreSetSet.map(x => guessScoreSetSet.toSet)\n\
    \        val gameScoreSetSetSetSet = gameScoreSetSetSet.map(x => gameScoreSetSetSet.toSet)\n\
    \        val guessScoreSetSetSetSet = guessScoreSetSetSet.map(x => guessScoreSetSetSet.toSet)\n\
    \        val gameScoreSetSetSetSetSet = gameScoreSetSetSetSet.map(x => gameScoreSetSetSet.toSet)\n\
    \        val guessScoreSetSetSetSetSet = guessScoreSetSetSetSet.map(x => guessScoreSetSetSet.toSet)\n\
    \        val gameScoreSetSetSetSetSetSet = gameScoreSetSetSetSetSet.map(x => gameScoreSetSetSetSet.toSet)\n\
    \        val guessScoreSetSetSetSetSetSet = guessScoreSetSetSetSetSet.map(x =>\
    \ guessScoreSetSetSetSet.toSet)\n        val gameScoreSetSetSetSetSetSetSet =\
    \ gameScoreSetSetSetSetSetSet.map(x => gameScoreSetSetSetSetSet.toSet)\n     \
    \   val guessScoreSetSetSetSetSetSetSet = guessScoreSetSetSetSetSetSet.map(x =>\
    \ guessScoreSetSetSetSetSet.toSet)\n        val gameScoreSetSetSetSetSetSetSetSet\
    \ = gameScoreSetSetSetSetSetSetSet.map(x => gameScoreSetSetSetSetSetSet.toSet)\n\
    \        val guessScoreSetSetSetSetSetSetSetSet = guessScoreSetSetSetSetSetSetSet.map(x\
    \ => guessScoreSet", "        val guesses = gues\n        val scores = game\n\
    \        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val diffs = mutable.ArrayBuffer.empty[Long]\n        var i = 0\n    \
    \    while (i < guessesCount) {\n            val guess = guesses(i)\n        \
    \    val score = scores(i)\n            val diff = Math.abs(guess - score)\n \
    \           diffs += diff\n            i += 1\n        }\n        diffs.toList",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }\n        val guessScores = guess.zipWithIndex.map { case (score, index)\
    \ => score -> index }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessScoreMap = guessScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessScoreList = new mutable.ListBuffer[Long]()\n        val gameScoreSet\
    \ = new mutable.HashSet[Long]()\n        val guessScoreSet = new mutable.HashSet[Long]()\n\
    \        gameScoreMap.foreach { case (score, index) =>\n            if (guessScoreMap.contains(index))\
    \ {\n                gameScoreList.add(score)\n                gameScoreSet.add(score)\n\
    \            }\n        }\n        guessScoreMap.foreach { case (score, index)\
    \ =>\n            if (gameScoreMap.contains(index)) {\n                guessScoreList.add(score)\n\
    \                guessScoreSet.add(score)\n            }\n        }\n        gameScoreList.zip(guessScoreList).map\
    \ { case (gameScore, guessScore) =>\n            if (gameScoreSet.contains(guessScore))\
    \ {\n                0\n            } else {\n                Math.abs(guessScore\
    \ - gameScore)\n            }\n        }"]
stop_tokens:
- "\n    }\n"
